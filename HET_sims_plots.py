# -*- coding: utf-8 -*-
"""
Created on Thu Mar  8 15:02:15 2018

@author: adrian

###############################################################################
Description:    This Python function carries out the post processing of the 
                CORE resutls for the HET sims
###############################################################################
Inputs:         No inputs
###############################################################################
Outputs:        Plots and outputs for the simulations
"""

# Clear all variables
#from IPython import get_ipython
#get_ipython().magic('reset -sf')

import os
import sys
import h5py
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
from matplotlib import cm
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.ticker import LinearLocator, FormatStrFormatter
from scipy import interpolate
from contour_2D import contour_2D
from streamlines_function import streamplot, streamline_2D
from HET_sims_read import HET_sims_read
from HET_sims_mean import HET_sims_mean
from HET_sims_plotvars import HET_sims_plotvars
from HET_sims_plotvars import HET_sims_cp_vars
from HET_sims_post import max_min_mean_vals, comp_phase_shift, comp_FFT, comp_Boltz, domain_average
from FFT import FFT
from HET_sims_interp_MFAM_picM_plot import HET_sims_interp_MFAM_picM_plot
from HET_sims_interp_scan import HET_sims_interp_scan
from HET_sims_interp_zprof import HET_sims_interp_zprof
from HET_sims_interp_point import HET_sims_interp_point
from compute_Bline_prof import compute_Bline_prof
from find_firstmax import find_firstmax
from scipy.signal import correlate
import pylab
import scipy.io as sio
import pickle

# ---- Deactivate/activate all types of python warnings ----
import warnings
warnings.filterwarnings("ignore") # Deactivate all types of warnings
#    warnings.simplefilter('always')   # Activate all types of warnings
# -------------------------------------------------

# Close all existing figures
plt.close("all")



################################ INPUTS #######################################
# Print out time step
timestep = 'last'
#timestep = 13
#timestep = 400
if timestep == 'last':
    timestep = -1

# Printing results flag and last number of steps for averaging for printing results
print_flag = 0
last_steps = 5

save_flag = 0

    
# Plots save flag
#figs_format = ".eps"
figs_format = ".png"
#figs_format = ".pdf"

# Plots to produce
mesh_plots          = 0
ref_case_plots      = 1
time_plots          = 0
prof_plots          = 0
cont_plots          = 0
mbal_plots          = 0
comp_time_plots     = 0
heat_flux_plots     = 0
bound_plots         = 0
boundary_plots_OLD  = 0


generate_thesis_figures = 0


#path_out = "../../HET_figs/zprof_figs/al0025_avge600steps/"
#path_out = "../../HET_figs/Id_figs/"
# THESIS ----------------------------------------------------------------------
#path_out = "../../../HET_figs/temp_figs/walls_REF_case_mA/"
#path_out = "../../../HET_figs/versions_comparison/all_cases/"
#path_out = "../../HET_figs/mesh_figs/"
# POST-THESIS -----------------------------------------------------------------
#path_out = "../../HET_figs/Vd_cases/"
#path_out = "../../HET_figs/mA_cases/"
#path_out = "../../../Thesis/Document/Figures/Ch_Discharges/temp_figs/"
#if generate_thesis_figures == 1 and save_flag == 1:
#    path_out = "../../../Thesis/Document/Figures/Ch_Discharges/"
#path_out = "../../../HET_figs/IEPC19/alpha_t_cases_g2/"
# TOPO 2 ----------------------------------------------------------------------
#path_out = "../../../HET_figs/SAFRAN_HET/topo2/"
#path_out = "../../../HET_figs/SAFRAN_HET/topo2/new_2Dcont/"
#path_out = "../../../HET_figs/SAFRAN_HET/topo2/comp_cases/"
#path_out = "../../../HET_figs/SAFRAN_HET/topo2/comp_cases/cat3298_cat3283_cat1200/"
#path_out = "../../../HET_figs/SAFRAN_HET/topo2/new_2Dcont/cat1200_tm110_tetq125_RLC_2qeFL/"

#path_out = "../../../HET_figs/SAFRAN_HET/topo2/new_2Dcont/cat1200_tm110_tetq125_RLC_2qeFL_Ecath2/"
#path_out = "../../../HET_figs/SAFRAN_HET/topo2/comp_cases/cat1200_tm110_tetq125_RLC_2qeFL_Ecath2/"
#path_out = "../../../HET_figs/SAFRAN_HET/topo2/comp_cases/cat1200_tm110_tetq125_tq125_te251_RLC_2qeFL_Ecath2/"
#path_out = "../../../HET_figs/SAFRAN_HET/topo2/new_2Dcont/cat1200_tm110_tetq125_RLC_2qeFL_Coll/"
#path_out = "../../../HET_figs/SAFRAN_HET/topo2/comp_cases/cat1200_tm110_tetq125_newColl/"
#path_out = "../../../HET_figs/SAFRAN_HET/topo2/comp_cases/cat1200_tm110_tetq125_Ecath_explicit/"
#path_out = "../../../HET_figs/SAFRAN_HET/topo2/new_2Dcont/cat1200_tm110_tetq125_Ecath_explicit_12001107/"
#path_out = "../../../HET_figs/SAFRAN_HET/topo2/comp_cases/cat1200_tm110_tetq125_Ecath_explicit_12001107/"
#path_out = "../../../HET_figs/SAFRAN_HET/topo2_n4/comp_cases/Ecath_1200_12001107_12001199_12002942/"
#path_out = "../../../HET_figs/SAFRAN_HET/topo2_n4/comp_cases/cat1200_CHECK_jc/"
#path_out = "../../../HET_figs/SAFRAN_HET/topo2_n4/comp_cases/cat1200_CHECKCS/"
#path_out = "../../../HET_figs/SAFRAN_HET/topo2_n4/new_2Dcont/Topo2_n4_l200s200_cat1200_tm110_tetq125_RLC_Coll_CHECK2/"
#path_out = "../../../HET_figs/SAFRAN_HET/topo2_n4/new_2Dcont/Topo2_n4_l200s200_tm110_tetq125_ExCat12001199/"
#path_out = "../../../HET_figs/SAFRAN_HET/topo2_n4/new_2Dcont/Topo2_n4_l200s200_tm110_tetq125_ExCat12002942/"
#path_out = "../../../HET_figs/SAFRAN_HET/topo2_n4/comp_cases/cat1200_tm110_tetq125_RLC_lowC/"

#path_out = "../../../HET_figs/SAFRAN_HET/topo2_n4/comp_cases/cat1200_tm110_teq125_C6e-7_tme125_tq25_C6e-7/"

#path_out = "../../../HET_figs/SAFRAN_HET/topo2_n3/axial_profiles/Topo2_n3_l200s200_cat1200_tm110_tetq125/"
#path_out = "../../../HET_figs/SAFRAN_HET/topo2_n3/2Dcont/Topo2_n3_l200s200_cat1200_tm110_tetq125/"
#path_out = "../../../HET_figs/SAFRAN_HET/topo2_n3/time_plots/Topo2_n3_l200s200_cat1200_tm110_tetq125/"


# TOPO 1 ----------------------------------------------------------------------
#path_out = "../../../HET_figs/SAFRAN_HET/topo1_n1/"
#path_out = "../../../HET_figs/SAFRAN_HET/topo1_n1/new_2Dcont/"
#path_out = "../../../HET_figs/SAFRAN_HET/topo1_n1/new_axial_profiles/"
#path_out = "../../../HET_figs/SAFRAN_HET/topo1_n1/new_time_plots_data/"
#path_out = "../../../HET_figs/SAFRAN_HET/topo1/comp_cases/n1_cat313_tm110_tetq125/"

path_out = "HET_figs/comp_sims/"
path_out = "HET_figs/2D_cont/"
path_out = "HET_figs/"
path_out = "HET_figs/SPT100_rm2_rm3/"
path_out = "EDDA_HET_figs/"
path_out = "CHEOPS_Final_figs/"
path_out = "paper_HET_plumes_figs/"
path_out = "Phi_changes/"
#path_out = "CHEOPS_2_figs/cases_comparison/"
#path_out = "CHEOPS_2_figs/"
#path_out = "CHEOPS_2_figs/T2N4_comp_NEW/CHEOPS_LP_meeting_06092021/"
#path_out = "HET_DMD_figs/"
#path_out = "removing_it_matching/"
#path_out = "removing_it_matching/60000steps_removing_it_matching_inipop/"
#path_out = "removing_it_matching/10000steps_after_changes_it_matching_nonlinear_jesh/"
#path_out = "removing_it_matching/60000steps_after_changes_it_matching_RLC_modified/"
##path_out = "removing_it_matching/60000steps_after_changes_it_matching_RLC/"
#path_out = "removing_it_matching/60000steps_before_removing_it_matching_RLC_1it_max_Ca/"
#path_out = "removing_it_matching/60000steps_after_changes_it_matching_RLC_modified_iterations/"
#path_out = "removing_it_matching/60000steps_before_removing_it_matching_RLC_10it_max_Ca/"
#path_out = "removing_it_matching/60000steps_after_changes_it_matching_modified_nonewiter/"
#path_out = "removing_it_matching/60000steps_after_changes_it_matching_jemean_always_nonewiter/"
#path_out = "removing_it_matching/60000steps_comp_after_changes_it_matching_mod_jemean_nonewiter/"
#path_out = "removing_it_matching/60000steps_comp_after_changes_it_matching_mod_nonewiter_iterations/"
#path_out = "removing_it_matching/60000steps_comp_after_changes_it_matching_mod_iterations_withwithoutRLC/"
#path_out = "removing_it_matching/60000steps_after_changes_it_matching_RLC_jemean_always_iterations/"
#path_out = "removing_it_matching/60000steps_before_removing_it_matching_RLC_10it_max_Ca/fixdummy8/"
#path_out = "removing_it_matching/60000steps_comp_after_changes_it_matching_RLC_iterations_mod_jemean_always/"
#path_out = "removing_it_matching/60000steps_comp_after_changes_it_matching_RLC_mod_nonewiter_iterations/"

path_out = "I_F_zero_free_loss/"
#path_out = "cond_wall/"
#path_out = "prop_data_i2_effects/"
#path_out = "Check_commits_changes_may_june2021/"
#path_out = "Check_commits_changesJiewei_july2021/"
#path_out = "tqine0/"
#path_out = "tmte5tq_values/"
#path_out = "alpha_parameters/"
path_out = "HT5k/"
#path_out = "HYPHEN_Activities_Report/Anode_treatment_thermalized_potential/"
#path_out = "CHEOPS_MP/"
#path_out = "HT20k/"
#path_out = "ElAlmendro2021/"
#path_out = "CHEOPS_second_progress_meeting/"
#path_out = "CHEOPS_second_progress_meeting/T2N4_comparison_boundaryalgorithms_Ec65/"
#path_out = "CHEOPS_second_progress_meeting/T2N4_comparison_REFfloating_Ec65/new_large_wall_case/"
#path_out = "CHEOPS_second_progress_meeting/T2N4_pm1em1_cat1200_tm15_te1_tq125_floating_contours/"
#path_out = "CHEOPS_second_progress_meeting/T2N4_comparison_REFGDML_Ec65/"
#path_out = "CHEOPS_second_progress_meeting/T2N4_comparison_REF_GDML_GDMLWC_Ec65/WC_cases_with_energy_eq_type_2/"
#path_out = "CHEOPS_second_progress_meeting/T2N4_comparison_GDML_GDMLWCmc0_GDMLWC_Ec65/WC_cases_with_energy_eq_type_2/"
#path_out = "CHEOPS_second_progress_meeting/T2N4_comparison_REF_GDML_GDMLWCmc0_Ec65/"
#path_out = "CHEOPS_second_progress_meeting/T2N4_comparison_GDMLWCmc0_GDMLWC_Ec65/"
#path_out = "CHEOPS_second_progress_meeting/T2N4_pm1em1_cat1200_tm15_te1_tq125_GDML_contours/"
#path_out = "CHEOPS_second_progress_meeting/T2N4_pm1em1_WC1959_tm15_te1_tq125_GDML_mc0_contours/energy_eq_type_2/"
#path_out = "CHEOPS_second_progress_meeting/T2N4_pm1em1_WC1959_tm15_te1_tq125_GDML_contours/energy_eq_type_2/"
#path_out = "CHEOPS_second_progress_meeting/T2N4_pm1em1_WC1959_tm15_te1_tq125_GDML_mc0_Temin_contours/"
#path_out = "CHEOPS_second_progress_meeting/T2N4_comparison_GDMLWCmc0_GDMLWCmc0Temin_Ec65/"
#path_out = "CHEOPS_second_progress_meeting/T2N4_comparison_GDMLWCmc0Temin_tmte_Ec65/"
#path_out = "CHEOPS_second_progress_meeting/T2N4_comparison_REF_GDML_GDMLWCmc0_GDMLWC_Ec65/WC_cases_with_energy_eq_type_2/GDML_with_free_qe_fact_2/"
#path_out = "CHEOPS_second_progress_meeting/T2N4_comparison_71d0dcb_h_c/"
#path_out = "CHEOPS_second_progress_meeting/T2N4_comparison_GDMLWC_phiinf_Ec65/"
#path_out = "CHEOPS_second_progress_meeting/T2N4_comparison_GDMLWC_mindens_Ec65/"
#path_out = "CHEOPS_second_progress_meeting/T2N4_comparison_GDMLWC_limje_Ec65/"
#path_out = "CHEOPS_second_progress_meeting/T2N4_comparison_GDMLWC_schamalwn1_Ec65/"
#path_out = "CHEOPS_second_progress_meeting/T2N4_comparison_GDMLWC_tqine0_Ec65/"
#path_out = "CHEOPS_second_progress_meeting/T2N4_comparison_GDMLWC_phiinfplus_Ec65/"
#path_out = "CHEOPS_second_progress_meeting/T2N4_comparison_GDMLWC_phiinfminus_Ec65/"
#path_out = "CHEOPS_second_progress_meeting/LP_testcase1_VC1612_tmtetq2_GDML/"
#path_out = "CHEOPS_second_progress_meeting/LP_testcase1_VC1612_tmtetq1_GDML/"
#path_out = "CHEOPS_second_progress_meeting/LP_testcase1_VC950_tmtetq1_GDML/"
#path_out = "CHEOPS_second_progress_meeting/LP_testcase1_VC1348_tmtetq1_GDML/"
#path_out = "CHEOPS_second_progress_meeting/LP_testcase1_WC2219_tmtetq1_GDML/"
#path_out = "CHEOPS_second_progress_meeting/LP_testcase1_WCext1_tmtetq1_GDML/"
#path_out = "T2N4_mfloweneflow_18032022/"
#path_out = "T2N4_CSL_29032022/"mesh


#path_out = "VHT_US_plume_sims/time_comp_Gcases/"
#path_out = "VHT_US_plume_sims/time_comp_Lcases/"
#path_out = "VHT_US_plume_sims/1Dz_comp_Gcases/"
#path_out = "VHT_US_plume_sims/1Dz_comp_Lcases/"
#path_out = "VHT_US_plume_sims/"


#path_out = "VHT_US_plume_sims/2Dmaps_P1L/"
#path_out = "VHT_US_plume_sims/2Dmaps_P2L/"
#path_out = "VHT_US_plume_sims/2Dmaps_P3L/"
#path_out = "VHT_US_plume_sims/2Dmaps_P4L/"

#path_out = "VHT_US_plume_sims/2Dmaps_P1G/"
#path_out = "VHT_US_plume_sims/2Dmaps_P2G/"
#path_out = "VHT_US_plume_sims/2Dmaps_P3G/"
#path_out = "VHT_US_plume_sims/2Dmaps_P4G/"
#path_out = "VHT_US_plume_sims/2D_maps_P2L_noCEX_noNP/"

#path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/meshes_figs/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/time_plots_Lcases/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/time_plots_Gcases/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/prof_plots_Lcases/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/prof_plots_Lcases/scan20_P2toP4/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/prof_plots_Lcases/scan10_P1toP4/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/prof_plots_Gcases/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/prof_plots_Gcases/scan20_P2toP4/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/prof_plots_Gcases/scan10_P1toP4/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/prof_plots_Gcases_cat/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/prof_plots_Gcases_cat/scans/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/comparison_P3G_fcat1962_alphat/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/cont_plots_P3G_fcat1962_alphat5/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/cont_plots_P3G_fcat1962_alphat10/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/cont_plots_P3G_fcat1962_Tcath_new/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/cont_plots_P3G_fcat3608/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/cont_plots_P3G_fcat1003/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/cont_plots_P3G_fcat1298/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/cont_plots_P3G_Tcath_new/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/cont_plots_P3L_Tcath_new/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/cont_plots_P2G_Tcath_new/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/cont_plots_P2L_Tcath_new/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/cont_plots_P1G_Tcath_new/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/cont_plots_P1L_Tcath_new/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/cont_plots_P4G_Tcath_new/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/cont_plots_P4L_Tcath_new/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/scan30_P3/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/comparison_P3G_fcat1962_alphat/time_plots_P3G_REF_alphat/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/comparison_P3G_fcat1962_alphat/prof_plots_P3G_REF_alphat1_alphat2/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/cathode_cases_P2P3/cont_plots_P3L_fcat1962/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/cathode_cases_P2P3/cont_plots_P3G_fcat1962/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/cathode_cases_P2P3/cont_plots_P3G_fcat6259_5993/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/cathode_cases_P2P3/cont_plots_P3L_fcat6259_5993/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/cathode_cases_P2P3/cont_plots_P2G_fcat905/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/cathode_cases_P2P3/cont_plots_P2L_fcat905/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/cathode_cases_P2P3/P3_prof_plots/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/cathode_cases_P2P3/P2_prof_plots_fcat905/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/cathode_cases_P2P3/P2_prof_plots_fcat3198/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/cathode_cases_P2_Tcath_new/prof_plots_fcat3198/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/cathode_cases_P2_Tcath_new/time_plots_fcat3198/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/cathode_cases_P2_Tcath_new/cont_plots_G_fcat3198/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/cathode_cases_P2_Tcath_new/cont_plots_L_fcat3198/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/cathode_cases_P2_Tcath_new/prof_plots_fcat2543_2542/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/cathode_cases_P2_Tcath_new/time_plots_fcat2543_2542/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/cathode_cases_P2_Tcath_new/cont_plots_G_fcat2543_2542/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/cathode_cases_P2_Tcath_new/cont_plots_L_fcat2543_2542/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/cathode_cases_P3_Tcath_new/prof_plots_fcat1962/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/cathode_cases_P3_Tcath_new/time_plots_fcat1962/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/cathode_cases_P3_Tcath_new/cont_plots_G_fcat1962/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/cathode_cases_P3_Tcath_new/cont_plots_L_fcat1962/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/cathode_cases_P3_Tcath_new/prof_plots_fcat6259_5993/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/cathode_cases_P3_Tcath_new/time_plots_fcat6259_5993/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/cathode_cases_P3_Tcath_new/cont_plots_G_fcat6259_5993/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/cathode_cases_P3_Tcath_new/cont_plots_L_fcat6259_5993/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/cathode_cases_P4_Tcath_new/prof_plots_fcat7610/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/cathode_cases_P4_Tcath_new/time_plots_fcat7610/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/cathode_cases_P4_Tcath_new/cont_plots_G_fcat7610/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/cathode_cases_P4_Tcath_new/cont_plots_L_fcat7610/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/cathode_cases_P4_Tcath_new/prof_plots_fcat6266_2356/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/cathode_cases_P4_Tcath_new/time_plots_fcat6266_2356/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/cathode_cases_P4_Tcath_new/cont_plots_G_fcat6266_2356/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/cathode_cases_P4_Tcath_new/cont_plots_L_fcat6266_2356/"

# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/ionGDML_sims/prof_plots/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/ionGDML_sims/cont_plots_P2G_ionGDML/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/ionGDML_sims/cont_plots_P2G_fcat905_ionGDML/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/rprof_plots_Lcases/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/rprof_plots_Gcases/z_rprof_18.61/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/rprof_plots_Lcases/z_rprof_18.61/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/rprof_plots_LGcases/z_rprof_18.61/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/scan_plots_LGcases/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/cathode_cases_P2P3/scan_plots_P2P3_LGcases_P2_fcat3198/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/cathode_cases_P2P3/rprof_plots_P2P3_LGcases_P2_fcat3198/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/cathode_cases_P4/P4_time_plots_fcat7610/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/cathode_cases_P4/P4_prof_plots_fcat7610/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/cathode_cases_P4/cont_plots_P4G_fcat7610/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/cathode_cases_P4/cont_plots_P4L_fcat7610/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/cathode_cases_P4/cont_plots_P4G_fcat6266_2356/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/cathode_cases_P4/cont_plots_P4L_fcat6266_2356/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/P3G_Tecath_new/prof_plots/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/P3G_Tecath/prof_Bline/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/P3G_Tecath/time_plots/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/P3G_Tecath_efieldcomp1/prof_Bline/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/P3G_Tecath_efieldcomp1/time_plots/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/P3G_fcat6259_5993_Tecath/prof_Bline/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/P3G_fcat6259_5993_efieldcomp1/prof_Bline/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/P3G_fcat6259_5993_efieldcomp1/time_plots/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/P3G_fcat6259_5993_efieldcomp1/prof_plots/"

# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/revision1_figs/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/cooling_P3G_P4G/P3GP4G_prof_plots/"
# path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/cooling_P3G_P4G/P3GP4G_time_plots/"
path_out = "VHT_MP_US_plume_sims/paper_GDML_figs/cont_plots_P3G_Tcath_new/uzn_figs/"

#path_out = "VHT_LP_US/"
#path_out = "VHT_LP_US/testcase2/"
#path_out = "VHT_LP_US/testcase2/PPSX00_em1_OP2c_tmte08_2_tq1/"
#path_out = "VHT_LP_US/testcase2/comp_OP2c_CEX_Xe_em2_em3/"
#path_out = "VHT_LP_US/testcase2/comp_OP2c_CEX_Xe_Kr_Kr2/"
#path_out = "VHT_LP_US/testcase2/comp_OP2h_CEX_Xe_Kr/"
#path_out = "VHT_LP_US/testcase2/PPSX00_em2_OP2a_tm2_2_te52_tq1_fcat4656_CEX/"
#path_out = "VHT_LP_US/testcase2/PPSX00_em2_OP2b_tm2_2_te3_tq1_fcat4656_CEX/"
#path_out = "VHT_LP_US/testcase2/PPSX00_em2_OP2c_tmte08_2_tq1_fcat4656_CEX/"
#path_out = "VHT_LP_US/testcase2/PPSX00_em2_OP2f_tmte08_2_tq1_fcat4656_CEX/"
#path_out = "VHT_LP_US/testcase2/PPSX00_em2_OP2g_tmte08_2_tq1_fcat4656_CEX/"
#path_out = "VHT_LP_US/testcase2/PPSX00_em2_OP2h_tmte06_2_tq1_fcat4656_CEX/"
#path_out = "VHT_LP_US/testcase2/PPSX00_em2_OP2h_tmte06_2_tq1_fcat4656_CEX_Kr/"

#path_out = "VHT_LP_US/testcase2/comp_2c_2f_2h_2hKr/"
#path_out = "VHT_LP_US/testcase2/comp_2c_2a_2b/"

#path_out = "VHT_LP_US/testcase2/PPSX00_em2_OP2c_tmte08_2_tq1_fcat2774_CEX/"
#path_out = "VHT_LP_US/testcase2/PPSX00_em2_OP2c_tmte08_2_tq1_fcat4656_CEX/"
#path_out = "VHT_LP_US/testcase2/PPSX00_em2_OP2c_tmte08_2_tq1_fcat5026_CEX/"
#path_out = "VHT_LP_US/testcase2/PPSX00_em2_OP2c_tmte08_2_tq1_fcat654_CEX/"
#path_out = "VHT_LP_US/testcase2/PPSX00_em2_OP2c_tmte08_2_tq1_fcat1171_CEX/"
#path_out = "VHT_LP_US/testcase2/comp_OP2c_CEX_Xe_cathode_position/"



#path_out = "removing_it_matching/60000steps_after_changes_it_matching_modified_iterations/"


if save_flag == 1 and os.path.isdir(path_out) != 1:  
    sys.exit("ERROR: path_out is not an existing directory")




# Set options for LaTeX font
plt.rc('font', **{'family': 'serif', 'serif': ['Computer Modern']})
plt.rc('text', usetex=True)
plt.rcParams['text.latex.preamble']=[r"\usepackage{amsmath}"]
font_size           = 25
font_size_legend    = font_size - 10
ticks_size          = 25
ticks_size_isolines = ticks_size - 15
text_size           = 25
levels_step         = 100
cbar_nticks         = 10

line_width             = 1.5
line_width_boundary    = line_width + 0.5
line_width_grid        = 1
marker_every           = 1
marker_every_time      = 10
marker_every_time_fast = 3000
marker_every_FFT       = 2
marker_every_mesh      = 3
marker_size            = 7
marker_size_cath       = 5
xticks_pad             = 6.0

# Inputs for streamlines plots
flag_start        = 1
plot_start_points = 1
arrow_size        = 1.5
arrow_style       = '-|>'
streamline_width  = 0.8
streamline_color  = 'b'
streamline_color  = 'k'
min_length        = 0.065

# Extra colors
orange ='#FD6A02'            
gold   ='#F9A602'
brown  ='#8B4000'
silver ='#C0C0C0'
grey   ='#808080'



# Physical constants
# Van der Walls radius for Xe
r_Xe = 216e-12
e    = 1.6021766E-19
me   = 9.1093829E-31
g0   = 9.80665
eps0 = 8.854188e-12   # Vacuum permitivity [A2s4kg−1m−3] in SI base units,
                      # or [C2N−1m−2] or [CV−1m−1] using other SI coherent units

def fmt_func_exponent_cbar(x,pos):
    a, b = '{:.1e}'.format(x).split('e')
    b = int(b)
    return r'${}\cdot$10$^{{{}}}$'.format(a, b)
    
def fmt_func_exponent_lines(x):
    a, b = '{:.0e}'.format(x).split('e')
    b = int(b)
    return r'${}\cdot$10$^{{{}}}$'.format(a, b)

def fmt_func_exponent_lines2(x):
    a, b = '{:.1e}'.format(x).split('e')
    b = int(b)
    return r'${}\cdot$10$^{{{}}}$'.format(a, b)
    
    
def plot_MFAM(faces,nodes,line_width):
    nfaces = np.shape(faces)[1]
    for i in range(0,nfaces):
        if faces[2,i] == 2:     # face type >> sigma = const. (red)
            plt.plot(nodes[0,faces[0:2,i]-1],nodes[1,faces[0:2,i]-1],'r-',linewidth = line_width)
        elif faces[2,i] == 1:   # face type >> lambda = const. (blue)
            plt.plot(nodes[0,faces[0:2,i]-1],nodes[1,faces[0:2,i]-1],'b-',linewidth = line_width)
        else:                   # any other face type (black)  
            plt.plot(nodes[0,faces[0:2,i]-1],nodes[1,faces[0:2,i]-1],'k-',linewidth = line_width)
            
def plot_MFAM_ax(ax,faces,nodes,line_width):
    nfaces = np.shape(faces)[1]
    for i in range(0,nfaces):
        if faces[2,i] == 2:     # face type >> sigma = const. (red)
            ax.plot(nodes[0,faces[0:2,i]-1],nodes[1,faces[0:2,i]-1],'r-',linewidth = line_width)
        elif faces[2,i] == 1:   # face type >> lambda = const. (blue)
            ax.plot(nodes[0,faces[0:2,i]-1],nodes[1,faces[0:2,i]-1],'b-',linewidth = line_width)
        else:                   # any other face type (black)  
            ax.plot(nodes[0,faces[0:2,i]-1],nodes[1,faces[0:2,i]-1],'k-',linewidth = line_width)
            
    return

def plot_MFAM_ax_nosig(ax,faces,nodes,line_width):
    nfaces = np.shape(faces)[1]
    for i in range(0,nfaces):
        if faces[2,i] == 1:     # face type >> lambda = const. (cyan)
            ax.plot(nodes[0,faces[0:2,i]-1],nodes[1,faces[0:2,i]-1],'k-',linewidth = line_width)
            
def plot_MFAM_ax_nosig_lambda(ax,faces,nodes,line_width,face_geom):
    nfaces = np.shape(faces)[1]
    count = 0
    count_max = 20
    for i in range(0,nfaces):
        if faces[2,i] == 1:     # face type >> lambda = const. (cyan)
            ax.plot(nodes[0,faces[0:2,i]-1],nodes[1,faces[0:2,i]-1],'k-',linewidth = line_width)
            count = count + 1
            if count == count_max:
                ax.text(np.mean(nodes[0,faces[0:2,i]-1]),np.mean(nodes[1,faces[0:2,i]-1]),str(face_geom[2,i]))
                count = 0
    return
def plot_MFAM_ax_color(ax,faces,nodes,line_width,lambda_color,sigma_color,boundary_color):
    nfaces = np.shape(faces)[1]
    for i in range(0,nfaces):
        if faces[2,i] == 2:     # face type >> sigma = const. (red)
            ax.plot(nodes[0,faces[0:2,i]-1],nodes[1,faces[0:2,i]-1],color=sigma_color,linestyle='-',linewidth = line_width)
        elif faces[2,i] == 1:   # face type >> lambda = const. (blue)
            ax.plot(nodes[0,faces[0:2,i]-1],nodes[1,faces[0:2,i]-1],color=lambda_color,linestyle='-',linewidth = line_width)
        else:                   # any other face type (black)  
            ax.plot(nodes[0,faces[0:2,i]-1],nodes[1,faces[0:2,i]-1],color=boundary_color,linestyle='-',linewidth = line_width)
            
    return
###############################################################################



if mesh_plots == 1:
    print("######## mesh_plots ########")
    # Print out time step
    timestep = 'last'
    allsteps_flag   = 1
    read_inst_data  = 0
    read_part_lists = 0
    read_flag       = 0

    if timestep == 'last':
        timestep = -1  
    if allsteps_flag == 0:
        mean_vars = 0
        
    
    tol                 = 0.5
#    marker_size         = 3
    marker_size         = 1.5
    marker_size_cath    = 4.5
    line_width          = 0.5
    line_width_boundary = 1.5
#    ticks_size_isolines = 18
    ticks_size_isolines = 10
    text_size_mesh      = 10
    text_size_cath      = 15
    elems_ID_step  = 30000
    face_ID_step   = 5
    
    picM_plots      = 0
    MFAM_plots      = 0
    picM_MFAM_plots = 0
    elem_ID_plots   = 0
    face_ID_plots   = 1
    B_plots         = 0
    
#    picM_plots      = 0
#    MFAM_plots      = 1
#    picM_MFAM_plots = 0
#    elem_ID_plots   = 1
#    face_ID_plots   = 1
#    B_plots         = 0
    
#    picM_plots      = 0
#    MFAM_plots      = 0
#    picM_MFAM_plots = 0
#    elem_ID_plots   = 0
#    face_ID_plots   = 0
#    B_plots         = 1
    
#    picM_plots      = 1
#    MFAM_plots      = 1
#    picM_MFAM_plots = 0
#    elem_ID_plots   = 0
#    face_ID_plots   = 0
#    B_plots         = 0
    
    
#    rind = 19
    rind = 17
#    rind = 32
    rind = 37 # HT20k
#    rind = 17   # VHT_US coarse mesh
#    rind = 20   # VHT_US fine mesh
    rind = 15   # VHT_US fine mesh Np, PPSX00 testcase1, testcase2
    
    generate_thesis_figures = 0
    generate_paper_figures  = 0
    
    zind = 36
    if generate_thesis_figures == 1 or generate_paper_figures == 1:
#        rind = 19
#        rind = 17
#        rind = 37 # HT20k
#        rind = 20   # VHT_US fine mesh
        rind = 15   # VHT_US fine mesh Np
        nlevels_contour = 250
    
    # MFAM elements and faces IDs in FORTRAN standard (i.e. starting from 1)
#    elems_IDs          = [2059,3298]
#    elems_IDs          = [313]
#    elems_IDs          = [2059,3298,3283,1200]
    elems_IDs          = []

    # Plot cath B line obtained automatically from selected cathode face or element
    plot_cath_Bline = 1      
    # Plot the B=0 line in plume obtained automatically from selected first face ID at the axis starting from singular point at the axis
    plot_B0_line = 1  
    # Give ID of the first lambda face of the B0 line (magnetic separatrix) born from the magnetic singular point at the axis
    # B=0 line for P2
    B0_face_axis_ID = 2683-1 
    # B=0 line for P3
    B0_face_axis_ID = 3419-1 
    # B=0 line for P4
    # B0_face_axis_ID = 3359-1 
    
    # MFAM elements lines (Python standard)
#    elems_cath_Bline   = range(407-1,483-1+2,2) # Elements along the cathode B line for cases C1, C2 and C3
#    elems_cath_Bline_2 = range(875-1,951-1+2,2) # Elements along the cathode B line for case C5
#    elems_cath_Bline   = range(2057-1,2064-1+1,1) # Elements along the cathode B line for topo2 cat 2059
#    elems_cath_Bline   = range(3212-1,3300-1+1,1) # Elements along the cathode B line for topo2 cat 3298
#    elems_cath_Bline   = range(639-1,701-1+2,2) # Elements along the cathode B line for topo1 cat 699
#    elems_cath_Bline   = range(257-1,316-1+2,2) # Elements along the cathode B line for topo1 cat 313
    elems_cath_Bline   = range(1114-1,1202-1+1,1) # Elements along cathode B line for topo2 cat 1200
#    elems_cath_Bline   = range(1115-1,1202-1+1,1) # Elements along cathode B line for topo2 cat 1200 MODIFIED FIRST ELEMENT
#    elems_cath_Bline   = range(3238-1,3330-1+1,1)  # Elements along cathode B line for SPT100_MFAM_Ref1500pts_rm2
#    elems_cath_Bline   = list([4220-1,4219-1]) + list(range(4217-1,3995-1+2,-2))  # Elements along cathode B line for SPT100_MFAM_Ref1500pts_rm3
#    elems_cath_Bline    = list(range(994-1,926-1+2,-2)) + list([923-1,922-1,920-1,917-1,916-1,914-1,912-1,909-1,907-1,906-1,904-1]) # Elements along the cathode B line for HT5k rm6 cathode at volume 922 or face 1637
#    elems_cath_Bline    = list(range(1968-1,1922-1+2,-2)) + list([1925-1]) + list(range(1922-1,1908-1+2,-2)) +list([1911-1]) + list(range(1908-1,1894-1+2,-2)) + list([1896-1,1895-1,1892-1,1890-1,1888-1,1886-1,1884-1,1882-1,1880-1,1971-1]) # Elements along the cathode B line for HT5k rm4 cathode at volume 1966 or face 3464
#    elems_cath_Bline = range(519-1,519-1-30,-2)     # Elements along cathode B line for VHT_US P10 cases (no intersection with midline)
    # elems_cath_Bline = range(2393-1,2393-1-46,-1)   # Elements along cathode B line for VHT_US P20 cases
    elems_cath_Bline = list(range(2222-1,2222-1-36,-2)) + list([2187-1]) + list(range(2184-1,2184-1-22,-2)) + list([2163-1])+list(range(2160-1,2160-1-38,-2))  # Elements along cathode B line for VHT_US P30 cases
    # elems_cath_Bline = range(1579-1,1579-1-80,-2)   # Elements along cathode B line for VHT_US P40 cases
    # elems_cath_Bline = [591, 589, 587, 584, 583, 581, 579, 576, 575, 572, 570, 568,
    #                     566, 565, 562, 560, 558, 556, 555, 553, 551, 548, 546, 545]        # Elements along cathode B line for VHT_US case P2G_fcat905 (python indeces)
    # elems_cath_Bline = [1978, 1976, 1974, 1972, 1970, 1968, 1966, 1963, 1962, 1960,
    #                     1958, 1956, 1954, 1951, 1950, 1947, 1946, 1944, 1941, 1940, 1938]    # Elements along cathode B line for VHT_US case P2G_fcat3198 (python indeces)
    # elems_cath_Bline = [1289, 1287, 1285, 1283, 1281, 1279, 1277, 1275, 1272, 1270,
    #                     1269, 1267, 1265, 1263, 1261, 1259, 1257, 1254, 1253, 1251, 1248,
    #                     1247, 1245, 1242, 1241, 1238, 1236, 1235, 1233, 1231, 1228, 1226,
    #                     1225, 1222, 1220, 1219, 1217, 1215, 1212, 1211, 1209, 1207, 1204,
    #                     1202, 1201, 1199, 1197, 1195, 1192, 1191, 1188, 1187]              # Elements along cathode B line for VHT_US case P3G_fcat1962 (python indeces)
    # elems_cath_Bline = [4023, 4022, 4021, 4020, 4019, 4018, 4017, 4016, 4015, 4014,
    #                     4013, 4012, 4011, 4010, 4009, 4008, 4007, 4006, 4005, 4004, 4003,
    #                     4002, 4001, 4000, 3999, 3998, 3997, 3996, 3995, 3994, 3993, 3992,
    #                     3991, 3990, 3989, 3988, 3987, 3986, 3985, 3984, 3983, 3982, 3981,
    #                     3980, 3979, 3978, 3977, 3976, 3975, 3974, 3973, 3972, 3971]          # Elements along cathode B line for VHT_US case P4G_fcat7610 (python indeces)
    
#    elems_cath_Bline = range(891-1,891-1-43,-1)     # Elements along cathode B line for PPSX00 testcase1 D4.1 final mesh (Cathode face ID = 1435)
#    elems_cath_Bline = range(2130-1,2130-1-43,-2)   # Elements along cathode B line for PPSX00 testcase2 first mesh (em1) (Cathode face ID = 3360)
#    elems_cath_Bline = list(range(3535-1,3535-1-24,-1)) + list(range(3510-1,3510-1-21,-2))   # Elements along cathode B line for PPSX00 testcase2 second mesh (em2) (Cathode face ID = 6113)
#    elems_cath_Bline = list(range(2839-1,2839-1+48,2))                                      # Elements along cathode B line for PPSX00 testcase2 second mesh (em2) (Cathode face ID = 4656)
#    elems_cath_Bline = list(range(1657-1,1657-1+101,2))                                      # Elements along cathode B line for PPSX00 testcase2 second mesh (em2) (Cathode face ID = 2774)
#    elems_cath_Bline_2 = range(1114-1,1201-1+1,1) # Elements along another cathode B line
#    elems_cath_Bline_2 = range(939-1,1108-1+2,2)  # Elements along another cathode B line
    # elems_cath_Bline = []
    elems_cath_Bline_2 = []
    
    # Faces of cathode line for P2_fcat2543_2542 for GDML paper
    # faces_cath_Bline = list(range(2541-1,2631+3-1,3)) + list(range(2635-1,2638+3-1,3)) + list(range(2642-1,2676+1-1,1))
    # Faces of cathode line for P3_fcat6259_5993 for GDML paper
    # faces_cath_Bline = list([6258-1]) + list(range(6260-1,6316+2-1,2)) + list(range(6317-1,6336+1-1,1))
    faces_cath_Bline = []
    
    elems_Bline        = [] # Elements along a B line
    faces_IDs          = [2387,2388]
    faces_IDs          = []
    zpos_cath          = 43.73*1e-3*1e2
    rpos_cath          = 220.2*1e-3*1e2
    zpos_cath          = 0.0*1e-3*1e2
    rpos_cath          = 0.0*1e-3*1e2
#    new_cath_elem_ID = 313 - 1   # TOPO1
    new_cath_elem_ID = 1200 - 1  # TOPO2
#    new_cath_elem_ID = 780 - 1     # SPT100 rm
#    new_cath_elem_ID = 3328 - 1    # SPT100 rm2
#    new_cath_elem_ID = 4219 - 1    # SPT100 rm3
#    new_cath_elem_ID = 481 - 1    # SPT100 rm3
#    new_cath_elem_ID = 0
#    new_cath_elem_ID = 1348 -1 # Cheops LP PPSX00 old mesh
    new_cath_elem_ID = 1348 -1 # Cheops LP PPSX00 testcase1
    new_cath_elem_ID = - 1  # HT20k
    new_cath_elem_ID = - 1  # VHT_US fine mesh plume20
    # MFAM boundary faces IDs in Python standard (i.e. starting from 0, in order to search in Python arrays)
#    faces_IDs_boundary = [100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115] # SYMMETRY AXIS FACES
#    faces_IDs_boundary = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14] 
    faces_IDs_boundary = [9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]  # ANODE FACES
    
    
    # ONLY FOR AXIAL PROFILES IN B_plots ======================================
    # Axial profiles cathode plotting flag and cathode position in cm (for plot_zcath_012 = 2,3) 
    plot_zcath_012 = 2                  # 0 - Deactivated
                                        # 1 - Plot z_cath (cathode z position from eFld mesh)
                                        # 2 - Plot zcat_pos indicated below (cross Cathode Bline with axial profile)
                                        # 3 - Plot zcat_pos_2 (additional cross Cathode Bline with axial profile)
    zcat_pos       = 5.9394542444501024 # z coordinate of crossing point of cathode C1, C2 and C3 Bline with rind = 19
#    zcat_pos_2     = 9.6917             # z coordinate of crossing point of cathode C5 (C4 thesis) Bline with rind=19
    # TOPO 2 ------------------------------------------------------------------
    plot_zcath_012 = 2
#    zcat_pos       = 15.55106875         # z coordinate of crossing point of cathode topo2 3298 and 3283 Bline with rind = 17
    zcat_pos       = 7.47248             # z coordinate of crossing point of cathode topo2 1200 Bline with rind = 17
#    zcat_pos       = 5.902074            # z coordinate of crossing point of cathode topo2 2853 Bline with rind = 17
    # TOPO 1 ------------------------------------------------------------------
    plot_zcath_012 = 2
#    zcat_pos       = 12.14428            # z coordinate of crossing point of cathode topo1 699 Bline with rind = 17
#    zcat_pos       = 7.3422075           # z coordinate of crossing point of cathode topo1 313 Bline with rind = 17   
#    zcat_pos       = 5.688635            # z coordinate of crossing point of cathode topo1 251 Bline with rind = 17 
    # VHT_US MP (IEPC2022) ----------------------------------------------------
    zcat_pos = 15.55
    # VHT_US LP (TFM Alejandro) -----------------------------------------------
    zcat_pos = 6.25
    # PPSX00 testcase1 (D4.1 LP) ----------------------------------------------
    zcat_pos = 5.74805
    # PPSX00 testcase2 em2 cathode face ID = 4656 -----------------------------
    zcat_pos = 5.76525
    # =========================================================================

    
    # Simulation names
    nsims = 1
#    oldpost_sim      = 0
#    oldsimparams_sim = 4
    oldpost_sim      = 3
    oldsimparams_sim = 12
#    oldpost_sim      = 3  # For last Cheops report sims
#    oldsimparams_sim = 8  # For last Cheops report sims
#    oldpost_sim      = 1
#    oldsimparams_sim = 0
    oldpost_sim      = 6
    oldsimparams_sim = 16
    oldpost_sim      = 6
    oldsimparams_sim = 17
#    oldpost_sim      = 5
#    oldsimparams_sim = 16
    oldpost_sim      = 6
    oldsimparams_sim = 21
#    sim_names = ["../../../Rb_hyphen/sim/sims/SPT100_al0025_Ne5_C5"]
#    sim_names = ["../../../Rb_hyphen/sim/sims/Topo2_n4_l200s200"]
#    sim_names = ["../../../sim/sims/Topo2_n4_l200s200_cat3298"]  # Used for plotting meshes for TOPO2
#    sim_names = ["../../../Rb_hyphen/sim/sims/Topo1_n1_l100s100"]
#    sim_names = ["../../../sim/sims/Topo1_n1_l100s100_cat699"]    # Used for plotting meshes for TOPO1
#    sim_names = ["../../../sim/sims/Topo2_n4_l200s200_cat1200_tm110_tetq125_ECath"]
    
#    sim_names = ["../../../Ca_sims_files/SPT100_thesis_REF_MFAMjesus_rm3_picrm_oldsheath"]   
#    sim_names = ["../../../Ca_sims_files/SPT100_orig_tmtetq2_Vd300_1st_run"]    
#    sim_names = ["../../../Sr_hyphen/sim/sims/SPT100_pm1em1_cat949_tmtetq25"]   
#    sim_names = ["../../../sim/sims/SPT100_pm2em1_cat481_tmtetq25"]   
#    sim_names = ["../../../Sr_sims_files/SPT100_pm2em1_cat481_tmtetq25_RLC"]   
#    sim_names = ["../../../Rb_hyphen/sim/sims/SPT100_al0025_Ne5_C1"]
#    sim_names = ["../../../Ca_sims_files/T2N3_pm1em1_cat1200_tm15_te1_tq125_71d0dcb"]  
#    sim_names = ["../../../sim/sims/SPT100_pm2em2_cat3328_tmtetq25_RLC"]  
#    sim_names = ["../../../sim/sims/SPT100_pm2em2_cat3328_tmtetq5_flqe45"] 
#    sim_names = ["../../../sim/sims/HT5k_MS_sim"] 
#    sim_names = ["../../../sim/sims/HT5k_rm6_tm08_10te1tq25s01_VC"]
#    sim_names = ["../../../Ca_hyphen/sim/sims/HT5k_tm08_9te1tq25s01_9f7cbb9_cath_inj"]
#    sim_names = ["../../../Ca_hyphen/sim/sims/HT20k_tm2_10te5tq25s01_V300_rm6"]
#    sim_names = ["../../../Sr_hyphen/sim/sims/T2N4_pm1em1_cat1200_tm15_te1_tq125_0438e2a"]
#    sim_names = ["../../../sim/sims/T2N4_pm1em1_WC1959_tm15_te1_tq125_GDML_tests"]
#    sim_names = ["../../../Ca_hyphen/sim/sims/LP_testcase1_VC1348_tmtetq1_GDML"]
#    sim_names = ["../../../sim/sims/HT20k_tm1.4_23tq25s01_V300_rm8_rm6_global_new"]
#    sim_names = ["../../../Mg_hyphen_alejandro/sim/sims/Plume20_OP3_global_CEX_Np"]
#    sim_names = ["../../../Mg_hyphen_alejandro/sim/sims/VLP_9L_refined"]
#    sim_names = ["../../../Mg_hyphen_borja/sim/sims/PPSX00_em1_OP2c_tmte08_2_tq1_fcat203_CEX"]
#    sim_names = ["../../../Mg_hyphen_borja/sim/sims/PPSX00_OP2c_tmte057_2_tq1_newjump"]
#    sim_names = ["../../../Mg_hyphen_borja/sim/sims/PPSX00_em2_OP2c_tmte08_2_tq1_fcat6113_CEX"]
#    sim_names = ["../../../Ca_hyphen/sim/sims/PPSX00_em2_OP2c_tmte08_2_tq1_fcat4656_CEX"]
    # sim_names = ["../../../Mg_hyphen/sim/sims/Plume30_OP3_global_CEX_Np_new"]
    # sim_names = ["../../../sim/sims/P1G"]
    # sim_names = ["../../../sim/sims/P2G_fcat905"]
    # sim_names = ["../../../sim/sims/P3G_fcat1962"]
    # sim_names = ["../../../sim/sims/P3G_fcat6259_5993"]
    # sim_names = ["../../../sim/sims/P2G"]
    # sim_names = ["../../../sim/sims/P4G_fcat7610_Fz"]
    # sim_names = ["../../../sim/sims/P2G_Tcath_new"]
    # sim_names = ["../../../sim/sims/P4G_Fz_Tcath_new"]
    sim_names = ["../../../sim/sims/P3G_Tcath_new"]
    
                    

    
#    PIC_mesh_file_name = ["PIC_mesh_LP.hdf5"]
#    PIC_mesh_file_name = ["PIC_mesh_topo2_refined4.hdf5"]
#    PIC_mesh_file_name = ["PIC_mesh_topo1_refined4.hdf5"]
#    PIC_mesh_file_name = ["SPT100_picM_Reference1500points_rm.hdf5"]
#    PIC_mesh_file_name = ["SPT100_picM_Reference1500points_rm2.hdf5"]
#    PIC_mesh_file_name = ["HT5k_PIC_mesh_rm3.hdf5"]
#    PIC_mesh_file_name = ["SPT100_picM.hdf5"]
#    PIC_mesh_file_name = ["HT5k_PIC_mesh_rm3.hdf5"]
#    PIC_mesh_file_name = ["aspire_picM_rm6.hdf5"]
    PIC_mesh_file_name = ["PIC_mesh.hdf5"]

    # Labels             
    labels = [r"Ne = 1"]
    
    # Line colors
    colors = ['k','g','b','k','c','m','y']
    # Markers
    markers = ['o','s','^', 'v', '<', '>','*']
    # Line style
    linestyles = ['-','--','-.', ':','-','--','-.']
    

    ######################## READ INPUT/OUTPUT FILES ##########################
    k = 0
    ind_ini_letter = sim_names[k].rfind('/') + 1
    print("##### CASE "+str(k+1)+": "+sim_names[k][ind_ini_letter::]+" #####")
    # Obtain paths to simulation files
#    path_picM         = sim_names[0]+"/SET/inp/PIC_mesh.hdf5"
    path_picM         = sim_names[0]+"/SET/inp/"+PIC_mesh_file_name[0]
    path_simstate_inp = sim_names[0]+"/CORE/inp/SimState.hdf5"
    path_simstate_out = sim_names[0]+"/CORE/out/SimState.hdf5"
    path_postdata_out = sim_names[0]+"/CORE/out/PostData.hdf5"
    path_simparams_inp = sim_names[0]+"/CORE/inp/sim_params.inp"
    print("Reading results...")
    [num_ion_spe,num_neu_spe,Z_ion_spe,n_mp_cell_i,n_mp_cell_n,n_mp_cell_i_min,
           n_mp_cell_i_max,n_mp_cell_n_min,n_mp_cell_n_max,min_ion_plasma_density,
           m_A,spec_refl_prob,ene_bal,points,zs,rs,zscells,rscells,dims,
           nodes_flag,cells_flag,cells_vol,volume,vol,ind_maxr_c,ind_maxz_c,nr_c,nz_c,
           eta_max,eta_min,xi_top,xi_bottom,time,time_fast,steps,steps_fast,dt,dt_e,
           nsteps,nsteps_fast,nsteps_eFld,faces,nodes,elem_n,boundary_f,face_geom,elem_geom,
           versors_e,versors_f,n_faces,n_elems,n_faces_boundary,bIDfaces_Dwall,bIDfaces_Awall,
           bIDfaces_FLwall,IDfaces_Dwall,IDfaces_Awall,IDfaces_FLwall,zfaces_Dwall,
           rfaces_Dwall,Afaces_Dwall,zfaces_Awall,rfaces_Awall,Afaces_Awall,
           zfaces_FLwall,rfaces_FLwall,Afaces_FLwall,zfaces_Cwall,rfaces_Cwall,Afaces_Cwall,
           cath_elem,z_cath,r_cath,V_cath,mass,ssIons1,ssIons2,ssNeutrals1,ssNeutrals2,
           n_mp_i1_list,n_mp_i2_list,n_mp_n1_list,n_mp_n2_list,
           alpha_ano,alpha_ano_e,alpha_ano_q,alpha_ine,alpha_ine_q,
           alpha_ano_elems,alpha_ano_e_elems,alpha_ano_q_elems,alpha_ine_elems,
           alpha_ine_q_elems,alpha_ano_faces,alpha_ano_e_faces,alpha_ano_q_faces,
           alpha_ine_faces,alpha_ine_q_faces,
           phi,phi_elems,phi_faces,Ez,Er,Efield,Bz,Br,Bfield,Te,Te_elems,Te_faces,
           je_mag_elems,je_perp_elems,je_theta_elems,je_para_elems,je_z_elems,je_r_elems,
           je_mag_faces,je_perp_faces,je_theta_faces,je_para_faces,je_z_faces,je_r_faces,
           cs01,cs02,cs03,cs04,nn1,nn2,nn3,ni1,ni2,ni3,ni4,
           ne,ne_elems,ne_faces,fn1_x,fn1_y,fn1_z,fn2_x,fn2_y,fn2_z,fn3_x,fn3_y,fn3_z,
           fi1_x,fi1_y,fi1_z,fi2_x,fi2_y,fi2_z,fi3_x,fi3_y,fi3_z,fi4_x,fi4_y,fi4_z,
           un1_x,un1_y,un1_z,un2_x,un2_y,un2_z,un3_x,un3_y,un3_z,
           ui1_x,ui1_y,ui1_z,ui2_x,ui2_y,ui2_z,ui3_x,ui3_y,ui3_z,ui4_x,ui4_y,ui4_z,
           ji1_x,ji1_y,ji1_z,ji2_x,ji2_y,ji2_z,ji3_x,ji3_y,ji3_z,ji4_x,ji4_y,ji4_z,
           je_r,je_t,je_z,je_perp,je_para,ue_r,ue_t,ue_z,
           ue_perp,ue_para,uthetaExB,Tn1,Tn2,Tn3,Ti1,Ti2,Ti3,Ti4,
           n_mp_n1,n_mp_n2,n_mp_n3,n_mp_i1,n_mp_i2,n_mp_i3,n_mp_i4,
           avg_w_n1,avg_w_n2,avg_w_i1,avg_w_i2,neu_gen_weights1,neu_gen_weights2,
           ion_gen_weights1,ion_gen_weights2,surf_elems,n_imp_elems,imp_elems,
           imp_elems_kbc,imp_elems_MkQ1,imp_elems_Te,imp_elems_dphi_kbc,
           imp_elems_dphi_sh,imp_elems_nQ1,imp_elems_nQ2,imp_elems_ion_flux_in1,
           imp_elems_ion_flux_out1,imp_elems_ion_ene_flux_in1,
           imp_elems_ion_ene_flux_out1,imp_elems_ion_imp_ene1,
           imp_elems_ion_flux_in2,imp_elems_ion_flux_out2,
           imp_elems_ion_ene_flux_in2,imp_elems_ion_ene_flux_out2,
           imp_elems_ion_imp_ene2,imp_elems_neu_flux_in1,imp_elems_neu_flux_out1,
           imp_elems_neu_ene_flux_in1,imp_elems_neu_ene_flux_out1,
           imp_elems_neu_imp_ene1,imp_elems_neu_flux_in2,imp_elems_neu_flux_out2,
           imp_elems_neu_ene_flux_in2,imp_elems_neu_ene_flux_out2,
           imp_elems_neu_imp_ene2,tot_mass_mp_neus,tot_mass_mp_ions,tot_num_mp_neus,
           tot_num_mp_ions,tot_mass_exit_neus,tot_mass_exit_ions,mass_mp_neus,
           mass_mp_ions,num_mp_neus,num_mp_ions,avg_dens_mp_neus,avg_dens_mp_ions,
           eta_u,eta_prod,eta_thr,eta_div,eta_cur,thrust,thrust_ion,thrust_neu,thrust_e,
           thrust_m,thrust_pres,Id_inst,Id,Vd_inst,Vd,I_beam,I_tw_tot,Pd,Pd_inst,P_mat,
           P_inj,P_inf,P_ion,P_ex,P_use_tot_i,P_use_tot_n,P_use_tot,P_use_z_i,P_use_z_n,
           P_use_z_e,P_use_z,qe_wall,qe_wall_inst,Pe_faces_Dwall,Pe_faces_Awall,
           Pe_faces_FLwall,Pe_faces_Dwall_inst,Pe_faces_Awall_inst,Pe_faces_FLwall_inst,
           Pe_Dwall,Pe_Awall,Pe_FLwall,Pe_Dwall_inst,Pe_Awall_inst,Pe_FLwall_inst, 
           Pe_Cwall,Pe_Cwall_inst,
           Pi_Dwall,Pi_Awall,Pi_FLwall,Pi_FLwall_nonz,Pi_Cwall,Pn_Dwall,Pn_Awall,Pn_FLwall,
           Pn_FLwall_nonz,Pn_Cwall,P_Dwall,P_Awall,P_FLwall,Pwalls,Pionex,Ploss,Psource,Pthrust,
           Pnothrust,Pnothrust_walls,Pturb,balP,err_balP,ctr_Pd,ctr_Ploss,ctr_Pwalls,
           ctr_Pionex,ctr_P_DAwalls,ctr_P_FLwalls,ctr_P_FLwalls_in,ctr_P_FLwalls_i,
           ctr_P_FLwalls_n,ctr_P_FLwalls_e,balP_Pthrust,err_balP_Pthrust,
           ctr_balPthrust_Pd,ctr_balPthrust_Pnothrust,ctr_balPthrust_Pthrust,
           ctr_balPthrust_Pnothrust_walls,ctr_balPthrust_Pnothrust_ionex,
           err_def_balP,Isp_s,Isp_ms,
           dMdt_i1,dMdt_i2,dMdt_i3,dMdt_i4,dMdt_n1,dMdt_n2,dMdt_n3,dMdt_tot,
           mflow_coll_i1,mflow_coll_i2,mflow_coll_i3,mflow_coll_i4,mflow_coll_n1,
           mflow_coll_n2,mflow_coll_n3,mflow_fw_i1,mflow_fw_i2,mflow_fw_i3,
           mflow_fw_i4,mflow_fw_n1,mflow_fw_n2,mflow_fw_n3,mflow_tw_i1,mflow_tw_i2,
           mflow_tw_i3,mflow_tw_i4,mflow_tw_n1,mflow_tw_n2,mflow_tw_n3,
           mflow_ircmb_picS_n1,mflow_ircmb_picS_n2,mflow_ircmb_picS_n3,
           mflow_inj_i1,mflow_fwinf_i1,mflow_fwmat_i1,mflow_fwcat_i1,
           mflow_inj_i2,mflow_fwinf_i2,mflow_fwmat_i2,mflow_fwcat_i2,
           mflow_inj_i3,mflow_fwinf_i3,mflow_fwmat_i3,mflow_fwcat_i3,
           mflow_inj_i4,mflow_fwinf_i4,mflow_fwmat_i4,mflow_fwcat_i4,
           mflow_inj_n1,mflow_fwinf_n1,mflow_fwmat_n1,mflow_fwcat_n1,
           mflow_inj_n2,mflow_fwinf_n2,mflow_fwmat_n2,mflow_fwcat_n2,
           mflow_inj_n3,mflow_fwinf_n3,mflow_fwmat_n3,mflow_fwcat_n3,
           mflow_twa_i1,mflow_twinf_i1,mflow_twmat_i1,mflow_twcat_i1,
           mflow_twa_i2,mflow_twinf_i2,mflow_twmat_i2,mflow_twcat_i2,
           mflow_twa_i3,mflow_twinf_i3,mflow_twmat_i3,mflow_twcat_i3,
           mflow_twa_i4,mflow_twinf_i4,mflow_twmat_i4,mflow_twcat_i4,
           mflow_twa_n1,mflow_twinf_n1,mflow_twmat_n1,mflow_twcat_n1,
           mflow_twa_n2,mflow_twinf_n2,mflow_twmat_n2,mflow_twcat_n2,
           mflow_twa_n3,mflow_twinf_n3,mflow_twmat_n3,mflow_twcat_n3,
           mbal_n1,mbal_n2,mbal_n3,mbal_i1,mbal_i2,mbal_i3,mbal_i4,mbal_tot,
           err_mbal_n1,err_mbal_n2,err_mbal_n3,err_mbal_i1,err_mbal_i2,
           err_mbal_i3,err_mbal_i4,err_mbal_tot,ctr_mflow_coll_n1,
           ctr_mflow_fw_n1,ctr_mflow_tw_n1,ctr_mflow_coll_i1,ctr_mflow_fw_i1,
           ctr_mflow_tw_i1,ctr_mflow_coll_i2,ctr_mflow_fw_i2,ctr_mflow_tw_i2,
           ctr_mflow_coll_tot,ctr_mflow_fw_tot,ctr_mflow_tw_tot,
           dEdt_i1,dEdt_i2,dEdt_i3,dEdt_i4,dEdt_n1,dEdt_n2,dEdt_n3,
           eneflow_coll_i1,eneflow_coll_i2,eneflow_coll_i3,eneflow_coll_i4,
           eneflow_coll_n1,eneflow_coll_n2,eneflow_coll_n3,eneflow_fw_i1,
           eneflow_fw_i2,eneflow_fw_i3,eneflow_fw_i4,eneflow_fw_n1,eneflow_fw_n2,
           eneflow_fw_n3,eneflow_tw_i1,eneflow_tw_i2,eneflow_tw_i3,eneflow_tw_i4,
           eneflow_tw_n1,eneflow_tw_n2,eneflow_tw_n3,Pfield_i1,Pfield_i2,
           Pfield_i3,Pfield_i4,eneflow_inj_i1,eneflow_fwinf_i1,eneflow_fwmat_i1,
           eneflow_inj_i2,eneflow_fwinf_i2,eneflow_fwmat_i2,
           eneflow_inj_i3,eneflow_fwinf_i3,eneflow_fwmat_i3,
           eneflow_inj_i4,eneflow_fwinf_i4,eneflow_fwmat_i4,
           eneflow_inj_n1,eneflow_fwinf_n1,eneflow_fwmat_n1,
           eneflow_inj_n2,eneflow_fwinf_n2,eneflow_fwmat_n2,
           eneflow_inj_n3,eneflow_fwinf_n3,eneflow_fwmat_n3,
           eneflow_twa_i1,eneflow_twinf_i1,eneflow_twmat_i1,
           eneflow_twa_i2,eneflow_twinf_i2,eneflow_twmat_i2,
           eneflow_twa_i3,eneflow_twinf_i3,eneflow_twmat_i3,
           eneflow_twa_i4,eneflow_twinf_i4,eneflow_twmat_i4,
           eneflow_twa_n1,eneflow_twinf_n1,eneflow_twmat_n1,
           eneflow_twa_n2,eneflow_twinf_n2,eneflow_twmat_n2,
           eneflow_twa_n3,eneflow_twinf_n3,eneflow_twmat_n3,
           ndot_ion01_n1,ndot_ion02_n1,ndot_ion12_i1,ndot_ion01_n2,
           ndot_ion02_n2,ndot_ion01_n3,ndot_ion02_n3,ndot_ion12_i3,
           ndot_CEX01_i3,ndot_CEX02_i4,
           cath_type,ne_cath,Te_cath,
           nu_cath,ndot_cath,Q_cath,P_cath,V_cath_tot,ne_cath_avg,
           F_theta,Hall_par,Hall_par_eff,nu_e_tot,nu_e_tot_eff,nu_en,nu_ei1,
           nu_ei2,nu_i01,nu_i02,nu_i12,nu_ex,
           F_theta_elems,Hall_par_elems,Hall_par_eff_elems,nu_e_tot_elems,
           nu_e_tot_eff_elems,F_theta_faces,Hall_par_faces,Hall_par_eff_faces,
           nu_e_tot_faces,nu_e_tot_eff_faces,nu_en_elems,nu_ei1_elems,
           nu_ei2_elems,nu_i01_elems,nu_i02_elems,nu_i12_elems,nu_ex_elems,
           nu_en_faces,nu_ei1_faces,nu_ei2_faces,nu_i01_faces,nu_i02_faces,
           nu_i12_faces,nu_ex_faces, 
           felec_para_elems,felec_para_faces,felec_perp_elems,felec_perp_faces,
           felec_z_elems,felec_z_faces,felec_r_elems,felec_r_faces,
           Boltz,Boltz_dim,Pfield_e,Ebal_e,
           dphi_sh_b,dphi_sh_b_Te,imp_ene_e_b,imp_ene_e_b_Te,imp_ene_e_wall,
           imp_ene_e_wall_Te,ge_b,ge_b_acc,ge_sb_b,ge_sb_b_acc,delta_see,
           delta_see_acc,err_interp_n,n_cond_wall,Icond,Vcond,Icath,phi_inf,
           I_inf,f_split,f_split_adv,f_split_qperp,f_split_qpara,f_split_qb,
           f_split_Pperp,f_split_Ppara,f_split_ecterm,f_split_inel] = HET_sims_read(path_simstate_inp,path_simstate_out,
                                                                                    path_postdata_out,path_simparams_inp,
                                                                                    path_picM,allsteps_flag,timestep,read_inst_data,
                                                                                    read_part_lists,read_flag,oldpost_sim,oldsimparams_sim)
                                                    
    [Br,Bz,Bfield,phi,Er,Ez,Efield,nn1,
       nn2,nn3,ni1,ni2,ni3,ni4,ne,fn1_x,fn1_y,fn1_z,fn2_x,fn2_y,
       fn2_z,fn3_x,fn3_y,fn3_z,fi1_x,fi1_y,fi1_z,fi2_x,fi2_y,
       fi2_z,fi3_x,fi3_y,fi3_z,fi4_x,fi4_y,fi4_z,un1_x,un1_y,
       un1_z,un2_x,un2_y,un2_z,un3_x,un3_y,un3_z,ui1_x,ui1_y,
       ui1_z,ui2_x,ui2_y,ui2_z,ui3_x,ui3_y,ui3_z,ui4_x,ui4_y,
       ui4_z,ji1_x,ji1_y,ji1_z,ji2_x,ji2_y,ji2_z,ji3_x,ji3_y,
       ji3_z,ji4_x,ji4_y,ji4_z,je_r,je_t,je_z,je_perp,je_para,
       ue_r,ue_t,ue_z,ue_perp,ue_para,uthetaExB,Tn1,Tn2,Tn3,
       Ti1,Ti2,Ti3,Ti4,Te,n_mp_n1,n_mp_n2,n_mp_n3,
       n_mp_i1,n_mp_i2,n_mp_i3,n_mp_i4,avg_w_n1,avg_w_n2,
       avg_w_i1,avg_w_i2,neu_gen_weights1,neu_gen_weights2,
       ion_gen_weights1,ion_gen_weights2,ndot_ion01_n1,
       ndot_ion02_n1,ndot_ion12_i1,ndot_ion01_n2,ndot_ion02_n2,
       ndot_ion01_n3,ndot_ion02_n3,ndot_ion12_i3,ndot_CEX01_i3,ndot_CEX02_i4,
       F_theta,Hall_par,Hall_par_eff,nu_e_tot,nu_e_tot_eff,nu_en,nu_ei1,
       nu_ei2,nu_i01,nu_i02,nu_i12,nu_ex,err_interp_n,f_split_adv,
       f_split_qperp,f_split_qpara,f_split_qb,f_split_Pperp,
       f_split_Ppara,f_split_ecterm,f_split_inel,alpha_ano,
       alpha_ano_e,alpha_ano_q,alpha_ine,alpha_ine_q] = HET_sims_plotvars(nodes_flag,cells_flag,Br,Bz,Bfield,phi,Er,Ez,Efield,nn1,
                                                                          nn2,nn3,ni1,ni2,ni3,ni4,ne,fn1_x,fn1_y,fn1_z,fn2_x,fn2_y,
                                                                          fn2_z,fn3_x,fn3_y,fn3_z,fi1_x,fi1_y,fi1_z,fi2_x,fi2_y,
                                                                          fi2_z,fi3_x,fi3_y,fi3_z,fi4_x,fi4_y,fi4_z,un1_x,un1_y,
                                                                          un1_z,un2_x,un2_y,un2_z,un3_x,un3_y,un3_z,ui1_x,ui1_y,
                                                                          ui1_z,ui2_x,ui2_y,ui2_z,ui3_x,ui3_y,ui3_z,ui4_x,ui4_y,
                                                                          ui4_z,ji1_x,ji1_y,ji1_z,ji2_x,ji2_y,ji2_z,ji3_x,ji3_y,
                                                                          ji3_z,ji4_x,ji4_y,ji4_z,je_r,je_t,je_z,je_perp,je_para,
                                                                          ue_r,ue_t,ue_z,ue_perp,ue_para,uthetaExB,Tn1,Tn2,Tn3,
                                                                          Ti1,Ti2,Ti3,Ti4,Te,n_mp_n1,n_mp_n2,n_mp_n3,
                                                                          n_mp_i1,n_mp_i2,n_mp_i3,n_mp_i4,avg_w_n1,avg_w_n2,
                                                                          avg_w_i1,avg_w_i2,neu_gen_weights1,neu_gen_weights2,
                                                                          ion_gen_weights1,ion_gen_weights2,ndot_ion01_n1,
                                                                          ndot_ion02_n1,ndot_ion12_i1,ndot_ion01_n2,ndot_ion02_n2,
                                                                          ndot_ion01_n3,ndot_ion02_n3,ndot_ion12_i3,ndot_CEX01_i3,
                                                                          ndot_CEX02_i4,F_theta,Hall_par,Hall_par_eff,nu_e_tot,
                                                                          nu_e_tot_eff,nu_en,nu_ei1,nu_ei2,nu_i01,nu_i02,nu_i12,nu_ex,
                                                                          err_interp_n,f_split_adv,f_split_qperp,f_split_qpara,
                                                                          f_split_qb,f_split_Pperp,f_split_Ppara,f_split_ecterm,
                                                                          f_split_inel,alpha_ano,alpha_ano_e,alpha_ano_q,alpha_ine,
                                                                          alpha_ine_q)
                                                                         
                                                    
    [Br_plot,Bz_plot,Bfield_plot,phi_plot,Er_plot,Ez_plot,Efield_plot,
           nn1_plot,nn2_plot,nn3_plot,ni1_plot,ni2_plot,ni3_plot,ni4_plot,
           ne_plot,fn1_x_plot,fn1_y_plot,fn1_z_plot,fn2_x_plot,fn2_y_plot,
           fn2_z_plot,fn3_x_plot,fn3_y_plot,fn3_z_plot,fi1_x_plot,fi1_y_plot,
           fi1_z_plot,fi2_x_plot,fi2_y_plot,fi2_z_plot,fi3_x_plot,fi3_y_plot,
           fi3_z_plot,fi4_x_plot,fi4_y_plot,fi4_z_plot,un1_x_plot,un1_y_plot,
           un1_z_plot,un2_x_plot,un2_y_plot,un2_z_plot,un3_x_plot,un3_y_plot,
           un3_z_plot,ui1_x_plot,ui1_y_plot,ui1_z_plot,ui2_x_plot,ui2_y_plot,
           ui2_z_plot,ui3_x_plot,ui3_y_plot,ui3_z_plot,ui4_x_plot,ui4_y_plot,
           ui4_z_plot,ji1_x_plot,ji1_y_plot,ji1_z_plot,ji2_x_plot,ji2_y_plot,
           ji2_z_plot,ji3_x_plot,ji3_y_plot,ji3_z_plot,ji4_x_plot,ji4_y_plot,
           ji4_z_plot,je_r_plot,je_t_plot,je_z_plot,je_perp_plot,je_para_plot,
           ue_r_plot,ue_t_plot,ue_z_plot,ue_perp_plot,ue_para_plot,uthetaExB_plot,
           Tn1_plot,Tn2_plot,Tn3_plot,Ti1_plot,Ti2_plot,Ti3_plot,Ti4_plot,
           Te_plot,n_mp_n1_plot,n_mp_n2_plot,n_mp_n3_plot,
           n_mp_i1_plot,n_mp_i2_plot,n_mp_i3_plot,n_mp_i4_plot,
           avg_w_n1_plot,avg_w_n2_plot,avg_w_i1_plot,
           avg_w_i2_plot,neu_gen_weights1_plot,neu_gen_weights2_plot,
           ion_gen_weights1_plot,ion_gen_weights2_plot,ndot_ion01_n1_plot,
           ndot_ion02_n1_plot,ndot_ion12_i1_plot,ndot_ion01_n2_plot,
           ndot_ion02_n2_plot,ndot_ion01_n3_plot,ndot_ion02_n3_plot,
           ndot_ion12_i3_plot,ndot_CEX01_i3_plot,ndot_CEX02_i4_plot,ne_cath_plot,
           nu_cath_plot,ndot_cath_plot,
           F_theta_plot,Hall_par_plot,Hall_par_eff_plot,nu_e_tot_plot,
           nu_e_tot_eff_plot,nu_en_plot,nu_ei1_plot,nu_ei2_plot,nu_i01_plot,
           nu_i02_plot,nu_i12_plot,nu_ex_plot,err_interp_n_plot,f_split_adv_plot,
           f_split_qperp_plot,f_split_qpara_plot,f_split_qb_plot,
           f_split_Pperp_plot,f_split_Ppara_plot,f_split_ecterm_plot,
           f_split_inel_plot] = HET_sims_cp_vars(Br,Bz,Bfield,phi,Er,Ez,Efield,nn1,
                                                 nn2,nn3,ni1,ni2,ni3,ni4,ne,fn1_x,fn1_y,fn1_z,fn2_x,fn2_y,
                                                 fn2_z,fn3_x,fn3_y,fn3_z,fi1_x,fi1_y,fi1_z,fi2_x,fi2_y,
                                                 fi2_z,fi3_x,fi3_y,fi3_z,fi4_x,fi4_y,fi4_z,un1_x,un1_y,
                                                 un1_z,un2_x,un2_y,un2_z,un3_x,un3_y,un3_z,ui1_x,ui1_y,
                                                 ui1_z,ui2_x,ui2_y,ui2_z,ui3_x,ui3_y,ui3_z,ui4_x,ui4_y,
                                                 ui4_z,ji1_x,ji1_y,ji1_z,ji2_x,ji2_y,ji2_z,ji3_x,ji3_y,
                                                 ji3_z,ji4_x,ji4_y,ji4_z,je_r,je_t,je_z,je_perp,je_para,
                                                 ue_r,ue_t,ue_z,ue_perp,ue_para,uthetaExB,Tn1,Tn2,Tn3,
                                                 Ti1,Ti2,Ti3,Ti4,Te,n_mp_n1,n_mp_n2,n_mp_n3,n_mp_i1,n_mp_i2,
                                                 n_mp_i3,n_mp_i4,avg_w_n1,avg_w_n2,
                                                 avg_w_i1,avg_w_i2,neu_gen_weights1,neu_gen_weights2,
                                                 ion_gen_weights1,ion_gen_weights2,ndot_ion01_n1,
                                                 ndot_ion02_n1,ndot_ion12_i1,ndot_ion01_n2,ndot_ion02_n2,
                                                 ndot_ion01_n3,ndot_ion02_n3,ndot_ion12_i3,ndot_CEX01_i3,
                                                 ndot_CEX02_i4,ne_cath,nu_cath,
                                                 ndot_cath,F_theta,Hall_par,Hall_par_eff,nu_e_tot,
                                                 nu_e_tot_eff,nu_en,nu_ei1,nu_ei2,nu_i01,nu_i02,nu_i12,nu_ex,
                                                 err_interp_n,f_split_adv,f_split_qperp,f_split_qpara,
                                                 f_split_qb,f_split_Pperp,f_split_Ppara,f_split_ecterm,
                                                 f_split_inel)
                                                    
    # B field in Gauss
    Bfield_plot = Bfield_plot*1e4
    Br_plot     = Br_plot*1e4
    Bz_plot     = Bz_plot*1e4 
    
    # Obtain surface-averaged Bfield value over free loss boundary (or plume (P) boundary)
    vec_z2       = zs[0,int(xi_bottom+1)::]
    vec_z1       = zs[0,int(xi_bottom):-1:1]
    vec_r2       = rs[-1,int(xi_bottom+1)::]
    vec_r1       = rs[-1,int(xi_bottom):-1:1]
    surf_lat     = np.zeros(len(vec_z2),dtype=float)
    surf_lat_tot = 0.0
    for index_node in range(0,len(surf_lat)):
        Lpanel               = np.sqrt( (vec_z2[index_node]-vec_z1[index_node])**2 + (vec_r2[index_node] - vec_r1[index_node])**2 )
        rpanel               = 0.5*(vec_r2[index_node]+vec_r1[index_node])
        surf_lat[index_node] = 2.0*np.pi*rpanel*Lpanel
        surf_lat_tot         = surf_lat_tot + surf_lat[index_node]
    Bfield_FL_lat_int = np.dot(0.5*(Bfield_plot[-1,int(xi_bottom+1)::] + Bfield_plot[-1,int(xi_bottom):-1:1]),surf_lat)/surf_lat_tot
    vec_r             = rs[:,-1]
    Bfield_FL_ver_int = 2*np.pi*np.trapz(np.multiply(Bfield_plot[:,-1],rs[:,-1]),x=vec_r)/(np.pi*(rs[-1,-1]**2-rs[0,-1]**2))
    Bfield_FL_int     = (Bfield_FL_lat_int*surf_lat_tot + Bfield_FL_ver_int*np.pi*(rs[-1,-1]**2-rs[0,-1]**2))/(surf_lat_tot+np.pi*(rs[-1,-1]**2-rs[0,-1]**2))
    
    Bfield_avg_freeloss_lat = np.mean(Bfield_plot[-1,int(xi_top)::])
    Bfield_avg_freeloss_ver = np.mean(Bfield_plot[:,-1])
    # Bfield_avg_freeloss = 0.5*(np.mean(Bfield_plot[-1,int(xi_top)::]) + Bfield_avg_freeloss_ver)
    Bfield_avg_freeloss = 0.5*(Bfield_avg_freeloss_lat + np.mean(Bfield_plot[:,-1]))
    print("Arithmetic average B at P boundary    (G)  = %15.8e" %Bfield_avg_freeloss)
    print("Arithmetic average B at Plat boundary (G)  = %15.8e" %Bfield_avg_freeloss_lat)
    print("Arithmetic average B at Pver boundary (G)  = %15.8e" %Bfield_avg_freeloss_ver)
    print("Surface-averaged B at P boundary      (G)  = %15.8e" %Bfield_FL_int)
    print("Surface-averaged B at Plat boundary   (G)  = %15.8e" %Bfield_FL_lat_int)
    print("Surface-averaged B at Pver boundary   (G)  = %15.8e" %Bfield_FL_ver_int)
    
    
    
    # Select the elements IDs to plot (these are Python standard)
#    elems_IDs_2          = np.where((elem_geom[1,:] > 0.05) & (elem_geom[1,:] < 0.15))[0]
#    elems_IDs_2          = np.where((elem_geom[1,:] > 0.01) & (elem_geom[1,:] < 0.225) & ((elem_geom[0,:] > 0.040)) & ((elem_geom[0,:] < 0.055)))[0]
#    elems_IDs_2          = np.where((elem_geom[1,:] > 0.03) & (elem_geom[1,:] < 0.11))[0]
#    elems_IDs_2          = np.where((elem_geom[1,:] > 0.06))[0] 
#    elems_IDs_2          = np.where((elem_geom[1,:] < 0.02))[0]
    
#    elems_IDs_2          = np.where((elem_geom[1,:] > 0.055) & (elem_geom[1,:] < 0.07) & ((elem_geom[0,:] > 0.03)) & ((elem_geom[0,:] < 0.055)))[0]
#    elems_IDs_2          = np.where((elem_geom[1,:] > 0.078) & (elem_geom[1,:] < 0.40) & ((elem_geom[0,:] > 0.029)) & ((elem_geom[0,:] < 0.429)))[0]
#    elems_IDs_2          = np.where((elem_geom[1,:] > 0) & (elem_geom[1,:] < 0.15) & ((elem_geom[0,:] > 0.029)) & ((elem_geom[0,:] < 0.229)))[0]
    
    # faces_IDs           = np.where((face_geom[1,:] > 0) & (face_geom[1,:] < 0.07) & ((face_geom[0,:] > 0.145)) & ((face_geom[0,:] < 0.203)))[0]
    # faces_IDs            = np.where((face_geom[0,:] >= 0.029) & (face_geom[0,:] <= 0.18) & (face_geom[1,:] <= 0.125))[0]
    # faces_IDs            = faces_IDs[np.where(faces[2,faces_IDs-1] == 1)]
 

    
    # Anode elements
#    elems_IDs_2 = [4804,4805,4811,4812,4813,4814,4815,2843,2844,2822,2823,2825] # em2 anode elements (python and HDF5 view ID)
    elems_IDs_2 = []
#    elems_IDs_2          = np.where((elem_geom[0,:] < 0.002))[0]
#    elems_IDs_2          = np.where((elem_geom[0,:] > 0.0253) & (elem_geom[1,:] < 0.04))[0]
#    elems_IDs_2          = np.where((elem_geom[0,:] > 0.029) & (elem_geom[0,:] < 0.18) & (elem_geom[1,:] < 0.121))[0]
    # elems_IDs_2          = np.where((elem_geom[0,:] > 0.029) & (elem_geom[0,:] < 0.2) & (elem_geom[1,:] < 0.15))[0]
    # elems_IDs_2          = np.where((elem_geom[0,:] > 0.029) & (elem_geom[0,:] <= 0.229) & (elem_geom[1,:] <= 0.30))[0]
    # elems_IDs_2          = np.where((elem_geom[0,:] > 0.029) & (elem_geom[0,:] <= 0.329) & (elem_geom[1,:] <= 0.35))[0]
    # elems_IDs_2          = np.where((elem_geom[0,:] > 0.20) & (elem_geom[0,:] <= 0.229) & (elem_geom[1,:] <= 0.30))[0]
    
#    faces_IDs_cond =  np.where((face_geom[1,:] == 0.074995) & (face_geom[0,:] > 0.01) & (face_geom[0,:] < 0.02))[0]
#    faces_IDs_cond =  [4319-1,167-1,168-1,4292-1,3706-1,91-1,90-1,3749-1,4267-1,4224-1,4223-1]
    # faces_IDs_cond =  [4319-1,167-1,168-1,4292-1,3706-1,91-1,90-1,3749-1,4267-1,4224-1,4223-1,7611-1,4180-1,3857-1,3454-1,3455-1,7595-1,7594-1,7828-1,7826-1,7823-1,7824-1,7819-1,7820-1,7815-1]
    faces_IDs_cond = []
    
    # Distances in cm
    rs             = rs*1e2
    zs             = zs*1e2
    zscells        = zscells*1e2
    rscells        = rscells*1e2
    points         = points*1e2    
    nodes[0,:]     = nodes[0,:]*1e2
    nodes[1,:]     = nodes[1,:]*1e2
    elem_geom[0,:] = elem_geom[0,:]*1e2
    elem_geom[1,:] = elem_geom[1,:]*1e2
    face_geom[0,:] = face_geom[0,:]*1e2
    face_geom[1,:] = face_geom[1,:]*1e2
    z_cath         = z_cath*1e2
    r_cath         = r_cath*1e2
    tol            = 0.5
#    tol            = 0.0
    xmin = points[:,0].min()-tol
    xmax = points[:,0].max()+tol
    ymin = points[:,1].min()-tol
    ymax = points[:,1].max()+tol
    
    zs_plot = np.copy(zs)
    rs_plot = np.copy(rs)
    for i in range(0,dims[0]):
        for j in range(0,dims[1]):
            if nodes_flag[i,j] == 0:
                rs_plot[i,j] = np.NaN
                zs_plot[i,j] = np.NaN
    
    # Obtain automatically the cathode B line
    # cath_elem[0] = 3858-1            
    # Obtain cathode Bline
    lambda_tol  = 1e-4
    # lambda_tol  = 1e-6
    # lambda_tol  = 1e-3
    cath_Bline_IDs = np.zeros(0,dtype=int)
    cath_Bline_z   = np.zeros(0,dtype=float)
    cath_Bline_r   = np.zeros(0,dtype=float)
    cath_Bline_d   = np.zeros(0,dtype=float)
    cath_Bline_IDs = np.append(cath_Bline_IDs,np.array([cath_elem[0]]),axis=0)
    if cath_type == 1:
        cath_lambda = face_geom[2,cath_elem[0]]
        cath_Bline_z = np.append(cath_Bline_z,np.array([face_geom[0,cath_elem[0]]]),axis=0)
        cath_Bline_r = np.append(cath_Bline_r,np.array([face_geom[1,cath_elem[0]]]),axis=0)
    elif cath_type == 2:
        cath_lambda = elem_geom[2,cath_elem[0]]
        cath_Bline_z = np.append(cath_Bline_z,np.array([elem_geom[0,cath_elem[0]]]),axis=0)
        cath_Bline_r = np.append(cath_Bline_r,np.array([elem_geom[1,cath_elem[0]]]),axis=0)
    cath_Bline_d = np.append(cath_Bline_d,np.array([0.0]),axis=0)
    

    for i in range(0,n_elems):
        if abs(elem_geom[2,i]-cath_lambda) < abs(cath_lambda)*lambda_tol:
            cath_Bline_IDs = np.append(cath_Bline_IDs,np.array([i]),axis=0)
            cath_Bline_z = np.append(cath_Bline_z,np.array([elem_geom[0,i]]),axis=0)
            cath_Bline_r = np.append(cath_Bline_r,np.array([elem_geom[1,i]]),axis=0)
            dcath = np.sqrt((cath_Bline_z[-1] - cath_Bline_z[0])**2 + (cath_Bline_r[-1] - cath_Bline_r[0])**2)
            cath_Bline_d = np.append(cath_Bline_d,np.array([dcath]),axis=0)

    cath_Bline_npoints = len(cath_Bline_IDs)
    pos_sort  = np.argsort(cath_Bline_d)
    cath_Bline_d = cath_Bline_d[pos_sort]
    cath_Bline_IDs = cath_Bline_IDs[pos_sort]
    cath_Bline_z   = cath_Bline_z[pos_sort]
    cath_Bline_r   = cath_Bline_r[pos_sort]
    
    # for ind_b in range(0,n_faces_boundary):
    #     i = boundary_f[ind_b]
    #     dcath = np.sqrt((face_geom[0,i] - cath_Bline_z[0])**2 + (face_geom[1,i] - cath_Bline_r[0])**2)
    #     if (abs(face_geom[2,i] - cath_lambda) < abs(cath_lambda)*lambda_tol) and (dcath > cath_Bline_d[-1]):
    #         cath_Bline_z = np.append(cath_Bline_z,np.array([face_geom[0,i]]),axis=0)
    #         cath_Bline_r = np.append(cath_Bline_r,np.array([face_geom[1,i]]),axis=0)
    #         cath_Bline_d = np.append(cath_Bline_d,np.array([dcath]),axis=0)
    
    print("min r cathBline = "+str(np.min(cath_Bline_r)))
    
    
    # Obtain automatically the B=0 line in plume
    if plot_B0_line == 1:
        B0_lambda = face_geom[2,B0_face_axis_ID]
        # ID of node at singular point at axis
        for i in range(0,2):
            if nodes[1,faces[i,B0_face_axis_ID]-1] == 0:
                B0_node_ID = faces[i,B0_face_axis_ID] - 1
                print("B0_node_ID (FORTRAN standard) = "+str(B0_node_ID+1))
    
        # lambda_tol  = 1e-4
        lambda_tol  = 1e-6
        # lambda_tol  = 1e-3
        B0_line_faceIDs = np.zeros(0,dtype=int)
        B0_line_facez   = np.zeros(0,dtype=float)
        B0_line_facer   = np.zeros(0,dtype=float)
        B0_line_faced   = np.zeros(0,dtype=float)
        B0_line_nodeIDs = np.zeros(0,dtype=int)
        B0_line_nodez   = np.zeros(0,dtype=float)
        B0_line_noder   = np.zeros(0,dtype=float)
        B0_line_noded   = np.zeros(0,dtype=float)
        B0_line_nodeIDs = np.append(B0_line_nodeIDs,np.array([B0_node_ID]),axis=0)
        B0_line_nodez   = np.append(B0_line_nodez,np.array([nodes[0,B0_node_ID]]),axis=0)
        B0_line_noder   = np.append(B0_line_noder,np.array([nodes[1,B0_node_ID]]),axis=0)
        B0_line_noded   = np.append(B0_line_noded,np.array([0.0]),axis=0)
        
        for i in range(0,n_faces):
            # if (faces[2,i] == 1) and (abs(face_geom[2,i]-B0_lambda) < abs(B0_lambda)*lambda_tol) and (face_geom[1,i] > face_geom[1,B0_face_axis_ID]):
            if (faces[2,i] == 1) and (abs(face_geom[2,i]-B0_lambda) < abs(B0_lambda)*lambda_tol):    
                B0_line_faceIDs = np.append(B0_line_faceIDs,np.array([i]),axis=0)
                B0_line_facez = np.append(B0_line_facez,np.array([face_geom[0,i]]),axis=0)
                B0_line_facer = np.append(B0_line_facer,np.array([face_geom[1,i]]),axis=0)
                dB0 = np.sqrt((B0_line_facez[-1] - B0_line_nodez[0])**2 + (B0_line_facer[-1] - B0_line_noder[0])**2)
                B0_line_faced = np.append(B0_line_faced,np.array([dB0]),axis=0)
                # Obtain information for nodes of current face
                for ind_n in range(0,2):
                    node_ID = faces[ind_n,i]-1
                    # Avoid the node at the axis, since this is the first node already stored
                    if nodes[1,node_ID] != 0:
                        B0_line_nodeIDs = np.append(B0_line_nodeIDs,np.array([node_ID]),axis=0)
                        B0_line_nodez = np.append(B0_line_nodez,np.array([nodes[0,node_ID]]),axis=0)
                        B0_line_noder = np.append(B0_line_noder,np.array([nodes[1,node_ID]]),axis=0)
                        dB0 = np.sqrt((B0_line_nodez[-1] - B0_line_nodez[0])**2 + (B0_line_noder[-1] - B0_line_noder[0])**2)
                        B0_line_noded = np.append(B0_line_noded,np.array([dB0]),axis=0)
    
        B0_line_face_npoints = len(B0_line_faceIDs)
        pos_sort_face  = np.argsort(B0_line_faced)
        B0_line_faced = B0_line_faced[pos_sort_face]
        B0_line_faceIDs = B0_line_faceIDs[pos_sort_face]
        B0_line_facez   = B0_line_facez[pos_sort_face]
        B0_line_facer   = B0_line_facer[pos_sort_face]
        
        B0_line_node_npoints = len(B0_line_nodeIDs)
        pos_sort_node  = np.argsort(B0_line_noded)
        B0_line_noded = B0_line_noded[pos_sort_node]
        B0_line_nodeIDs = B0_line_nodeIDs[pos_sort_node]
        B0_line_nodez   = B0_line_nodez[pos_sort_node]
        B0_line_noder   = B0_line_noder[pos_sort_node]
        
    # Obtain z,r coordinates of nodes forming the cathode B line if it is a line formed by given faces  
    faces_cath_Bline_nodez = np.zeros(0,dtype=float)
    faces_cath_Bline_noder = np.zeros(0,dtype=float)
    if faces_cath_Bline !=0:
        for i in faces_cath_Bline:
            # Obtain information for nodes of current face
            for ind_n in range(0,2):
                node_ID = faces[ind_n,i]-1
                faces_cath_Bline_nodez = np.append(faces_cath_Bline_nodez,np.array([nodes[0,node_ID]]),axis=0)
                faces_cath_Bline_noder = np.append(faces_cath_Bline_noder,np.array([nodes[1,node_ID]]),axis=0)

                
    # Convert given MFAM elements and faces IDs (if any) to Python standard
    if np.any(elems_IDs) != 0:
        for i in range(0,len(elems_IDs)):
            elems_IDs[i] = elems_IDs[i] - 1
            
            
    if np.any(faces_IDs) != 0:
        for i in range(0,len(faces_IDs)):
            faces_IDs[i] = faces_IDs[i] - 1
    
    # Add to faces_IDs the IDs of the MFAM boundary faces (if any) in Python standard
    # if np.any(faces_IDs_boundary) != 0:
    #     for i in range(0,len(faces_IDs_boundary)):
    #         faces_IDs.append(boundary_f[faces_IDs_boundary[i]])
    
    # Add to faces_IDs all the boundary faces IDs in Python standard
    # faces_IDs = list(faces_IDs)
    for i in range(0,len(boundary_f)):
        faces_IDs.append(boundary_f[i])
            
    # for i in range(0,len(boundary_f)):
    #     if face_geom[0,boundary_f[i]] < 2.95 and face_geom[1,boundary_f[i]] < 1:
    #         faces_IDs.append(boundary_f[i])    
            
            
    two_lines_elems = [1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 939, 941, 943, 945, 947, 949, 951, 953, 955, 957, 959, 961, 963, 965, 967, 969, 971, 973, 975, 977, 979, 981, 983, 985,  987,  989, 991, 993, 995,  997, 999, 1001, 1003, 1005, 1007, 1009, 1011, 1013, 1015, 1017, 1019, 1021, 1023, 1025, 1027, 1029, 1031, 1033, 1035, 1037, 1039, 1041, 1043, 1045, 1047, 1049, 1051, 1053, 1055, 1057, 1059, 1061, 1063, 1065, 1067, 1069, 1071, 1073, 1075, 1077, 1079, 1081, 1083, 1085, 1087, 1089, 1091, 1093, 1095, 1097, 1099, 1101, 1103, 1105, 1107, 1109] 
    
#    print("z_cath (cm) = %15.8e" %z_cath)
#    print("r_cath (cm) = %15.8e" %r_cath)
#    print("V_cath (m3) = %15.8e" %V_cath)
    print("z_cath (cm) =",z_cath)
    print("r_cath (cm) =",r_cath)
    print("V_cath (m3) =",V_cath)
    if np.any(elems_cath_Bline_2) != 0:
        print("elems_cath_Bline_2 (FORTRAN standard) = "+str(len(elems_cath_Bline_2)))
        print_elems_cath_Bline_2 = range(elems_cath_Bline_2[0]+1,elems_cath_Bline_2[-1]+2,1)
        print("elems_cath_Bline_2 (FORTRAN standard) = "+str(print_elems_cath_Bline_2))
    if np.any(elems_IDs_2) != 0:
        print("elems_IDs_2 (FORTRAN standard) = "+str(len(elems_IDs_2)))
        print_elems_IDs_2 = range(elems_IDs_2[0]+1,elems_IDs_2[-1]+2,1)
        print("elems_IDs_2 (FORTRAN standard) = "+str(elems_IDs_2))

    
#    # Do not plot units in axes
#    # SAFRAN CHEOPS 1: units in cm
##    L_c = 3.725
##    H_c = (0.074995-0.052475)*100
#    # HT5k: units in cm
#    L_c = 2.53
#    H_c = (0.0785-0.0565)*100
    # VHT_US (IEPC 2022)
#    L_c = 2.9
#    H_c = 2.22    
    # VHT_US LP and PPSX00 testcase1 (TFM Alejandro)
#    L_c = 2.5
#    H_c = 1.1
    
    # VHT_US LP and PPSX00 testcase2
#    L_c = 2.5
#    H_c = 1.5
    
    # Plot units in axes (cm)
    L_c = 1
    H_c = 1
    
    zs = zs/L_c
    rs = rs/H_c
    points[:,0] = points[:,0]/L_c
    points[:,1] = points[:,1]/H_c
    z_cath = z_cath/L_c
    r_cath = r_cath/H_c
    zscells = zscells/L_c
    rscells = rscells/H_c     
    nodes[0,:]     = nodes[0,:]/L_c
    nodes[1,:]     = nodes[1,:]/H_c
    elem_geom[0,:] = elem_geom[0,:]/L_c
    elem_geom[1,:] = elem_geom[1,:]/H_c
    face_geom[0,:] = face_geom[0,:]/L_c
    face_geom[1,:] = face_geom[1,:]/H_c
    xmin = xmin/L_c
    xmax = xmax/L_c
    ymin = ymin/H_c
    ymax = ymax/H_c
    zcat_pos = zcat_pos/L_c
    zs_plot = zs_plot/L_c
    rs_plot = rs_plot/H_c
    cath_Bline_z = cath_Bline_z/L_c
    cath_Bline_r = cath_Bline_r/H_c
    if plot_B0_line == 1:
        B0_line_facez = B0_line_facez/L_c
        B0_line_facer = B0_line_facer/H_c
        B0_line_nodez = B0_line_nodez/L_c
        B0_line_noder = B0_line_noder/H_c
    if faces_cath_Bline != 0:
        faces_cath_Bline_nodez = faces_cath_Bline_nodez/L_c
        faces_cath_Bline_noder  = faces_cath_Bline_noder/H_c
    
    
    cont_xlabel = '$z$ (cm)'
    cont_ylabel = '$r$ (cm)'
    
#    cont_xlabel = '$z/L_\mathrm{c}$'
#    cont_ylabel = '$r/H_\mathrm{c}$'
                                                        
    if picM_plots == 1:
        # Plot the PIC mesh
        plt.figure("picM")
        plt.plot(zs_plot,rs_plot,'ko-',linewidth = line_width,markersize = marker_size)
        plt.plot(zs_plot.transpose(),rs_plot.transpose(),'ko-',linewidth = line_width,markersize = marker_size)
        # Plot points defining mesh boundary
        # Inner wall
        plt.plot(points[0:3,0],points[0:3,1],'ro-',linewidth=line_width_boundary,markersize = marker_size)
        # Axis r = 0
        plt.plot(points[2:4,0],points[2:4,1],'mo-',linewidth=line_width_boundary,markersize = marker_size)
        # Free loss
        plt.plot(points[3:6,0],points[3:6,1],'bo-',linewidth=line_width_boundary,markersize = marker_size)
        # Outer wall
        plt.plot(points[5::,0],points[5::,1],'ro-',linewidth=line_width_boundary,markersize = marker_size)
        # Injection
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'go-',linewidth=line_width_boundary,markersize = marker_size)
        # Plot all mesh boundary points and domain points
        for i in range(0,dims[0]):
            for j in range(0,dims[1]):
                if nodes_flag[i,j] == -1:
                    if i == 0:
                        # Axis r = 0
                        plt.plot(zs[i,j],rs[i,j],'mo',markeredgecolor='m',markersize = marker_size)
                    elif j == dims[1] - 1 or i == dims[0] - 1:
                        # Free loss
                        plt.plot(zs[i,j],rs[i,j],'bo',markeredgecolor='b',markersize = marker_size)
                    elif j == xi_top or i == eta_max or j == xi_bottom or i == eta_min:
                        # Material wall
                        plt.plot(zs[i,j],rs[i,j],'ro',markeredgecolor='r',markersize = marker_size)
                    elif j == 0:
                        # Injection
                        plt.plot(zs[i,j],rs[i,j],'go',markeredgecolor='g',markersize = marker_size)
                if nodes_flag[i,j] == 1:
                    plt.plot(zs[i,j],rs[i,j],'ko',markersize = marker_size)
        plt.axis([xmin,xmax,ymin,ymax])
#        plt.gca().set_aspect('equal', adjustable='box')
        plt.title(r"PIC mesh",fontsize = font_size)
        plt.xlabel(cont_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.ylabel(cont_ylabel,fontsize= font_size)
        plt.yticks(fontsize = ticks_size) 
        if save_flag == 1:
            plt.savefig(path_out+"picM"+figs_format,bbox_inches='tight') 
            plt.close()
   

    if MFAM_plots == 1:
        # Plot the MFAM
        plt.figure("MFAM")
        ax = plt.gca()
        plot_MFAM(faces,nodes,line_width)
        # Plot points defining mesh boundary
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        # Plot the cathode magnetic line if given
        if np.any(elems_cath_Bline) != 0:
            plt.plot(elem_geom[0,elems_cath_Bline],elem_geom[1,elems_cath_Bline],'g-',linewidth = line_width_boundary+0.5,markersize = marker_size)
#            plt.plot(elem_geom[0,elems_cath_Bline_2],elem_geom[1,elems_cath_Bline_2],'g-',linewidth = line_width_boundary+0.5,markersize = marker_size)
        
        # Plot the cathode position        
#        plt.plot(z_cath,r_cath,'ys',linewidth = line_width_boundary,markersize = marker_size_cath)        
#        plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size_cath)        
        
        plt.axis([xmin,xmax,ymin,ymax])
#        plt.gca().set_aspect('equal', adjustable='box')
        plt.title(r"MFAM",fontsize = font_size)
        plt.xlabel(cont_xlabel,fontsize = font_size)
#        ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
        plt.xticks(fontsize = ticks_size) 
        plt.ylabel(cont_ylabel,fontsize= font_size)
#        ax.set_yticks(np.arange(0,rs[-1,-1],2))
        plt.yticks(fontsize = ticks_size) 
        
        if save_flag == 1:
            plt.savefig(path_out+"MFAM"+figs_format,bbox_inches='tight') 
            plt.close()


    if picM_MFAM_plots == 1:
        # Plot the picM and the MFAM
        fig_object = plt.figure("PIC-MFAM meshes")
        # ========================== PIC MESH =============================
        plt.plot(zs_plot,rs_plot,'ko-',linewidth = line_width,markersize = marker_size)
        plt.plot(zs_plot.transpose(),rs_plot.transpose(),'ko-',linewidth = line_width,markersize = marker_size)
        # Plot points defining mesh boundary
        plt.plot(points[:,0],points[:,1],'ko-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'ko-',linewidth = line_width_boundary,markersize = marker_size)     
        # =================================================================
        # ========================== MFAM =================================            
        plot_MFAM(faces,nodes,line_width)
        # Plot the cathode position
        plt.plot(z_cath,r_cath,'ys',linewidth = line_width_boundary,markersize = marker_size_cath)
#        z_cath = elem_geom[0,new_cath_elem_ID]
#        r_cath = elem_geom[1,new_cath_elem_ID]
        plt.plot(elem_geom[0,new_cath_elem_ID],elem_geom[1,new_cath_elem_ID],'ks',linewidth = line_width_boundary,markersize = marker_size_cath)     
        # =================================================================
        plt.axis([xmin,xmax,ymin,ymax])
        plt.gca().set_aspect('equal', adjustable='box')
        plt.title(r"PIC and MFAM meshes",fontsize = font_size)
        plt.xlabel(cont_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.ylabel(cont_ylabel,fontsize= font_size)
        plt.yticks(fontsize = ticks_size)
        if save_flag == 1:
            plt.savefig(path_out+"picM_MFAM"+figs_format,bbox_inches='tight') 
            pickle.dump(fig_object,file(path_out+'picM_MFAM.pickle','w'))
            plt.close()
    
    
    if elem_ID_plots == 1:
#        # Plot the MFAM elements ID
#        plt.figure("MFAM elements ID")
#        plot_MFAM(faces,nodes,line_width)
#        # Plot points defining mesh boundary
#        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
#        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
#        plt.plot(z_cath,r_cath,'ys',linewidth = line_width_boundary,markersize = marker_size)      
#        plt.plot(zpos_cath,rpos_cath,'mo',linewidth = line_width_boundary,markersize = marker_size)      
#        # Plot the MFAM elements ID
#        for i in range(0,n_elems,elems_ID_step):
#            print("MFAM elem ID (FORTRAN standard) = "+str(i+1))
#            text = str(i+1)
#            zstext = elem_geom[0,i]
#            rstext = elem_geom[1,i]
#            plt.text(zstext,rstext,text,fontsize = text_size_mesh,color='k',ha='center',va='center')
#        # Plot the cathode element ID
#        zstext = z_cath
#        rstext = r_cath
#        text = str(cath_elem + 1)
#        plt.text(zstext,rstext,text,fontsize = text_size_mesh,color='k',ha='left',va='center')
#        plt.axis([xmin,xmax,ymin,ymax])
#    #    plt.gca().set_aspect('equal', adjustable='box')
#        plt.title(r"MFAM elements ID",fontsize = font_size)
#        plt.xlabel(r"$z$ (cm)",fontsize = font_size)
#        plt.xticks(fontsize = ticks_size) 
#        plt.ylabel(r"$r$ (cm)",fontsize= font_size)
#        plt.yticks(fontsize = ticks_size) 
#        if save_flag == 1:
#            plt.savefig(path_out+"MFAM_e_IDs"+figs_format,bbox_inches='tight') 
#            plt.close()
        
        
        # Plot the given MFAM elements ID
        fig_object = plt.figure("MFAM given elements ID")
        plot_MFAM(faces,nodes,line_width)
        # Plot points defining mesh boundary
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        plt.plot(z_cath,r_cath,'ys',linewidth = line_width_boundary,markersize = marker_size_cath)      
        # plt.plot(zpos_cath,rpos_cath,'mo',linewidth = line_width_boundary,markersize = marker_size)    
        ax = plt.gca()
        # Plot the MFAM elements ID
        for i in elems_IDs:
#            print("MFAM elem ID (FORTRAN standard) = "+str(i+1))
            text = str(i+1)
            zstext = elem_geom[0,i]
            rstext = elem_geom[1,i]
            plt.text(zstext,rstext,text,fontsize = text_size_mesh,color='k',ha='center',va='center')        
        for i in elems_IDs_2:
#            print("MFAM elem ID (FORTRAN standard) = "+str(i+1))
            text = str(i+1)
            zstext = 1.00*elem_geom[0,i]
            rstext = 1.00*elem_geom[1,i]
            plt.text(zstext,rstext,text,fontsize = text_size_mesh,color='c',ha='center',va='center')
        # Fill the MFAM elements ID
        for i in elems_IDs_2:
            nnodes = elem_n[0,i]
            nodes_ID = elem_n[1:nnodes+1,i] - 1
            znodes = nodes[0,nodes_ID]
            rnodes = nodes[1,nodes_ID]
            ax.fill(znodes, rnodes, color = silver) 
        # Plot the cathode magnetic line if given
        if np.any(elems_cath_Bline) != 0:
            # plt.plot(elem_geom[0,elems_cath_Bline],elem_geom[1,elems_cath_Bline],'g',linewidth = line_width_boundary,markersize = marker_size)
            # for i in elems_cath_Bline:
            #     text = str(i+1)
            #     zstext = elem_geom[0,i]
            #     rstext = elem_geom[1,i]
            #     plt.text(zstext,rstext,text,fontsize = text_size_mesh,color='g',ha='center',va='center')    
            # cath_final_bound_face = 1804   # GDML paper P3_fcat1962
            # cath_final_bound_face = 832    # GDML paper P2_fcat905
            cath_final_bound_face = 3133   # GDML paper P2_fcat3198
            # cath_final_bound_face = 8243    # GDML paper P4_fcat7610
            cath_z = np.append(elem_geom[0,elems_cath_Bline],np.array([face_geom[0,cath_final_bound_face-1]]),axis=0)
            cath_r = np.append(elem_geom[1,elems_cath_Bline],np.array([face_geom[1,cath_final_bound_face-1]]),axis=0)
            plt.plot(cath_z,cath_r,'g',linewidth = line_width_boundary,markersize = marker_size)
            for i in elems_cath_Bline:
                text = str(i+1)
                zstext = elem_geom[0,i]
                rstext = elem_geom[1,i]
                plt.text(zstext,rstext,text,fontsize = text_size_mesh,color='g',ha='center',va='center')    
        if np.any(elems_cath_Bline_2) != 0:
            plt.plot(elem_geom[0,elems_cath_Bline_2],elem_geom[1,elems_cath_Bline_2],'g',linewidth = line_width_boundary,markersize = marker_size)
            for i in elems_cath_Bline_2:
                text = str(i+1)
                zstext = elem_geom[0,i]
                rstext = elem_geom[1,i]
                plt.text(zstext,rstext,text,fontsize = text_size_mesh,color='g',ha='center',va='center')   
        # Plot the cathode magnetic line if required
        if plot_cath_Bline == 1:
            plt.plot(cath_Bline_z,cath_Bline_r,'r',linewidth = line_width_boundary,markersize = marker_size)
            for i in cath_Bline_IDs[1::]:
                text = str(i+1)
                zstext = elem_geom[0,i]
                rstext = elem_geom[1,i]
                plt.text(zstext,rstext,text,fontsize = text_size_mesh,color='r',ha='center',va='center') 
        # Plot the magnetic line passing through the elements given if any
        if np.any(elems_Bline) != 0:
            plt.plot(elem_geom[0,elems_Bline],elem_geom[1,elems_Bline],color = orange,linewidth = line_width_boundary,markersize = marker_size)
        # Plot the thruster center line (TCL)
        plt.plot(zs[0,:],0.5*(points[-1,1]+points[0,1])*np.ones(np.shape(zs[0,:])),'k-',linewidth = line_width_boundary,markersize = marker_size)             
        plt.plot(zs[0,:],rs[rind,0]*np.ones(np.shape(zs[0,:])),'k-',linewidth = line_width_boundary,markersize = marker_size)             
        # Plot the cathode element ID
        zstext = z_cath
        rstext = r_cath
        text = str(cath_elem + 1)
        plt.text(zstext,rstext,text,fontsize = text_size_mesh,color='k',ha='left',va='center')
        plt.axis([xmin,xmax,ymin,ymax])
        # Plot the given faces ID
        for i in faces_IDs:
            if faces[2,i] == 1:   # face type >> lambda = const.
                # print("MFAM lambda=const face ID (FORTRAN standard) = "+str(i+1))
                text = str(i+1)
                zstext = face_geom[0,i]
                rstext = face_geom[1,i]
                plt.text(zstext,rstext,text,fontsize = text_size_mesh,color='b',ha='center',va='center')
            elif faces[2,i] == 2:   # face type >> sigma = const.
                # print("MFAM sigma=const face ID  (FORTRAN standard) = "+str(i+1))
                text = str(i+1)
                zstext = face_geom[0,i]
                rstext = face_geom[1,i]
                plt.text(zstext,rstext,text,fontsize = text_size_mesh,color='r',ha='center',va='center')
            else:                   # face type >> boundary
#                print("MFAM boundary face ID     (FORTRAN standard) = "+str(i+1))
                text = str(i+1)
                zstext = face_geom[0,i]
                rstext = face_geom[1,i]
                plt.text(zstext,rstext,text,fontsize = text_size_mesh,color='m',ha='center',va='center')
    #    plt.gca().set_aspect('equal', adjustable='box')
        plt.title(r"MFAM elements ID",fontsize = font_size)
        plt.xlabel(cont_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.ylabel(cont_ylabel,fontsize= font_size)
        plt.yticks(fontsize = ticks_size) 
        if save_flag == 1:
            plt.savefig(path_out+"MFAM_givene_IDs"+figs_format,bbox_inches='tight') 
            pickle.dump(fig_object,file(path_out+'MFAM_givene_IDs.pickle','w'))
            plt.close()
    
    
    if face_ID_plots == 1:
#        # Plot the MFAM labda=const faces ID (face type 1), i.e. B-parallel faces ID
#        plt.figure("MFAM lambda-faces ID")
#        plot_MFAM(faces,nodes,line_width)
#        # Plot points defining mesh boundary
#        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
#        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
#        plt.plot(z_cath,r_cath,'ys',linewidth = line_width_boundary,markersize = marker_size_cath)      
#        # Plot the lambda=const. faces ID
#        for i in range(0,n_faces,face_ID_step):
#            if faces[2,i] == 1:   # face type >> lambda = const.
#                print("MFAM lambda=const face ID (FORTRAN standard)= "+str(i+1))
#                text = str(i+1)
#                zstext = face_geom[0,i]
#                rstext = face_geom[1,i]
#                plt.text(zstext,rstext,text,fontsize = text_size_mesh,color='b',ha='center',va='center')
#        plt.axis([xmin,xmax,ymin,ymax])
#    #    plt.gca().set_aspect('equal', adjustable='box')
#        plt.title(r"MFAM $\lambda = const.$ faces ID",fontsize = font_size)
#        plt.xlabel(r"$z$ (cm)",fontsize = font_size)
#        plt.xticks(fontsize = ticks_size) 
#        plt.ylabel(r"$r$ (cm)",fontsize= font_size)
#        plt.yticks(fontsize = ticks_size) 
#        if save_flag == 1:
#            plt.savefig(path_out+"MFAM_lamf_IDs"+figs_format,bbox_inches='tight') 
#            plt.close()
    
    
#        # Plot the MFAM sigma=const faces ID (face type 1), i.e. B-perpendicular faces ID
#        plt.figure("MFAM sigma-faces ID")
#        plot_MFAM(faces,nodes,line_width)
#        # Plot points defining mesh boundary
#        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
#        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
#        plt.plot(z_cath,r_cath,'ys',linewidth = line_width_boundary,markersize = marker_size_cath)      
#        # Plot the lambda=const. faces ID
#        for i in range(0,n_faces,face_ID_step):
#            if faces[2,i] == 2:   # face type >> sigma = const.
#                print("MFAM sigma=const face ID (FORTRAN standard) = "+str(i+1))
#                text = str(i+1)
#                zstext = face_geom[0,i]
#                rstext = face_geom[1,i]
#                plt.text(zstext,rstext,text,fontsize = text_size_mesh,color='r',ha='center',va='center')
#        plt.axis([xmin,xmax,ymin,ymax])
#    #    plt.gca().set_aspect('equal', adjustable='box')
#        plt.title(r"MFAM $\sigma = const.$ faces ID",fontsize = font_size)
#        plt.xlabel(r"$z$ (cm)",fontsize = font_size)
#        plt.xticks(fontsize = ticks_size) 
#        plt.ylabel(r"$r$ (cm)",fontsize= font_size)
#        plt.yticks(fontsize = ticks_size) 
#        if save_flag == 1:
#            plt.savefig(path_out+"MFAM_sigf_IDs"+figs_format,bbox_inches='tight') 
#            plt.close()
    
    
        # Plot the given MFAM faces ID
        plt.figure("MFAM given faces ID")
        plot_MFAM(faces,nodes,line_width)
        # Plot points defining mesh boundary
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        # Plot the thruster center line (TCL)
        plt.plot(zs[0,:],rs[rind,0]*np.ones(np.shape(zs[0,:])),'k-',linewidth = line_width_boundary,markersize = marker_size)             
        # Plot the B=0 line if required
        if plot_B0_line == 1:
            plt.plot(B0_line_nodez,B0_line_noder,color='b',linewidth = line_width_boundary,markersize = marker_size)
            # for i in B0_line_nodeIDs:
            #     text = str(i+1)
            #     zstext = nodes[0,i]
            #     rstext = nodes[1,i]
            #     plt.text(zstext,rstext,text,fontsize = text_size_mesh,color=orange,ha='center',va='center')     
            # plt.plot(B0_line_facez,B0_line_facer,'g',linewidth = line_width_boundary,markersize = marker_size)
            for i in B0_line_faceIDs:
                text = str(i+1)
                zstext = face_geom[0,i]
                rstext = face_geom[1,i]
                plt.text(zstext,rstext,text,fontsize = text_size_mesh,color='b',ha='center',va='center') 
        
        # Plot the cathode magnetic line if given
        if np.any(elems_cath_Bline) != 0:
            plt.plot(elem_geom[0,elems_cath_Bline],elem_geom[1,elems_cath_Bline],'m',linewidth = line_width_boundary,markersize = marker_size)
            for i in elems_cath_Bline:
                text = str(i+1)
                zstext = elem_geom[0,i]
                rstext = elem_geom[1,i]
                plt.text(zstext,rstext,text,fontsize = text_size_mesh,color='m',ha='center',va='center')    
        if np.any(elems_cath_Bline_2) != 0:
            plt.plot(elem_geom[0,elems_cath_Bline_2],elem_geom[1,elems_cath_Bline_2],'m',linewidth = line_width_boundary,markersize = marker_size)
            for i in elems_cath_Bline_2:
                    text = str(i+1)
                    zstext = elem_geom[0,i]
                    rstext = elem_geom[1,i]
                    plt.text(zstext,rstext,text,fontsize = text_size_mesh,color='m',ha='center',va='center')  
        if faces_cath_Bline != 0:
            # plt.plot(face_geom[0,faces_cath_Bline],face_geom[1,faces_cath_Bline],'c',linewidth = line_width_boundary,markersize = marker_size)
            plt.plot(faces_cath_Bline_nodez,faces_cath_Bline_noder,'c',linewidth = line_width_boundary,markersize = marker_size)
            for i in faces_cath_Bline:
                text = str(i+1)
                zstext = face_geom[0,i]
                rstext = face_geom[1,i]
                plt.text(zstext,rstext,text,fontsize = text_size_mesh,color='c',ha='center',va='center')    
        plt.plot(z_cath,r_cath,'ys',linewidth = line_width_boundary,markersize = marker_size_cath)    
        # Plot the given faces IDs
        for i in faces_IDs:
            if faces[2,i] == 1:   # face type >> lambda = const.
                # print("MFAM lambda=const face ID (FORTRAN standard) = "+str(i+1))
                text = str(i+1)
                zstext = face_geom[0,i]
                rstext = face_geom[1,i]
                plt.text(zstext,rstext,text,fontsize = text_size_mesh,color='b',ha='center',va='center')
            elif faces[2,i] == 2:   # face type >> sigma = const.
                # print("MFAM sigma=const face ID  (FORTRAN standard) = "+str(i+1))
                text = str(i+1)
                zstext = face_geom[0,i]
                rstext = face_geom[1,i]
                plt.text(zstext,rstext,text,fontsize = text_size_mesh,color='r',ha='center',va='center')
            else:                   # face type >> boundary
                # print("MFAM boundary face ID     (FORTRAN standard) = "+str(i+1))
                text = str(i+1)
                zstext = face_geom[0,i]
                rstext = face_geom[1,i]
                plt.text(zstext,rstext,text,fontsize = text_size_mesh,color='k',ha='center',va='center')
        for i in faces_IDs_cond:
            if faces[2,i] == 1:   # face type >> lambda = const.
                # print("MFAM lambda=const face ID (FORTRAN standard) = "+str(i+1))
                text = str(i+1)
                zstext = face_geom[0,i]
                rstext = face_geom[1,i]
                plt.text(zstext,rstext,text,fontsize = text_size_mesh,color='b',ha='center',va='center')
            elif faces[2,i] == 2:   # face type >> sigma = const.
                # print("MFAM sigma=const face ID  (FORTRAN standard) = "+str(i+1))
                text = str(i+1)
                zstext = face_geom[0,i]
                rstext = face_geom[1,i]
                plt.text(zstext,rstext,text,fontsize = text_size_mesh,color='r',ha='center',va='center')
            else:                   # face type >> boundary
#                print("MFAM boundary face ID     (FORTRAN standard) = "+str(i+1))
                text = str(i+1)
                zstext = face_geom[0,i]
                rstext = face_geom[1,i]
                plt.text(zstext,rstext,text,fontsize = text_size_mesh,color='m',ha='center',va='center')
        # Plot the thruster center line (TCL)
        # plt.plot(zs[0,:],0.5*(points[-1,1]+points[0,1])*np.ones(np.shape(zs[0,:])),'k-',linewidth = line_width_boundary,markersize = marker_size)             
        # plt.plot(zs[0,:],rs[rind,0]*np.ones(np.shape(zs[0,:])),'k-',linewidth = line_width_boundary,markersize = marker_size)             
        plt.axis([xmin,xmax,ymin,ymax])
    #    plt.gca().set_aspect('equal', adjustable='box')
        plt.title(r"MFAM faces ID",fontsize = font_size)
        plt.xlabel(cont_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.ylabel(cont_ylabel,fontsize= font_size)
        plt.yticks(fontsize = ticks_size) 
        if save_flag == 1:
            plt.savefig(path_out+"MFAM_givenf_IDs"+figs_format,bbox_inches='tight') 
            plt.close()
        
        
    if B_plots == 1:
        
        maxBfield_prof      = np.max(Bfield_plot[rind,:])
        zind_maxBfield_prof = np.where(Bfield_plot[rind,:] == maxBfield_prof)
        z_maxBfield_prof    = zs[rind,zind_maxBfield_prof]
        Bfield_avg_freeloss = 0.5*(np.mean(Bfield_plot[-1,int(xi_top)::]) + np.mean(Bfield_plot[:,-1]))
        print("Max. B along line at rind                    (G)  = %15.8e" %maxBfield_prof)
        print("z with max. B along line at rind             (cm) = %15.8e" %z_maxBfield_prof)
        print("Average B value along the free loss boundary (G)  = %15.8e" %Bfield_avg_freeloss)
        
        plt.figure(r'B prof r')
        plt.plot(rs[:,zind],Bfield_plot[:,zind], linestyle='-', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker='o', color='k', markeredgecolor = 'k', label="")
        ax = plt.gca()
        ylims = ax.get_ylim()
        plt.plot(rs[int(eta_max),zind]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        plt.plot(rs[int(eta_min),zind]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        plt.plot(r_cath*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
   
        plt.xlabel(r"$r$ (cm)",fontsize = font_size)
        plt.title(r"(b) $|\boldsymbol{B}|$ (G)",fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        if save_flag == 1:
            plt.savefig(path_out+"B_prof_r"+figs_format,bbox_inches='tight') 
            plt.close()
        
        plt.figure(r'B prof')
        plt.plot(zs[rind,:],Bfield_plot[rind,:], linestyle='-', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker='o', color='k', markeredgecolor = 'k', label="")
        ax = plt.gca()
        ylims = ax.get_ylim()
        plt.plot(zs[rind,int(xi_top)]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 1:
            plt.plot(z_cath*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")        
        elif plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        plt.xlabel(r"$z$ (cm)",fontsize = font_size)
        plt.title(r"(b) $|\boldsymbol{B}|$ (G)",fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        if save_flag == 1:
            plt.savefig(path_out+"B_prof"+figs_format,bbox_inches='tight') 
            plt.close()
            
        plt.figure('Br prof')
        plt.plot(zs[rind,:],Br_plot[rind,:], linestyle='-', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker='o', color='k', markeredgecolor = 'k', label="")
        ax = plt.gca()
        ylims = ax.get_ylim()
        plt.plot(zs[rind,int(xi_top)]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 1:
            plt.plot(z_cath*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")        
        elif plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        plt.xlabel(r"$z$ (cm)",fontsize = font_size)
        plt.title(r"(c) $\boldsymbol{B}_r$ (G)",fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        if save_flag == 1:
            plt.savefig(path_out+"Br_prof"+figs_format,bbox_inches='tight') 
            plt.close()
            
        plt.figure('Bz prof')
        plt.plot(zs[rind,:],Bz_plot[rind,:], linestyle='-', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker='o', color='k', markeredgecolor = 'k', label="")
        ax = plt.gca()
        ylims = ax.get_ylim()
        plt.plot(zs[rind,int(xi_top)]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 1:
            plt.plot(z_cath*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")        
        elif plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        plt.xlabel(r"$z$ (cm)",fontsize = font_size)
        plt.title(r"(d) $\boldsymbol{B}_z$ (G)", fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        if save_flag == 1:
            plt.savefig(path_out+"Bz_prof"+figs_format,bbox_inches='tight') 
            plt.close()
        
        
        
        fig1 = plt.figure(r'B and alpha prof')
        ax1 = fig1.add_subplot(111)
        ax2 = ax1.twinx()
        ax1.set_ylabel(r"$|\boldsymbol{B}|$ (G)",fontsize = font_size)
        ax2.set_ylabel(r'$\alpha_t$ (\%)',fontsize = font_size)
        ax1.tick_params(axis='y', labelsize=ticks_size)    
        ax2.tick_params(axis='y', labelsize=ticks_size) 
        ax1.set_xlabel(cont_xlabel,fontsize = font_size)
        ax1.tick_params(axis='x', labelsize=ticks_size)  
        ax1.plot(zs[rind,:],Bfield_plot[rind,:], linestyle='-', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker='o', color='k', markeredgecolor = 'k', label="")
        ax2.plot(zs[rind,:],1E2*alpha_ano[rind,:], linestyle='-', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker='', color='k', markeredgecolor = 'k', label="")
        ylims = ax1.get_ylim()
        ax1.plot(zs[rind,int(xi_top)]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 1:
            ax1.plot(z_cath*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")                
        elif plot_zcath_012 == 2:
            ax1.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        
        
        if save_flag == 1:
            fig1.savefig(path_out+"B_alpha_prof"+figs_format,bbox_inches='tight') 
            plt.close()
            
        plt.figure('B contour in mesh')
        plt.title(r"(a) $|\boldsymbol{B}|$ (G)", fontsize = font_size,y=1.02)
        ax = plt.gca()
        log_type         = 1
        auto             = 1
        min_val0         = 1E12
        max_val0         = 5E14
        cont             = 1
        lines            = 1
        cont_nlevels     = 500
        auto_cbar_ticks  = 1 
        auto_lines_ticks = 1
        nticks_cbar      = 4
        nticks_lines     = 6
        cbar_ticks       = np.array([1E11,1E12,1E13,1E14])
        lines_ticks      = np.array([2,2.5,5,7.5,10,20,30,40,50,60,70,80,90,100,110,150,200,250,300,350,400,450,500,550])
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.2f}'
        lines_ticks_fmt   = '{%.1f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
        [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size_isolines, zs, rs, Bfield_plot, nodes_flag, log_type, auto, 
                               min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                               nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                               lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)   
        # Isolines ticks (exponent)
#        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size_cath)  
        
        
#        field_deltar = 1
#        field_deltaz = 2
        field_deltar = 3
        field_deltaz = 2
        Q1 = plt.quiver(zs[::field_deltar,::field_deltaz],rs[::field_deltar,::field_deltaz],
                        Bz_plot[::field_deltar,::field_deltaz]/Bfield_plot[::field_deltar,::field_deltaz],
                        Br_plot[::field_deltar,::field_deltaz]/Bfield_plot[::field_deltar,::field_deltaz],
                        width = 0.002, pivot='mid', color='w',scale = 1/0.035)            
            
        # --- Plot the streamlines 
        # Obtain the vectors for the uniform mesh for streamlines plotting. It must be uniform and squared mesh
        delta_x = 0.11
        zvec = np.arange(zs[0,0],zs[0,-1]+delta_x,delta_x)
        rvec = np.copy(zvec)
        # Define number of starting points for plotting the streamlines
#        nstart_r = 25
#        nstart_z = 15
        nstart_r = 12
        nstart_z = 40
        start_points = np.zeros((0,2))
        # SPT100 thesis orig --------------------------------------------------
        nstart_r = 40
        nstart_z = 20
        # Top plume axial line 1
        zstart = np.linspace(30,len(zvec)-2,nstart_z)
        rstart = 55*np.ones(nstart_z)
        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
        # Top plume axial line 2
        zstart = np.linspace(30,len(zvec)-2,nstart_z)
        rstart = 70*np.ones(nstart_z)
        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
        # Mid chamber axial line 1
        zstart = np.linspace(1,len(zvec)-2,nstart_z)
        rstart = 38*np.ones(nstart_z)
        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
        # Mid chamber axial line 2
        zstart = np.linspace(1,len(zvec)-2,nstart_z)
        rstart = 34*np.ones(nstart_z)
        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
        # Mid chamber axial line 2
        zstart = np.linspace(1,len(zvec)-2,nstart_z)
        rstart = 44*np.ones(nstart_z)
        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
        # Bottom plume axial line 1
        zstart = np.linspace(30,len(zvec)-2,nstart_z)
        rstart = 25*np.ones(nstart_z)
        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
        # Bottom plume axial line 2
        zstart = np.linspace(30,len(zvec)-2,nstart_z)
        rstart = 10*np.ones(nstart_z)
        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
        # Bottom plume axial line 3
        zstart = np.linspace(30,len(zvec)-2,nstart_z)
        rstart = 1*np.ones(nstart_z)
        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
        # Radial line at plume 1
        zstart = 30*np.ones(nstart_r)
        rstart = np.linspace(1,len(zvec)-2,nstart_r)
        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
        # Radial line at plume 2
        zstart = 27*np.ones(nstart_r)
        rstart = np.linspace(1,len(zvec)-2,nstart_r)
        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
        # Radial line at plume 3
        zstart = 60*np.ones(nstart_r)
        rstart = np.linspace(1,len(zvec)-2,nstart_r)
        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
        # Radial line at plume 4
        zstart = 90*np.ones(nstart_r)
        rstart = np.linspace(1,len(zvec)-2,nstart_r)
        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
        # Radial line at chamber 1
        zstart = 1*np.ones(nstart_r)
        rstart = np.linspace(32,46,nstart_r)
        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
        # Radial line at chamber 2
        zstart = 20*np.ones(nstart_r)
        rstart = np.linspace(32,46,nstart_r)
        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
        # Radial line at chamber 3
        zstart = 22*np.ones(nstart_r)
        rstart = np.linspace(32,46,nstart_r)
        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
        # Radial line at chamber 3
        zstart = 24*np.ones(nstart_r)
        rstart = np.linspace(32,46,nstart_r)
        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
        # ---------------------------------------------------------------------
        streamline_density = 2
        flag_start = 1
        flag_start = 0
        plot_start_points = 0
        streamline_color = 'b'
        arrow_size = 1
        
        stream = streamline_2D(ax,zvec,rvec,dims,zs,rs,Bz_plot,Br_plot,flag_start,start_points,
                               plot_start_points,streamline_density,streamline_width,streamline_color,arrow_size,
                               arrow_style,min_length)         

        ax.set_xlim(zs[0,0],zs[0,-1])
        ax.set_ylim(rs[0,0],rs[-1,-1])
        
        # Plot the cathode magnetic line if given
        if np.any(elems_cath_Bline) != 0:
            plt.plot(elem_geom[0,elems_cath_Bline],elem_geom[1,elems_cath_Bline],'m',linewidth = line_width_boundary,markersize = marker_size)
        
        if save_flag == 1:
            plt.savefig(path_out+"B_cont"+figs_format,bbox_inches='tight') 
            plt.close()
            
            
        plt.figure('B contour in mesh lambda')
        plt.title(r"(a) $|\boldsymbol{B}|$ (G)", fontsize = font_size,y=1.02)
        ax = plt.gca()
        log_type         = 1
        auto             = 1
        min_val0         = 1E12
        max_val0         = 5E14
        cont             = 1
        lines            = 1
        cont_nlevels     = 500
        auto_cbar_ticks  = 1 
        auto_lines_ticks = 1
        nticks_cbar      = 4
        nticks_lines     = 6
        cbar_ticks       = np.array([1E11,1E12,1E13,1E14])
        lines_ticks      = np.array([2,2.5,5,7.5,10,20,30,40,50,60,70,80,90,100,110,150,200,250,300,350,400,450,500,550])
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.2f}'
        lines_ticks_fmt   = '{%.1f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
        [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size_isolines, zs, rs, Bfield_plot, nodes_flag, log_type, auto, 
                               min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                               nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                               lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)   
        # Isolines ticks (exponent)
#        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size_cath)  
        # Plot MFAM lambda lines
        plot_MFAM_ax_nosig_lambda(ax,faces,nodes,line_width,face_geom)
        
        ax.set_xlim(zs[0,0],zs[0,-1])
        ax.set_ylim(rs[0,0],rs[-1,0])
        
        # Plot the cathode magnetic line if given
        if np.any(elems_cath_Bline) != 0:
            plt.plot(elem_geom[0,elems_cath_Bline],elem_geom[1,elems_cath_Bline],'m',linewidth = line_width_boundary,markersize = marker_size)
        
        if save_flag == 1:
            plt.savefig(path_out+"B_cont_lambda"+figs_format,bbox_inches='tight') 
            plt.close()    
        

        plt.figure('Bz contour in mesh')
        plt.title(r"(a) $\boldsymbol{B_z}$ (G)", fontsize = font_size,y=1.02)
        ax = plt.gca()
        log_type         = 0
        auto             = 1
        min_val0         = 1E12
        max_val0         = 5E14
        cont             = 1
        lines            = 1
        cont_nlevels     = 500
        auto_cbar_ticks  = 1 
        auto_lines_ticks = 0
        nticks_cbar      = 4
        nticks_lines     = 6
        cbar_ticks       = np.array([1E11,1E12,1E13,1E14])
        lines_ticks      = np.array([-100,-50,-20,-10,-5,0,5,10,20,50,100])
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.2f}'
        lines_ticks_fmt   = '{%.1f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
        [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size_isolines, zs, rs, Bz_plot, nodes_flag, log_type, auto, 
                               min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                               nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                               lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)   
        # Isolines ticks (exponent)
        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size_cath)  
        
        if save_flag == 1:
            plt.savefig(path_out+"Bz_cont"+figs_format,bbox_inches='tight') 
            plt.close()
        
        
        plt.figure('Br contour in mesh')
        plt.title(r"(a) $\boldsymbol{B_r}$ (G)", fontsize = font_size,y=1.02)
        ax = plt.gca()
        log_type         = 0
        auto             = 1
        min_val0         = 1E12
        max_val0         = 5E14
        cont             = 1
        lines            = 1
        cont_nlevels     = 500
        auto_cbar_ticks  = 1 
        auto_lines_ticks = 0
        nticks_cbar      = 4
        nticks_lines     = 6
        cbar_ticks       = np.array([1E11,1E12,1E13,1E14])
        lines_ticks      = np.array([-10,-5,0,2,2.5,5,7.5,10,20,30,40,50,60,70,80,90,100,110,150,200,250,300,350,400,450,500,550])
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.2f}'
        lines_ticks_fmt   = '{%.1f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
        [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size_isolines, zs, rs, Br_plot, nodes_flag, log_type, auto, 
                               min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                               nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                               lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)   
        # Isolines ticks (exponent)
        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size_cath)  
        
        if save_flag == 1:
            plt.savefig(path_out+"Br_cont"+figs_format,bbox_inches='tight') 
            plt.close()
            
        plt.figure('alpha_t contour in mesh')
        plt.title(r"(a) $\alpha_t$ (\%)", fontsize = font_size,y=1.02)
        ax = plt.gca()
        log_type         = 0
        auto             = 1
        min_val0         = 1E12
        max_val0         = 5E14
        cont             = 1
        lines            = 0
        cont_nlevels     = 500
        auto_cbar_ticks  = 1 
        auto_lines_ticks = 1
        nticks_cbar      = 4
        nticks_lines     = 6
        cbar_ticks       = np.array([1E11,1E12,1E13,1E14])
        lines_ticks      = np.array([0.057,0.06,0.07,0.08,0.09,0.1,2])
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.2f}'
        lines_ticks_fmt   = '{%.1f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
        var = 1E2*alpha_ano[:,:,0]
        var[np.where(nodes_flag == 0)]     = np.nan
        [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size_isolines, zs, rs, var, nodes_flag, log_type, auto, 
                               min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                               nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                               lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)   
        # Isolines ticks (exponent)
#        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size_cath)  
        # Plot the cathode magnetic line if given
        if np.any(elems_cath_Bline) != 0:
            plt.plot(elem_geom[0,elems_cath_Bline],elem_geom[1,elems_cath_Bline],'m',linewidth = line_width_boundary,markersize = marker_size)
        if save_flag == 1:
            plt.savefig(path_out+"alpha_ano_cont"+figs_format,bbox_inches='tight') 
            plt.close()
            
    if generate_thesis_figures == 1:
        
#        Bfield_plot = 21.0/20.0*Bfield_plot
        
        maxBfield_prof      = np.max(Bfield_plot[rind,:])
        zind_maxBfield_prof = np.where(Bfield_plot[rind,:] == maxBfield_prof)
        z_maxBfield_prof    = zs[rind,zind_maxBfield_prof]
        print("Max. B along line at rind                    (G)  = %15.8e" %maxBfield_prof)
        print("z with max. B along line at rind             (cm) = %15.8e" %z_maxBfield_prof)
        
        [fig, axes] = plt.subplots(nrows=2, ncols=2, figsize=(15,12))
        ax1 = plt.subplot2grid( (2,2), (0,0) )
        ax2 = plt.subplot2grid( (2,2), (0,1) )
        ax3 = plt.subplot2grid( (2,2), (1,0) )
        ax4 = plt.subplot2grid( (2,2), (1,1) )
        
        ax1.set_title(r"(a) PIC mesh", fontsize = font_size,y=1.02)   
        ax1.set_xlabel(r"$z$ (cm)",fontsize = font_size)
        ax1.set_ylabel(r"$r$ (cm)",fontsize = font_size)
        ax1.tick_params(labelsize = ticks_size) 
        ax2.set_title(r"(b) MFAM", fontsize = font_size,y=1.02)   
        ax2.set_xlabel(r"$z$ (cm)",fontsize = font_size)
        ax2.set_ylabel(r"$r$ (cm)",fontsize = font_size)
        ax2.tick_params(labelsize = ticks_size) 
        ax3.set_title(r"(c) $|\boldsymbol{B}|$ (G)", fontsize = font_size,y=1.02)   
        ax3.set_xlabel(r"$z$ (cm)",fontsize = font_size)
        ax3.set_ylabel(r"$r$ (cm)",fontsize = font_size)
        ax3.tick_params(labelsize = ticks_size) 
        ax4.set_title(r"(d) $|\boldsymbol{B}|$ (G)", fontsize = font_size,y=1.02)   
        ax4.set_xlabel(r"$z$ (cm)",fontsize = font_size)
        ax4.tick_params(labelsize = ticks_size) 
        
        
        # Plot the PIC mesh
        ax1.plot(zs_plot,rs_plot,'ko-',linewidth = line_width,markersize = marker_size)
        ax1.plot(zs_plot.transpose(),rs_plot.transpose(),'ko-',linewidth = line_width,markersize = marker_size)
        # Plot points defining mesh boundary
        if len(points) == 8:
            # Inner wall
            ax1.plot(points[0:3,0],points[0:3,1],'ro-',linewidth=line_width_boundary,markersize = marker_size)
            # Axis r = 0
            ax1.plot(points[2:4,0],points[2:4,1],'mo-',linewidth=line_width_boundary,markersize = marker_size)
            # Free loss
            ax1.plot(points[3:6,0],points[3:6,1],'bo-',linewidth=line_width_boundary,markersize = marker_size)
            # Outer wall
            ax1.plot(points[5::,0],points[5::,1],'ro-',linewidth=line_width_boundary,markersize = marker_size)
            # Injection
            ax1.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'go-',linewidth=line_width_boundary,markersize = marker_size)
        elif len(points == 10):
            # Inner wall
            ax1.plot(points[0:4,0],points[0:4,1],'ro-',linewidth=line_width_boundary,markersize = marker_size)
            # Axis r = 0
            ax1.plot(points[3:5,0],points[3:5,1],'mo-',linewidth=line_width_boundary,markersize = marker_size)
            # Free loss
            ax1.plot(points[4:7,0],points[4:7,1],'bo-',linewidth=line_width_boundary,markersize = marker_size)
            # Outer wall
            ax1.plot(points[6::,0],points[6::,1],'ro-',linewidth=line_width_boundary,markersize = marker_size)
            # Injection
            ax1.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'go-',linewidth=line_width_boundary,markersize = marker_size)
        # Plot all mesh boundary points and domain points
        for i in range(0,dims[0]):
            for j in range(0,dims[1]):
                if nodes_flag[i,j] == -1:
                    if i == 0:
                        # Axis r = 0
                        ax1.plot(zs[i,j],rs[i,j],'mo',markeredgecolor='m',markersize = marker_size)
                    elif j == dims[1] - 1 or i == dims[0] - 1:
                        # Free loss
                        ax1.plot(zs[i,j],rs[i,j],'bo',markeredgecolor='b',markersize = marker_size)
                    elif j == xi_top or i == eta_max or j == xi_bottom or i == eta_min:
                        # Material wall
                        ax1.plot(zs[i,j],rs[i,j],'ro',markeredgecolor='r',markersize = marker_size)
                    elif j == 0:
                        # Injection
                        ax1.plot(zs[i,j],rs[i,j],'go',markeredgecolor='g',markersize = marker_size)
                if nodes_flag[i,j] == 1:
                    ax1.plot(zs[i,j],rs[i,j],'ko',markersize = marker_size)      
        ax1.set_xlim(xmin,xmax)        
        ax1.set_ylim(ymin,ymax)
        ax1.set_xticks(np.arange(0.0,xmax,2))
        ax1.set_yticks(np.arange(0.0,ymax,2))
#        ax1.set_aspect('equal', adjustable='box')
        
        # Plot the MFAM
        plot_MFAM_ax(ax2,faces,nodes,line_width)
        # Plot points defining mesh boundary
        ax2.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        ax2.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        # Plot the cathode magnetic line if given
        if np.any(elems_cath_Bline) != 0:
            ax2.plot(elem_geom[0,elems_cath_Bline],elem_geom[1,elems_cath_Bline],'g-',linewidth = line_width_boundary+0.5,markersize = marker_size)
            ax2.plot(elem_geom[0,elems_cath_Bline_2],elem_geom[1,elems_cath_Bline_2],'g-',linewidth = line_width_boundary+0.5,markersize = marker_size)
        # Plot the magnetic line passing through the elements given if any
        if np.any(elems_Bline) != 0:
            ax2.plot(elem_geom[0,elems_Bline],elem_geom[1,elems_Bline],color = 'c',linewidth = line_width_boundary+0.5,markersize = marker_size)        
        # Plot the cathode magnetic line if required
        if plot_cath_Bline == 1:
            ax2.plot(cath_Bline_z,cath_Bline_r,'r',linewidth = line_width_boundary,markersize = marker_size)
        # Plot the cathodes positions  
        if new_cath_elem_ID >= 0:
            z_cath2 = elem_geom[0,new_cath_elem_ID]
            r_cath2 = elem_geom[1,new_cath_elem_ID]
            ax2.plot(z_cath2,r_cath2,'ko',linewidth = line_width_boundary,markersize = marker_size_cath)    
        ax2.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size_cath)      
         
#        ax2.plot(zpos_cath,rpos_cath,'ko',linewidth = line_width_boundary,markersize = marker_size_cath)  # Cathode position of the real thruster 

#        z_cath1 = 3.29
#        r_cath1 = 6.73
#        z_cath2 = 5.94 
#        r_cath2 = 4.16
#        z_cath3 = 3.20
#        r_cath3 = 1.70
#        z_cath4 = 3.33
#        r_cath4 = 1.60e-1
#        z_cath5 = 3.33
#        r_cath5 = 7.15
#        z_cathA = 3.33
#        r_cathA = 5.60e-2
#        tol0 = 0.09
#        tol1 = 0.45
#        tol2 = 1.25
#        props = dict(boxstyle='round', facecolor='white', edgecolor = 'k',alpha=1) 
#        
##        zelem = np.array([3.0,4.0,4.0,3.0])
##        relem = np.array([3.5,3.5,5.0,5.0])
##        ax2.fill(zelem,relem,'g')        
#        
##        ax2.plot(z_cath1,r_cath1,'gs',linewidth = line_width_boundary,markersize = marker_size_cath)    
##        ax2.text(z_cath1+tol1,r_cath1-tol1-0.05,r'$C1$',fontsize = text_size_cath,color='k',ha='center',va='center',bbox=props)
##        ax2.plot(z_cath2,r_cath2,'gs',linewidth = line_width_boundary,markersize = marker_size_cath)    
##        ax2.text(z_cath2+tol1,r_cath2+tol1,r'$C2$',fontsize = text_size_cath,color='k',ha='center',va='center',bbox=props)
##        ax2.plot(z_cath3,r_cath3,'gs',linewidth = line_width_boundary,markersize = marker_size_cath)    
##        ax2.text(z_cath3+tol1,r_cath3+tol1,r'$C3$',fontsize = text_size_cath,color='k',ha='center',va='center',bbox=props)
##        ax2.plot(z_cath4,r_cath4,'gs',linewidth = line_width_boundary,markersize = marker_size_cath)    
##        ax2.text(z_cath4,r_cath4+tol1,r'$C4$',fontsize = text_size_cath,color='k',ha='center',va='center',bbox=props)
##        ax2.plot(z_cath5,r_cath5,'gs',linewidth = line_width_boundary,markersize = marker_size_cath)    
##        ax2.text(z_cath5+tol1,r_cath5+tol1,r'$C5$',fontsize = text_size_cath,color='k',ha='center',va='center',bbox=props)
##        ax2.plot(z_cathA,r_cathA,'gs',linewidth = line_width_boundary,markersize = marker_size_cath)    
##        ax2.text(z_cathA+tol2,r_cathA+tol0,r'$CA$',fontsize = text_size_cath,color='k',ha='center',va='center',bbox=props)
#        ax2.plot(z_cath1,r_cath1,'gs',linewidth = line_width_boundary,markersize = marker_size_cath)    
#        ax2.text(z_cath1+tol1,r_cath1-tol1-0.05,r'C1',fontsize = text_size_cath,color='k',ha='center',va='center',bbox=props)
#        ax2.plot(z_cath2,r_cath2,'gs',linewidth = line_width_boundary,markersize = marker_size_cath)    
#        ax2.text(z_cath2+tol1,r_cath2+tol1,r'C2',fontsize = text_size_cath,color='k',ha='center',va='center',bbox=props)
#        ax2.plot(z_cath3,r_cath3,'gs',linewidth = line_width_boundary,markersize = marker_size_cath)    
#        ax2.text(z_cath3+tol1,r_cath3-tol1,r'C3',fontsize = text_size_cath,color='k',ha='center',va='center',bbox=props)
##        ax2.plot(z_cath4,r_cath4,'gs',linewidth = line_width_boundary,markersize = marker_size_cath)    
##        ax2.text(z_cath4,r_cath4+tol1,r'$C4$',fontsize = text_size_cath,color='k',ha='center',va='center',bbox=props)
#        ax2.plot(z_cath5,r_cath5,'gs',linewidth = line_width_boundary,markersize = marker_size_cath)    
#        ax2.text(z_cath5+tol1,r_cath5+tol1,r'C4',fontsize = text_size_cath,color='k',ha='center',va='center',bbox=props)
##        ax2.plot(z_cathA,r_cathA,'gs',linewidth = line_width_boundary,markersize = marker_size_cath)    
##        ax2.text(z_cathA+tol2,r_cathA+tol0,r'$CA$',fontsize = text_size_cath,color='k',ha='center',va='center',bbox=props)
##        dx = 0.5*tol2
##        dy = tol0
##        a_width  = 0.02
##        h_width  = 10*a_width
##        h_length = 0.25*np.sqrt(dx**2+dy**2)
##        ax2.arrow(z_cathA+0.65*tol2,r_cathA+tol0, -dx, -dy, width = a_width, length_includes_head='false',head_width=h_width, head_length=h_length, fc='k', ec='k')        
        
        ax2.set_xlim(xmin,xmax)        
        ax2.set_ylim(ymin,ymax)
        ax2.set_yticks(np.arange(0.0,ymax,2))
        ax2.set_xticks(np.arange(0,xmax,2))
#        ax2.set_aspect('equal', adjustable='box')

        
        # Plot the B field contour and isolines
        log_type         = 1
        auto             = 0
        min_val0         = 1E0
        max_val0         = 1E3
        cont             = 1
        lines            = 1
        cont_nlevels     = nlevels_contour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = -1
        nticks_cbar      = 4
        nticks_lines     = 6
        cbar_ticks       = np.array([1E11,1E12,1E13,1E14])
        lines_ticks      = np.array([2,5,10,20,50,100,200,300])
#        lines_ticks_loc  =  [(10.6,0.37),(10.02,2.21),(9.0,4.25),(7.68,4.25),(0.17,4.2),(0.7, 4.4),(1.7, 4.25),(2.5, 3.7),(5.8,4.25),(4.5,4.25),(3.2,4.25)]
        lines_ticks_loc  = "default"
        cbar_ticks_fmt    = '{%.2f}'
        lines_ticks_fmt   = '{%.1f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
        [CS,CS2] = contour_2D (ax3,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size, zs, rs, Bfield_plot, nodes_flag, log_type, auto, 
                               min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                               nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                               lines_ticks_fmt, lines_ticks_color, lines_style, line_width_boundary)   
        # Isolines ticks (exponent)
        # ax3.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        ax3.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines)
#        ax3.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, manual = lines_ticks_loc, fontsize=ticks_size_isolines, zorder = 1)
        ax3.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        ax3.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)
        ax3.set_xticks(np.arange(0,zs[0,-1]+1,2))
        ax3.set_yticks(np.arange(0,rs[-1,0]+1,2))
        
        # Plot the B field axial profile
        ax4.plot(zs[rind,:],Bfield_plot[rind,:], linestyle='-', linewidth = line_width_boundary, markevery=marker_every, markersize=marker_size, marker='', color='k', markeredgecolor = 'k', label="")
        ylims = ax4.get_ylim()
        ax4.plot(zs[rind,int(xi_top)]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width_boundary, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax4.set_xlim(0,xmax)  
        ax4.set_ylim(ylims)
        ax4.set_xticks(np.arange(0,xmax,2))
        
        plt.tight_layout()
        if save_flag == 1:
            plt.savefig(path_out+"HET_sims_meshes_B"+figs_format,bbox_inches='tight')
            plt.close()
    
    if generate_paper_figures == 1:
        
        ticks_size_isolines = 11
        font_size  = font_size - 2
        ticks_size = ticks_size - 2
        
#        Bfield_plot = 21.0/20.0*Bfield_plot
        
        L_c = 2.9
        H_c = (0.0767-0.0545)*100
        
        zs_plot = zs_plot/L_c
        rs_plot = rs_plot/H_c
        zs      = zs/L_c
        rs      = rs/H_c
        points[:,0] = points[:,0]/L_c
        points[:,1] = points[:,1]/H_c
        xmin = xmin/L_c
        ymin = ymin/H_c
        xmax = xmax/L_c
        ymax = ymax/H_c
        nodes[0,:] = nodes[0,:]/L_c
        nodes[1,:] = nodes[1,:]/H_c
        elem_geom[0,:] = elem_geom[0,:]/L_c 
        elem_geom[1,:] = elem_geom[1,:]/H_c
        z_cath = z_cath/L_c
        r_cath = r_cath/H_c
        cath_Bline_z = cath_Bline_z/L_c
        cath_Bline_r = cath_Bline_r/H_c
        
        maxBfield_prof      = np.max(Bfield_plot[rind,:])
        zind_maxBfield_prof = np.where(Bfield_plot[rind,:] == maxBfield_prof)
        z_maxBfield_prof    = zs[rind,zind_maxBfield_prof]
        print("Max. B along line at rind                    (G)  = %15.8e" %maxBfield_prof)
        print("z with max. B along line at rind             (cm) = %15.8e" %z_maxBfield_prof)
        
#        ymax = 14
        
        [fig, axes] = plt.subplots(nrows=2, ncols=2, figsize=(15,12))
        ax1 = plt.subplot2grid( (2,2), (0,0) )
        ax2 = plt.subplot2grid( (2,2), (0,1) )
        ax3 = plt.subplot2grid( (2,2), (1,0) )
        ax4 = plt.subplot2grid( (2,2), (1,1) )
        ax4a = ax4.twinx()

        
        ax1.set_title(r"(a)", fontsize = font_size,y=1.02)   
        ax1.set_xlabel(r"$z/L_\mathrm{c}$",fontsize = font_size)
        ax1.set_ylabel(r"$r/H_\mathrm{c}$",fontsize = font_size)
        ax1.tick_params(labelsize = ticks_size) 
        ax2.set_title(r"(b)", fontsize = font_size,y=1.02)   
        ax2.set_xlabel(r"$z/L_\mathrm{c}$",fontsize = font_size)
        ax2.set_ylabel(r"$r/H_\mathrm{c}$",fontsize = font_size)
        ax2.tick_params(labelsize = ticks_size) 
        ax3.set_title(r"(c) $B$ (G)", fontsize = font_size,y=1.02)   
#        ax3.set_title(r"(d) $|\boldsymbol{B}|$ (G)", fontsize = font_size,y=1.02)   
        ax3.set_xlabel(r"$z/L_\mathrm{c}$",fontsize = font_size)
        ax3.set_ylabel(r"$r/H_\mathrm{c}$",fontsize = font_size)
        ax3.tick_params(labelsize = ticks_size) 
        ax4.set_title(r"(d)", fontsize = font_size,y=1.02)   
        ax4.set_xlabel(r"$z/L_\mathrm{c}$",fontsize = font_size)
        ax4.set_ylabel(r"$B$ (G)", fontsize = font_size)   
#        ax4.set_ylabel(r"$|\boldsymbol{B}|$ (G)", fontsize = font_size)   
        ax4a.set_ylabel(r"$\alpha_\mathrm{t}$ (\%)", fontsize = font_size)   
        ax4.tick_params(labelsize = ticks_size) 
        ax4.tick_params(axis='x', labelsize=ticks_size)  
        ax4.tick_params(axis='y', labelsize=ticks_size)  
        ax4a.tick_params(axis='y', labelsize=ticks_size,colors='black')  
        
        
    
#        ax101.set_xlim(0,0.5)
#        ax101.set_ylim(1e16,1e20)
#        ax101a.set_ylim(0,3)
#        ax101.grid(which='major',linestyle='--',linewidth=linewidth_grid,color=colorline_grid)
#        ax101a.spines['right'].set_color('red')
#        ax101a.yaxis.label.set_color('red')
#        ax101.tick_params(axis='x',pad=xticks_pad)
        
        
        
        
        # Plot the PIC mesh
        ax1.plot(zs_plot,rs_plot,'ko-',linewidth = line_width,markersize = marker_size)
        ax1.plot(zs_plot.transpose(),rs_plot.transpose(),'ko-',linewidth = line_width,markersize = marker_size)
        # Plot points defining mesh boundary
        if len(points) == 8:
            # Inner wall
            ax1.plot(points[0:3,0],points[0:3,1],'ro-',linewidth=line_width_boundary,markersize = marker_size)
            # Axis r = 0
            ax1.plot(points[2:4,0],points[2:4,1],'mo-',linewidth=line_width_boundary,markersize = marker_size)
            # Free loss
            ax1.plot(points[3:6,0],points[3:6,1],'bo-',linewidth=line_width_boundary,markersize = marker_size)
            # Outer wall
            ax1.plot(points[5::,0],points[5::,1],'ro-',linewidth=line_width_boundary,markersize = marker_size)
            # Injection
            ax1.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'go-',linewidth=line_width_boundary,markersize = marker_size)
        elif len(points == 10):
            # Inner wall
            ax1.plot(points[0:4,0],points[0:4,1],'ro-',linewidth=line_width_boundary,markersize = marker_size)
            # Axis r = 0
            ax1.plot(points[3:5,0],points[3:5,1],'mo-',linewidth=line_width_boundary,markersize = marker_size)
            # Free loss
            ax1.plot(points[4:7,0],points[4:7,1],'bo-',linewidth=line_width_boundary,markersize = marker_size)
            # Outer wall
            ax1.plot(points[6::,0],points[6::,1],'ro-',linewidth=line_width_boundary,markersize = marker_size)
            # Injection
            ax1.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'go-',linewidth=line_width_boundary,markersize = marker_size)
        # Plot all mesh boundary points and domain points
        for i in range(0,dims[0]):
            for j in range(0,dims[1]):
                if nodes_flag[i,j] == -1:
                    if i == 0:
                        # Axis r = 0
                        ax1.plot(zs[i,j],rs[i,j],'mo',markeredgecolor='m',markersize = marker_size)
                    elif j == dims[1] - 1 or i == dims[0] - 1:
                        # Free loss
                        ax1.plot(zs[i,j],rs[i,j],'bo',markeredgecolor='b',markersize = marker_size)
                    elif j == xi_top or i == eta_max or j == xi_bottom or i == eta_min:
                        # Material wall
                        ax1.plot(zs[i,j],rs[i,j],'ro',markeredgecolor='r',markersize = marker_size)
                    elif j == 0:
                        # Injection
                        ax1.plot(zs[i,j],rs[i,j],'go',markeredgecolor='g',markersize = marker_size)
                if nodes_flag[i,j] == 1:
                    ax1.plot(zs[i,j],rs[i,j],'ko',markersize = marker_size)      
        ax1.set_xlim(xmin,xmax)        
        ax1.set_ylim(ymin,ymax)
        ax1.set_xticks(np.arange(0.0,xmax,1))
        ax1.set_yticks(np.arange(0.0,ymax+1,2))
        ax1.set_yticks(np.arange(0.0,ymax,1))
#        ax1.set_aspect('equal', adjustable='box')
        
        # Plot the MFAM
        plot_MFAM_ax(ax2,faces,nodes,line_width)
        # Plot points defining mesh boundary
        ax2.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        ax2.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        # Plot the cathode magnetic line if given
        if np.any(elems_cath_Bline) != 0:
            ax2.plot(elem_geom[0,elems_cath_Bline],elem_geom[1,elems_cath_Bline],'g-',linewidth = line_width_boundary+0.5,markersize = marker_size)
            ax2.plot(elem_geom[0,elems_cath_Bline_2],elem_geom[1,elems_cath_Bline_2],'g-',linewidth = line_width_boundary+0.5,markersize = marker_size)
        # Plot the magnetic line passing through the elements given if any
        if np.any(elems_Bline) != 0:
            ax2.plot(elem_geom[0,elems_Bline],elem_geom[1,elems_Bline],color = 'c',linewidth = line_width_boundary+0.5,markersize = marker_size)        
        # Plot the cathode magnetic line if required
        if plot_cath_Bline == 1:
            ax2.plot(cath_Bline_z,cath_Bline_r,'g',linewidth = line_width_boundary+0.5,markersize = marker_size)
        # Plot the cathodes positions  
        if new_cath_elem_ID >= 0:
            z_cath2 = elem_geom[0,new_cath_elem_ID]
            r_cath2 = elem_geom[1,new_cath_elem_ID]
            ax2.plot(z_cath2,r_cath2,'ko',linewidth = line_width_boundary,markersize = marker_size_cath)    
        ax2.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size_cath)      
              
        ax2.set_xlim(xmin,xmax)        
        ax2.set_ylim(ymin,ymax)
#        ax2.set_yticks(np.arange(0.0,ymax+1,2))
        ax2.set_yticks(np.arange(0.0,ymax,1))
        ax2.set_xticks(np.arange(0,xmax,1))
#        ax2.set_aspect('equal', adjustable='box')

        
        # Plot the B field contour and isolines
        log_type         = 1
        auto             = 0
        min_val0         = 0.5E0
        max_val0         = 1E3
        cont             = 1
        lines            = 1
        cont_nlevels     = nlevels_contour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = -1
        nticks_cbar      = 4
        nticks_lines     = 6
        cbar_ticks       = np.array([1E11,1E12,1E13,1E14])
        lines_ticks      = np.array([2,5,10,20,50,100,200,300])
#        lines_ticks_loc  =  [(10.6,0.37),(10.02,2.21),(9.0,4.25),(7.68,4.25),(0.17,4.2),(0.7, 4.4),(1.7, 4.25),(2.5, 3.7),(5.8,4.25),(4.5,4.25),(3.2,4.25)]
        lines_ticks_loc  = "default"
        cbar_ticks_fmt    = '{%.2f}'
        lines_ticks_fmt   = '{%.1f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
        [CS,CS2] = contour_2D (ax3,'$z/L_\mathrm{c}$', '$r/H_\mathrm{c}$', font_size, ticks_size, zs, rs, Bfield_plot, nodes_flag, log_type, auto, 
                               min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                               nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                               lines_ticks_fmt, lines_ticks_color, lines_style, line_width_boundary)   
        # Isolines ticks (exponent)
        # ax3.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        ax3.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines)
#        ax3.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, manual = lines_ticks_loc, fontsize=ticks_size_isolines, zorder = 1)
        ax3.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        ax3.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)
        
        
        # --- Plot the streamlines 
        # Obtain the vectors for the uniform mesh for streamlines plotting. It must be uniform and squared mesh
        delta_x = 0.11/L_c  
        # VHT_US sims
        rvec = np.arange(rs[0,-1],rs[-1,-1]+delta_x,delta_x)
        zvec = np.copy(rvec)
        # Define number of starting points for plotting the streamlines
        start_points = np.zeros((0,2))
        # VHT_US plume 20 -----------------------------------------------------
        nstart_r = 25
        nstart_z = 50
#        nstart_r = 12
#        nstart_z = 7
        # Mid chamber axial line 1
        zstart = np.linspace(1,len(zvec)-2,nstart_z)
        rstart = 75*np.ones(nstart_z)
        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
        # Mid chamber axial line 2
        zstart = np.linspace(1,40,nstart_z)
        rstart = 95*np.ones(nstart_z)
        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
        # Mid chamber axial line 3
        zstart = np.linspace(1,40,nstart_z)
        rstart = 60*np.ones(nstart_z)
        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
        # Top plume axial line 1
        zstart = np.linspace(28,len(zvec)-2,nstart_z)
        rstart = 100*np.ones(nstart_z)
        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
        # Top plume axial line 2
        zstart = np.linspace(28,len(zvec)-2,nstart_z)
        rstart = 200*np.ones(nstart_z)
        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
        # Bottom plume axial line 1
        zstart = np.linspace(28,len(zvec)-2,nstart_z)
        rstart = 20*np.ones(nstart_z)
        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
        # Bottom plume axial line 2
        zstart = np.linspace(28,len(zvec)-2,nstart_z)
        rstart = 5*np.ones(nstart_z)
        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
        # Radial line at plume 1
        zstart = 40*np.ones(nstart_r)
        rstart = np.linspace(1,len(zvec)-2,nstart_r)
        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
        # Radial line at plume 2
        zstart = 80*np.ones(nstart_r)
        rstart = np.linspace(1,len(zvec)-2,nstart_r)
        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
        # Radial line at plume 3
        zstart = 150*np.ones(nstart_r)
        rstart = np.linspace(1,len(zvec)-2,nstart_r)
        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
        # Radial line at plume 4
        zstart = 100*np.ones(nstart_r)
        rstart = np.linspace(1,len(zvec)-2,nstart_r)
        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
        # Radial line at plume 5
        zstart = 120*np.ones(nstart_r)
        rstart = np.linspace(1,len(zvec)-2,nstart_r)
        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
        # Radial chamber line 1 
        zstart = 20*np.ones(nstart_r-5)
        rstart = np.linspace(70,100,nstart_r-5)
        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
        # Radial chamber line 2 
        zstart = 10*np.ones(nstart_r-5)
        rstart = np.linspace(60,100,nstart_r-5)
        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
        # Radial chamber line 3 
        zstart = 30*np.ones(nstart_r-5)
        rstart = np.linspace(60,100,nstart_r-5)
        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
        # Radial chamber line 4 
        zstart = 5*np.ones(nstart_r-5)
        rstart = np.linspace(60,100,nstart_r-5)
        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
        # ---------------------------------------------------------------------
        streamline_density = 2
        flag_start = 1
        flag_start = 0
        plot_start_points = 0
        streamline_color = 'b'
        arrow_size = 1
        stream = streamline_2D(ax3,zvec,rvec,dims,zs,rs,Bz_plot,Br_plot,flag_start,start_points,
                               plot_start_points,streamline_density,streamline_width,streamline_color,arrow_size,
                               arrow_style,min_length)
        
        ax3.set_xlim(xmin,xmax)        
        ax3.set_ylim(ymin,ymax)
        ax3.set_yticks(np.arange(0.0,ymax,1))
        ax3.set_xticks(np.arange(0,xmax,1))
        

        # Plot the B field axial profile
        marker_every = 5
        ax4.semilogy(zs[rind,:],Bfield_plot[rind,:], linestyle='-', linewidth = line_width_boundary, markevery=marker_every, markersize=marker_size, marker='', color='k', markeredgecolor = 'k', label="")
        ax4a.plot(zs[rind,:],alpha_ano[rind,:]*100.0, linestyle='-', linewidth = line_width_boundary, markevery=marker_every, markersize=marker_size+3, marker='s', color='k', markeredgecolor = 'k', label="")
#        ylims = ax4.get_ylim()
#        ylims = [0,275]
        ylims = [1E0,275]
        ax4.plot(zs[rind,int(xi_top)]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width_boundary, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax4.set_xlim(0,xmax)  
        ax4.set_ylim(ylims)
        ax4.set_xticks(np.arange(0,xmax,1))
#        ax4.set_yticks(np.array([0,25,50,75,100,125,150,175,200,225,250,275]))
#        ax4a.set_yticks(np.arange(0,7))
        ax4a.set_yticks(np.arange(0,6))
        
        plt.tight_layout()
        if save_flag == 1:
            plt.savefig(path_out+"HET_sims_meshes_B_alphat"+figs_format,bbox_inches='tight')
            plt.close()

                                                        
###############################################################################


if ref_case_plots == 1:
    print("######## ref_case_plots ########")
#          
#    text_size           = text_size-8
#    ticks_size          = ticks_size-8
#    font_size           = font_size-8
    text_size           = 20
    ticks_size          = 20
    font_size           = 20

#    ticks_size_isolines = 20
    ticks_size_isolines = 10
    marker_every = 3
    
    nlevels_2Dcontour = 100
    
    marker_size_mesh = 3
    marker_size_fsplit = 5
    line_width_fsplit  = 0.5
    
#    rind       = 19
    rind       = 17
#    rind       = 21
#    rind       = 32  # HT20k rm4
#    rind       = 35  # HT20k rm5
#    rind       = 29 # HT5k rm6
#    rind       = 17 # CHEOPS MP_T1
#    rind       = 29 # CHEOPS MP_T1 rm2
#    rind       = 15 # CHEOPS LP
    rind       = 15    # VHT_US MP and LP fine mesh Np and PPSX00
    rind_anode1 = rind
    rind_anode2 = 17
    zind_anode  = 8
#    elems_cath_Bline   = range(407-1,483-1+2,2) # Elements along the cathode B line for cases C1, C2 and C3
#    elems_cath_Bline   = range(875-1,951-1+2,2) # Elements along the cathode B line for case C5
#    elems_cath_Bline   = range(2057-1,2064-1+1,1) # Elements along the cathode B line for topo2 cat 2059
#    elems_cath_Bline   = range(3212-1,3300-1+1,1) # Elements along the cathode B line for topo2 cat 3298
#    elems_cath_Bline   = range(639-1,701-1+2,2) # Elements along the cathode B line for topo1 cat 699
#    elems_cath_Bline = range(1115-1,1202-1+1,1) # Elements along the cathode B line for topo2 cat 1200
#    elems_cath_Bline   = range(257-1,316-1+2,2) # Elements along the cathode B line for topo1 cat 313
    
    # elems_cath_Bline = range(519-1,519-1-30,-2)     # Elements along cathode B line for VHT_US P10 cases (no intersection with midline)
    # elems_cath_Bline = range(2393-1,2393-1-46,-1)   # Elements along cathode B line for VHT_US P20 cases
    # elems_cath_Bline = list(range(2222-1,2222-1-36,-2)) + list([2187-1]) + list(range(2184-1,2184-1-22,-2)) + list([2163-1])+list(range(2160-1,2160-1-38,-2))  # Elements along cathode B line for VHT_US P30 cases
    # elems_cath_Bline = range(1579-1,1579-1-80,-2)   # Elements along cathode B line for VHT_US P40 cases
    # Elements along cathode B line for VHT_US case P2_fcat905 (python indeces)
    # elems_cath_Bline_P2 = [591, 589, 587, 584, 583, 581, 579, 576, 575, 572, 570, 568,
    #                        566, 565, 562, 560, 558, 556, 555, 553, 551, 548, 546, 545]  
    # Elements along cathode B line for VHT_US case P2_fcat3198 (python indeces)
    # elems_cath_Bline = [1978, 1976, 1974, 1972, 1970, 1968, 1966, 1963, 1962, 1960,
    #                     1958, 1956, 1954, 1951, 1950, 1947, 1946, 1944, 1941, 1940, 1938]      
    # Elements along cathode B line for VHT_US case P3_fcat1962 (python indeces)
    # elems_cath_Bline = [1289, 1287, 1285, 1283, 1281, 1279, 1277, 1275, 1272, 1270,
    #                     1269, 1267, 1265, 1263, 1261, 1259, 1257, 1254, 1253, 1251, 1248,
    #                     1247, 1245, 1242, 1241, 1238, 1236, 1235, 1233, 1231, 1228, 1226,
    #                     1225, 1222, 1220, 1219, 1217, 1215, 1212, 1211, 1209, 1207, 1204,
    #                     1202, 1201, 1199, 1197, 1195, 1192, 1191, 1188, 1187]       
    # Elements along cathode B line for VHT_US case P4_fcat7610 (python indeces)
    # elems_cath_Bline = [4023, 4022, 4021, 4020, 4019, 4018, 4017, 4016, 4015, 4014,
    #                     4013, 4012, 4011, 4010, 4009, 4008, 4007, 4006, 4005, 4004, 4003,
    #                     4002, 4001, 4000, 3999, 3998, 3997, 3996, 3995, 3994, 3993, 3992,
    #                     3991, 3990, 3989, 3988, 3987, 3986, 3985, 3984, 3983, 3982, 3981,
    #                     3980, 3979, 3978, 3977, 3976, 3975, 3974, 3973, 3972, 3971] 
    elems_cath_Bline = []
    
    # Faces of cathode line for P2_fcat2543_2542 for GDML paper
    # faces_cath_Bline = list(range(2541-1,2631+3-1,3)) + list(range(2635-1,2638+3-1,3)) + list(range(2642-1,2676+1-1,1))
    # Faces of cathode line for P3_fcat6259_5993 for GDML paper
    # faces_cath_Bline = list([6258-1]) + list(range(6260-1,6316+2-1,2)) + list(range(6317-1,6336+1-1,1)) 
    faces_cath_Bline = []
    
    # Cathode plotting flag and cathode position in cm (for plot_zcath_012 = 2) 
    plot_zcath_012     = 1
    zcat_pos           = 5.9394542444501024 # In prof figures if plot_zcath_012 = 2
    plot_cath_contours = 1
#    plot_cath_contours = 0
    plot_cath_Bline = 1
    cath_Bline_color = 'g'
    cath_Bline_linestyle = '--'
    
    # Print out time step
    timestep = 0
    timesteps = [996,1010,1050,1095]
    timesteps = []
    
    allsteps_flag   = 1
    read_inst_data  = 0
    read_part_lists = 0
    read_flag       = 1
    
    mean_vars       = 1
    mean_type       = 0
#    last_steps      = 600
#    last_steps      = 700
    last_steps      = 1200
#    last_steps      = 1000
    step_i          = 1
    step_f          = 700
    plot_mean_vars  = 1
    
    # Flag to decide if interpolate from MFAM to a finer picM for plotting phi, Te and je components (Recommended = 1)
    interp_MFAM_picM_plot = 1
    
    # Flag to decide if plotting the angular profile points (Faraday scan)
    plot_scan_points    = 0
    # Options for plotting angular profiles in plume (Faraday probe scans)
    z_offset    = -2.9 # Distance (cm) from anode to axial position of the axis of Faraday probe scan
    r_offset    = 6.56  # Offset radius (cm) of the axis of the Faraday probe scan
    rscan       = 6.56  # Radius (cm) of the Faraday probe scan 
    ang_min     = -90   # Minimum angle for the profile (deg)
    ang_max     = 90  # Maximum angle for the profile (deg)
    Npoints_ang = 200 # Number of points for the profile 
    
    
    plot_fields_ref     = 1
    plot_dens_ref       = 1
    plot_temp_ref       = 1
    plot_vel_ref        = 0
    plot_curr_ref       = 1
    plot_nmp_ref        = 1
    plot_freq_ref       = 1
    plot_anode_ref      = 0
    plot_err_interp_ref = 1
    plot_lambdaD_ref    = 1
    plot_fsplit_ref     = 0
    
    # plot_fields_ref     = 1
    # plot_dens_ref       = 1
    # plot_temp_ref       = 1
    # plot_vel_ref        = 0
    # plot_curr_ref       = 0
    # plot_nmp_ref        = 1
    # plot_freq_ref       = 1
    # plot_anode_ref      = 0
    # plot_err_interp_ref = 1
    # plot_lambdaD_ref    = 1
    # plot_fsplit_ref     = 0
    
    # plot_fields_ref     = 0
    # plot_dens_ref       = 0
    # plot_temp_ref       = 0
    # plot_vel_ref        = 0
    # plot_curr_ref       = 1
    # plot_nmp_ref        = 0
    # plot_freq_ref       = 0
    # plot_anode_ref      = 0
    # plot_err_interp_ref = 0
    # plot_lambdaD_ref    = 0
    # plot_fsplit_ref     = 0
    
    # plot_fields_ref     = 0
    # plot_dens_ref       = 0
    # plot_temp_ref       = 0
    # plot_vel_ref        = 0
    # plot_curr_ref       = 0
    # plot_nmp_ref        = 0
    # plot_freq_ref       = 0
    # plot_anode_ref      = 0    
    # plot_err_interp_ref = 0
    # plot_lambdaD_ref    = 0
    # plot_fsplit_ref     = 0
    
#    plot_fields_ref     = 0
#    plot_dens_ref       = 0
#    plot_temp_ref       = 0
#    plot_vel_ref        = 0
#    plot_curr_ref       = 0
#    plot_nmp_ref        = 0
#    plot_freq_ref       = 1
#    plot_anode_ref      = 0    
#    plot_err_interp_ref = 0
#    plot_lambdaD_ref    = 0
#    plot_fsplit_ref     = 0
    
#    plot_fields_ref     = 1
#    plot_dens_ref       = 1
#    plot_temp_ref       = 1
#    plot_vel_ref        = 0
#    plot_curr_ref       = 1
#    plot_nmp_ref        = 1
#    plot_freq_ref       = 1
#    plot_anode_ref      = 0    
#    plot_err_interp_ref = 1
#    plot_lambdaD_ref    = 0
#    plot_fsplit_ref     = 1
    
    # plot_fields_ref     = 1
    # plot_dens_ref       = 1
    # plot_temp_ref       = 0
    # plot_vel_ref        = 0
    # plot_curr_ref       = 0
    # plot_nmp_ref        = 0
    # plot_freq_ref       = 0
    # plot_anode_ref      = 0    
    # plot_err_interp_ref = 0
    # plot_lambdaD_ref    = 0
    # plot_fsplit_ref     = 0

    plot_fields_ref     = 0
    plot_dens_ref       = 0
    plot_temp_ref       = 0
    plot_vel_ref        = 1
    plot_curr_ref       = 0
    plot_nmp_ref        = 0
    plot_freq_ref       = 0
    plot_anode_ref      = 0    
    plot_err_interp_ref = 0
    plot_lambdaD_ref    = 0
    plot_fsplit_ref     = 0
    

    
    Bline_all2Dplots = 0
    cath2D_plots     = 0
    cath2D_title     = r"(b)"
    

    if allsteps_flag == 0:
        mean_vars = 0

    
    # Simulation names
    nsims = 1    
    
    # Flag for old sims (1: old sim files, 0: new sim files)
#    oldpost_sim      = np.array([4,0,0,0,0,0],dtype = int)
#    oldsimparams_sim = np.array([15,0,0,0,0,0],dtype = int)   
    
    oldpost_sim      = np.array([5,0,0,0,0,0],dtype = int)
    oldsimparams_sim = np.array([15,0,0,0,0,0],dtype = int)   
    
    oldpost_sim      = np.array([6,0,0,0,0,0],dtype = int)
    oldsimparams_sim = np.array([20,0,0,0,0,0],dtype = int)   
    
    oldpost_sim      = np.array([6,0,0,0,0,0],dtype = int)
    oldsimparams_sim = np.array([21,0,0,0,0,0],dtype = int)   
    
#    oldpost_sim      = np.array([4,0,0,0,0,0],dtype = int)
#    oldsimparams_sim = np.array([14,0,0,0,0,0],dtype = int)   
    
#    oldpost_sim      = np.array([1,0,0,0,0,0],dtype = int)
#    oldsimparams_sim = np.array([0,0,0,0,0,0],dtype = int)   
    
    
#    sim_names = ["../../../Rb_hyphen/sim/sims/SPT100_al0025_Ne5_C1"]
#    sim_names = ["../../Rb_hyphen/sim/sims/SPT100_al0025_Ne100_C1"]
#    sim_names = ["../../Rb_hyphen/sim/sims/SPT100_also1510_V1"]
#    sim_names = ["../../../Rb_hyphen/sim/sims/Topo2_n4_l200s200"]
#    sim_names = ["../../../Rb_hyphen/sim/sims/Topo2_n4_l200s200_cat3298"]
#    sim_names = ["../../../Rb_hyphen/sim/sims/Topo2_n4_l200s200_cat3298_WLSQb"]
#    sim_names = ["../../../Rb_hyphen/sim/sims/Topo1_n1_l100s100_cat699"]
#    sim_names = ["../../../Rb_hyphen/sim/sims/Topo2_n4_l200s200_cat3283_relaunch"]
#    sim_names = ["../../../Rb_hyphen/sim/sims/Topo2_n4_l200s200_cat1200_relaunch"]
#    sim_names = ["../../../Rb_hyphen/sim/sims/Topo2_n4_l200s200_cat1200_tm110_tetq125_RLC"]
#    sim_names = ["../../../Rb_hyphen/sim/sims/Topo2_n4_l200s200_cat1200_tm110_tetq125_RLC_Coll"]
#    sim_names = ["../../../sim/sims/Topo2_n4_l200s200_cat1200_tm110_tetq125_ECath2"]
#    sim_names = ["../../../sim/sims/Topo2_n4_l200s200_cat1200_tm110_tetq125_ECath_explicit"]
#    sim_names = ["../../../Rb_hyphen/sim/sims/Topo2_n4_l200s200_tm110_tetq125_ExCat12001107"]
#    sim_names = ["../../../Rb_hyphen/sim/sims/Topo1_n1_l100s100_cat313_tm110_tetq125"]
#    sim_names = ["../../../Rb_hyphen/sim/sims/Topo2_n3_l200s200_cat1200_tm110_tetq125"]
    
#    sim_names = ["../../../Rb_hyphen/sim/sims/Topo2_n4_l200s200_cat1200_tm110_tetq125_RLC_Coll_CHECK2"]
    
#    sim_names = ["../../../Rb_hyphen/sim/sims/Topo2_n4_l200s200_tm110_tetq125_ExCat12002942"]
#    sim_names = ["../../../Rb_hyphen/sim/sims/Topo2_n4_l200s200_tm110_tetq125_ExCat12001199"]

#    sim_names = ["../../../sim/sims/Topo1_n1_l100s100_cat313_tm515_te1_tq21"] # T1N1-REF
#    sim_names = ["../../../sim/sims/Topo1_n2_l100s100_cat313_tm615_te2_tq12"] # T1N2-REF
#    sim_names = ["../../../sim/sims/Topo2_n3_l200s200_cat1200_tm15_te1_tq125"] # T2N3-REF
#    sim_names = ["../../../sim/sims/Topo2_n4_l200s200_cat1200_tm15_te1_tq125"] # T2N4-REF
    
#    sim_names = ["../../../Ca_sims_files/SPT100_thesis_REF_MFAMjesus_rm"] 
    sim_names = [
#                 "../../../Ca_sims_files/SPT100_thesis_REF_MFAMjesus_rm3_picrm_oldsheath"
#                 "../../../Ca_sims_files/SPT100_thesis_REF_MFAMjesus_rm2_picrm_aljpara"
#                 "../../../Ca_sims_files/SPT100_thesis_REF_MFAMjesus_rm2_picrm_CHECKinterpalphate"
#                 "../../../Ca_sims_files/SPT100_orig_tmtetq2_Vd300"  
#                 "../../../Sr_sims_files/Topo2_n4_l200s200_cat1200_tm15_te1_tq125_last"
#                  "../../../Sr_sims_files/Topo1_n1_l100s100_cat313_tm515_te1_tq21_last"
#                 "../../../Ca_sims_files/T2N3_pm1em1_cat1200_tm15_te1_tq125_71d0dcb",
#                 "../../../Sr_sims_files/SPT100_pm2em1_cat481_tmtetq25_RLC"
#                 "../../../sim/sims/SPT100_pm2em2_cat3328_PHIchanges"
#                 "../../../sim/sims/SPT100_pm2em2_cat3328_PHIchanges_newSET"
                 
#                 "../../../sim/sims/SPT100_pm2em2_cat3328_tmtetq5_flqe45",
#                 "../../../sim/sims/SPT100_pm2em2_cat3328_tmtetq5_flqe45_tests",
    
#                 "../../../sim/sims/SPT100_pm2em2_cat3328_tmtetq5_flqe45",
#                 "../../../sim/sims/SPT100_pm2em2_cat3328_tmtetq5_flqe45_Vd200",     
            
#                 "../../../sim/sims/SPT100_pm2em2_cat3328_tmtetq5_flqe45",
#                 "../../../sim/sims/SPT100_pm2em2_cat3328_tmtetq5_flqe45_mA2",
    
#                 "../../../sim/sims/SPT100_pm2em2_cat3328_tmtetq5_flqe45",
#                 "../../../sim/sims/SPT100_pm2em2_cat3328_tmtetq5_flqe45_sig1",
            
#                 "../../../sim/sims/SPT100_pm2em2_cat3328_tmtetq5_flqe45",
#                 "../../../sim/sims/SPT100_pm2em2_wcat6143_tmtetq5_flqe45",
#                 "../../../sim/sims/SPT100_pm2em2_wcat5958_tmtetq5_flqe45",
                 
#                 "../../../sim/sims/SPT100_pm2em2_cat3328_tmtetq5_flqe45_tests",
#                 "../../../sim/sims/SPT100_pm2em2_cat3328_tmtetq5_flqe45_tqine0",
#                 "../../../sim/sims/SPT100_pm2em2_cat3328_tmtetq5_flqe45_tqine0_GDML2",
#                 "../../../Ca_hyphen/sim/sims/SPT100_pm2em2_cat3328_tmtetq5_flqe45_tqine0_70cace8",
                 
#                 "../../../sim/sims/HT5k_rm6_tm08_10te1tq25s01_WC",
#                 "../../../sim/sims/HT5k_rm6_tm08_10te1tq25s01_WC_Tcat",
#                 "../../../sim/sims/HT5k_rm6_tm08_10te1tq25s01_WC_mdotC_Tcat",
#                 "../../../Sr_hyphen/sim/sims/HT5k_rm6_tm08_10te1tq25s01_WC3_mdotC_Tcat",
#                 "../../../Sr_hyphen/sim/sims/HT5k_rm6_tm08_10te1tq25s01_WCext_mdotC_Tcat",
#                 "../../../Sr_hyphen/sim/sims/HT5k_rm6_tm08_10te1tq25s01_WC1_mdotC_Tcat",
#                 "../../../Sr_hyphen/sim/sims/HT5k_rm6_tm08_10te1tq25s01_WCext_mdotC_Tcat_bohm_avg_flag1_propverified",
#                 "../../../Sr_hyphen/sim/sims/HT5k_rm6_tm08_10te1tq25s01_WCext_mdotC_Tcat_bohm_avg_flag1",
#                 "../../../Sr_hyphen/sim/sims/HT5k_rm6_tm08_10te1tq25s01_WCext_mdotC_qcat",
#                 "../../../Sr_hyphen/sim/sims/HT5k_rm6_tm08_10te1tq25s01_WCext_mdotC_Tcat55",
#                 "../../../Sr_hyphen/sim/sims/HT5k_rm6_tm08_10te1tq25s01_WCext_mdotC_qcat_global",
#                 "../../../Ca_hyphen/sim/sims/MP_N1_VC3423_tmtetq2",
#                 "../../../Ca_hyphen/sim/sims/MP_N1_VC1296_tm2te1tq2",
#                 "../../../Ca_hyphen/sim/sims/HT20k_tm3_12te6tq25s01_V300_rm6_CEX",
#                 "../../../Ca_hyphen/sim/sims/HT20k_tm3_15te6tq25s01_V300_rm6_CEX",
#                 "../../../Ca_hyphen/sim/sims/HT20k_tm3_15te6tq25s01_V300_rm6_CEX_Iglobal",
#                 "../../../Ca_hyphen/sim/sims/HT20k_tm3_10te6tq25s01_V300_rm6_CEX",
#                 "../../../Ca_hyphen/sim/sims/HT20k_tm1_10te6tq25s01_V300_rm6_CEX",
#                 "../../../Ca_hyphen/sim/sims/HT20k_tm2_10te5tq25s01_V300_rm6",
#                 "../../../Ca_hyphen/sim/sims/HT20k_tm2_10te5tq25s01_V300_rm6_noCEX_extended",
#                 "../../../Ca_hyphen/sim/sims/MP_N1_VC1296_tm2te1tq2",
#                 "../../../Ca_hyphen/sim/sims/MP_N1_VC1296_tm2te1tq2_Nparts",
#                 "../../../Ca_hyphen/sim/sims/MP_N1_rm2_VC1296_tm2te1tq2",
#                 "../../../sim/sims/T2N4_pm1em1_cat1200_tm15_te1_tq125_NEW",
#                 "../../../Sr_hyphen/sim/sims/T2N4_pm1em1_cat1200_tm15_te1_tq125_0438e2a",
#                  "../../../Sr_hyphen/sim/sims/T2N4_pm1em1_cat1200_tm15_te1_tq125_REF",
#                  "../../../Sr_hyphen/sim/sims/T2N4_pm1em1_cat1200_tm15_te1_tq125_floating",
#                  "../../../Sr_hyphen/sim/sims/T2N4_pm1em1_cat1200_tm15_te1_tq125_GDML",
#                  "../../../Sr_hyphen/sim/sims/T2N4_pm1em1_WC1959_tm15_te1_tq125_GDML_mc0",
#                  "../../../Sr_hyphen/sim/sims/T2N4_pm1em1_WC1959_tm15_te1_tq125_GDML",
#                  "../../../Ca_hyphen/sim/sims/T2N4_pm1em1_WC1959_tm15_te1_tq125_GDML_mc0_Temin",
#                  "../../../Ca_hyphen/sim/sims/LP_testcase1_VC1612_tmtetq2_GDML",
#                  "../../../Ca_hyphen/sim/sims/LP_testcase1_VC950_tmtetq1_GDML",
#                  "../../../Ca_hyphen/sim/sims/LP_testcase1_VC1348_tmtetq1_GDML",
#                  "../../../Ca_hyphen/sim/sims/LP_testcase1_WC2219_tmtetq1_GDML",
#                  "../../../Ca_hyphen/sim/sims/LP_testcase1_WCext1_tmtetq1_GDML",
                  
#                 "../../../Ca_hyphen/sim/sims/HT5k_rm6_tm08_8te1tq25s01_V300_m14_change_inj",
                  
#                  "../../../Ca_hyphen/sim/sims/VHT_US_plume10_OP1",
#                  "../../../Ca_hyphen/sim/sims/VHT_US_plume20_OP1",
#                  "../../../Ca_hyphen/sim/sims/VHT_US_plume40_OP1",

#                "../../../Mg_hyphen/sim/sims/Plume40_OP3_global_CEX_Np_new_efieldcomp1",
    
                # "../../../sim/sims/P3G_fcat3608",
                # "../../../sim/sims/P3G_fcat1003",
                # "../../../sim/sims/P3G_fcat1298",

                # "../../../sim/sims/P3G_fcat1962",
                # "../../../sim/sims/P3G_fcat1962_alphat2",
                # "../../../sim/sims/P3G_fcat1962_alphat5",
                # "../../../sim/sims/P3G_fcat1962_alphat10",
                
                # "../../../sim/sims/P4G_Fz_Tcath_new",
                # "../../../sim/sims/P4L_Fz_Tcath_new",

                "../../../sim/sims/P3G_Tcath_new",
                # "../../../sim/sims/P3L_Tcath_new",

                # "../../../sim/sims/P2G_Tcath_new",
                # "../../../sim/sims/P2L_Tcath_new",

                # "../../../sim/sims/P1G_Tcath_new",
                # "../../../sim/sims/P1L_Tcath_new",
        
                # "../../../sim/sims/P4G_fcat7610_Fz_Tcath_new",
                # "../../../sim/sims/P4L_fcat7610_Fz_Tcath_new",
        
                # "../../../sim/sims/P3G_fcat1962_Tcath_new",
                # "../../../sim/sims/P3L_fcat1962_Tcath_new",
        
                # "../../../sim/sims/P2G_fcat3198_Tcath_new",
                # "../../../sim/sims/P2L_fcat3198_Tcath_new",
                
                # "../../../sim/sims/P2G_fcat905",
                # "../../../sim/sims/P2L_fcat905",
                
                # "../../../sim/sims/P2G_ionGDML",
                # "../../../sim/sims/P2G_fcat905_ionGDML",
                
                # "../../../sim/sims/P1G_commit06e883b",
                
                # "../../../sim/sims/CHT_sep_imp_injC_mfr8_new",
        
                # "../../../sim/sims/P2G_fcat2543_2542_Tcath_new",
                # "../../../sim/sims/P2L_fcat2543_2542_Tcath_new",
        
                # "../../../sim/sims/P3G_fcat6259_5993_Tcath_new",
                # "../../../sim/sims/P3L_fcat6259_5993_Tcath_new",
                
                # "../../../sim/sims/P4G_fcat6266_2356_Fz_Tcath_new",
                # "../../../sim/sims/P4L_fcat6266_2356_Fz_Tcath_new",
                
                
                
#                "../../../Mg_hyphen/sim/sims/Plume40_OP3_global_CEX_Np_new",
#                "../../../Mg_hyphen/sim/sims/Plume40_OP3_global_CEX_Np_new_alineq_1",
#                "../../../Mg_hyphen/sim/sims/Plume40_OP3_global_CEX_Np_new_fcat4191",
#                "../../../Mg_hyphen/sim/sims/Plume40_OP3_global_CEX_Np_new_fcat294",
#                "../../../Mg_hyphen/sim/sims/Plume40_OP3_global_CEX_Np_new_fcat1039",
    
#                "../../../Mg_hyphen/sim/sims/Plume30_OP3_global_CEX_Np_new_fcat3608",
#                "../../../Mg_hyphen/sim/sims/Plume30_OP3_global_CEX_Np_new_fcat1003",
#                "../../../Mg_hyphen/sim/sims/Plume30_OP3_global_CEX_Np_new_fcat1298",
#                "../../../Mg_hyphen/sim/sims/Plume30_OP3_global_CEX_Np_new_fcat1962",
    
    
#                "../../../H_sims/Mg/hyphen/sims/IEPC_2022/Plume10_OP3_global_CEX_Np",
#                "../../../H_sims/Mg/hyphen/sims/IEPC_2022/Plume20_OP3_global_CEX_Np",
#                "../../../H_sims/Mg/hyphen/sims/IEPC_2022/Plume30_OP3_global_CEX_Np",
#                "../../../H_sims/Mg/hyphen/sims/IEPC_2022/Plume40_OP3_global_CEX_Np",
                
#                "../../../H_sims/Mg/hyphen/sims/IEPC_2022/Plume10_OP3_local_CEX_Np",
#                "../../../H_sims/Mg/hyphen/sims/IEPC_2022/Plume20_OP3_local_CEX_Np",
#                "../../../H_sims/Mg/hyphen/sims/IEPC_2022/Plume30_OP3_local_CEX_Np",
#                "../../../H_sims/Mg/hyphen/sims/IEPC_2022/Plume40_OP3_local_CEX_Np",
    
                
#                "../../../Mg_hyphen_alejandro/sim/sims/Plume20_OP3_local",
                
#                "../../../Mg_hyphen_alejandro/sim/sims/VLP_9L_refined",
#                "../../../Mg_hyphen_alejandro/sim/sims/Neutral_injection_VLP",
#                "../../../Mg_hyphen_alejandro/sim/sims/Neutral_injection_300K",
                
#                "../../../Mg_hyphen_alejandro/sim/sims/CHEOPS_LP_CEX_OP1",
    
#                 "../../../H_sims/Mg/hyphen/sims/CHEOPS_MP/VUS_OP3",
#                 "../../../H_sims/Mg/hyphen/sims/CHEOPS_LP/PPSX00_OP1_CEX",
#                 "../../../Mg_hyphen_borja/sim/sims/PPSX00_OP1_tmte057_2_tq1_CEX",


#                 "../../../Mg_hyphen_borja/sim/sims/PPSX00_em2_OP2a_tm2_2_te52_tq1_fcat4656_CEX",
#                 "../../../Mg_hyphen_borja/sim/sims/PPSX00_em2_OP2b_tm2_2_te3_tq1_fcat4656_CEX",
#                 "../../../Ca_hyphen/sim/sims/PPSX00_em2_OP2c_tmte08_2_tq1_fcat4656_CEX",
#                 "../../../Ca_hyphen/sim/sims/PPSX00_em2_OP2f_tmte08_2_tq1_fcat4656_CEX",
#                 "../../../Mg_hyphen_borja/sim/sims/PPSX00_em2_OP2g_tmte08_2_tq1_fcat4656_CEX",
#                 "../../../Mg_hyphen_borja/sim/sims/PPSX00_em2_OP2h_tmte06_2_tq1_fcat4656_CEX",
#                 "../../../Mg_hyphen_borja/sim/sims/PPSX00_em2_OP2h_tmte06_2_tq1_fcat4656_CEX_Kr",

#                 "../../../Mg_hyphen_borja/sim/sims/PPSX00_em2_OP2c_tmte08_2_tq1_fcat2774_CEX",   
#                 "../../../Ca_hyphen/sim/sims/PPSX00_em2_OP2c_tmte08_2_tq1_fcat4656_CEX",    
#                 "../../../Mg_hyphen_borja/sim/sims/PPSX00_em2_OP2c_tmte08_2_tq1_fcat5026_CEX",         
#                 "../../../Mg_hyphen_borja/sim/sims/PPSX00_em2_OP2c_tmte08_2_tq1_fcat654_CEX",  
#                 "../../../Ca_hyphen/sim/sims/PPSX00_em2_OP2c_tmte08_2_tq1_fcat1171_CEX",  


                 ] 

#    PIC_mesh_file_name = ["PIC_mesh_LP.hdf5"]
    PIC_mesh_file_name = ["PIC_mesh.hdf5"]
    # PIC_mesh_file_name = ["PIC_mesh_may1.hdf5"]
#    PIC_mesh_file_name = ["PIC_mesh_topo2_refined4.hdf5"]
#    PIC_mesh_file_name = ["PIC_mesh_topo1_refined4.hdf5"]
#    PIC_mesh_file_name = ["SPT100_picM.hdf5"]
#    PIC_mesh_file_name = ["SPT100_picM_Reference1500points.hdf5"]
#    PIC_mesh_file_name = ["SPT100_picM_Reference1500points_rm.hdf5"]
#    PIC_mesh_file_name = ["SPT100_picM_Reference1500points_rm2.hdf5"]
#    PIC_mesh_file_name = ["HT5k_PIC_mesh_rm3.hdf5"]
#    PIC_mesh_file_name = ["PIC_mesh_MP.hdf5"]
#    PIC_mesh_file_name = ["aspire_picM_rm4.hdf5"]
#    PIC_mesh_file_name = ["aspire_picM_rm4.hdf5"]
#    PIC_mesh_file_name = ["PIC_mesh_MP.hdf5"]
#    PIC_mesh_file_name = ["PIC_mesh_MP_rm2.hdf5"]
    
#    PIC_mesh_plot_file_name = PIC_mesh_file_name
    PIC_mesh_plot_file_name = ["PIC_mesh_plot.hdf5"]
    # PIC_mesh_plot_file_name = ["PIC_mesh_may1.hdf5"]
    


    # Labels             
    labels = [r"A",r"B",r"C",r"D",r"Average"]
    
    # Line colors
    colors = ['r','g','b','m','k','m','y']
    # Markers
    markers = ['^','>','v', '<', 's', 'o','*']
    # Line style
#    linestyles = ['-','--','-.', ':','-','--','-.']
    linestyles = ['-','-','-', '-','-','-','-']
    
    # cont_xlabel = '$z$ (cm)'
    # cont_ylabel = '$r$ (cm)'
    
    cont_xlabel = '$z/L_\mathrm{c}$'
    cont_ylabel = '$r/H_\mathrm{c}$'
              
    # Profile and contour plots
    if plot_fields_ref == 1:
        plt.figure(r'phi prof ref')
        plt.xlabel(r"$z$ (cm)",fontsize = font_size)
        plt.title(r"$\phi$ (V)",fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure(r'E prof ref')
        plt.xlabel(r"$z$ (cm)",fontsize = font_size)
        plt.title(r"$\boldsymbol{E}$ (10$^{3}$ Vm$^{-1}$)",fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure(r'Ez prof ref')
        plt.xlabel(r"$z$ (cm)",fontsize = font_size)
        plt.title(r"$E_z$ (10$^{3}$ Vm$^{-1}$)",fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        
        plt.figure('phi ref')
        plt.title(r"$\phi$ (V)", fontsize = font_size,y=1.02)
        if cath2D_plots == 1:
            plt.title(cath2D_title+" $\phi$ (V)", fontsize = font_size,y=1.02)
        plt.figure('phi ref inC')
        plt.title(r"$\phi$ (V)", fontsize = font_size,y=1.02)
        if cath2D_plots == 1:
            plt.title(cath2D_title+" $\phi$ (V)", fontsize = font_size,y=1.02)
        plt.figure('E ref')
        plt.title(r"$\boldsymbol{E}$ (Vm$^{-1}$)", fontsize = font_size,y=1.02)
        if cath2D_plots == 1:
            plt.title(cath2D_title+r" $\boldsymbol{E}$ (Vm$^{-1}$)", fontsize = font_size,y=1.02)
#        plt.figure('Er ref')
#        plt.title(r"(c) $\boldsymbol{E}_r$ (10$^{3}$ Vm$^{-1}$)", fontsize = font_size,y=1.02)
#        plt.figure('Ez ref')
#        plt.title(r"(d) $\boldsymbol{E}_z$ (10$^{3}$ Vm$^{-1}$)", fontsize = font_size,y=1.02)
        plt.figure('B ref')
        plt.title(r"$\boldsymbol{B}$ (G)", fontsize = font_size,y=1.02)
        if cath2D_plots == 1:
            plt.title(cath2D_title+r" $\boldsymbol{B}$ (G)", fontsize = font_size,y=1.02)
        plt.figure('B ref inC')
        plt.title(r"$\boldsymbol{B}$ (G)", fontsize = font_size,y=1.02)
        if cath2D_plots == 1:
            plt.title(cath2D_title+r" $\boldsymbol{B}$ (G)", fontsize = font_size,y=1.02)
        plt.figure('alpha_ano ref')
        plt.title(r"$\alpha_\mathrm{t}$ (\%)", fontsize = font_size,y=1.02)
        if cath2D_plots == 1:
            plt.title(cath2D_title+r" $\alpha_\mathrm{t}$ (\%)", fontsize = font_size,y=1.02)
        plt.figure('MFAM ref')
#        plt.title(r"MFAM", fontsize = font_size,y=1.02)
#        if cath2D_plots == 1:
#            plt.title(cath2D_title+r"MFAM", fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.xlabel(cont_xlabel,fontsize = font_size)
        plt.ylabel(cont_ylabel,fontsize = font_size)
        plt.figure('MFAM ref inC')
        #        plt.title(r"MFAM", fontsize = font_size,y=1.02)
#        if cath2D_plots == 1:
#            plt.title(cath2D_title+r"MFAM", fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.xlabel(cont_xlabel,fontsize = font_size)
        plt.ylabel(cont_ylabel,fontsize = font_size)
    if plot_dens_ref == 1:
        plt.figure('n prof ref')
        plt.xlabel(r"$z$ (cm)",fontsize = font_size)
        plt.title(r"(c) $n_e$ (m$^{-3}$)", fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ni1 prof ref')
        plt.xlabel(r"$z$ (cm)",fontsize = font_size)
        plt.title(r"(c) $n_{i1}$ (m$^{-3}$)", fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ni2 prof ref')
        plt.xlabel(r"$z$ (cm)",fontsize = font_size)
        plt.title(r"(e) $n_{i2}$ (m$^{-3}$)", fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ratio_ni1_ni2 prof ref')
        plt.xlabel(r"$z$ (cm)",fontsize = font_size)
        plt.title(r"(g) $n_{i2}/n_{i1}$ (-)", fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('nn prof ref')
        plt.xlabel(r"$z$ (cm)",fontsize = font_size)
        plt.title(r"(d) $n_{n}$ (m$^{-3}$)", fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        
        plt.figure('n ref')
        plt.title(r"$n_\mathrm{e}$ (m$^{-3}$)", fontsize = font_size,y=1.02)
        if cath2D_plots == 1:
            plt.title(cath2D_title+" $n_\mathrm{e}$ (m$^{-3}$)", fontsize = font_size,y=1.02)
        plt.figure('n ref inC')
        plt.title(r"$n_\mathrm{e}$ (m$^{-3}$)", fontsize = font_size,y=1.02)
        if cath2D_plots == 1:
            plt.title(cath2D_title+" $n_\mathrm{e}$ (m$^{-3}$)", fontsize = font_size,y=1.02)
        plt.figure('ni1 ref')
        plt.title(r"$n_\mathrm{Xe+}$ (m$^{-3}$)", fontsize = font_size,y=1.02)
        if cath2D_plots == 1:
            plt.title(cath2D_title+" $n_\mathrm{Xe+}$ (m$^{-3}$)", fontsize = font_size,y=1.02)
        plt.figure('ni2 ref')
        plt.title(r"$n_\mathrm{Xe++}$ (m$^{-3}$)", fontsize = font_size,y=1.02)
        if cath2D_plots == 1:
            plt.title(cath2D_title+" $n_\mathrm{Xe++}$ (m$^{-3}$)", fontsize = font_size,y=1.02)
        plt.figure('ni3 ref')
        plt.title(r"$n_\mathrm{Xe+}^\mathrm{CEX}$ (m$^{-3}$)", fontsize = font_size,y=1.02)
        if cath2D_plots == 1:
            plt.title(cath2D_title+" $n_\mathrm{Xe+}^\mathrm{CEX}$ (m$^{-3}$)", fontsize = font_size,y=1.02)
        plt.figure('ni4 ref')
        plt.title(r"$n_\mathrm{Xe++}^\mathrm{CEX}$ (m$^{-3}$)", fontsize = font_size,y=1.02)
        if cath2D_plots == 1:
            plt.title(cath2D_title+" $n_\mathrm{Xe++}^\mathrm{CEX}$ (m$^{-3}$)", fontsize = font_size,y=1.02)
        plt.figure('ratio_ni1_ni2 ref')
        plt.title(r"$n_\mathrm{Xe++}/n_\mathrm{Xe+}$", fontsize = font_size,y=1.02)
        if cath2D_plots == 1:
            plt.title(cath2D_title+" $n_\mathrm{Xe++}/n_\mathrm{Xe+}$", fontsize = font_size,y=1.02)
        plt.figure('ratio_ni1_ni3 ref')
        plt.title(r"$n_\mathrm{Xe+}^\mathrm{CEX}/n_\mathrm{Xe+}$", fontsize = font_size,y=1.02)
        if cath2D_plots == 1:
            plt.title(cath2D_title+" $n_\mathrm{Xe+}^\mathrm{CEX}/n_\mathrm{Xe+}$", fontsize = font_size,y=1.02)
        plt.figure('ratio_ni1_ni4 ref')
        plt.title(r"$n_\mathrm{Xe++}^\mathrm{CEX}/n_\mathrm{Xe+}$", fontsize = font_size,y=1.02)
        if cath2D_plots == 1:
            plt.title(cath2D_title+" $n_\mathrm{Xe++}^\mathrm{CEX}/n_\mathrm{Xe+}$", fontsize = font_size,y=1.02)
        plt.figure('ratio_ne_neCEX ref')
        plt.title(r"$n_\mathrm{e,CEX}/n_\mathrm{e}$", fontsize = font_size,y=1.02)
        if cath2D_plots == 1:
            plt.title(cath2D_title+" $n_\mathrm{e,CEX}/n_\mathrm{e}$", fontsize = font_size,y=1.02)
        plt.figure('nn ref')
        plt.title(r"$n_\mathrm{n}$ (m$^{-3}$)", fontsize = font_size,y=1.02)
        if cath2D_plots == 1:
            plt.title(cath2D_title+" $n_\mathrm{n}$ (m$^{-3}$)", fontsize = font_size,y=1.02)
        plt.figure('nn ref inC')
        plt.title(r"$n_\mathrm{n}$ (m$^{-3}$)", fontsize = font_size,y=1.02)
        if cath2D_plots == 1:
            plt.title(cath2D_title+" $n_\mathrm{n}$ (m$^{-3}$)", fontsize = font_size,y=1.02)
        plt.figure('ratio_nn1_nn2 ref')
        plt.title(r"$n_\mathrm{n2}/n_\mathrm{n1}$", fontsize = font_size,y=1.02)
        if cath2D_plots == 1:
            plt.title(cath2D_title+" $n_\mathrm{n2}/n_\mathrm{n1}$", fontsize = font_size,y=1.02)
        plt.figure('ratio_nn1_nn3 ref')
        plt.title(r"$n_\mathrm{n3}/n_\mathrm{n1}$", fontsize = font_size,y=1.02)
        if cath2D_plots == 1:
            plt.title(cath2D_title+" $n_\mathrm{n3}/n_\mathrm{n1}$", fontsize = font_size,y=1.02)
        plt.figure('ratio_nn1_nnCEX ref')
        plt.title(r"$n_\mathrm{n,CEX}/n_\mathrm{n,slow}$", fontsize = font_size,y=1.02)
        if cath2D_plots == 1:
            plt.title(cath2D_title+" $n_\mathrm{n,CEX}/n_\mathrm{n,slow}$", fontsize = font_size,y=1.02)
        plt.figure('ratio_nn_nnCEX ref')
        plt.title(r"$n_\mathrm{n,CEX}/n_\mathrm{n}$", fontsize = font_size,y=1.02)
        if cath2D_plots == 1:
            plt.title(cath2D_title+" $n_\mathrm{n,CEX}/n_\mathrm{n}$", fontsize = font_size,y=1.02)
    if plot_temp_ref == 1:
        plt.figure(r'Te prof ref')
        plt.xlabel(r"$z$ (cm)",fontsize = font_size)
        plt.title(r"(e) $T_e$ (eV)",fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure(r'ratio_Ekin_Te prof ref')
        plt.xlabel(r"$z$ (cm)",fontsize = font_size)
        plt.title(r"(a) $m_eu_e^2/2T_e$ (-)",fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        
        plt.figure('Te ref')
        plt.title(r"$T_\mathrm{e}$ (eV)", fontsize = font_size,y=1.02)
        if cath2D_plots == 1:
            plt.title(cath2D_title+" $T_\mathrm{e}$ (eV)", fontsize = font_size,y=1.02)
        plt.figure('Te ref inC')
        plt.title(r"$T_\mathrm{e}$ (eV)", fontsize = font_size,y=1.02)
        if cath2D_plots == 1:
            plt.title(cath2D_title+" $T_\mathrm{e}$ (eV)", fontsize = font_size,y=1.02)
#        plt.figure('Ti1 ref')
#        plt.title(r"(k) $T_{i1}$ (eV)", fontsize = font_size,y=1.02)
#        plt.figure('Ti2 ref')
#        plt.title(r"(k) $T_{i2}$ (eV)", fontsize = font_size,y=1.02)
#        plt.figure('Tn ref')
#        plt.title(r"(k) $T_{n}$ (eV)", fontsize = font_size,y=1.02)
        plt.figure('ratio_Ekin_Te ref')
        plt.title(r"$m_eu_e^2/2T_e$ (-)", fontsize = font_size,y=1.02)
        if cath2D_plots == 1:
            plt.title(cath2D_title+" $m_eu_e^2/2T_e$ (-)", fontsize = font_size,y=1.02)
#        plt.figure('ratio_Ekin_Ti1 ref')
#        plt.title(r"(q) $E_{kin,i1}/T_{i1}$ (-)", fontsize = font_size,y=1.02)
#        plt.figure('ratio_Ekin_Ti2 ref')
#        plt.title(r"(q) $E_{kin,i2}/T_{i2}$ (-)", fontsize = font_size,y=1.02)
        plt.figure('pn ref')
        plt.title(r"$p_\mathrm{n}$ (mbar)", fontsize = font_size,y=1.02)
        if cath2D_plots == 1:
            plt.title(cath2D_title+" $p_\mathrm{n}$ (mbar)", fontsize = font_size,y=1.02)
        
    if plot_vel_ref == 1:
        plt.figure('Mi1 ref')
        plt.title(r"$M_\mathrm{i1}$ (-)", fontsize = font_size,y=1.02)
        plt.figure('Mi2 ref')
        plt.title(r"$M_\mathrm{i2}$ (-)", fontsize = font_size,y=1.02)
        plt.figure('Mi ref')
        plt.title(r"$M_\mathrm{i}$ (-)", fontsize = font_size,y=1.02)
        plt.figure('ue_r ref')
        plt.title(r"$u_\mathrm{re}$ (ms$^{-1}$)", fontsize = font_size,y=1.02)
        plt.figure('ue_t ref')
        plt.title(r"$u_\mathrm{\theta e}$ (ms$^{-1}$)", fontsize = font_size,y=1.02)
        plt.figure('ue_z ref')
        plt.title(r"$u_\mathrm{z e}$ (ms$^{-1}$)", fontsize = font_size,y=1.02)
        plt.figure('ue_perp ref')
        plt.title(r"$u_\mathrm{\bot e}$ (ms$^{-1}$)", fontsize = font_size,y=1.02)
        plt.figure('ue_para ref')
        plt.title(r"$u_\mathrm{\parallel e}$ (ms$^{-1}$)", fontsize = font_size,y=1.02)
        plt.figure('ratio ue_t_perp ref')
        plt.title(r"$u_\mathrm{\theta e}/u_\mathrm{\bot e}$ (-)", fontsize = font_size,y=1.02)
        plt.figure('ratio ue_t_para ref')
        plt.title(r"$u_\mathrm{\theta e}/u_\mathrm{\parallel e}$ (-)", fontsize = font_size,y=1.02)
        plt.figure('ratio ue_perp_para ref')
        plt.title(r"$u_\mathrm{\bot}/u_\mathrm{\parallel e}$ (-)", fontsize = font_size,y=1.02)
        plt.figure('ue ref')
        plt.title(r"$\boldsymbol{u}_{e}$ (ms$^{-1}$)", fontsize = font_size,y=1.02)
        plt.figure('ui ref')
        plt.title(r"$\boldsymbol{u}_\mathrm{i}$ (ms$^{-1}$)", fontsize = font_size,y=1.02)
        plt.figure('ui1_z ref')
        plt.title(r"$u_\mathrm{zi1}$ (ms$^{-1}$)", fontsize = font_size,y=1.02)
        plt.figure('un1_z ref')
        plt.title(r"$u_\mathrm{zn1}$ (ms$^{-1}$)", fontsize = font_size,y=1.02)
        plt.figure('un1_z ref inC')
        plt.title(r"$u_\mathrm{zn1}$ (ms$^{-1}$)", fontsize = font_size,y=1.02)
    if plot_curr_ref == 1:
        plt.figure('je_para prof ref')
        plt.xlabel(r"$z$ (cm)",fontsize = font_size)
        plt.title(r"(e) $-j_{\parallel e}$ (Acm$^{-2}$)", fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('je_perp prof ref')
        plt.xlabel(r"$z$ (cm)",fontsize = font_size)
        plt.title(r"(c) $-j_\mathrm{\bot e}$ (Acm$^{-2}$)", fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('je_t prof ref')
        plt.xlabel(r"$z$ (cm)",fontsize = font_size)
        plt.title(r"(a) $-j_\mathrm{\theta e}$ (Acm$^{-2}$)", fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('je zr prof ref')
        plt.xlabel(r"$z$ (cm)",fontsize = font_size)
        plt.title(r"(c) $\tilde{\boldsymbol{\jmath}}_{e}$ (Acm$^{-2}$)", fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ji_r prof ref')
        plt.xlabel(r"$z$ (cm)",fontsize = font_size)
        plt.title(r"(c) $j_{ri}$ (Acm$^{-2}$)", fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ji_z prof ref')
        plt.xlabel(r"$z$ (cm)",fontsize = font_size)
        plt.title(r"(d) $j_{zi}$ (Acm$^{-2}$)", fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ji zr prof ref')
        plt.xlabel(r"$z$ (cm)",fontsize = font_size)
        plt.title(r"(e) $\tilde{\boldsymbol{\jmath}}_{i}$ (Acm$^{-2}$)", fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
#        plt.figure('j zr prof ref')
#        plt.xlabel(r"$z$ (cm)",fontsize = font_size)
#        plt.title(r"(l) $|\tilde{\boldsymbol{\jmath}}|$ (Am$^{-2}$)", fontsize = font_size)  
#        plt.xticks(fontsize = ticks_size) 
#        plt.yticks(fontsize = ticks_size)
        
        plt.figure('je_r ref')
        plt.title(r"$-j_\mathrm{re}$ (Acm$^{-2}$)", fontsize = font_size,y=1.02)
        plt.figure('je_t ref')
        plt.title(r"$-j_\mathrm{\theta e}$ (Acm$^{-2}$)", fontsize = font_size,y=1.02)
        plt.figure('je_t ref plume')
        plt.title(r"$-j_\mathrm{\theta e}$ (Acm$^{-2}$)", fontsize = font_size,y=1.02)
        plt.figure('je_z ref')
        plt.title(r"$-j_\mathrm{ze}$ (Acm$^{-2}$)", fontsize = font_size,y=1.02)
        plt.figure('je_perp ref')
        plt.title(r"$-j_\mathrm{\bot e}$ (Acm$^{-2}$)", fontsize = font_size,y=1.02)
        plt.figure('je_para ref')
        plt.title(r"$-j_\mathrm{\parallel e}$ (Acm$^{-2}$)", fontsize = font_size,y=1.02)
        plt.figure('je zr ref')
        plt.title(r"$-\tilde{\boldsymbol{\jmath}}_\mathrm{e}$ (Acm$^{-2}$)", fontsize = font_size,y=1.02)
        if cath2D_plots == 1:
            plt.title(cath2D_title+r"$-\tilde{\boldsymbol{\jmath}}_\mathrm{e}$ (Acm$^{-2}$)", fontsize = font_size,y=1.02)
        plt.figure('je zr ref inC')
        plt.title(r"$-\tilde{\boldsymbol{\jmath}}_\mathrm{e}$ (Acm$^{-2}$)", fontsize = font_size,y=1.02)
        if cath2D_plots == 1:
            plt.title(cath2D_title+r"$-\tilde{\boldsymbol{\jmath}}_\mathrm{e}$ (Acm$^{-2}$)", fontsize = font_size,y=1.02)
        plt.figure('ji zr ref')
        plt.title(r"$\tilde{\boldsymbol{\jmath}}_\mathrm{i}$ (Acm$^{-2}$)", fontsize = font_size,y=1.02)
        if cath2D_plots == 1:
            plt.title(cath2D_title+r" $\tilde{\boldsymbol{\jmath}}_\mathrm{i}$ (Acm$^{-2}$)", fontsize = font_size,y=1.02)
        plt.figure('ji zr ref inC')
        plt.title(r"$\tilde{\boldsymbol{\jmath}}_\mathrm{i}$ (Acm$^{-2}$)", fontsize = font_size,y=1.02)
        if cath2D_plots == 1:
            plt.title(cath2D_title+r" $\tilde{\boldsymbol{\jmath}}_\mathrm{i}$ (Acm$^{-2}$)", fontsize = font_size,y=1.02)
        plt.figure('ji1 zr ref')
        plt.title(r"$\tilde{\boldsymbol{\jmath}}_\mathrm{Xe+}$ (Acm$^{-2}$)", fontsize = font_size,y=1.02)
        if cath2D_plots == 1:
            plt.title(cath2D_title+r" $\tilde{\boldsymbol{\jmath}}_\mathrm{Xe+}$ (Acm$^{-2}$)", fontsize = font_size,y=1.02)
        plt.figure('ji2 zr ref')
        plt.title(r"$\tilde{\boldsymbol{\jmath}}_\mathrm{Xe++}$ (Acm$^{-2}$)", fontsize = font_size,y=1.02)
        if cath2D_plots == 1:
            plt.title(cath2D_title+r" $\tilde{\boldsymbol{\jmath}}_\mathrm{Xe++}$ (Acm$^{-2}$)", fontsize = font_size,y=1.02)
        plt.figure('ji3 zr ref')
        plt.title(r"$\tilde{\boldsymbol{\jmath}}_\mathrm{Xe+}^\mathrm{CEX}$ (Acm$^{-2}$)", fontsize = font_size,y=1.02)
        if cath2D_plots == 1:
            plt.title(cath2D_title+r" $\tilde{\boldsymbol{\jmath}}_\mathrm{Xe+}^\mathrm{CEX}$ (Acm$^{-2}$)", fontsize = font_size,y=1.02)
        plt.figure('ji4 zr ref')
        plt.title(r"$\tilde{\boldsymbol{\jmath}}_\mathrm{Xe++}^\mathrm{CEX}$ (Acm$^{-2}$)", fontsize = font_size,y=1.02)
        if cath2D_plots == 1:
            plt.title(cath2D_title+r" $\tilde{\boldsymbol{\jmath}}_\mathrm{Xe++}^\mathrm{CEX}$ (Acm$^{-2}$)", fontsize = font_size,y=1.02)
        plt.figure('ji3 zr ref latplume')
        plt.title(r"$\tilde{\boldsymbol{\jmath}}_\mathrm{Xe+}^\mathrm{CEX}$ (Acm$^{-2}$)", fontsize = font_size,y=1.02)
        if cath2D_plots == 1:
            plt.title(cath2D_title+r" $\tilde{\boldsymbol{\jmath}}_\mathrm{Xe+}^\mathrm{CEX}$ (Acm$^{-2}$)", fontsize = font_size,y=1.02)
        plt.figure('ji4 zr ref latplume')
        plt.title(r"$\tilde{\boldsymbol{\jmath}}_\mathrm{Xe++}^\mathrm{CEX}$ (Acm$^{-2}$)", fontsize = font_size,y=1.02)
        if cath2D_plots == 1:
            plt.title(cath2D_title+r" $\tilde{\boldsymbol{\jmath}}_\mathrm{Xe++}^\mathrm{CEX}$ (Acm$^{-2}$)", fontsize = font_size,y=1.02)
        plt.figure('j zr ref')
        plt.title(r"$\tilde{\boldsymbol{\jmath}}$ (Acm$^{-2}$)", fontsize = font_size,y=1.02)
        plt.figure('j zr ref inC')
        plt.title(r"$\tilde{\boldsymbol{\jmath}}$ (Acm$^{-2}$)", fontsize = font_size,y=1.02)
#        plt.figure('F_theta ref')
#        plt.title(r"(l) $|F_{theta}/en_e\eta_e|$ (Am$^{-2}$)", fontsize = font_size,y=1.02)
#        plt.figure('rel err ji_je_z ref')
#        plt.title(r"(l) $|(j_{zi} + j_{ze})/j_{zi}|$ (-)", fontsize = font_size,y=1.02)
#        plt.figure('rel err ji_je_r ref')
#        plt.title(r"(l) $|(j_{ri} + j_{re})/j_{ri}|$ (-)", fontsize = font_size,y=1.02)
        plt.figure('je_tB_r ref')
        plt.title(r"$-j_\mathrm{\theta e}B_\mathrm{r}$ (Nm$^{-3}$)", fontsize = font_size,y=1.02)
        plt.figure('je_tB_r ref plume')
        plt.title(r"$-j_\mathrm{\theta e}B_\mathrm{r}$ (Nm$^{-3}$)", fontsize = font_size,y=1.02)
    if plot_nmp_ref == 1:
        plt.figure('Nmpi1 ref')
        plt.title(r"$N_{mp,i1}$ (-)", fontsize = font_size,y=1.02)
        plt.figure('Nmpi2 ref')
        plt.title(r"$N_{mp,i2}$ (-)", fontsize = font_size,y=1.02)
        plt.figure('Nmpn1 ref')
        plt.title(r"$N_{mp,n}$ (-)", fontsize = font_size,y=1.02)
    if plot_freq_ref == 1:
        plt.figure('all nus at A prof ref')
        plt.xlabel(r"$z$ (cm)",fontsize = font_size)
        plt.title(r"Collision frequencies at A (Hz)", fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size) 
        plt.figure('all nus at B prof ref')
        plt.xlabel(r"$z$ (cm)",fontsize = font_size)
        plt.title(r"Collision frequencies at B (Hz)", fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('all nus at C prof ref')
        plt.xlabel(r"$z$ (cm)",fontsize = font_size)
        plt.title(r"Collision frequencies at C (Hz)", fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('all nus at D prof ref')
        plt.xlabel(r"$z$ (cm)",fontsize = font_size)
        plt.title(r"Collision frequencies at D (Hz)", fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('all nus average prof ref')
        plt.xlabel(r"$z$ (cm)",fontsize = font_size)
        plt.title(r"Average collision frequencies (Hz)", fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('Hall_par prof ref')
        plt.xlabel(r"$z$ (cm)",fontsize = font_size)
        plt.title(r"$\chi$ (-)", fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('Hall_par_eff prof ref')
        plt.xlabel(r"$z$ (cm)",fontsize = font_size)
        plt.title(r"$\chi^{\ast}$ (-)", fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        
        plt.figure('Hall_par ref')
        plt.title(r"$\chi$", fontsize = font_size,y=1.02)
        if cath2D_plots == 1:
            plt.title(cath2D_title+r" $\chi$", fontsize = font_size,y=1.02)
        plt.figure('Hall_par_eff ref')
        plt.title(r"$\chi_\mathrm{t}$", fontsize = font_size,y=1.02)
        if cath2D_plots == 1:
            plt.title(cath2D_title+r" $\chi_\mathrm{t}$", fontsize = font_size,y=1.02)
        plt.figure('Hall_par_eff ref plume')
        plt.title(r"$\chi_\mathrm{t}$", fontsize = font_size,y=1.02)
        if cath2D_plots == 1:
            plt.title(cath2D_title+r" $\chi_\mathrm{t}$", fontsize = font_size,y=1.02)
        plt.figure('Hall_par_effect ref')
        plt.title(r"$\sqrt{\chi\chi_\mathrm{t}}$", fontsize = font_size,y=1.02)
        if cath2D_plots == 1:
            plt.title(cath2D_title+r" $\sqrt{\chi\chi_\mathrm{t}}$", fontsize = font_size,y=1.02)
        plt.figure('Hall_par_effect ref plume')
        plt.title(r"$\sqrt{\chi\chi_\mathrm{t}}$", fontsize = font_size,y=1.02)
        if cath2D_plots == 1:
            plt.title(cath2D_title+r" $\sqrt{\chi\chi_\mathrm{t}}$", fontsize = font_size,y=1.02)
        plt.figure('nu_e_tot ref')
        plt.title(r"$\nu_\mathrm{e}$ (Hz)", fontsize = font_size,y=1.02)
        if cath2D_plots == 1:
            plt.title(cath2D_title+r" $\nu_\mathrm{e}$ (Hz)", fontsize = font_size,y=1.02)
        plt.figure('nu_e_tot_eff ref')
        plt.title(r"$\nu_\mathrm{e} + \nu_\mathrm{t}$ (Hz)", fontsize = font_size,y=1.02)
        if cath2D_plots == 1:
            plt.title(cath2D_title+r" $\nu_\mathrm{e} + \nu_\mathrm{t}$ (Hz)", fontsize = font_size,y=1.02)
        plt.figure('nu_en ref')
        plt.title(r"$\nu_\mathrm{en}^\mathrm{el}$ (Hz)", fontsize = font_size,y=1.02)
        plt.figure('nu_ei1 ref')
        plt.title(r"$\nu_\mathrm{ei1}^\mathrm{el}$ (Hz)", fontsize = font_size,y=1.02)
        plt.figure('nu_ei2 ref')
        plt.title(r"$\nu_\mathrm{ei2}^\mathrm{el}$ (Hz)", fontsize = font_size,y=1.02)
        plt.figure('nu_i01 ref')
        plt.title(r"$\nu_\mathrm{en}^\mathrm{ion01}$ (Hz)", fontsize = font_size,y=1.02)
        plt.figure('nu_i02 ref')
        plt.title(r"$\nu_\mathrm{en}^\mathrm{ion02}$ (Hz)", fontsize = font_size,y=1.02)
        plt.figure('nu_i12 ref')
        plt.title(r"$\nu_\mathrm{en}^\mathrm{ion12}$ (Hz)", fontsize = font_size,y=1.02)
        plt.figure('nu_ei_el_tot ref')
        plt.title(r"$\nu_\mathrm{ei1}^\mathrm{el} + \nu_\mathrm{ei2}^\mathrm{el}$ (Hz)", fontsize = font_size,y=1.02)
        plt.figure('nu_ion_tot ref')
        plt.title(r"$\nu_\mathrm{en}^\mathrm{ion01} + \nu_\mathrm{en}^\mathrm{ion02} + \nu_\mathrm{ei1}^\mathrm{ion12}$ (Hz)", fontsize = font_size,y=1.02)
        plt.figure('ndot_e ref')
        plt.title(r"$S_\mathrm{e}$ (1/m$^3$s)", fontsize = font_size,y=1.02)
        plt.figure('ndot_CEX01 ref')
        plt.title(r"$S_\mathrm{CEX,01}$ (1/m$^3$s)", fontsize = font_size,y=1.02)
        plt.figure('ndot_CEX02 ref')
        plt.title(r"$S_\mathrm{CEX,02}$ (1/m$^3$s)", fontsize = font_size,y=1.02)
        
    if plot_anode_ref  == 1:
        plt.figure(r'phi_anode prof ref')
        plt.xlabel(r"$z$ (cm)",fontsize = font_size)
        plt.title(r"(a) $\phi$ (V)",fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure(r'Ez_anode prof ref')
        plt.xlabel(r"$z$ (cm)",fontsize = font_size)
        plt.title(r"(b) $E_z$ (10$^{3}$ Vm$^{-1}$)",fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('je_z_anode prof ref')
        plt.xlabel(r"$z$ (cm)",fontsize = font_size)
        plt.title(r"(c) $-j_{z e}$ (10$^{3}$ Am$^{-2}$)", fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ji_z_anode prof ref')
        plt.xlabel(r"$z$ (cm)",fontsize = font_size)
        plt.title(r"(d) $j_{z i}$ (10$^{2}$ Am$^{-2}$)", fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('n_anode prof ref')
        plt.xlabel(r"$z$ (cm)",fontsize = font_size)
        plt.title(r"(e) $n_e$ (m$^{-3}$)", fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure(r'Te_anode prof ref')
        plt.xlabel(r"$z$ (cm)",fontsize = font_size)
        plt.title(r"(f) $T_e$ (eV)",fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
    if plot_err_interp_ref == 1:
        plt.figure(r'err_interp_n prof ref')
        plt.xlabel(r"$z$ (cm)",fontsize = font_size)
        plt.title(r"(e) $\epsilon_n$ (-)",fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('err_interp_n ref')
        plt.title(r"(f) $\epsilon_{n}$ (-)", fontsize = font_size,y=1.02)
        
    if plot_lambdaD_ref == 1:
        plt.figure(r'lambdaD prof ref')
        plt.xlabel(r"$z$ (cm)",fontsize = font_size)
        plt.title(r"(a) $\lambda_D$ (mm)",fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        
        plt.figure('lambdaD ref')
        plt.title(r"$\lambda_\mathrm{D}$ (mm)", fontsize = font_size,y=1.02)
        
    if plot_fsplit_ref == 1:
        plt.figure('fsplit adv ref')
        plt.title(r"$\sum_m\frac{5}{2}\frac{p_e}{en_e}\boldsymbol{j}_e\cdot\boldsymbol{1}_n\Delta S$ (W)", fontsize = font_size,y=1.02)
        plt.figure('fsplit qperp ref')
        plt.title(r"$-\sum_m q_{\bot e}\boldsymbol{1}_n\cdot\boldsymbol{1}_\bot\Delta S$ (W)", fontsize = font_size,y=1.02)
        plt.figure('fsplit qpara ref')
        plt.title(r"$-\sum_m q_{\parallel e}\boldsymbol{1}_n\cdot\boldsymbol{1}_\parallel\Delta S$ (W)", fontsize = font_size,y=1.02)
        plt.figure('fsplit qb ref')
        plt.title(r"$-\sum_{m^\star} \boldsymbol{q}_e\cdot\boldsymbol{1}_n\Delta S$ (W)", fontsize = font_size,y=1.02) 
        plt.figure('fsplit Pperp ref')
#        plt.title(r"$-\frac{j_{\bot e}}{en_e}\boldsymbol{1}_{\bot}\cdot\nabla_{\bot} p_e V_E$ (W)", fontsize = font_size,y=1.02)
        plt.title(r"$j_{\bot e}E_\bot V_E$ (W)", fontsize = font_size,y=1.02)
        plt.figure('fsplit Ppara ref')
#        plt.title(r"$-\frac{j_{\parallel e}}{en_e}\boldsymbol{1}_{\parallel}\cdot\nabla_{\parallel} p_e V_E$ (W)", fontsize = font_size,y=1.02)
        plt.title(r"$j_{\parallel e}E_\parallel V_E$ (W)", fontsize = font_size,y=1.02)
        plt.figure('fsplit ecterm ref')
#        plt.title(r"$(\eta_{e}(j_e^2 + \boldsymbol{j}_e\cdot\boldsymbol{j}_c) + \eta_{te}j_{\theta e}^2) V_E$ (W)", fontsize = font_size,y=1.02)
#        plt.title(r"$\frac{m_e(\alpha_{te}-\alpha_{tm})\omega_{ce}}{e^2n_e}j_{\theta e}^2 V_E$ (W)", fontsize = font_size,y=1.02)
        plt.title(r"$\frac{(\alpha_{te}-\alpha_{tm})B}{en_e}j_{\theta e}^2 V_E$ (W)", fontsize = font_size,y=1.02)
        plt.figure('fsplit inel ref')
        plt.title(r"$Q_{inel} V_E$ (W)", fontsize = font_size,y=1.02)

        plt.figure('fsplit q ref')
        plt.title(r"$-\sum_m \boldsymbol{q}_e\cdot\boldsymbol{1}_n\Delta S$ (W)", fontsize = font_size,y=1.02)
        plt.figure('fsplit eflux ref')
        plt.title(r"$-\sum_m (-\frac{5}{2}\frac{p_e}{en_e}\boldsymbol{j}_e + \boldsymbol{q}_e)\cdot\boldsymbol{1}_n\Delta S$ (W)", fontsize = font_size,y=1.02)
        plt.figure('fsplit P ref')
#        plt.title(r"$-\frac{\boldsymbol{j}_e}{en_e}\cdot\nabla p_e V_E$ (W)", fontsize = font_size,y=1.02)
        plt.title(r"$\boldsymbol{j}_e\cdot\boldsymbol{E} V_E$ (W)", fontsize = font_size,y=1.02)
        plt.figure('fsplit LHS ref')
        plt.title(r"$\frac{\partial}{\partial t}\left(\frac{3}{2}p_e\right) V_E$ (W)", fontsize = font_size,y=1.02)
        
   
    ######################## READ INPUT/OUTPUT FILES ##########################
    k = 0
    ind_ini_letter = sim_names[k].rfind('/') + 1
    print("##### CASE "+str(k+1)+": "+sim_names[k][ind_ini_letter::]+" #####")
    print("##### oldsimparams_sim = "+str(oldsimparams_sim[k])+" #####")
    print("##### oldpost_sim      = "+str(oldpost_sim[k])+" #####")
    print("##### last_steps       = "+str(last_steps)+" #####")
    # Obtain paths to simulation files
    path_picM         = sim_names[k]+"/SET/inp/"+PIC_mesh_file_name[k]
    path_picM_plot    = sim_names[k]+"/SET/inp/"+PIC_mesh_plot_file_name[k]
    path_simstate_inp = sim_names[k]+"/CORE/inp/SimState.hdf5"
    # --------------
    path_simstate_out = sim_names[k]+"/CORE/out/SimState.hdf5"
    path_postdata_out = sim_names[k]+"/CORE/out/PostData.hdf5"
    path_simparams_inp = sim_names[k]+"/CORE/inp/sim_params.inp"
     # --------------
#    path_simstate_out = sim_names[k]+"/CORE/out/60000steps_after_changes_it_matching_modified_iterations/SimState.hdf5"
#    path_postdata_out = sim_names[k]+"/CORE/out/60000steps_after_changes_it_matching_modified_iterations/PostData.hdf5"
#    path_simparams_inp = sim_names[k]+"/CORE/inp/sim_params.inp"
    # --------------
#    path_simstate_out = sim_names[k]+"/CORE/out/60000steps_cond_wall_connect1_hefunc1_jefl1_280V/SimState.hdf5"
#    path_postdata_out = sim_names[k]+"/CORE/out/60000steps_cond_wall_connect1_hefunc1_jefl1_280V/PostData.hdf5"
#    path_simparams_inp = sim_names[k]+"/CORE/inp/sim_params.inp"
    # --------------
#    path_simstate_out = sim_names[k]+"/CORE/out/60000steps_cond_wall_connect1_hefunc1_jefl1_70V_plume/SimState.hdf5"
#    path_postdata_out = sim_names[k]+"/CORE/out/60000steps_cond_wall_connect1_hefunc1_jefl1_70V_plume/PostData.hdf5"
#    path_simparams_inp = sim_names[k]+"/CORE/inp/sim_params.inp"
    # --------------
    
    print("Reading results...")
    [num_ion_spe,num_neu_spe,Z_ion_spe,n_mp_cell_i,n_mp_cell_n,n_mp_cell_i_min,
           n_mp_cell_i_max,n_mp_cell_n_min,n_mp_cell_n_max,min_ion_plasma_density,
           m_A,spec_refl_prob,ene_bal,points,zs,rs,zscells,rscells,dims,
           nodes_flag,cells_flag,cells_vol,volume,vol,ind_maxr_c,ind_maxz_c,nr_c,nz_c,
           eta_max,eta_min,xi_top,xi_bottom,time,time_fast,steps,steps_fast,dt,dt_e,
           nsteps,nsteps_fast,nsteps_eFld,faces,nodes,elem_n,boundary_f,face_geom,elem_geom,
           versors_e,versors_f,n_faces,n_elems,n_faces_boundary,bIDfaces_Dwall,bIDfaces_Awall,
           bIDfaces_FLwall,IDfaces_Dwall,IDfaces_Awall,IDfaces_FLwall,zfaces_Dwall,
           rfaces_Dwall,Afaces_Dwall,zfaces_Awall,rfaces_Awall,Afaces_Awall,
           zfaces_FLwall,rfaces_FLwall,Afaces_FLwall,zfaces_Cwall,rfaces_Cwall,Afaces_Cwall,
           cath_elem,z_cath,r_cath,V_cath,mass,ssIons1,ssIons2,ssNeutrals1,ssNeutrals2,
           n_mp_i1_list,n_mp_i2_list,n_mp_n1_list,n_mp_n2_list,
           alpha_ano,alpha_ano_e,alpha_ano_q,alpha_ine,alpha_ine_q,
           alpha_ano_elems,alpha_ano_e_elems,alpha_ano_q_elems,alpha_ine_elems,
           alpha_ine_q_elems,alpha_ano_faces,alpha_ano_e_faces,alpha_ano_q_faces,
           alpha_ine_faces,alpha_ine_q_faces,
           phi,phi_elems,phi_faces,Ez,Er,Efield,Bz,Br,Bfield,Te,Te_elems,Te_faces,
           je_mag_elems,je_perp_elems,je_theta_elems,je_para_elems,je_z_elems,je_r_elems,
           je_mag_faces,je_perp_faces,je_theta_faces,je_para_faces,je_z_faces,je_r_faces,
           cs01,cs02,cs03,cs04,nn1,nn2,nn3,ni1,ni2,ni3,ni4,
           ne,ne_elems,ne_faces,fn1_x,fn1_y,fn1_z,fn2_x,fn2_y,fn2_z,fn3_x,fn3_y,fn3_z,
           fi1_x,fi1_y,fi1_z,fi2_x,fi2_y,fi2_z,fi3_x,fi3_y,fi3_z,fi4_x,fi4_y,fi4_z,
           un1_x,un1_y,un1_z,un2_x,un2_y,un2_z,un3_x,un3_y,un3_z,
           ui1_x,ui1_y,ui1_z,ui2_x,ui2_y,ui2_z,ui3_x,ui3_y,ui3_z,ui4_x,ui4_y,ui4_z,
           ji1_x,ji1_y,ji1_z,ji2_x,ji2_y,ji2_z,ji3_x,ji3_y,ji3_z,ji4_x,ji4_y,ji4_z,
           je_r,je_t,je_z,je_perp,je_para,ue_r,ue_t,ue_z,
           ue_perp,ue_para,uthetaExB,Tn1,Tn2,Tn3,Ti1,Ti2,Ti3,Ti4,
           n_mp_n1,n_mp_n2,n_mp_n3,n_mp_i1,n_mp_i2,n_mp_i3,n_mp_i4,
           avg_w_n1,avg_w_n2,avg_w_i1,avg_w_i2,neu_gen_weights1,neu_gen_weights2,
           ion_gen_weights1,ion_gen_weights2,surf_elems,n_imp_elems,imp_elems,
           imp_elems_kbc,imp_elems_MkQ1,imp_elems_Te,imp_elems_dphi_kbc,
           imp_elems_dphi_sh,imp_elems_nQ1,imp_elems_nQ2,imp_elems_ion_flux_in1,
           imp_elems_ion_flux_out1,imp_elems_ion_ene_flux_in1,
           imp_elems_ion_ene_flux_out1,imp_elems_ion_imp_ene1,
           imp_elems_ion_flux_in2,imp_elems_ion_flux_out2,
           imp_elems_ion_ene_flux_in2,imp_elems_ion_ene_flux_out2,
           imp_elems_ion_imp_ene2,imp_elems_neu_flux_in1,imp_elems_neu_flux_out1,
           imp_elems_neu_ene_flux_in1,imp_elems_neu_ene_flux_out1,
           imp_elems_neu_imp_ene1,imp_elems_neu_flux_in2,imp_elems_neu_flux_out2,
           imp_elems_neu_ene_flux_in2,imp_elems_neu_ene_flux_out2,
           imp_elems_neu_imp_ene2,tot_mass_mp_neus,tot_mass_mp_ions,tot_num_mp_neus,
           tot_num_mp_ions,tot_mass_exit_neus,tot_mass_exit_ions,mass_mp_neus,
           mass_mp_ions,num_mp_neus,num_mp_ions,avg_dens_mp_neus,avg_dens_mp_ions,
           eta_u,eta_prod,eta_thr,eta_div,eta_cur,thrust,thrust_ion,thrust_neu,thrust_e,
           thrust_m,thrust_pres,Id_inst,Id,Vd_inst,Vd,I_beam,I_tw_tot,Pd,Pd_inst,P_mat,
           P_inj,P_inf,P_ion,P_ex,P_use_tot_i,P_use_tot_n,P_use_tot,P_use_z_i,P_use_z_n,
           P_use_z_e,P_use_z,qe_wall,qe_wall_inst,Pe_faces_Dwall,Pe_faces_Awall,
           Pe_faces_FLwall,Pe_faces_Dwall_inst,Pe_faces_Awall_inst,Pe_faces_FLwall_inst,
           Pe_Dwall,Pe_Awall,Pe_FLwall,Pe_Dwall_inst,Pe_Awall_inst,Pe_FLwall_inst, 
           Pe_Cwall,Pe_Cwall_inst,
           Pi_Dwall,Pi_Awall,Pi_FLwall,Pi_FLwall_nonz,Pi_Cwall,Pn_Dwall,Pn_Awall,Pn_FLwall,
           Pn_FLwall_nonz,Pn_Cwall,P_Dwall,P_Awall,P_FLwall,Pwalls,Pionex,Ploss,Psource,Pthrust,
           Pnothrust,Pnothrust_walls,Pturb,balP,err_balP,ctr_Pd,ctr_Ploss,ctr_Pwalls,
           ctr_Pionex,ctr_P_DAwalls,ctr_P_FLwalls,ctr_P_FLwalls_in,ctr_P_FLwalls_i,
           ctr_P_FLwalls_n,ctr_P_FLwalls_e,balP_Pthrust,err_balP_Pthrust,
           ctr_balPthrust_Pd,ctr_balPthrust_Pnothrust,ctr_balPthrust_Pthrust,
           ctr_balPthrust_Pnothrust_walls,ctr_balPthrust_Pnothrust_ionex,
           err_def_balP,Isp_s,Isp_ms,
           dMdt_i1,dMdt_i2,dMdt_i3,dMdt_i4,dMdt_n1,dMdt_n2,dMdt_n3,dMdt_tot,
           mflow_coll_i1,mflow_coll_i2,mflow_coll_i3,mflow_coll_i4,mflow_coll_n1,
           mflow_coll_n2,mflow_coll_n3,mflow_fw_i1,mflow_fw_i2,mflow_fw_i3,
           mflow_fw_i4,mflow_fw_n1,mflow_fw_n2,mflow_fw_n3,mflow_tw_i1,mflow_tw_i2,
           mflow_tw_i3,mflow_tw_i4,mflow_tw_n1,mflow_tw_n2,mflow_tw_n3,
           mflow_ircmb_picS_n1,mflow_ircmb_picS_n2,mflow_ircmb_picS_n3,
           mflow_inj_i1,mflow_fwinf_i1,mflow_fwmat_i1,mflow_fwcat_i1,
           mflow_inj_i2,mflow_fwinf_i2,mflow_fwmat_i2,mflow_fwcat_i2,
           mflow_inj_i3,mflow_fwinf_i3,mflow_fwmat_i3,mflow_fwcat_i3,
           mflow_inj_i4,mflow_fwinf_i4,mflow_fwmat_i4,mflow_fwcat_i4,
           mflow_inj_n1,mflow_fwinf_n1,mflow_fwmat_n1,mflow_fwcat_n1,
           mflow_inj_n2,mflow_fwinf_n2,mflow_fwmat_n2,mflow_fwcat_n2,
           mflow_inj_n3,mflow_fwinf_n3,mflow_fwmat_n3,mflow_fwcat_n3,
           mflow_twa_i1,mflow_twinf_i1,mflow_twmat_i1,mflow_twcat_i1,
           mflow_twa_i2,mflow_twinf_i2,mflow_twmat_i2,mflow_twcat_i2,
           mflow_twa_i3,mflow_twinf_i3,mflow_twmat_i3,mflow_twcat_i3,
           mflow_twa_i4,mflow_twinf_i4,mflow_twmat_i4,mflow_twcat_i4,
           mflow_twa_n1,mflow_twinf_n1,mflow_twmat_n1,mflow_twcat_n1,
           mflow_twa_n2,mflow_twinf_n2,mflow_twmat_n2,mflow_twcat_n2,
           mflow_twa_n3,mflow_twinf_n3,mflow_twmat_n3,mflow_twcat_n3,
           mbal_n1,mbal_n2,mbal_n3,mbal_i1,mbal_i2,mbal_i3,mbal_i4,mbal_tot,
           err_mbal_n1,err_mbal_n2,err_mbal_n3,err_mbal_i1,err_mbal_i2,
           err_mbal_i3,err_mbal_i4,err_mbal_tot,ctr_mflow_coll_n1,
           ctr_mflow_fw_n1,ctr_mflow_tw_n1,ctr_mflow_coll_i1,ctr_mflow_fw_i1,
           ctr_mflow_tw_i1,ctr_mflow_coll_i2,ctr_mflow_fw_i2,ctr_mflow_tw_i2,
           ctr_mflow_coll_tot,ctr_mflow_fw_tot,ctr_mflow_tw_tot,
           dEdt_i1,dEdt_i2,dEdt_i3,dEdt_i4,dEdt_n1,dEdt_n2,dEdt_n3,
           eneflow_coll_i1,eneflow_coll_i2,eneflow_coll_i3,eneflow_coll_i4,
           eneflow_coll_n1,eneflow_coll_n2,eneflow_coll_n3,eneflow_fw_i1,
           eneflow_fw_i2,eneflow_fw_i3,eneflow_fw_i4,eneflow_fw_n1,eneflow_fw_n2,
           eneflow_fw_n3,eneflow_tw_i1,eneflow_tw_i2,eneflow_tw_i3,eneflow_tw_i4,
           eneflow_tw_n1,eneflow_tw_n2,eneflow_tw_n3,Pfield_i1,Pfield_i2,
           Pfield_i3,Pfield_i4,eneflow_inj_i1,eneflow_fwinf_i1,eneflow_fwmat_i1,
           eneflow_inj_i2,eneflow_fwinf_i2,eneflow_fwmat_i2,
           eneflow_inj_i3,eneflow_fwinf_i3,eneflow_fwmat_i3,
           eneflow_inj_i4,eneflow_fwinf_i4,eneflow_fwmat_i4,
           eneflow_inj_n1,eneflow_fwinf_n1,eneflow_fwmat_n1,
           eneflow_inj_n2,eneflow_fwinf_n2,eneflow_fwmat_n2,
           eneflow_inj_n3,eneflow_fwinf_n3,eneflow_fwmat_n3,
           eneflow_twa_i1,eneflow_twinf_i1,eneflow_twmat_i1,
           eneflow_twa_i2,eneflow_twinf_i2,eneflow_twmat_i2,
           eneflow_twa_i3,eneflow_twinf_i3,eneflow_twmat_i3,
           eneflow_twa_i4,eneflow_twinf_i4,eneflow_twmat_i4,
           eneflow_twa_n1,eneflow_twinf_n1,eneflow_twmat_n1,
           eneflow_twa_n2,eneflow_twinf_n2,eneflow_twmat_n2,
           eneflow_twa_n3,eneflow_twinf_n3,eneflow_twmat_n3,
           ndot_ion01_n1,ndot_ion02_n1,ndot_ion12_i1,ndot_ion01_n2,
           ndot_ion02_n2,ndot_ion01_n3,ndot_ion02_n3,ndot_ion12_i3,
           ndot_CEX01_i3,ndot_CEX02_i4,
           cath_type,ne_cath,Te_cath,
           nu_cath,ndot_cath,Q_cath,P_cath,V_cath_tot,ne_cath_avg,
           F_theta,Hall_par,Hall_par_eff,nu_e_tot,nu_e_tot_eff,nu_en,nu_ei1,
           nu_ei2,nu_i01,nu_i02,nu_i12,nu_ex,
           F_theta_elems,Hall_par_elems,Hall_par_eff_elems,nu_e_tot_elems,
           nu_e_tot_eff_elems,F_theta_faces,Hall_par_faces,Hall_par_eff_faces,
           nu_e_tot_faces,nu_e_tot_eff_faces,nu_en_elems,nu_ei1_elems,
           nu_ei2_elems,nu_i01_elems,nu_i02_elems,nu_i12_elems,nu_ex_elems,
           nu_en_faces,nu_ei1_faces,nu_ei2_faces,nu_i01_faces,nu_i02_faces,
           nu_i12_faces,nu_ex_faces, 
           felec_para_elems,felec_para_faces,felec_perp_elems,felec_perp_faces,
           felec_z_elems,felec_z_faces,felec_r_elems,felec_r_faces,
           Boltz,Boltz_dim,Pfield_e,Ebal_e,
           dphi_sh_b,dphi_sh_b_Te,imp_ene_e_b,imp_ene_e_b_Te,imp_ene_e_wall,
           imp_ene_e_wall_Te,ge_b,ge_b_acc,ge_sb_b,ge_sb_b_acc,delta_see,
           delta_see_acc,err_interp_n,n_cond_wall,Icond,Vcond,Icath,phi_inf,
           I_inf,f_split,f_split_adv,f_split_qperp,f_split_qpara,f_split_qb,
           f_split_Pperp,f_split_Ppara,f_split_ecterm,f_split_inel] = HET_sims_read(path_simstate_inp,path_simstate_out,
                                                                  path_postdata_out,path_simparams_inp,
                                                                  path_picM,allsteps_flag,timestep,read_inst_data,
                                                                  read_part_lists,read_flag,oldpost_sim[k],oldsimparams_sim[k])
        
    #### NOTE: After change in eFld collisions, ionization collisions are 
    #          not multiplied by the charge number jump (as before). 
    #          We do it here
    if oldpost_sim[k] >= 3:
        nu_i02 = 2.0*nu_i02
    #######################################################################
        
    print("Generating plotting variables (NaN in ghost nodes)...")                                                                                                      
    [Br,Bz,Bfield,phi,Er,Ez,Efield,nn1,
      nn2,nn3,ni1,ni2,ni3,ni4,ne,fn1_x,fn1_y,fn1_z,fn2_x,fn2_y,
      fn2_z,fn3_x,fn3_y,fn3_z,fi1_x,fi1_y,fi1_z,fi2_x,fi2_y,
      fi2_z,fi3_x,fi3_y,fi3_z,fi4_x,fi4_y,fi4_z,un1_x,un1_y,
      un1_z,un2_x,un2_y,un2_z,un3_x,un3_y,un3_z,ui1_x,ui1_y,
      ui1_z,ui2_x,ui2_y,ui2_z,ui3_x,ui3_y,ui3_z,ui4_x,ui4_y,
      ui4_z,ji1_x,ji1_y,ji1_z,ji2_x,ji2_y,ji2_z,ji3_x,ji3_y,
      ji3_z,ji4_x,ji4_y,ji4_z,je_r,je_t,je_z,je_perp,je_para,
      ue_r,ue_t,ue_z,ue_perp,ue_para,uthetaExB,Tn1,Tn2,Tn3,
      Ti1,Ti2,Ti3,Ti4,Te,n_mp_n1,n_mp_n2,n_mp_n3,
      n_mp_i1,n_mp_i2,n_mp_i3,n_mp_i4,avg_w_n1,avg_w_n2,
      avg_w_i1,avg_w_i2,neu_gen_weights1,neu_gen_weights2,
      ion_gen_weights1,ion_gen_weights2,ndot_ion01_n1,
      ndot_ion02_n1,ndot_ion12_i1,ndot_ion01_n2,ndot_ion02_n2,
      ndot_ion01_n3,ndot_ion02_n3,ndot_ion12_i3,ndot_CEX01_i3,ndot_CEX02_i4,
      F_theta,Hall_par,Hall_par_eff,nu_e_tot,nu_e_tot_eff,nu_en,nu_ei1,
      nu_ei2,nu_i01,nu_i02,nu_i12,nu_ex,err_interp_n,f_split_adv,
      f_split_qperp,f_split_qpara,f_split_qb,f_split_Pperp,
      f_split_Ppara,f_split_ecterm,f_split_inel,alpha_ano,alpha_ano_e,
      alpha_ano_q,alpha_ine,alpha_ine_q] = HET_sims_plotvars(nodes_flag,cells_flag,Br,Bz,Bfield,phi,Er,Ez,Efield,nn1,
                                                             nn2,nn3,ni1,ni2,ni3,ni4,ne,fn1_x,fn1_y,fn1_z,fn2_x,fn2_y,
                                                             fn2_z,fn3_x,fn3_y,fn3_z,fi1_x,fi1_y,fi1_z,fi2_x,fi2_y,
                                                             fi2_z,fi3_x,fi3_y,fi3_z,fi4_x,fi4_y,fi4_z,un1_x,un1_y,
                                                             un1_z,un2_x,un2_y,un2_z,un3_x,un3_y,un3_z,ui1_x,ui1_y,
                                                             ui1_z,ui2_x,ui2_y,ui2_z,ui3_x,ui3_y,ui3_z,ui4_x,ui4_y,
                                                             ui4_z,ji1_x,ji1_y,ji1_z,ji2_x,ji2_y,ji2_z,ji3_x,ji3_y,
                                                             ji3_z,ji4_x,ji4_y,ji4_z,je_r,je_t,je_z,je_perp,je_para,
                                                             ue_r,ue_t,ue_z,ue_perp,ue_para,uthetaExB,Tn1,Tn2,Tn3,
                                                             Ti1,Ti2,Ti3,Ti4,Te,n_mp_n1,n_mp_n2,n_mp_n3,
                                                             n_mp_i1,n_mp_i2,n_mp_i3,n_mp_i4,avg_w_n1,avg_w_n2,
                                                             avg_w_i1,avg_w_i2,neu_gen_weights1,neu_gen_weights2,
                                                             ion_gen_weights1,ion_gen_weights2,ndot_ion01_n1,
                                                             ndot_ion02_n1,ndot_ion12_i1,ndot_ion01_n2,ndot_ion02_n2,
                                                             ndot_ion01_n3,ndot_ion02_n3,ndot_ion12_i3,ndot_CEX01_i3,
                                                             ndot_CEX02_i4,F_theta,Hall_par,Hall_par_eff,nu_e_tot,
                                                             nu_e_tot_eff,nu_en,nu_ei1,nu_ei2,nu_i01,nu_i02,nu_i12,nu_ex,
                                                             err_interp_n,f_split_adv,f_split_qperp,f_split_qpara,
                                                             f_split_qb,f_split_Pperp,f_split_Ppara,f_split_ecterm,
                                                             f_split_inel,alpha_ano,alpha_ano_e,alpha_ano_q,alpha_ine,
                                                             alpha_ine_q)
    if mean_vars == 1:        
        print("Averaging variables...")                                                                              
        [phi_mean,Er_mean,Ez_mean,Efield_mean,nn1_mean,nn2_mean,nn3_mean,
           ni1_mean,ni2_mean,ni3_mean,ni4_mean,ne_mean,fn1_x_mean,fn1_y_mean,
           fn1_z_mean,fn2_x_mean,fn2_y_mean,fn2_z_mean,fn3_x_mean,fn3_y_mean,
           fn3_z_mean,fi1_x_mean,fi1_y_mean,fi1_z_mean,fi2_x_mean,fi2_y_mean,
           fi2_z_mean,fi3_x_mean,fi3_y_mean,fi3_z_mean,fi4_x_mean,fi4_y_mean,
           fi4_z_mean,un1_x_mean,un1_y_mean,un1_z_mean,un2_x_mean,un2_y_mean,
           un2_z_mean,un3_x_mean,un3_y_mean,un3_z_mean,ui1_x_mean,ui1_y_mean,
           ui1_z_mean,ui2_x_mean,ui2_y_mean,ui2_z_mean,ui3_x_mean,ui3_y_mean,
           ui3_z_mean,ui4_x_mean,ui4_y_mean,ui4_z_mean,ji1_x_mean,ji1_y_mean,
           ji1_z_mean,ji2_x_mean,ji2_y_mean,ji2_z_mean,ji3_x_mean,ji3_y_mean,
           ji3_z_mean,ji4_x_mean,ji4_y_mean,ji4_z_mean,je_r_mean,je_t_mean,
           je_z_mean,je_perp_mean,je_para_mean,ue_r_mean,ue_t_mean,ue_z_mean,
           ue_perp_mean,ue_para_mean,uthetaExB_mean,Tn1_mean,Tn2_mean,Tn3_mean,
           Ti1_mean,Ti2_mean,Ti3_mean,Ti4_mean,Te_mean,n_mp_n1_mean,n_mp_n2_mean,
           n_mp_n3_mean,n_mp_i1_mean,n_mp_i2_mean,n_mp_i3_mean,n_mp_i4_mean,
           avg_w_n1_mean,avg_w_n2_mean,avg_w_i1_mean,avg_w_i2_mean,
           neu_gen_weights1_mean,neu_gen_weights2_mean,ion_gen_weights1_mean,
           ion_gen_weights2_mean,ndot_ion01_n1_mean,ndot_ion02_n1_mean,
           ndot_ion12_i1_mean,ndot_ion01_n2_mean,ndot_ion02_n2_mean,
           ndot_ion01_n3_mean,ndot_ion02_n3_mean,ndot_ion12_i3_mean,
           ndot_CEX01_i3_mean,ndot_CEX02_i4_mean,
           ne_cath_mean,Te_cath_mean,nu_cath_mean,ndot_cath_mean,
           F_theta_mean,Hall_par_mean,Hall_par_eff_mean,nu_e_tot_mean,
           nu_e_tot_eff_mean,nu_en_mean,nu_ei1_mean,nu_ei2_mean,nu_i01_mean,
           nu_i02_mean,nu_i12_mean,nu_ex_mean,
           Boltz_mean,Boltz_dim_mean,phi_elems_mean,phi_faces_mean,ne_elems_mean,
           ne_faces_mean,Te_elems_mean,Te_faces_mean,err_interp_n_mean,f_split_adv_mean,
           f_split_qperp_mean,f_split_qpara_mean,f_split_qb_mean,f_split_Pperp_mean,
           f_split_Ppara_mean,f_split_ecterm_mean,f_split_inel_mean,
           je_perp_elems_mean,je_theta_elems_mean,je_para_elems_mean,
           je_z_elems_mean,je_r_elems_mean,je_perp_faces_mean,je_theta_faces_mean,
           je_para_faces_mean,je_z_faces_mean,je_r_faces_mean,
           F_theta_elems_mean,Hall_par_elems_mean,Hall_par_eff_elems_mean,
           nu_e_tot_elems_mean,nu_e_tot_eff_elems_mean,F_theta_faces_mean,
           Hall_par_faces_mean,Hall_par_eff_faces_mean,nu_e_tot_faces_mean,
           nu_e_tot_eff_faces_mean,nu_en_elems_mean,nu_ei1_elems_mean,
           nu_ei2_elems_mean,nu_i01_elems_mean,nu_i02_elems_mean,
           nu_i12_elems_mean,nu_ex_elems_mean,nu_en_faces_mean,
           nu_ei1_faces_mean,nu_ei2_faces_mean,nu_i01_faces_mean,
           nu_i02_faces_mean,nu_i12_faces_mean,nu_ex_faces_mean] = HET_sims_mean(nsteps,mean_type,last_steps,step_i,step_f,Z_ion_spe,
                                                                                 num_ion_spe,num_neu_spe,phi,Er,Ez,
                                                                                 Efield,Br,Bz,Bfield,nn1,nn2,nn3,ni1,ni2,ni3,ni4,ne,fn1_x,
                                                                                 fn1_y,fn1_z,fn2_x,fn2_y,fn2_z,fn3_x,fn3_y,fn3_z,fi1_x,fi1_y,
                                                                                 fi1_z,fi2_x,fi2_y,fi2_z,fi3_x,fi3_y,fi3_z,fi4_x,fi4_y,fi4_z,
                                                                                 un1_x,un1_y,un1_z,un2_x,un2_y,un2_z,un3_x,un3_y,un3_z,ui1_x,
                                                                                 ui1_y,ui1_z,ui2_x,ui2_y,ui2_z,ui3_x,ui3_y,ui3_z,ui4_x,ui4_y,
                                                                                 ui4_z,ji1_x,ji1_y,ji1_z,ji2_x,ji2_y,ji2_z,ji3_x,ji3_y,ji3_z,
                                                                                 ji4_x,ji4_y,ji4_z,je_r,je_t,je_z,je_perp,je_para,ue_r,ue_t,
                                                                                 ue_z,ue_perp,ue_para,uthetaExB,Tn1,Tn2,Tn3,Ti1,Ti2,Ti3,Ti4,Te,
                                                                                 n_mp_n1,n_mp_n2,n_mp_n3,n_mp_i1,n_mp_i2,n_mp_i3,n_mp_i4,
                                                                                 avg_w_n1,avg_w_n2,avg_w_i1,avg_w_i2,
                                                                                 neu_gen_weights1,neu_gen_weights2,ion_gen_weights1,ion_gen_weights2,
                                                                                 ndot_ion01_n1,ndot_ion02_n1,ndot_ion12_i1,ndot_ion01_n2,ndot_ion02_n2,
                                                                                 ndot_ion01_n3,ndot_ion02_n3,ndot_ion12_i3,ndot_CEX01_i3,ndot_CEX02_i4,
                                                                                 ne_cath,Te_cath,nu_cath,ndot_cath,
                                                                                 F_theta,Hall_par,Hall_par_eff,nu_e_tot,nu_e_tot_eff,nu_en,nu_ei1,
                                                                                 nu_ei2,nu_i01,nu_i02,nu_i12,nu_ex,
                                                                                 Boltz,Boltz_dim,phi_elems,phi_faces,ne_elems,ne_faces,
                                                                                 Te_elems,Te_faces,err_interp_n,
                                                                                 f_split_adv,f_split_qperp,f_split_qpara,f_split_qb,f_split_Pperp,
                                                                                 f_split_Ppara,f_split_ecterm,f_split_inel,
                                                                                 je_perp_elems,je_theta_elems,je_para_elems,je_z_elems,je_r_elems,
                                                                                 je_perp_faces,je_theta_faces,je_para_faces,je_z_faces,je_r_faces,
                                                                                 F_theta_elems,Hall_par_elems,Hall_par_eff_elems,nu_e_tot_elems,
                                                                                 nu_e_tot_eff_elems,F_theta_faces,Hall_par_faces,Hall_par_eff_faces,
                                                                                 nu_e_tot_faces,nu_e_tot_eff_faces,nu_en_elems,nu_ei1_elems,nu_ei2_elems,
                                                                                 nu_i01_elems,nu_i02_elems,nu_i12_elems,nu_ex_elems,nu_en_faces,
                                                                                 nu_ei1_faces,nu_ei2_faces,nu_i01_faces,nu_i02_faces,nu_i12_faces,
                                                                                 nu_ex_faces)
                                                                                        
                                                                                        
    print("Obtaining final variables for plotting...") 
    if mean_vars == 1 and plot_mean_vars == 1:
        print("Plotting variables are time-averaged")
        [Br_plot,Bz_plot,Bfield_plot,phi_plot,Er_plot,Ez_plot,Efield_plot,
           nn1_plot,nn2_plot,nn3_plot,ni1_plot,ni2_plot,ni3_plot,ni4_plot,
           ne_plot,fn1_x_plot,fn1_y_plot,fn1_z_plot,fn2_x_plot,fn2_y_plot,
           fn2_z_plot,fn3_x_plot,fn3_y_plot,fn3_z_plot,fi1_x_plot,fi1_y_plot,
           fi1_z_plot,fi2_x_plot,fi2_y_plot,fi2_z_plot,fi3_x_plot,fi3_y_plot,
           fi3_z_plot,fi4_x_plot,fi4_y_plot,fi4_z_plot,un1_x_plot,un1_y_plot,
           un1_z_plot,un2_x_plot,un2_y_plot,un2_z_plot,un3_x_plot,un3_y_plot,
           un3_z_plot,ui1_x_plot,ui1_y_plot,ui1_z_plot,ui2_x_plot,ui2_y_plot,
           ui2_z_plot,ui3_x_plot,ui3_y_plot,ui3_z_plot,ui4_x_plot,ui4_y_plot,
           ui4_z_plot,ji1_x_plot,ji1_y_plot,ji1_z_plot,ji2_x_plot,ji2_y_plot,
           ji2_z_plot,ji3_x_plot,ji3_y_plot,ji3_z_plot,ji4_x_plot,ji4_y_plot,
           ji4_z_plot,je_r_plot,je_t_plot,je_z_plot,je_perp_plot,je_para_plot,
           ue_r_plot,ue_t_plot,ue_z_plot,ue_perp_plot,ue_para_plot,uthetaExB_plot,
           Tn1_plot,Tn2_plot,Tn3_plot,Ti1_plot,Ti2_plot,Ti3_plot,Ti4_plot,
           Te_plot,n_mp_n1_plot,n_mp_n2_plot,n_mp_n3_plot,
           n_mp_i1_plot,n_mp_i2_plot,n_mp_i3_plot,n_mp_i4_plot,
           avg_w_n1_plot,avg_w_n2_plot,avg_w_i1_plot,
           avg_w_i2_plot,neu_gen_weights1_plot,neu_gen_weights2_plot,
           ion_gen_weights1_plot,ion_gen_weights2_plot,ndot_ion01_n1_plot,
           ndot_ion02_n1_plot,ndot_ion12_i1_plot,ndot_ion01_n2_plot,
           ndot_ion02_n2_plot,ndot_ion01_n3_plot,ndot_ion02_n3_plot,
           ndot_ion12_i3_plot,ndot_CEX01_i3_plot,ndot_CEX02_i4_plot,ne_cath_plot,
           nu_cath_plot,ndot_cath_plot,
           F_theta_plot,Hall_par_plot,Hall_par_eff_plot,nu_e_tot_plot,
           nu_e_tot_eff_plot,nu_en_plot,nu_ei1_plot,nu_ei2_plot,nu_i01_plot,
           nu_i02_plot,nu_i12_plot,nu_ex_plot,err_interp_n_plot,f_split_adv_plot,
           f_split_qperp_plot,f_split_qpara_plot,f_split_qb_plot,
           f_split_Pperp_plot,f_split_Ppara_plot,f_split_ecterm_plot,
           f_split_inel_plot] = HET_sims_cp_vars(Br,Bz,Bfield,phi_mean,Er_mean,Ez_mean,Efield_mean,nn1_mean,nn2_mean,
                                                 nn3_mean,ni1_mean,ni2_mean,ni3_mean,ni4_mean,ne_mean,fn1_x_mean,
                                                 fn1_y_mean,fn1_z_mean,fn2_x_mean,fn2_y_mean,fn2_z_mean,
                                                 fn3_x_mean,fn3_y_mean,fn3_z_mean,fi1_x_mean,fi1_y_mean,fi1_z_mean,
                                                 fi2_x_mean,fi2_y_mean,fi2_z_mean,fi3_x_mean,fi3_y_mean,fi3_z_mean,
                                                 fi4_x_mean,fi4_y_mean,fi4_z_mean,un1_x_mean,un1_y_mean,un1_z_mean,
                                                 un2_x_mean,un2_y_mean,un2_z_mean,un3_x_mean,un3_y_mean,un3_z_mean,
                                                 ui1_x_mean,ui1_y_mean,ui1_z_mean,ui2_x_mean,ui2_y_mean,ui2_z_mean,
                                                 ui3_x_mean,ui3_y_mean,ui3_z_mean,ui4_x_mean,ui4_y_mean,ui4_z_mean,
                                                 ji1_x_mean,ji1_y_mean,ji1_z_mean,ji2_x_mean,ji2_y_mean,ji2_z_mean,
                                                 ji3_x_mean,ji3_y_mean,ji3_z_mean,ji4_x_mean,ji4_y_mean,ji4_z_mean,
                                                 je_r_mean,je_t_mean,je_z_mean,
                                                 je_perp_mean,je_para_mean,ue_r_mean,ue_t_mean,ue_z_mean,ue_perp_mean,
                                                 ue_para_mean,uthetaExB_mean,Tn1_mean,Tn2_mean,Tn3_mean,Ti1_mean,Ti2_mean,
                                                 Ti3_mean,Ti4_mean,Te_mean,n_mp_n1_mean,n_mp_n2_mean,n_mp_n3_mean,
                                                 n_mp_i1_mean,n_mp_i2_mean,n_mp_i3_mean,n_mp_i4_mean,avg_w_n1_mean,
                                                 avg_w_n2_mean,avg_w_i1_mean,avg_w_i2_mean,neu_gen_weights1_mean,
                                                 neu_gen_weights2_mean,ion_gen_weights1_mean,ion_gen_weights2_mean,
                                                 ndot_ion01_n1_mean,ndot_ion02_n1_mean,ndot_ion12_i1_mean,
                                                 ndot_ion01_n2_mean,ndot_ion02_n2_mean,ndot_ion01_n3_mean,
                                                 ndot_ion02_n3_mean,ndot_ion12_i3_mean,ndot_CEX01_i3_mean,
                                                 ndot_CEX02_i4_mean,ne_cath_mean,
                                                 nu_cath_mean,ndot_cath_mean,F_theta_mean,Hall_par_mean,Hall_par_eff_mean,
                                                 nu_e_tot_mean,nu_e_tot_eff_mean,nu_en_mean,nu_ei1_mean,nu_ei2_mean,nu_i01_mean,
                                                 nu_i02_mean,nu_i12_mean,nu_ex_mean,err_interp_n_mean,f_split_adv_mean,f_split_qperp_mean,
                                                 f_split_qpara_mean,f_split_qb_mean,f_split_Pperp_mean,f_split_Ppara_mean,
                                                 f_split_ecterm_mean,f_split_inel_mean)
    else:
        [Br_plot,Bz_plot,Bfield_plot,phi_plot,Er_plot,Ez_plot,Efield_plot,
           nn1_plot,nn2_plot,nn3_plot,ni1_plot,ni2_plot,ni3_plot,ni4_plot,
           ne_plot,fn1_x_plot,fn1_y_plot,fn1_z_plot,fn2_x_plot,fn2_y_plot,
           fn2_z_plot,fn3_x_plot,fn3_y_plot,fn3_z_plot,fi1_x_plot,fi1_y_plot,
           fi1_z_plot,fi2_x_plot,fi2_y_plot,fi2_z_plot,fi3_x_plot,fi3_y_plot,
           fi3_z_plot,fi4_x_plot,fi4_y_plot,fi4_z_plot,un1_x_plot,un1_y_plot,
           un1_z_plot,un2_x_plot,un2_y_plot,un2_z_plot,un3_x_plot,un3_y_plot,
           un3_z_plot,ui1_x_plot,ui1_y_plot,ui1_z_plot,ui2_x_plot,ui2_y_plot,
           ui2_z_plot,ui3_x_plot,ui3_y_plot,ui3_z_plot,ui4_x_plot,ui4_y_plot,
           ui4_z_plot,ji1_x_plot,ji1_y_plot,ji1_z_plot,ji2_x_plot,ji2_y_plot,
           ji2_z_plot,ji3_x_plot,ji3_y_plot,ji3_z_plot,ji4_x_plot,ji4_y_plot,
           ji4_z_plot,je_r_plot,je_t_plot,je_z_plot,je_perp_plot,je_para_plot,
           ue_r_plot,ue_t_plot,ue_z_plot,ue_perp_plot,ue_para_plot,uthetaExB_plot,
           Tn1_plot,Tn2_plot,Tn3_plot,Ti1_plot,Ti2_plot,Ti3_plot,Ti4_plot,
           Te_plot,n_mp_n1_plot,n_mp_n2_plot,n_mp_n3_plot,
           n_mp_i1_plot,n_mp_i2_plot,n_mp_i3_plot,n_mp_i4_plot,
           avg_w_n1_plot,avg_w_n2_plot,avg_w_i1_plot,
           avg_w_i2_plot,neu_gen_weights1_plot,neu_gen_weights2_plot,
           ion_gen_weights1_plot,ion_gen_weights2_plot,ndot_ion01_n1_plot,
           ndot_ion02_n1_plot,ndot_ion12_i1_plot,ndot_ion01_n2_plot,
           ndot_ion02_n2_plot,ndot_ion01_n3_plot,ndot_ion02_n3_plot,
           ndot_ion12_i3_plot,ndot_CEX01_i3_plot,ndot_CEX02_i4_plot,ne_cath_plot,
           nu_cath_plot,ndot_cath_plot,
           F_theta_plot,Hall_par_plot,Hall_par_eff_plot,nu_e_tot_plot,
           nu_e_tot_eff_plot,nu_en_plot,nu_ei1_plot,nu_ei2_plot,nu_i01_plot,
           nu_i02_plot,nu_i12_plot,nu_ex_plot,err_interp_n_plot,f_split_adv_plot,
           f_split_qperp_plot,f_split_qpara_plot,f_split_qb_plot,
           f_split_Pperp_plot,f_split_Ppara_plot,f_split_ecterm_plot,
           f_split_inel_plot] = HET_sims_cp_vars(Br,Bz,Bfield,phi,Er,Ez,Efield,nn1,
                                                 nn2,nn3,ni1,ni2,ni3,ni4,ne,fn1_x,fn1_y,fn1_z,fn2_x,fn2_y,
                                                 fn2_z,fn3_x,fn3_y,fn3_z,fi1_x,fi1_y,fi1_z,fi2_x,fi2_y,
                                                 fi2_z,fi3_x,fi3_y,fi3_z,fi4_x,fi4_y,fi4_z,un1_x,un1_y,
                                                 un1_z,un2_x,un2_y,un2_z,un3_x,un3_y,un3_z,ui1_x,ui1_y,
                                                 ui1_z,ui2_x,ui2_y,ui2_z,ui3_x,ui3_y,ui3_z,ui4_x,ui4_y,
                                                 ui4_z,ji1_x,ji1_y,ji1_z,ji2_x,ji2_y,ji2_z,ji3_x,ji3_y,
                                                 ji3_z,ji4_x,ji4_y,ji4_z,je_r,je_t,je_z,je_perp,je_para,
                                                 ue_r,ue_t,ue_z,ue_perp,ue_para,uthetaExB,Tn1,Tn2,Tn3,Ti1,Ti2,
                                                 Ti3,Ti4,Te,n_mp_n1,n_mp_n2,n_mp_n3,n_mp_i1,n_mp_i2,
                                                 n_mp_i3,n_mp_i4,avg_w_n1,avg_w_n2,
                                                 avg_w_i1,avg_w_i2,neu_gen_weights1,neu_gen_weights2,
                                                 ion_gen_weights1,ion_gen_weights2,ndot_ion01_n1,
                                                 ndot_ion02_n1,ndot_ion12_i1,ndot_ion01_n2,ndot_ion02_n2,
                                                 ndot_ion01_n3,ndot_ion02_n3,ndot_ion12_i3,ndot_CEX01_i3,
                                                 ndot_CEX02_i4,ne_cath,nu_cath,
                                                 ndot_cath,F_theta,Hall_par,Hall_par_eff,nu_e_tot,
                                                 nu_e_tot_eff,nu_en,nu_ei1,nu_ei2,nu_i01,nu_i02,nu_i12,nu_ex,
                                                 err_interp_n,f_split_adv,f_split_qperp,f_split_qpara,
                                                 f_split_qb,f_split_Pperp,f_split_Ppara,f_split_ecterm,
                                                 f_split_inel)
                                                                                                                                                               
                                                 
    # Interpolate variables directly computed at the MFAM from the MFAM to a finer PIC mesh for plotting
    # These variables include: phi, Te and je components
    if interp_MFAM_picM_plot == 1:
        if mean_vars == 1 and plot_mean_vars == 1:
            
            ji_x_mean               = ji1_x_mean + ji2_x_mean + ji3_x_mean + ji4_x_mean
            ji_y_mean               = ji1_y_mean + ji2_y_mean + ji3_y_mean + ji4_y_mean
            ji_z_mean               = ji1_z_mean + ji2_z_mean + ji3_z_mean + ji4_z_mean
            [zs_mp,rs_mp,dims_mp,nodes_flag_mp,cells_vol_mp,xi_bottom_mp,
             xi_top_mp,eta_min_mp,eta_max_mp,phi_mp,Te_mp,je_perp_mp,je_theta_mp,
             je_para_mp,je_z_mp,je_r_mp,je_2D_mp,ji_x_mp,ji_y_mp,ji_z_mp,
             ji_2D_mp,j_r_mp,j_t_mp,j_z_mp,j_2D_mp,ne_mp,Bfield_mp,Br_mp,Bz_mp,
             alpha_ano_mp,alpha_ano_e_mp,alpha_ano_q_mp,alpha_ine_mp,
             alpha_ine_q_mp] = HET_sims_interp_MFAM_picM_plot(path_picM_plot,n_elems,n_faces,elem_geom,
                                                              face_geom,versors_e,versors_f,phi_elems_mean,phi_faces_mean,Te_elems_mean,
                                                              Te_faces_mean,je_perp_elems_mean,je_theta_elems_mean,
                                                              je_para_elems_mean,je_z_elems_mean,je_r_elems_mean,
                                                              je_perp_faces_mean,je_theta_faces_mean,je_para_faces_mean,
                                                              je_z_faces_mean,je_r_faces_mean,zs,rs,ji_x_mean,ji_y_mean,
                                                              ji_z_mean,ne_mean,
                                                              alpha_ano_elems,alpha_ano_e_elems,alpha_ano_q_elems,alpha_ine_elems,
                                                              alpha_ine_q_elems,alpha_ano_faces,alpha_ano_e_faces,alpha_ano_q_faces,
                                                              alpha_ine_faces,alpha_ine_q_faces)
            
        else:
            ji_x                    = ji1_x + ji2_x + ji3_x + ji4_x
            ji_y                    = ji1_y + ji2_y + ji3_y + ji4_y
            ji_z                    = ji1_z + ji2_z + ji3_z + ji4_z
            [zs_mp,rs_mp,dims_mp,nodes_flag_mp,cells_vol_mp,xi_bottom_mp,
             xi_top_mp,eta_min_mp,eta_max_mp,phi_mp,Te_mp,je_perp_mp,je_theta_mp,
             je_para_mp,je_z_mp,je_r_mp,je_2D_mp,ji_x_mp,ji_y_mp,ji_z_mp,
             ji_2D_mp,j_r_mp,j_t_mp,j_z_mp,j_2D_mp,ne_mp,Bfield_mp,Br_mp,Bz_mp,
             alpha_ano_mp,alpha_ano_e_mp,alpha_ano_q_mp,alpha_ine_mp,
             alpha_ine_q_mp] = HET_sims_interp_MFAM_picM_plot(path_picM_plot,n_elems,n_faces,elem_geom,
                                                              face_geom,versors_e,versors_f,phi_elems,phi_faces,Te_elems,
                                                              Te_faces,je_perp_elems,je_theta_elems,
                                                              je_para_elems,je_z_elems,je_r_elems,
                                                              je_perp_faces,je_theta_faces,je_para_faces,
                                                              je_z_faces,je_r_faces,zs,rs,ji_x,ji_y,ji_z,ne,
                                                              alpha_ano_elems,alpha_ano_e_elems,alpha_ano_q_elems,alpha_ine_elems,
                                                              alpha_ine_q_elems,alpha_ano_faces,alpha_ano_e_faces,alpha_ano_q_faces,
                                                              alpha_ine_faces,alpha_ine_q_faces)
         
    
        
    # Obtain auxiliar average variables
    if interp_MFAM_picM_plot == 1:
        ue_perp_mp       = -je_perp_mp/(e*ne_mp)
        ue_theta_mp      = -je_theta_mp/(e*ne_mp)
        ue_para_mp       = -je_para_mp/(e*ne_mp)
        ue_z_mp          = -je_z_mp/(e*ne_mp)
        ue_r_mp          = -je_r_mp/(e*ne_mp)
        ue_mp            = np.sqrt(ue_r_mp**2 +ue_theta_mp**2 + ue_z_mp**2)
        Ekin_e_mp        = 0.5*me*ue_mp**2/e
        ratio_Ekin_Te_mp = Ekin_e_mp/Te_mp
        
    # Obtain angular profiles (Faraday probe scan) if required
    if plot_scan_points == 1:
        nn_mean = nn1_mean + nn2_mean + nn3_mean
        [ang_scan,r_scan,z_scan,
         B_scan,Br_scan,Bz_scan,phi_scan,Te_scan,je_perp_scan,je_theta_scan,
         je_para_scan,je_z_scan,je_r_scan,je_2D_scan,je_scan,
         ji_x_scan,ji_y_scan,ji_z_scan,ji_2D_scan,ji_scan,ne_scan,nn_scan,
         Hall_par_scan,Hall_par_eff_scan,
         j_r_scan,j_t_scan,j_z_scan,j_2D_scan,j_scan] = HET_sims_interp_scan(z_offset,r_offset,rscan,ang_min,ang_max,Npoints_ang,
                                                                              n_elems,n_faces,elem_geom,face_geom,versors_e,versors_f,
                                                                              phi_elems_mean,phi_faces_mean,Te_elems_mean,Te_faces_mean,
                                                                              je_perp_elems_mean,je_theta_elems_mean,je_para_elems_mean,
                                                                              je_z_elems_mean,je_r_elems_mean,
                                                                              je_perp_faces_mean,je_theta_faces_mean,je_para_faces_mean,
                                                                              je_z_faces_mean,je_r_faces_mean,zs,rs,ji_x_mean,ji_y_mean,
                                                                              ji_z_mean,ne_mean,nn_mean,Hall_par_mean,Hall_par_eff_mean)
                                                                             
        
    ue_plot                 = np.sqrt(ue_r_plot**2 +ue_t_plot**2 + ue_z_plot**2)
    ue2_plot                = np.sqrt(ue_perp_plot**2 +ue_t_plot**2 + ue_para_plot**2)
    ui1_plot                = np.sqrt(ui1_x_plot**2 + ui1_y_plot**2 + ui1_z_plot**2)
    ui2_plot                = np.sqrt(ui2_x_plot**2 + ui2_y_plot**2 + ui2_z_plot**2)
    cs01_plot               = np.sqrt(e*Te_plot/mass)
    cs02_plot               = np.sqrt(2*e*Te_plot/mass)
    Mi1_plot                = np.divide(ui1_plot,cs01_plot)
    Mi2_plot                = np.divide(ui2_plot,cs02_plot) 
    Ekin_e_plot             = 0.5*me*ue_plot**2/e
    Ekin_i1_plot            = 0.5*mass*ui1_plot**2/e
    Ekin_i2_plot            = 0.5*mass*ui2_plot**2/e
    ratio_Ekin_Te_plot      = Ekin_e_plot/Te_plot
    ratio_Ekin_Ti1_plot     = Ekin_i1_plot/Ti1_plot
    ratio_Ekin_Ti2_plot     = Ekin_i2_plot/Ti2_plot
    je_plot                 = np.sqrt(je_r_plot**2 + je_t_plot**2 + je_z_plot**2)    
    je2_plot                = np.sqrt(je_perp_plot**2 + je_t_plot**2 + je_para_plot**2)
    ji_x_plot               = ji1_x_plot + ji2_x_plot + ji3_x_plot + ji4_x_plot
    ji_y_plot               = ji1_y_plot + ji2_y_plot + ji3_y_plot + ji4_y_plot
    ji_z_plot               = ji1_z_plot + ji2_z_plot + ji3_z_plot + ji4_z_plot
    ji_plot                 = np.sqrt( ji_x_plot**2 + ji_y_plot**2 + ji_z_plot**2 )
    ji1_plot                = np.sqrt( ji1_x_plot**2 + ji1_y_plot**2 + ji1_z_plot**2 )
    ji2_plot                = np.sqrt( ji2_x_plot**2 + ji2_y_plot**2 + ji2_z_plot**2 )
    uimean_x_plot           = ji_x_plot/(e*ne_plot)
    uimean_y_plot           = ji_y_plot/(e*ne_plot)
    uimean_z_plot           = ji_z_plot/(e*ne_plot)
    uimean_plot             = np.sqrt( uimean_x_plot**2 + uimean_y_plot**2 + uimean_z_plot**2 )
    Z_avg                   = 1.0*ni1_plot/ne_plot + 2.0*ni2_plot/ne_plot + 1.0*ni3_plot/ne_plot + 2.0*ni4_plot/ne_plot
    cs_plot                 = np.sqrt(e*Z_avg*Te_plot/mass)
    Mi_plot                 = uimean_plot/cs_plot
    j_r_plot                = ji_x_plot + je_r_plot
    j_t_plot                = ji_y_plot + je_t_plot
    j_z_plot                = ji_z_plot + je_z_plot
    j_plot                  = np.sqrt(j_r_plot**2 + j_t_plot**2 + j_z_plot**2)
    je2D_plot               = np.sqrt(je_r_plot**2 + je_z_plot**2)
    je2D2_plot              = np.sqrt(je_para_plot**2 + je_perp_plot**2)
    ji2D_plot               = np.sqrt(ji_x_plot**2 + ji_z_plot**2)
    ji12D_plot              = np.sqrt(ji1_x_plot**2 + ji1_z_plot**2)
    ji22D_plot              = np.sqrt(ji2_x_plot**2 + ji2_z_plot**2)
    ji32D_plot              = np.sqrt(ji3_x_plot**2 + ji3_z_plot**2)
    ji42D_plot              = np.sqrt(ji4_x_plot**2 + ji4_z_plot**2)
    j2D_plot                = np.sqrt(j_r_plot**2 + j_z_plot**2)
    erel_je_plot            = np.abs(je2_plot-je_plot)/np.abs(je_plot)
    erel_je2D_plot          = np.abs(je2D2_plot-je2D_plot)/np.abs(je2D_plot)
    erel_ue_plot            = np.abs(ue2_plot-ue_plot)/np.abs(ue_plot)
    erel_jeji_plot          = np.abs(je_plot-ji_plot)/np.abs(ji_plot)
    erel_jr_plot            = np.abs(je_r_plot+ji_x_plot)/np.abs(ji_x_plot)
    erel_jz_plot            = np.abs(je_z_plot+ji_z_plot)/np.abs(ji_z_plot)
    erel_r_plot            = np.abs(je_r_plot+ji_x_plot)/np.abs(ji_x_plot)
    ratio_ue_t_perp_plot    = ue_t_plot/ue_perp_plot
    ratio_ue_t_para_plot    = ue_t_plot/ue_para_plot
    ratio_ue_perp_para_plot = ue_perp_plot/ue_para_plot
    nu_ei_el_tot_plot       = nu_ei1_plot + nu_ei2_plot
    nu_ion_tot_plot         = nu_i01_plot + nu_i02_plot + nu_i12_plot
    lambdaD_plot            = np.sqrt(eps0*(e*Te_plot)/(ne_plot*e**2))
    nn_plot                 = nn1_plot + nn2_plot + nn3_plot
    pn1_plot                = nn1_plot*Tn1_plot*e*1E-2 # Neutral pressure in mbar (1Pa = 1E-2 mbar)
    pn2_plot                = nn2_plot*Tn2_plot*e*1E-2 # Neutral pressure in mbar (1Pa = 1E-2 mbar)
    pn3_plot                = nn3_plot*Tn3_plot*e*1E-2 # Neutral pressure in mbar (1Pa = 1E-2 mbar)
    pn_plot                 = pn1_plot + pn2_plot + pn3_plot
    ratio_ni1_ni2_plot      = np.divide(ni2_plot,ni1_plot)
    ratio_ni1_ni3_plot      = np.divide(ni3_plot,ni1_plot)
    ratio_ni1_ni4_plot      = np.divide(ni4_plot,ni1_plot)
    ratio_ne_neCEX_plot     = np.divide(ni3_plot + 2*ni4_plot,ne_plot)
    ratio_nn1_nn2_plot      = np.divide(nn2_plot,nn1_plot)
    ratio_nn1_nn3_plot      = np.divide(nn3_plot,nn1_plot)
    ratio_nn1_nnCEX_plot    = np.divide(nn2_plot+nn3_plot,nn1_plot)
    ratio_nn_nnCEX_plot     = np.divide(nn2_plot+nn3_plot,nn_plot)
    
    ue                      = np.sqrt(ue_r**2 +ue_t**2 + ue_z**2)
    ratio_Ekin_Te           = (0.5*me*ue**2/e)/Te
    ji_x                    = ji1_x + ji2_x + ji3_x + ji4_x
    ji_y                    = ji1_y + ji2_y + ji3_y + ji4_y
    ji_z                    = ji1_z + ji2_z + ji3_z + ji4_z
    j_r                     = ji_x + je_r
    j_t                     = ji_y + je_t
    j_z                     = ji_z + je_z
    je2D                    = np.sqrt(je_r**2 + je_z**2)
    ji2D                    = np.sqrt(ji_x**2 + ji_z**2)
    j2D                     = np.sqrt(j_r**2 + j_z**2)
    lambdaD                 = np.sqrt(eps0*(e*Te)/(ne*e**2))
    
    f_split_q_plot     = f_split_qperp_plot + f_split_qpara_plot + f_split_qb_plot
    f_split_eflux_plot = f_split_adv_plot + f_split_q_plot
    f_split_P_plot     = f_split_Pperp_plot + f_split_Ppara_plot
    f_split_LHS_plot   = f_split_eflux_plot + f_split_P_plot + f_split_ecterm_plot + f_split_inel_plot
    
    # Obtain volume-weighted average values of effective Hall parameter, background pressure and plasma density interpolation error in plume volume (without threshold)
    Hall_par_effect_plot = np.sqrt(Hall_par_plot*Hall_par_eff_plot)
    hall_effect_mean     = 0.0
    hall_eff_mean        = 0.0
    hall_mean            = 0.0
    pn_mean              = 0.0
    err_interp_n_mean_plume = 0.0
    cells_vol_tot = 0.0
    if xi_bottom != 0:
        for icell in range(0,dims[0]-1):
            for jcell in range(int(xi_bottom),dims[1]-1):
                hall_effect_cell = 0.25*(Hall_par_effect_plot[icell,jcell] + Hall_par_effect_plot[icell,jcell+1] + Hall_par_effect_plot[icell+1,jcell+1] +Hall_par_effect_plot[icell+1,jcell])
                hall_eff_cell    = 0.25*(Hall_par_eff_plot[icell,jcell] + Hall_par_eff_plot[icell,jcell+1] + Hall_par_eff_plot[icell+1,jcell+1] +Hall_par_eff_plot[icell+1,jcell])
                hall_cell        = 0.25*(Hall_par_plot[icell,jcell] + Hall_par_plot[icell,jcell+1] + Hall_par_plot[icell+1,jcell+1] +Hall_par_plot[icell+1,jcell])
                hall_effect_mean = hall_effect_mean + hall_effect_cell*cells_vol[icell,jcell]
                hall_eff_mean    = hall_eff_mean + hall_eff_cell*cells_vol[icell,jcell]
                hall_mean        = hall_mean + hall_cell*cells_vol[icell,jcell]
                pn_cell          = 0.25*(pn_plot[icell,jcell] + pn_plot[icell,jcell+1] + pn_plot[icell+1,jcell+1] +pn_plot[icell+1,jcell])
                pn_mean          = pn_mean + pn_cell*cells_vol[icell,jcell]
                err_interp_n_cell       = 0.25*(err_interp_n_plot[icell,jcell] + err_interp_n_plot[icell,jcell+1] + err_interp_n_plot[icell+1,jcell+1] +err_interp_n_plot[icell+1,jcell])
                err_interp_n_mean_plume = err_interp_n_mean_plume + err_interp_n_cell*cells_vol[icell,jcell]
                cells_vol_tot    = cells_vol_tot + cells_vol[icell,jcell]
        hall_effect_mean = hall_effect_mean/cells_vol_tot
        hall_eff_mean    = hall_eff_mean/cells_vol_tot
        hall_mean        = hall_mean/cells_vol_tot
        pn_mean          = pn_mean/cells_vol_tot
        err_interp_n_mean_plume = err_interp_n_mean_plume/cells_vol_tot
    
    # Obtain plasma density interpolation error in all domain
    err_interp_n_mean_complete = 0.0
    cells_vol_tot_complete = 0.0
    for icell in range(0,dims[0]-1):
        for jcell in range(0,dims[1]-1):
            if cells_flag[icell,jcell] == 1:
                err_interp_n_cell       = 0.25*(err_interp_n_plot[icell,jcell] + err_interp_n_plot[icell,jcell+1] + err_interp_n_plot[icell+1,jcell+1] +err_interp_n_plot[icell+1,jcell])
                err_interp_n_mean_complete = err_interp_n_mean_complete + err_interp_n_cell*cells_vol[icell,jcell]
                cells_vol_tot_complete    = cells_vol_tot_complete + cells_vol[icell,jcell]
    err_interp_n_mean_complete = err_interp_n_mean_complete/cells_vol_tot_complete
    
    # Obtain plasma density interpolation error inside the channel
    err_interp_n_mean_channel = 0.0
    cells_vol_tot_channel = 0.0
    for icell in range(int(eta_min),int(eta_max)):
        for jcell in range(0,int(xi_bottom)):
            if cells_flag[icell,jcell] == 1:
                err_interp_n_cell       = 0.25*(err_interp_n_plot[icell,jcell] + err_interp_n_plot[icell,jcell+1] + err_interp_n_plot[icell+1,jcell+1] +err_interp_n_plot[icell+1,jcell])
                err_interp_n_mean_channel = err_interp_n_mean_channel + err_interp_n_cell*cells_vol[icell,jcell]
                cells_vol_tot_channel    = cells_vol_tot_channel + cells_vol[icell,jcell]
    err_interp_n_mean_channel = err_interp_n_mean_channel/cells_vol_tot_channel
    
    
    
    # Obtain volume-weighted average values of the plasma density interpolation error (use threshold to avoid very large errors)
    threshold = 1.0
    err_interp_n_mean_plume_thr = 0.0
    cells_vol_tot_thr = 0.0
    if xi_bottom != 0:
        for icell in range(0,dims[0]-1):
            for jcell in range(int(xi_bottom),dims[1]-1):
                err_interp_n_cell       = 0.25*(err_interp_n_plot[icell,jcell] + err_interp_n_plot[icell,jcell+1] + err_interp_n_plot[icell+1,jcell+1] +err_interp_n_plot[icell+1,jcell])
                if err_interp_n_cell < threshold:
                    err_interp_n_mean_plume_thr = err_interp_n_mean_plume_thr + err_interp_n_cell*cells_vol[icell,jcell]
                    cells_vol_tot_thr    = cells_vol_tot_thr + cells_vol[icell,jcell]
        err_interp_n_mean_plume_thr = err_interp_n_mean_plume_thr/cells_vol_tot_thr
    
    # Obtain plasma density interpolation error in all domain
    err_interp_n_mean_complete_thr = 0.0
    cells_vol_tot_complete_thr = 0.0
    if xi_bottom != 0:
        for icell in range(0,dims[0]-1):
            for jcell in range(0,dims[1]-1):
                if cells_flag[icell,jcell] == 1:
                    err_interp_n_cell       = 0.25*(err_interp_n_plot[icell,jcell] + err_interp_n_plot[icell,jcell+1] + err_interp_n_plot[icell+1,jcell+1] +err_interp_n_plot[icell+1,jcell])
                    if err_interp_n_cell < threshold:
                        err_interp_n_mean_complete_thr = err_interp_n_mean_complete_thr + err_interp_n_cell*cells_vol[icell,jcell]
                        cells_vol_tot_complete_thr    = cells_vol_tot_complete_thr + cells_vol[icell,jcell]
        err_interp_n_mean_complete_thr = err_interp_n_mean_complete_thr/cells_vol_tot_complete_thr
    
    # Obtain plasma density interpolation error inside the channel
    err_interp_n_mean_channel_thr = 0.0
    cells_vol_tot_channel_thr = 0.0
    if xi_bottom != 0:
        for icell in range(int(eta_min),int(eta_max)):
            for jcell in range(0,int(xi_bottom)):
                if cells_flag[icell,jcell] == 1:
                    err_interp_n_cell       = 0.25*(err_interp_n_plot[icell,jcell] + err_interp_n_plot[icell,jcell+1] + err_interp_n_plot[icell+1,jcell+1] +err_interp_n_plot[icell+1,jcell])
                    if err_interp_n_cell < threshold:
                        err_interp_n_mean_channel_thr = err_interp_n_mean_channel_thr + err_interp_n_cell*cells_vol[icell,jcell]
                        cells_vol_tot_channel_thr    = cells_vol_tot_channel_thr + cells_vol[icell,jcell]
        err_interp_n_mean_channel_thr = err_interp_n_mean_channel_thr/cells_vol_tot_channel_thr
    
    
    # Obtain average plasma density interpolation errors (use a threshold to avoid very large errors)
    mask = (err_interp_n_plot < threshold) & ~np.isnan(err_interp_n_plot)
    err_interp_n_avg_complete = np.nanmean(err_interp_n_plot[mask])
    submatrix = err_interp_n_plot[:,int(xi_bottom)::] 
    mask = (submatrix < threshold) & ~np.isnan(submatrix)
    err_interp_n_avg_plume = np.nanmean(submatrix[mask])
    submatrix = err_interp_n_plot[:,0:int(xi_bottom)+1]
    mask = (submatrix < threshold) & ~np.isnan(submatrix)
    err_interp_n_avg_channel = np.nanmean(submatrix[mask])
    
    pos_tol = 5
    pos_null_j2D_point = np.where(j2D_plot == np.nanmin(np.nanmin(j2D_plot[pos_tol:dims[0]-pos_tol,int(xi_bottom)+pos_tol:-pos_tol:1])))
    z_null_j2D_point = zs[pos_null_j2D_point][0]
    r_null_j2D_point = rs[pos_null_j2D_point][0]
    j2D_null_point   = j2D_plot[pos_null_j2D_point][0]
    
    ###########################################################################
    print("Printing average variables values...")
    ###################### PRINTING VARIABLES (AVG) ###########################
    print("erel_ue max         = %15.8e; erel_ue min         = %15.8e (-)" %( np.nanmax(erel_ue_plot), np.nanmin(erel_ue_plot) ) )
    print("erel_je max         = %15.8e; erel_je min         = %15.8e (-)" %( np.nanmax(erel_je_plot), np.nanmin(erel_je_plot) ) )
    print("erel_je2D max       = %15.8e; erel_je2D min       = %15.8e (-)" %( np.nanmax(erel_je2D_plot), np.nanmin(erel_je2D_plot) ) )
    print("erel_jeji max       = %15.8e; erel_jeji min       = %15.8e (-)" %( np.nanmax(erel_jeji_plot), np.nanmin(erel_jeji_plot) ) )
    print("erel_jz rgt inf max = %15.8e; erel_jz rgt inf min = %15.8e (-)" %( np.nanmax(erel_jz_plot[1:-1,-1]), np.nanmin(erel_jz_plot[1:-1,-1]) ) )
    if xi_bottom != 0:
        print("erel_jz D bot p max = %15.8e; erel_jz D bot p min = %15.8e (-)" %( np.nanmax(erel_jz_plot[1:int(eta_min),int(xi_bottom)]), np.nanmin(erel_jz_plot[1:int(eta_min),int(xi_bottom)]) ) )
        print("erel_jz D top p max = %15.8e; erel_jz D top p min = %15.8e (-)" %( np.nanmax(erel_jz_plot[int(eta_max)+1:-1,int(xi_top)]), np.nanmin(erel_jz_plot[int(eta_max)+1:-1,int(xi_top)]) ) )        
        print("erel_jr top inf max = %15.8e; erel_jr top inf min = %15.8e (-)" %( np.nanmax(erel_jr_plot[-1,int(xi_top)+1:-1]), np.nanmin(erel_jr_plot[-1,int(xi_top)+1:-1]) ) )
        print("erel_jr D bot max   = %15.8e; erel_jr D bot min   = %15.8e (-)" %( np.nanmax(erel_jr_plot[int(eta_min),1:int(xi_bottom)]), np.nanmin(erel_jr_plot[int(eta_min),1:int(xi_bottom)]) ) )        
        print("erel_jr D top max   = %15.8e; erel_jr D top min   = %15.8e (-)" %( np.nanmax(erel_jr_plot[int(eta_max),1:int(xi_top)]), np.nanmin(erel_jr_plot[int(eta_max),1:int(xi_top)]) ) )                
#        print("erel_jr axi top max = %15.8e; erel_jr axi top min = %15.8e (-)" %( np.nanmax(erel_jr_plot[0,xi_top::]), np.nanmin(erel_jr_plot[0,xi_top::]) ) )                        
    print("phi max             = %15.8e; phi min             = %15.8e (V)" %( np.nanmax(phi_plot), np.nanmin(phi_plot) ) )
    print("Bfield max          = %15.8e; Bfield min          = %15.8e (G)" %( np.nanmax(Bfield_plot*1E4), np.nanmin(Bfield_plot*1E4) ) )
    print("Efield max          = %15.8e; Efield min          = %15.8e (V/m)" %( np.nanmax(Efield_plot), np.nanmin(Efield_plot) ) )
    print("Er max              = %15.8e; Er min              = %15.8e (V/m)" %( np.nanmax(Er_plot), np.nanmin(Er_plot) ) )
    print("Ez max              = %15.8e; Ez min              = %15.8e (V/m)" %( np.nanmax(Ez_plot), np.nanmin(Ez_plot) ) )
    print("ne max              = %15.8e; ne min              = %15.8e (1/m3)" %( np.nanmax(ne_plot), np.nanmin(ne_plot) ) )
    print("ni1 max             = %15.8e; ni1 min             = %15.8e (1/m3)" %( np.nanmax(ni1_plot), np.nanmin(ni1_plot) ) )
    print("ni2 max             = %15.8e; ni2 min             = %15.8e (1/m3)" %( np.nanmax(ni2_plot), np.nanmin(ni2_plot) ) )
    print("ni3 max             = %15.8e; ni3 min             = %15.8e (1/m3)" %( np.nanmax(ni3_plot), np.nanmin(ni3_plot) ) )
    print("ni4 max             = %15.8e; ni4 min             = %15.8e (1/m3)" %( np.nanmax(ni4_plot), np.nanmin(ni4_plot) ) )
    print("ni2/ni1 max         = %15.8e; ni2/ni1 min         = %15.8e (-)" %( np.nanmax(ratio_ni1_ni2_plot), np.nanmin(ratio_ni1_ni2_plot) ) )
    print("ni3/ni1 max         = %15.8e; ni3/ni1 min         = %15.8e (-)" %( np.nanmax(ratio_ni1_ni3_plot), np.nanmin(ratio_ni1_ni3_plot) ) )
    print("ni4/ni1 max         = %15.8e; ni4/ni1 min         = %15.8e (-)" %( np.nanmax(ratio_ni1_ni4_plot), np.nanmin(ratio_ni1_ni4_plot) ) )
    print("neCEX/ne max        = %15.8e; neCEX/ne min        = %15.8e (-)" %( np.nanmax(ratio_ne_neCEX_plot), np.nanmin(ratio_ne_neCEX_plot) ) )
    print("nn1 max             = %15.8e; nn1 min             = %15.8e (1/m3)" %( np.nanmax(nn1_plot), np.nanmin(nn1_plot) ) )
    print("nn2 max             = %15.8e; nn2 min             = %15.8e (1/m3)" %( np.nanmax(nn2_plot), np.nanmin(nn2_plot) ) )
    print("nn3 max             = %15.8e; nn3 min             = %15.8e (1/m3)" %( np.nanmax(nn3_plot), np.nanmin(nn3_plot) ) )
    print("nnCEX/nn1 max       = %15.8e; nnCEX/nn1 min       = %15.8e (-)" %( np.nanmax(ratio_nn1_nnCEX_plot), np.nanmin(ratio_nn1_nnCEX_plot) ) )
    print("nnCEX/nn max        = %15.8e; nnCEX/nn min        = %15.8e (-)" %( np.nanmax(ratio_nn_nnCEX_plot), np.nanmin(ratio_nn_nnCEX_plot) ) )
    print("Te max              = %15.8e; nn1 min             = %15.8e (eV)" %( np.nanmax(Te_plot), np.nanmin(Te_plot) ) )
    print("Ti1 max             = %15.8e; Ti1 min             = %15.8e (eV)" %( np.nanmax(Ti1_plot), np.nanmin(Ti1_plot) ) )
    print("Ti2 max             = %15.8e; Ti2 min             = %15.8e (eV)" %( np.nanmax(Ti2_plot), np.nanmin(Ti2_plot) ) )
    print("Ti3 max             = %15.8e; Ti3 min             = %15.8e (eV)" %( np.nanmax(Ti3_plot), np.nanmin(Ti3_plot) ) )
    print("Ti4 max             = %15.8e; Ti4 min             = %15.8e (eV)" %( np.nanmax(Ti4_plot), np.nanmin(Ti4_plot) ) )
    print("Tn1 max             = %15.8e; Tn1 min             = %15.8e (eV)" %( np.nanmax(Tn1_plot), np.nanmin(Tn1_plot) ) )
    print("Tn2 max             = %15.8e; Tn2 min             = %15.8e (eV)" %( np.nanmax(Tn2_plot), np.nanmin(Tn2_plot) ) )
    print("Tn3 max             = %15.8e; Tn3 min             = %15.8e (eV)" %( np.nanmax(Tn3_plot), np.nanmin(Tn3_plot) ) )
    print("Ekin_e max          = %15.8e; Ekin_e min          = %15.8e (eV)" %( np.nanmax(Ekin_e_plot), np.nanmin(Ekin_e_plot) ) )
    print("Ekin_i1 max         = %15.8e; Ekin_i1 min         = %15.8e (eV)" %( np.nanmax(Ekin_i1_plot), np.nanmin(Ekin_i1_plot) ) )
    print("Ekin_i2 max         = %15.8e; Ekin_i2 min         = %15.8e (eV)" %( np.nanmax(Ekin_i2_plot), np.nanmin(Ekin_i2_plot) ) )
    print("Ekin/Te max         = %15.8e; Ekin/Te min         = %15.8e (-)" %( np.nanmax(ratio_Ekin_Te_plot), np.nanmin(ratio_Ekin_Te_plot) ) )
    print("Ekin/Ti1 max        = %15.8e; Ekin/Ti1 min        = %15.8e (-)" %( np.nanmax(ratio_Ekin_Ti1_plot), np.nanmin(ratio_Ekin_Ti1_plot) ) )
    print("Ekin/Ti2 max        = %15.8e; Ekin/Ti2 min        = %15.8e (-)" %( np.nanmax(ratio_Ekin_Ti2_plot), np.nanmin(ratio_Ekin_Ti2_plot) ) )
    print("Mi1 max             = %15.8e; Mi1 min             = %15.8e (-)" %( np.nanmax(Mi1_plot), np.nanmin(Mi1_plot) ) )
    print("Mi2 max             = %15.8e; Mi2 min             = %15.8e (-)" %( np.nanmax(Mi2_plot), np.nanmin(Mi2_plot) ) )
    print("uimean max          = %15.8e; uimean min          = %15.8e (m/s)" %( np.nanmax(uimean_plot), np.nanmin(uimean_plot) ) )        
    print("ue max              = %15.8e; ue min              = %15.8e (m/s)" %( np.nanmax(ue_plot), np.nanmin(ue_plot) ) )
    print("ue_r max            = %15.8e; ue_r min            = %15.8e (m/s)" %( np.nanmax(ue_r_plot), np.nanmin(ue_r_plot) ) )
    print("ue_t max            = %15.8e; ue_t min            = %15.8e (m/s)" %( np.nanmax(ue_t_plot), np.nanmin(ue_t_plot) ) )
    print("ue_z max            = %15.8e; ue_z min            = %15.8e (m/s)" %( np.nanmax(ue_z_plot), np.nanmin(ue_z_plot) ) )
    print("ue_perp max         = %15.8e; ue_perp min         = %15.8e (m/s)" %( np.nanmax(ue_perp_plot), np.nanmin(ue_perp_plot) ) )
    print("ue_para max         = %15.8e; ue_para min         = %15.8e (m/s)" %( np.nanmax(ue_para_plot), np.nanmin(ue_para_plot) ) )
    print("ue_t/ue_perp max    = %15.8e; ue_t/ue_perp min    = %15.8e (m/s)" %( np.nanmax(ratio_ue_t_perp_plot), np.nanmin(ratio_ue_t_perp_plot) ) )
    print("ue_t/ue_para max    = %15.8e; ue_t/ue_para min    = %15.8e (m/s)" %( np.nanmax(ratio_ue_t_para_plot), np.nanmin(ratio_ue_t_para_plot) ) )
    print("ue_perp/ue_para max = %15.8e; ue_perp/ue_para min = %15.8e (m/s)" %( np.nanmax(ratio_ue_perp_para_plot), np.nanmin(ratio_ue_perp_para_plot) ) )
    print("je_r max            = %15.8e; je_r min            = %15.8e (A/m2)" %( np.nanmax(je_r_plot), np.nanmin(je_r_plot) ) )
    print("je_t max            = %15.8e; je_t min            = %15.8e (A/m2)" %( np.nanmax(je_t_plot), np.nanmin(je_t_plot) ) )
    print("je_z max            = %15.8e; je_z min            = %15.8e (A/m2)" %( np.nanmax(je_z_plot), np.nanmin(je_z_plot) ) )
    print("je_perp max         = %15.8e; je_perp min         = %15.8e (A/m2)" %( np.nanmax(je_perp_plot), np.nanmin(je_perp_plot) ) )
    print("je_para max         = %15.8e; je_para min         = %15.8e (A/m2)" %( np.nanmax(je_para_plot), np.nanmin(je_para_plot) ) )
    print("je max              = %15.8e; je min              = %15.8e (A/m2)" %( np.nanmax(je_plot), np.nanmin(je_plot) ) )
    print("ji max              = %15.8e; ji min              = %15.8e (A/m2)" %( np.nanmax(ji_plot), np.nanmin(ji_plot) ) )
    print("je 2D max           = %15.8e; je 2D min           = %15.8e (A/m2)" %( np.nanmax(je2D_plot), np.nanmin(je2D_plot) ) )
    print("ji 2D max           = %15.8e; ji 2D min           = %15.8e (A/m2)" %( np.nanmax(ji2D_plot), np.nanmin(ji2D_plot) ) )
    print("j max               = %15.8e; j min               = %15.8e (A/m2)" %( np.nanmax(j_plot), np.nanmin(j_plot) ) )
    print("F_theta max         = %15.8e; F_theta min         = %15.8e (A/m2)" %( np.nanmax(F_theta_plot), np.nanmin(F_theta_plot) ) )
    print("Hall_par max        = %15.8e; Hall_par min        = %15.8e (-)" %( np.nanmax(Hall_par_plot), np.nanmin(Hall_par_plot) ) )
    print("Hall_par_eff max    = %15.8e; Hall_par_eff min    = %15.8e (-)" %( np.nanmax(Hall_par_eff_plot), np.nanmin(Hall_par_eff_plot) ) )
    print("Hall_par_effect     = %15.8e; Hall_par_effect min = %15.8e (-)" %( np.nanmax(Hall_par_effect_plot), np.nanmin(Hall_par_effect_plot) ) )
    print("pn max              = %15.8e; pn min              = %15.8e (mbar)" %( np.nanmax(pn_plot), np.nanmin(pn_plot) ) )
    print("nu_e_tot max        = %15.8e; nu_e_tot min        = %15.8e (Hz)" %( np.nanmax(nu_e_tot_plot), np.nanmin(nu_e_tot_plot) ) )
    print("nu_e_tot_eff max    = %15.8e; nu_e_tot_eff min    = %15.8e (Hz)" %( np.nanmax(nu_e_tot_eff_plot), np.nanmin(nu_e_tot_eff_plot) ) )
    print("nu_en max           = %15.8e; nu_en min           = %15.8e (Hz)" %( np.nanmax(nu_en_plot), np.nanmin(nu_en_plot) ) )
    print("nu_ei1 max          = %15.8e; nu_ei1 min          = %15.8e (Hz)" %( np.nanmax(nu_ei1_plot), np.nanmin(nu_ei1_plot) ) )
    print("nu_ei2 max          = %15.8e; nu_ei2 min          = %15.8e (Hz)" %( np.nanmax(nu_ei2_plot), np.nanmin(nu_ei2_plot) ) )
    print("nu_i01 max          = %15.8e; nu_i01 min          = %15.8e (Hz)" %( np.nanmax(nu_i01_plot), np.nanmin(nu_i01_plot) ) )
    print("nu_i02 max          = %15.8e; nu_i02 min          = %15.8e (Hz)" %( np.nanmax(nu_i02_plot), np.nanmin(nu_i02_plot) ) )
    print("nu_i12 max          = %15.8e; nu_i12 min          = %15.8e (Hz)" %( np.nanmax(nu_i12_plot), np.nanmin(nu_i12_plot) ) )
    print("nu_ei_el_tot max    = %15.8e; nu_ei_el_tot min    = %15.8e (Hz)" %( np.nanmax(nu_ei_el_tot_plot), np.nanmin(nu_ei_el_tot_plot) ) )
    print("nu_ion_tot max      = %15.8e; nu_ion_tot min      = %15.8e (Hz)" %( np.nanmax(nu_ion_tot_plot), np.nanmin(nu_ion_tot_plot) ) )
    print("lambdaD max         = %15.8e; lambdaD min         = %15.8e (mm)" %( np.nanmax(lambdaD_plot*1E3), np.nanmin(lambdaD_plot*1E3) ) )
    print("err interp n max    = %15.8e; err interp n min    = %15.8e (-)" %( np.nanmax(err_interp_n_plot), np.nanmin(err_interp_n_plot) ) )
    print("f_split_adv max     = %15.8e; f_split_adv min     = %15.8e (W)" %( np.nanmax(f_split_adv_plot), np.nanmin(f_split_adv_plot) ) )
    print("f_split_qperp max   = %15.8e; f_split_qperp min   = %15.8e (W)" %( np.nanmax(f_split_qperp_plot), np.nanmin(f_split_qperp_plot) ) )
    print("f_split_qpara max   = %15.8e; f_split_qpara min   = %15.8e (W)" %( np.nanmax(f_split_qpara_plot), np.nanmin(f_split_qpara_plot) ) )
    print("f_split_qb max      = %15.8e; f_split_qb min      = %15.8e (W)" %( np.nanmax(f_split_qb_plot), np.nanmin(f_split_qb_plot) ) )
    print("f_split_Pperp max   = %15.8e; f_split_Pperp min   = %15.8e (W)" %( np.nanmax(f_split_Pperp_plot), np.nanmin(f_split_Pperp_plot) ) )
    print("f_split_Ppara max   = %15.8e; f_split_Ppara min   = %15.8e (W)" %( np.nanmax(f_split_Ppara_plot), np.nanmin(f_split_Ppara_plot) ) )
    print("f_split_ecterm max  = %15.8e; f_split_ecterm min  = %15.8e (W)" %( np.nanmax(f_split_ecterm_plot), np.nanmin(f_split_ecterm_plot) ) )
    print("f_split_inel max    = %15.8e; f_split_inel min    = %15.8e (W)" %( np.nanmax(f_split_inel_plot), np.nanmin(f_split_inel_plot) ) )
    print("f_split_q max       = %15.8e; f_split_q min       = %15.8e (W)" %( np.nanmax(f_split_q_plot), np.nanmin(f_split_q_plot) ) )
    print("f_split_eflux max   = %15.8e; f_split_eflux min   = %15.8e (W)" %( np.nanmax(f_split_eflux_plot), np.nanmin(f_split_eflux_plot) ) )
    print("f_split_P max       = %15.8e; f_split_P min       = %15.8e (W)" %( np.nanmax(f_split_P_plot), np.nanmin(f_split_P_plot) ) )
    print("f_split_LHS max     = %15.8e; f_split_LHS min     = %15.8e (W)" %( np.nanmax(f_split_LHS_plot), np.nanmin(f_split_LHS_plot) ) )


    ###########################################################################
    print("Plotting...")
    ############################ GENERATING PLOTS #############################
    if interp_MFAM_picM_plot == 1:
        zs_mp                = zs_mp*1E2
        rs_mp                = rs_mp*1E2
    zs                = zs*1E2
    rs                = rs*1E2
    zscells           = zscells*1E2
    rscells           = rscells*1E2
    points            = points*1E2
    z_cath            = z_cath*1E2
    r_cath            = r_cath*1E2
    nodes[0,:]        = nodes[0,:]*1e2
    nodes[1,:]        = nodes[1,:]*1e2
    elem_geom[0,:]    = elem_geom[0,:]*1E2
    elem_geom[1,:]    = elem_geom[1,:]*1E2
    face_geom[0,:]    = face_geom[0,:]*1E2
    face_geom[1,:]    = face_geom[1,:]*1E2
    Ez_plot_anode     = np.copy(Ez_plot)*1E-3
    je_z_plot_anode   = np.copy(je_z_plot)*1E-3
    ji_z_plot_anode   = np.copy(ji_z_plot)*1E-2
    # B field in Gauss
    Bfield_plot       = Bfield_plot*1E4
    Br_plot           = Br_plot*1E4
    Bz_plot           = Bz_plot*1E4 
    Efield            = Efield*1E-3
    Ez                = Ez*1E-3
    je_para           = je_para*1E-4    # This is A/cm2
    je_perp           = je_perp*1E-4    # This is A/cm2
    je_t              = je_t*1E-4       # This is A/cm2
    ji_x              = ji_x*1E-4       # This is A/cm2
    ji_z              = ji_z*1E-4       # This is A/cm2
#    Efield_plot_cont  = np.copy(Efield_plot) # NOTE: Perform the norm of the time-averaged vector for plotting to avoid averaging errors
    Er_plot_cont      = np.copy(Er_plot)
    Ez_plot_cont      = np.copy(Ez_plot)
    Efield_plot_cont  = np.sqrt(Er_plot_cont**2 + Ez_plot_cont**2)
    Efield_plot       = Efield_plot*1E-3
    Er_plot           = Er_plot*1E-3
    Ez_plot           = Ez_plot*1E-3
    je_para_plot      = je_para_plot*1E-4 # This is A/cm2
    je_perp_plot      = je_perp_plot*1E-4 # This is A/cm2
    je_t_plot         = je_t_plot*1E-4    # This is A/cm2
    je_z_plot         = je_z_plot*1E-4    # This is A/cm2
    je_r_plot         = je_r_plot*1E-4    # This is A/cm2
    ji_x_plot         = ji_x_plot*1E-4    # This is A/cm2  
    ji_z_plot         = ji_z_plot*1E-4    # This is A/cm2
    ji1_x_plot        = ji1_x_plot*1E-4     # This is A/cm2
    ji1_y_plot        = ji1_y_plot*1E-4     # This is A/cm2
    ji1_z_plot        = ji1_z_plot*1E-4     # This is A/cm2
    ji2_x_plot        = ji2_x_plot*1E-4     # This is A/cm2
    ji2_y_plot        = ji2_y_plot*1E-4     # This is A/cm2
    ji2_z_plot        = ji2_z_plot*1E-4     # This is A/cm2
    ji3_x_plot        = ji3_x_plot*1E-4     # This is A/cm2
    ji3_y_plot        = ji3_y_plot*1E-4     # This is A/cm2
    ji3_z_plot        = ji3_z_plot*1E-4     # This is A/cm2
    ji4_x_plot        = ji4_x_plot*1E-4     # This is A/cm2
    ji4_y_plot        = ji4_y_plot*1E-4     # This is A/cm2
    ji4_z_plot        = ji4_z_plot*1E-4     # This is A/cm2
    je2D_plot         = je2D_plot*1E-4    # This is A/cm2
    ji2D_plot         = ji2D_plot*1E-4    # This is A/cm2
    ji12D_plot        = ji12D_plot*1E-4     # This is A/cm2
    ji22D_plot        = ji22D_plot*1E-4     # This is A/cm2
    ji32D_plot        = ji32D_plot*1E-4     # This is A/cm2
    ji42D_plot        = ji42D_plot*1E-4     # This is A/cm2
    j2D_plot          = j2D_plot*1E-4     # This is A/cm2
    if interp_MFAM_picM_plot == 1:
        je_perp_mp        = je_perp_mp*1E-4   # This is A/cm2
        je_theta_mp       = je_theta_mp*1E-4  # This is A/cm2
        je_para_mp        = je_para_mp*1E-4   # This is A/cm2
        je_z_mp           = je_z_mp*1E-4      # This is A/cm2
        je_r_mp           = je_r_mp*1E-4      # This is A/cm2
        je_2D_mp          = je_2D_mp*1E-4     # This is A/cm2
        ji_x_mp           = ji_x_mp*1E-4      # This is A/cm2
        ji_y_mp           = ji_y_mp*1E-4      # This is A/cm2
        ji_z_mp           = ji_z_mp*1E-4      # This is A/cm2
        ji_2D_mp          = ji_2D_mp*1E-4     # This is A/cm2
        j_r_mp            = j_r_mp*1E-4       # This is A/cm2
        j_t_mp            = j_t_mp*1E-4       # This is A/cm2
        j_z_mp            = j_z_mp*1E-4       # This is A/cm2
        j_2D_mp           = j_2D_mp*1E-4      # This is A/cm2
    
    if plot_scan_points == 1:
        z_scan = z_scan*1E2
        r_scan = r_scan*1E2
        
#    nu_e_tot_plot     = nu_e_tot_plot*1E-6
#    nu_e_tot_eff_plot = nu_e_tot_eff_plot*1E-6
#    nu_en_plot        = nu_en_plot*1E-6
#    nu_ei1_plot       = nu_ei1_plot*1E-6
#    nu_ei2_plot       = nu_ei2_plot*1E-6
#    nu_i01_plot       = nu_i01_plot*1E-6
#    nu_i02_plot       = nu_i02_plot*1E-6
#    nu_i12_plot       = nu_i12_plot*1E-6
    lambdaD      = lambdaD*1E3
    lambdaD_plot = lambdaD_plot*1E3
    
    #Limit minium ionization frequencies
    min_nu = 1E-2
    nu_i01_plot[nu_i01_plot<min_nu] = min_nu
    nu_i02_plot[nu_i02_plot<min_nu] = min_nu
    nu_i12_plot[nu_i12_plot<min_nu] = min_nu
    nu_ion_tot_plot[nu_ion_tot_plot<min_nu] = min_nu
        

    # Obtain cathode Bline
    lambda_tol  = 1e-4
    cath_Bline_IDs = np.zeros(0,dtype=int)
    cath_Bline_z   = np.zeros(0,dtype=float)
    cath_Bline_r   = np.zeros(0,dtype=float)
    cath_Bline_d   = np.zeros(0,dtype=float)
    cath_Bline_IDs = np.append(cath_Bline_IDs,np.array([cath_elem[0]]),axis=0)
    if cath_type == 1:
        cath_lambda = face_geom[2,cath_elem[0]]
        cath_Bline_z = np.append(cath_Bline_z,np.array([face_geom[0,cath_elem[0]]]),axis=0)
        cath_Bline_r = np.append(cath_Bline_r,np.array([face_geom[1,cath_elem[0]]]),axis=0)
    elif cath_type == 2:
        cath_lambda = elem_geom[2,cath_elem[0]]
        cath_Bline_z = np.append(cath_Bline_z,np.array([elem_geom[0,cath_elem[0]]]),axis=0)
        cath_Bline_r = np.append(cath_Bline_r,np.array([elem_geom[1,cath_elem[0]]]),axis=0)
    cath_Bline_d = np.append(cath_Bline_d,np.array([0.0]),axis=0)
    
    for i in range(0,n_elems):
        if abs(elem_geom[2,i]-cath_lambda) < abs(cath_lambda)*lambda_tol:
            cath_Bline_IDs = np.append(cath_Bline_IDs,np.array([i]),axis=0)
            cath_Bline_z = np.append(cath_Bline_z,np.array([elem_geom[0,i]]),axis=0)
            cath_Bline_r = np.append(cath_Bline_r,np.array([elem_geom[1,i]]),axis=0)
            dcath = np.sqrt((cath_Bline_z[-1] - cath_Bline_z[0])**2 + (cath_Bline_r[-1] - cath_Bline_r[0])**2)
            cath_Bline_d = np.append(cath_Bline_d,np.array([dcath]),axis=0)

    cath_Bline_npoints = len(cath_Bline_IDs)
    pos_sort  = np.argsort(cath_Bline_d)
    cath_Bline_d = cath_Bline_d[pos_sort]
    cath_Bline_IDs = cath_Bline_IDs[pos_sort]
    cath_Bline_z   = cath_Bline_z[pos_sort]
    cath_Bline_r   = cath_Bline_r[pos_sort]
    
    
    # Obtain z,r coordinates of nodes forming the cathode B line if it is a line formed by given faces  
    faces_cath_Bline_nodez = np.zeros(0,dtype=float)
    faces_cath_Bline_noder = np.zeros(0,dtype=float)
    if faces_cath_Bline !=0:
        for i in faces_cath_Bline:
            # Obtain information for nodes of current face
            for ind_n in range(0,2):
                node_ID = faces[ind_n,i]-1
                faces_cath_Bline_nodez = np.append(faces_cath_Bline_nodez,np.array([nodes[0,node_ID]]),axis=0)
                faces_cath_Bline_noder = np.append(faces_cath_Bline_noder,np.array([nodes[1,node_ID]]),axis=0)
    
    
#    # Do not plot units in axes
#    # SAFRAN CHEOPS 1: units in cm
##    L_c = 3.725
##    H_c = (0.074995-0.052475)*100
#    # HT5k: units in cm
#    L_c = 2.53
#    H_c = (0.0785-0.0565)*100
    # VHT_US (IEPC 2022)
    L_c = 2.9
    H_c = 2.22    
    # VHT_US PPSX00 testcase1 LP (TFM Alejandro)
#    L_c = 2.5
#    H_c = 1.1
    # PPSX00 testcase2 LP
#    L_c = 2.5
#    H_c = 1.5
    
    
    if interp_MFAM_picM_plot == 1:
        zs_mp = zs_mp/L_c
        rs_mp = rs_mp/H_c
    if plot_scan_points == 1:
        z_scan = z_scan/L_c
        r_scan = r_scan/H_c
    zs = zs/L_c
    rs = rs/H_c
    points[:,0] = points[:,0]/L_c
    points[:,1] = points[:,1]/H_c
    z_cath = z_cath/L_c
    r_cath = r_cath/H_c
    zscells = zscells/L_c
    rscells = rscells/H_c
    cath_Bline_z = cath_Bline_z/L_c
    cath_Bline_r = cath_Bline_r/H_c
    
    zs_plot = np.copy(zs)
    rs_plot = np.copy(rs)
    for i in range(0,dims[0]):
        for j in range(0,dims[1]):
            if nodes_flag[i,j] == 0:
                rs_plot[i,j] = np.NaN
                zs_plot[i,j] = np.NaN
    if interp_MFAM_picM_plot == 1:
        zs_mp_plot = np.copy(zs_mp)
        rs_mp_plot = np.copy(rs_mp)
        for i in range(0,dims_mp[0]):
            for j in range(0,dims_mp[1]):
                if nodes_flag_mp[i,j] == 0:
                    rs_mp_plot[i,j] = np.NaN
                    zs_mp_plot[i,j] = np.NaN
    
    nodes[0,:]        = nodes[0,:]/L_c
    nodes[1,:]        = nodes[1,:]/H_c
    elem_geom[0,:]    = elem_geom[0,:]/L_c
    elem_geom[1,:]    = elem_geom[1,:]/H_c
    face_geom[0,:]    = face_geom[0,:]/L_c
    face_geom[1,:]    = face_geom[1,:]/H_c
    
    if faces_cath_Bline != 0:
        faces_cath_Bline_nodez = faces_cath_Bline_nodez/L_c
        faces_cath_Bline_noder = faces_cath_Bline_noder/H_c
    
    
    # Values for IEPC22
    print("hall_effect_mean in plume = %15.8e" %hall_effect_mean)
    print("hall_eff_mean in plume    = %15.8e" %hall_eff_mean)
    print("hall_mean in plume        = %15.8e" %hall_mean)
    print("z_null_j2D_point in plume = %15.8e" %(z_null_j2D_point*1E2/L_c))
    print("r_null_j2D_point in plume = %15.8e" %(r_null_j2D_point*1E2/H_c))
    print("j2D_null_point in plume   = %15.8e" %j2D_null_point)
    print("pn_mean in plume (mbar)   = %15.8e" %pn_mean)
    print("Ez max avg prof (V/m)     = %15.8e" %(Ez_plot_cont[rind,:].max()))   
    print("r_cathode C1     (mm)     = %15.8e" %(10*H_c*rs[32:34,int(xi_bottom)].mean()))
    print("r_cathode C2     (mm)     = %15.8e" %(10*H_c*rs[33:35,int(xi_bottom)].mean()))
    print("Hall_par_effect at C1     = %15.8e" %(Hall_par_effect_plot[32:34,int(xi_bottom)].mean()))
    print("Hall_par_effect at C2     = %15.8e" %(Hall_par_effect_plot[33:35,int(xi_bottom)].mean()))
    print("Hall_par_effect at C3     = %15.8e" %Hall_par_effect_plot[0:2,int(xi_bottom)].mean())
    
    print("Volume-weighted average values (no threshold):")
    print("err interp n volume avg all domain = %15.8e  (-)" %( err_interp_n_mean_complete ) )
    print("err interp n volume avg plume      = %15.8e  (-)" %( err_interp_n_mean_plume ) )
    print("err interp n volume avg channel    = %15.8e  (-)" %( err_interp_n_mean_channel ) )
    print("Arithmetic average values (no threshold):")
    print("err interp n mean avg domain       = %15.8e  (-)" %( np.nanmean(np.nanmean(err_interp_n_plot)) ) )
    print("err interp n mean avg plume        = %15.8e  (-)" %( np.nanmean(np.nanmean(err_interp_n_plot[:,int(xi_bottom)::])) ) )
    print("err interp n mean avg channel      = %15.8e  (-)" %( np.nanmean(np.nanmean(err_interp_n_plot[:,0:int(xi_bottom)+1])) ) )
    print("Volume-weighted average values (threshold = %15.8e):" %threshold)
    print("err interp n volume avg all domain = %15.8e  (-)" %( err_interp_n_mean_complete_thr ) )
    print("err interp n volume avg plume      = %15.8e  (-)" %( err_interp_n_mean_plume_thr ) )
    print("err interp n volume avg channel    = %15.8e  (-)" %( err_interp_n_mean_channel_thr ) )
    print("Arithmetic average values (threshold = %15.8e):" %threshold)
    print("err interp n mean avg domain       = %15.8e  (-)" %( err_interp_n_avg_complete ) )
    print("err interp n mean avg plume        = %15.8e  (-)" %( err_interp_n_avg_plume ) )
    print("err interp n mean avg channel      = %15.8e  (-)" %( err_interp_n_avg_channel ) )
    
    
    # Colors for plotting the MFAM
    lambda_color   = 'b'
    sigma_color    = 'r'
    boundary_color = 'k'
    
    ylim_axes = 18.2
    yticks_lim = ylim_axes
#    yticks_lim = rs[-1,-1]+1
    
    # Plotting instantaneous profiles
    i = 0
    if len(timesteps) != 0:
        for i in range(0,len(timesteps)):
            if plot_fields_ref == 1:
                plt.figure(r'phi prof ref')
                plt.plot(zs[rind,:],phi[rind,:,timesteps[i]], linestyle=linestyles[i], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[i], color=colors[i], markeredgecolor = 'k', label=labels[i])
                plt.figure(r'E prof ref')
                plt.plot(zs[rind,:],Efield[rind,:,timesteps[i]], linestyle=linestyles[i], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[i], color=colors[i], markeredgecolor = 'k', label=labels[i])
                plt.figure(r'Ez prof ref')      
                plt.plot(zs[rind,:],Ez[rind,:,timesteps[i]], linestyle=linestyles[i], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[i], color=colors[i], markeredgecolor = 'k', label=labels[i])
                print("Ez max inst "+labels[i]+" prof = "+str(Ez[rind,:,timesteps[i]].max()))         
            if plot_dens_ref == 1:
                plt.figure('n prof ref')
                plt.semilogy(zs[rind,:],ne[rind,:,timesteps[i]], linestyle=linestyles[i], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[i], color=colors[i], markeredgecolor = 'k', label=labels[i])
                plt.figure('ni1 prof ref')
                plt.semilogy(zs[rind,:],ni1[rind,:,timesteps[i]], linestyle=linestyles[i], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[i], color=colors[i], markeredgecolor = 'k', label=labels[i])
                plt.figure('ni2 prof ref')
                plt.semilogy(zs[rind,:],ni2[rind,:,timesteps[i]], linestyle=linestyles[i], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[i], color=colors[i], markeredgecolor = 'k', label=labels[i])
                plt.figure('ratio_ni1_ni2 prof ref')
                plt.semilogy(zs[rind,:],ni2[rind,:,timesteps[i]]/ni1[rind,:,timesteps[i]], linestyle=linestyles[i], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[i], color=colors[i], markeredgecolor = 'k', label=labels[i])
                plt.figure('nn prof ref')
                plt.semilogy(zs[rind,:],nn1[rind,:,timesteps[i]], linestyle=linestyles[i], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[i], color=colors[i], markeredgecolor = 'k', label=labels[i])
            if plot_temp_ref == 1:
                plt.figure(r'Te prof ref')
                plt.plot(zs[rind,:],Te[rind,:,timesteps[i]], linestyle=linestyles[i], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[i], color=colors[i], markeredgecolor = 'k', label=labels[i])
                plt.figure(r'ratio_Ekin_Te prof ref')
                plt.semilogy(zs[rind,:],ratio_Ekin_Te[rind,:,timesteps[i]], linestyle=linestyles[i], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[i], color=colors[i], markeredgecolor = 'k', label=labels[i])
            if plot_curr_ref == 1:
                plt.figure('je_para prof ref')
                plt.plot(zs[rind,:],-je_para[rind,:,timesteps[i]], linestyle=linestyles[i], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[i], color=colors[i], markeredgecolor = 'k', label=labels[i])
                plt.figure('je_perp prof ref')
                plt.plot(zs[rind,:],-je_perp[rind,:,timesteps[i]], linestyle=linestyles[i], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[i], color=colors[i], markeredgecolor = 'k', label=labels[i])
                plt.figure('je_t prof ref')
                plt.plot(zs[rind,:],je_t[rind,:,timesteps[i]], linestyle=linestyles[i], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[i], color=colors[i], markeredgecolor = 'k', label=labels[i])
                plt.figure('je zr prof ref')
                plt.semilogy(zs[rind,:],je2D[rind,:,timesteps[i]], linestyle=linestyles[i], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[i], color=colors[i], markeredgecolor = 'k', label=labels[i])
                plt.figure('ji_r prof ref')
                plt.plot(zs[rind,:],ji_x[rind,:,timesteps[i]], linestyle=linestyles[i], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[i], color=colors[i], markeredgecolor = 'k', label=labels[i])
                plt.figure('ji_z prof ref')
                plt.plot(zs[rind,:],ji_z[rind,:,timesteps[i]], linestyle=linestyles[i], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[i], color=colors[i], markeredgecolor = 'k', label=labels[i])
                plt.figure('ji zr prof ref')
                plt.semilogy(zs[rind,:],ji2D[rind,:,timesteps[i]], linestyle=linestyles[i], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[i], color=colors[i], markeredgecolor = 'k', label=labels[i])
    #            plt.figure('j zr prof ref')
    #            plt.plot(zs[rind,:],j2D[rind,:,timesteps[i]], linestyle=linestyles[i], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[i], color=colors[i], markeredgecolor = 'k', label=labels[i])
            if plot_freq_ref == 1:
                if i == 0:
                    plt.figure('all nus at A prof ref')
                elif i == 1:
                    plt.figure('all nus at B prof ref')
                elif i == 2:
                    plt.figure('all nus at C prof ref')
                elif i == 3:
                    plt.figure('all nus at D prof ref')
                plt.semilogy(zs[rind,:],nu_e_tot_eff[rind,:,timesteps[i]], linestyle=linestyles[i], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker='s', color='k', markeredgecolor = 'k', label=r"$\nu_e^\ast$")
                plt.semilogy(zs[rind,:],nu_e_tot[rind,:,timesteps[i]], linestyle=linestyles[i], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker='o', color='r', markeredgecolor = 'k', label=r"$\nu_e$")            
                plt.semilogy(zs[rind,:],nu_en[rind,:,timesteps[i]], linestyle=linestyles[i], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker='^', color='g', markeredgecolor = 'k', label=r"$\nu_{en}^{el}$")            
                plt.semilogy(zs[rind,:],nu_ei1[rind,:,timesteps[i]], linestyle=linestyles[i], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker='v', color='b', markeredgecolor = 'k', label=r"$\nu_{ei1}^{el}$")            
                plt.semilogy(zs[rind,:],nu_ei2[rind,:,timesteps[i]], linestyle=linestyles[i], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker='<', color='c', markeredgecolor = 'k', label=r"$\nu_{ei2}^{el}$")            
                plt.semilogy(zs[rind,:],nu_i01[rind,:,timesteps[i]], linestyle=linestyles[i], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker='>', color='m', markeredgecolor = 'k', label=r"$\nu_{en}^{ion01}$")            
                plt.semilogy(zs[rind,:],nu_i02[rind,:,timesteps[i]], linestyle=linestyles[i], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker='D', color=orange, markeredgecolor = 'k', label=r"$\nu_{en}^{ion02}$")            
                plt.semilogy(zs[rind,:],nu_i12[rind,:,timesteps[i]], linestyle=linestyles[i], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker='p', color=brown, markeredgecolor = 'k', label=r"$\nu_{ei1}^{ion12}$")            
                print("nu tot eff max inst "+labels[i]+" prof = "+str(nu_e_tot_eff[rind,:,timesteps[i]].max()))                         
                plt.figure('Hall_par prof ref')  
                plt.semilogy(zs[rind,:],Hall_par[rind,:,timesteps[i]], linestyle=linestyles[i], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[i], color=colors[i], markeredgecolor = 'k', label=labels[i])            
                plt.figure('Hall_par_eff prof ref')
                plt.plot(zs[rind,:],Hall_par_eff[rind,:,timesteps[i]], linestyle=linestyles[i], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[i], color=colors[i], markeredgecolor = 'k', label=labels[i])            
            if plot_err_interp_ref == 1:
                plt.figure(r'err_interp_n prof ref')
                plt.plot(zs[rind,:],err_interp_n[rind,:,timesteps[i]], linestyle=linestyles[i], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[i], color=colors[i], markeredgecolor = 'k', label=labels[i])   
            if plot_lambdaD_ref == 1:
                plt.figure(r'lambdaD prof ref')
                plt.plot(zs[rind,:],lambdaD[rind,:,timesteps[i]], linestyle=linestyles[i], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[i], color=colors[i], markeredgecolor = 'k', label=labels[i])   

    # Plotting average profiles and contours
    i = i+1
    # Obtain the vectors for the uniform mesh for streamlines plotting. It must be uniform and squared mesh
    delta_x = 0.11     # Plot dimensional axes
    delta_x = 0.11/L_c # Plot non-dimensional axes
    delta_x = 0.11/H_c # Plot non-dimensional axes
    delta_x_inC = delta_x
    Npoints_stream = 1000
    Npoints_stream_inC = 1000
    # SPT-100 sims
#    zvec = np.arange(zs[0,0],zs[0,-1]+delta_x,delta_x)
#    rvec = np.copy(zvec)
    # SAFRAN CHEOPS 1 sims
#    rvec = np.arange(rs[0,0],rs[-1,0]+delta_x,delta_x)
#    zvec = np.copy(rvec)
    # SAFRAN CHEOPS LP sims
#    zvec = np.arange(zs[0,0],zs[0,-1]+delta_x,delta_x)
#    rvec = np.copy(zvec)
    # HT5k sims
#    zvec = np.arange(zs[0,0],zs[0,-1]+delta_x,delta_x)
#    rvec = np.copy(zvec)
    # VHT_US MP and LP sims
#    rvec = np.arange(rs[0,-1],rs[-1,-1]+delta_x,delta_x)
#    zvec = np.copy(rvec)
#    zvec_inC = np.arange(zs[0,0],zs[0,int(xi_bottom)+5]+delta_x_inC,delta_x_inC)
#    rvec_inC = np.copy(zvec_inC) + 1.1
    # PPSX00 LP sims
#    rvec = np.linspace(rs[0,-1],rs[-1,-1],Npoints_stream)
#    zvec = np.copy(rvec)
#    zvec_inC = np.linspace(zs[0,0],zs[0,int(xi_bottom)+5],Npoints_stream)
#    rvec_inC = np.copy(zvec_inC) + 1.1
    # VHT_US MP sims (IEPC 2022)
    rvec = np.linspace(rs[0,-1],rs[-1,-1],Npoints_stream)
    zvec = np.copy(rvec)
    zvec_inC = np.linspace(zs[0,0],zs[0,int(xi_bottom)+5],Npoints_stream_inC)
    rvec_inC = np.copy(zvec_inC) + 2.4
    
    
    # Axes ticks flag (1: plot ticks 1 by 1, 2: plot ticks 2 by 2)
    ax_ticks_flag = 1
    

    if plot_fields_ref == 1:
        plt.figure(r'phi prof ref')
        plt.plot(zs[rind,:],phi_plot[rind,:], linestyle=linestyles[i], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[i], color=colors[i], markeredgecolor = 'k', label=labels[i])
        plt.figure(r'E prof ref')
        plt.plot(zs[rind,:],Efield_plot[rind,:], linestyle=linestyles[i], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[i], color=colors[i], markeredgecolor = 'k', label=labels[i])
        plt.figure(r'Ez prof ref')
        plt.plot(zs[rind,:],Ez_plot[rind,:], linestyle=linestyles[i], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[i], color=colors[i], markeredgecolor = 'k', label=labels[i])
             
        
        
        plt.figure('phi ref')
        ax = plt.gca()
        log_type         = 0
        auto             = 1
        min_val0         = -2.0
        max_val0         = 300.0
        # min_val0         = -2.0
        # max_val0         = 30.0
        cont             = 1
        lines            = 1
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 0 
        auto_lines_ticks = -1
        nticks_cbar      = 14
        nticks_lines     = 12
#        cbar_ticks       = np.sort(np.array([300, 250, 200, 150, 100, 50, 0,-50,-100,-150]))
        cbar_ticks       = np.array([500, 450, 400, 450, 400, 350, 300, 250, 200, 150, 100, 50, 0])
        # cbar_ticks       = np.array([0,2.5,5,7.5,10,12.5,15,17.5,20,22.5,25,27.5,30])
#        cbar_ticks       = np.array([250, 200, 150, 100, 50, 0]) # TOPO1
#        cbar_ticks       = np.array([650,600,550,500,450,400,350,300,250, 200, 150, 100, 50, 0]) # TOPO2
#        lines_ticks      = np.array([305, 280, 250, 200, 150, 100, 75, 50, 40, 30, 25, 15, 10, 5, 1, 0, -1, -2, -3, -4, -5, -6])
#        lines_ticks      = np.array([305, 280, 250, 200, 150, 100, 75, 50, 40, 25, 15, 10, 5])
#        lines_ticks      = np.array([5,10,15,20,25,30,40,50,75,100,150,200,250,280,290,302])
#        lines_ticks      = np.array([5,10,15,25,30,35,45,55,75,100,150,175,200,250,300,400,500]) # TOPO1
#        lines_ticks      = np.array([5,10,15,20,40,50,65,80,100,150,250,350,450,500,550,600,650]) # TOPO2 N3
        lines_ticks      = np.array([1,2,5,7,10,15,25,50,75,100,150,250,300]) # TOPO2 N4
        # lines_ticks      =  np.array([0,2.5,5,7.5,10,12.5,15,17.5,20,22.5,25,27.5,30])
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.0f}'
        lines_ticks_fmt   = '{%.0f}'
        lines_width       = line_width
#        lines_ticks_color = 'k'
        lines_ticks_color = grey
        lines_style       = '-'
        if interp_MFAM_picM_plot == 1:
            [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs_mp, rs_mp, phi_mp, nodes_flag_mp, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
        else:
            [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, phi_plot, nodes_flag, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)     
        # ax.clabel(CS2, CS2.levels, fmt=lines_ticks_fmt, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        ax.clabel(CS2, CS2.levels, fmt=lines_ticks_fmt, inline=1, fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)    
        # Plot the cathode magnetic line if given
        if plot_cath_Bline == 1:
            if elems_cath_Bline != 0:
                cath_z = elem_geom[0,elems_cath_Bline]
                cath_r = elem_geom[1,elems_cath_Bline]
                plt.plot(cath_z,cath_r,color=cath_Bline_color,linestyle=cath_Bline_linestyle,linewidth = line_width_boundary,markersize = marker_size)  
                # plt.plot(cath_Bline_z,cath_Bline_r,color=cath_Bline_color,linewidth = line_width_boundary,markersize = marker_size)
            if faces_cath_Bline != 0:
                # plt.plot(face_geom[0,faces_cath_Bline],face_geom[1,faces_cath_Bline],'c',linewidth = line_width_boundary,markersize = marker_size)
                plt.plot(faces_cath_Bline_nodez,faces_cath_Bline_noder,color=cath_Bline_color,linestyle=cath_Bline_linestyle,linewidth = line_width_boundary,markersize = marker_size)     
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)    
        if ax_ticks_flag == 2:
#            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
#            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
            ax.set_xticks(np.arange(0,17,3))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,2))
            ax.set_ylim(0,18.2)
            ax.set_xlim(0,15)
        elif ax_ticks_flag == 1:
            ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],1))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],2))
        if plot_scan_points == 1:
            plt.plot(z_scan,r_scan,'k',linewidth = line_width,markersize = marker_size)
            
        # plot_MFAM_ax_color(ax,faces,nodes,streamline_width,lambda_color,sigma_color,boundary_color)
        # # plt.plot(zs_mp_plot,rs_mp_plot,'bo-',linewidth = streamline_width,markersize = marker_size_mesh)
        # # plt.plot(zs_mp_plot.transpose(),rs_mp_plot.transpose(),'bo-',linewidth = streamline_width,markersize = marker_size_mesh)
        # plt.plot(zs_plot,rs_plot,'ko-',linewidth = streamline_width,markersize = marker_size_mesh)
        # plt.plot(zs_plot.transpose(),rs_plot.transpose(),'ko-',linewidth = streamline_width,markersize = marker_size_mesh)
        
        if save_flag == 1:
            plt.savefig(path_out+"phi_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            
            
        plt.figure('phi ref inC')
        ax = plt.gca()
        log_type         = 0
        auto             = 1
#        min_val0         = -2.0
#        max_val0         = 300.0
        min_val0         = -2.0
        max_val0         = 520.0
        cont             = 1
        lines            = 1
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 0 
        auto_lines_ticks = -1
        nticks_cbar      = 14
        nticks_lines     = 12
#        cbar_ticks       = np.sort(np.array([300, 250, 200, 150, 100, 50, 0,-50,-100,-150]))
        cbar_ticks       = np.array([500, 450, 400, 450, 400, 350, 300, 250, 200, 150, 100, 50, 0])
#        cbar_ticks       = np.array([250, 200, 150, 100, 50, 0]) # TOPO1
#        cbar_ticks       = np.array([650,600,550,500,450,400,350,300,250, 200, 150, 100, 50, 0]) # TOPO2
#        lines_ticks      = np.array([305, 280, 250, 200, 150, 100, 75, 50, 40, 30, 25, 15, 10, 5, 1, 0, -1, -2, -3, -4, -5, -6])
#        lines_ticks      = np.array([305, 280, 250, 200, 150, 100, 75, 50, 40, 25, 15, 10, 5])
#        lines_ticks      = np.array([5,10,15,20,25,30,40,50,75,100,150,200,250,280,290,302])
#        lines_ticks      = np.array([5,10,15,25,30,35,45,55,75,100,150,175,200,250,300,400,500]) # TOPO1
#        lines_ticks      = np.array([5,10,15,20,40,50,65,80,100,150,250,350,450,500,550,600,650]) # TOPO2 N3
        lines_ticks      = np.array([6,10,15,25,50,75,100,150,175,200,225,250,275,300,310]) # TOPO2 N4
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.0f}'
        lines_ticks_fmt   = '{%.0f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
        if interp_MFAM_picM_plot == 1:
            [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs_mp, rs_mp, phi_mp, nodes_flag_mp, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
        else:
            [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, phi_plot, nodes_flag, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)     
        # ax.clabel(CS2, CS2.levels, fmt=lines_ticks_fmt, inline=1,inline_spacing=0.0, fontsize=ticks_size_isolines, zorder = 1)
        ax.clabel(CS2, CS2.levels, fmt=lines_ticks_fmt, inline=1,inline_spacing=0.0, fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)    
#        plt.plot(elem_geom[0,elems_cath_Bline],elem_geom[1,elems_cath_Bline],'r-',linewidth = line_width_boundary,markersize = marker_size)
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)    
            
        npx_bot = 0
        npx_lim = int(xi_bottom)
        ax.set_xlim(zs[int(eta_min),npx_bot],zs[int(eta_min),npx_lim])
        ax.set_ylim(rs[int(eta_min),npx_lim],rs[int(eta_max),npx_lim])
        xlims = ax.get_xlim()
        ax.set_xticks(np.arange(xlims[0],xlims[1]+0.25,0.25))
        
#        if ax_ticks_flag == 2:
##            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
##            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
#            ax.set_xticks(np.arange(0,17,3))
#            ax.set_yticks(np.arange(0,rs[-1,-1]+1,2))
#            ax.set_ylim(0,18.2)
#            ax.set_xlim(0,15)
#        elif ax_ticks_flag == 1:
#            ax.set_xticks(np.arange(0,zs[0,-1],1))
##            ax.set_yticks(np.arange(0,rs[-1,-1],1))
#            ax.set_yticks(np.arange(0,rs[-1,-1]+1,1))
##            ax.set_yticks(np.arange(0,rs[-1,-1],2))

        if save_flag == 1:
            plt.savefig(path_out+"phi_ref_inC"+figs_format,bbox_inches='tight') 
            plt.close()
            

        plt.figure('E ref')
        ax = plt.gca()
        log_type         = 1
        auto             = 0
        min_val0         = 1E0
        max_val0         = 1E4
        cont             = 1
        lines            = 0
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = -1
        nticks_cbar      = 4
        nticks_lines     = 6
        cbar_ticks       = np.array([1E11,1E12,1E13,1E14])
#        lines_ticks      = np.array([0,200,500,1000,2000,3000,4000,20000,60000])*1E-3
#        lines_ticks      = np.array([0,200,500,1000,2000,3000,4000,20000,60000])
        lines_ticks      = np.array([200,500,2000,4000,10000])
        lines_ticks_loc  = [(0.7,4.25),(1.6,4.25),(3.0,3.8),(4.0,4.25),(4.7,5.0),(5.3,3.5),(3.46,7.5),(3.6,0.7),(5.7,3.0),(7.9,1.8),(7.7,5.5),(9.5,2.9)]
#        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.2f}'
        lines_ticks_fmt   = '{%.1f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, Efield_plot_cont, nodes_flag, log_type, auto, 
                               min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                               nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                               lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)   
         # Isolines ticks (exponent)
        # ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, manual = lines_ticks_loc, fontsize=ticks_size_isolines, zorder = 1)
        # ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, manual = lines_ticks_loc, fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        # Plot the cathode magnetic line if given
        if plot_cath_Bline == 1:
            if elems_cath_Bline != 0:
                cath_z = elem_geom[0,elems_cath_Bline]
                cath_r = elem_geom[1,elems_cath_Bline]
                plt.plot(cath_z,cath_r,color=cath_Bline_color,linestyle=cath_Bline_linestyle,linewidth = line_width_boundary,markersize = marker_size)  
                # plt.plot(cath_Bline_z,cath_Bline_r,color=cath_Bline_color,linewidth = line_width_boundary,markersize = marker_size)
            if faces_cath_Bline != 0:
                # plt.plot(face_geom[0,faces_cath_Bline],face_geom[1,faces_cath_Bline],'c',linewidth = line_width_boundary,markersize = marker_size)
                plt.plot(faces_cath_Bline_nodez,faces_cath_Bline_noder,color=cath_Bline_color,linestyle=cath_Bline_linestyle,linewidth = line_width_boundary,markersize = marker_size)     
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)  
        ax.tick_params(axis='x',pad=xticks_pad)
        
        # field_deltar = 1
        # field_deltaz = 2
        # Q1 = plt.quiver(zs[::field_deltar,::field_deltaz],rs[::field_deltar,::field_deltaz],
        #                 Ez_plot_cont[::field_deltar,::field_deltaz]/Efield_plot_cont[::field_deltar,::field_deltaz],
        #                 Er_plot_cont[::field_deltar,::field_deltaz]/Efield_plot_cont[::field_deltar,::field_deltaz],
        #                 width = 0.004, pivot='mid', color='w',scale = 1/0.035,angles='xy')    
        
        # --- Plot the streamlines 
        # Define number of starting points for plotting the streamlines
        plot_start_points = 0
        start_points = np.zeros((0,2))
        streamline_density = 10
#        flag_start = 1
        flag_start = 0
        # if interp_MFAM_picM_plot == 1:
        #     stream = streamline_2D(ax,zvec,rvec,dims_mp,zs_mp,rs_mp,Ez_mp_cont,Er_mp_cont,flag_start,start_points,
        #                            plot_start_points,streamline_density,streamline_width,streamline_color,arrow_size,
        #                            arrow_style,min_length)
        # else:
        #     stream = streamline_2D(ax,zvec,rvec,dims,zs,rs,Ez_plot_cont,Er_plot_cont,flag_start,start_points,
        #                            plot_start_points,streamline_density,streamline_width,streamline_color,arrow_size,
        #                            arrow_style,min_length)
        stream = streamline_2D(ax,zvec,rvec,dims,zs,rs,Ez_plot_cont,Er_plot_cont,flag_start,start_points,
                                   plot_start_points,streamline_density,streamline_width,streamline_color,arrow_size,
                                   arrow_style,min_length)
        
        
        ax.set_xlim(zs[0,0],zs[0,-1])
        ax.set_ylim(rs[0,-1],rs[-1,-1])
        if ax_ticks_flag == 2:
#            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
#            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
            ax.set_xticks(np.arange(0,17,3))
            ax.set_yticks(np.arange(0,yticks_lim,2))
            ax.set_ylim(0,ylim_axes)
            ax.set_xlim(0,15)
        elif ax_ticks_flag == 1:
            ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],1))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],2))
        

        if save_flag == 1:
            plt.savefig(path_out+"E_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            

        # plt.figure('Ez ref')
        # ax = plt.gca()
        # log_type         = 0
        # auto             = 0
        # min_val0         = np.nanmin(Ez_plot_cont)
        # max_val0         = 0.0
        # cont             = 1
        # lines            = 1
        # cont_nlevels     = 500
        # auto_cbar_ticks  = 1 
        # auto_lines_ticks = 0
        # nticks_cbar      = 4
        # nticks_lines     = 4
        # cbar_ticks       = np.array([1E11,1E12,1E13,1E14])
        # lines_ticks      = np.array([-500,0,200,500,1000,2000,5000,10000,15000,20000])*1E-3
        # lines_ticks_loc  = 'default'
        # cbar_ticks_fmt    = '{%.2f}'
        # lines_ticks_fmt   = '{%.1f}'
        # lines_width       = line_width
        # lines_ticks_color = 'k'
        # lines_style       = '-'
        # [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size_isolines, zs, rs, Ez_plot_cont, nodes_flag, log_type, auto, 
        #                       min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
        #                       nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
        #                       lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)  
        # plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        # plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        # plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
          

        # plt.figure('Er ref')
        # ax = plt.gca()
        # log_type         = 0
        # auto             = 0
        # min_val0         = np.nanmin(Er_plot_cont)
        # max_val0         = 0.0
        # cont             = 1
        # lines            = 1
        # cont_nlevels     = 500
        # auto_cbar_ticks  = 1 
        # auto_lines_ticks = 0
        # nticks_cbar      = 4
        # nticks_lines     = 6
        # cbar_ticks       = np.array([1E11,1E12,1E13,1E14])
        # lines_ticks      = np.array([-60000,-50000,-40000,-30000,-10000,-500,0,500,1000,2500,5000,7500,10000])*1E-3
        # lines_ticks_loc  = 'default'
        # cbar_ticks_fmt    = '{%.2f}'
        # lines_ticks_fmt   = '{%.1f}'
        # lines_width       = line_width
        # lines_ticks_color = 'k'
        # lines_style       = '-'
        # [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size_isolines, zs, rs, Er_plot_cont, nodes_flag, log_type, auto, 
        #                       min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
        #                       nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
        #                       lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)    
        # plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        # plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        # plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
        
        
        # plt.figure('ratio_Er_Ez ref')
        # ax = plt.gca()
        # log_type         = 0
        # auto             = 0
        # min_val0         = 0
        # max_val0         = 100
        # cont             = 1
        # lines            = 1
        # cont_nlevels     = 500
        # auto_cbar_ticks  = 1 
        # auto_lines_ticks = 0
        # nticks_cbar      = 4
        # nticks_lines     = 6
        # cbar_ticks       = np.array([1E11,1E12,1E13,1E14])
        # lines_ticks      = np.array([-60000,-50000,-40000,-30000,-10000,-500,0,500,1000,2500,5000,7500,10000])*1E-3
        # lines_ticks_loc  = 'default'
        # cbar_ticks_fmt    = '{%.2f}'
        # lines_ticks_fmt   = '{%.1f}'
        # lines_width       = line_width
        # lines_ticks_color = 'k'
        # lines_style       = '-'
        # [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size_isolines, zs, rs, Er_plot_cont/Ez_plot_cont, nodes_flag, log_type, auto, 
        #                       min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
        #                       nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
        #                       lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)    
        # plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        # plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        # plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
            
        
        plt.figure('B ref')
        ax = plt.gca()
        log_type         = 1
        auto             = 1
        min_val0         = 1E0
        max_val0         = 1E4
        cont             = 1
        lines            = 1
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = -1
        nticks_cbar      = 4
        nticks_lines     = 6
        cbar_ticks       = np.array([1E11,1E12,1E13,1E14])
        lines_ticks      = np.array([2,5,10,20,50,100,200,250,300,350])
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.2f}'
        lines_ticks_fmt   = '{%.1f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, Bfield_plot, nodes_flag, log_type, auto, 
                                min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)   
        # Isolines ticks (exponent)
        # ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        # Plot the cathode magnetic line if given
        if plot_cath_Bline == 1:
            if elems_cath_Bline != 0:
                cath_z = elem_geom[0,elems_cath_Bline]
                cath_r = elem_geom[1,elems_cath_Bline]
                plt.plot(cath_z,cath_r,color=cath_Bline_color,linestyle=cath_Bline_linestyle,linewidth = line_width_boundary,markersize = marker_size)  
                # plt.plot(cath_Bline_z,cath_Bline_r,color=cath_Bline_color,linewidth = line_width_boundary,markersize = marker_size)
            if faces_cath_Bline != 0:
                # plt.plot(face_geom[0,faces_cath_Bline],face_geom[1,faces_cath_Bline],'c',linewidth = line_width_boundary,markersize = marker_size)
                plt.plot(faces_cath_Bline_nodez,faces_cath_Bline_noder,color=cath_Bline_color,linestyle=cath_Bline_linestyle,linewidth = line_width_boundary,markersize = marker_size)
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)  
        
#        plot_MFAM_ax_color(ax,faces,nodes,streamline_width,lambda_color,sigma_color,boundary_color)
        
#        field_deltar = 1
#        field_deltaz = 2
#        Q1 = plt.quiver(zs[::field_deltar,::field_deltaz],rs[::field_deltar,::field_deltaz],
#                        Bz_plot[::field_deltar,::field_deltaz]/Bfield_plot[::field_deltar,::field_deltaz],
#                        Br_plot[::field_deltar,::field_deltaz]/Bfield_plot[::field_deltar,::field_deltaz],
#                        width = 0.004, pivot='mid', color='w',scale = 1/0.035,angles='xy')    
        # --- Plot the streamlines 
        streamline_density = 2
        flag_start = 0
        plot_start_points = 0
        start_points = np.zeros((0,2))
        streamline_color = 'k'  
        stream = streamline_2D(ax,zvec,rvec,dims,zs,rs,Bz_plot,Br_plot,flag_start,start_points,
                                    plot_start_points,streamline_density,streamline_width,streamline_color,arrow_size,
                                    arrow_style,min_length)
        ax.set_xlim(zs[0,0],zs[0,-1])
        ax.set_ylim(rs[0,-1],rs[-1,-1])
        if ax_ticks_flag == 2:
#            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
#            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
            ax.set_xticks(np.arange(0,17,3))
            ax.set_yticks(np.arange(0,yticks_lim,2))
            ax.set_ylim(0,ylim_axes)
            ax.set_xlim(0,15)
        elif ax_ticks_flag == 1:
            ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],1))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],2))
        
        if save_flag == 1:
            plt.savefig(path_out+"B_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            
            
        plt.figure('B ref inC')
        ax = plt.gca()
        log_type         = 1
        auto             = 1
        min_val0         = 1E0
        max_val0         = 1E4
        cont             = 1
        lines            = 1
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = -1
        nticks_cbar      = 9
        nticks_lines     = 10
        cbar_ticks       = np.array([1E11,1E12,1E13,1E14])
        lines_ticks      = np.array([2,5,10,20,50,100,200,250,300,350])
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.1f}'
        lines_ticks_fmt   = '{%.0f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, Bfield_plot, nodes_flag, log_type, auto, 
                                    min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                    nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                    lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
        # ax.clabel(CS2, CS2.levels, fmt=lines_ticks_fmt, inline=1, inline_spacing=-5.0,fontsize=ticks_size_isolines, zorder = 1)
        ax.clabel(CS2, CS2.levels, fmt=lines_ticks_fmt, inline=1, inline_spacing=-5.0,fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
        
#        plot_MFAM_ax_color(ax,faces,nodes,streamline_width,lambda_color,sigma_color,boundary_color)
        
#        # --- Plot the streamlines 
#        plot_start_points = 0
#        streamline_density = 3
#        flag_start = 0
#        stream = streamline_2D(ax,zvec_inC,rvec_inC,dims,zs,rs,Bz_plot,Br_plot,flag_start,start_points,
#                               plot_start_points,streamline_density,streamline_width,streamline_color,arrow_size,
#                               arrow_style,min_length)
        
        npx_bot = 0
        npx_lim = int(xi_bottom)
        ax.set_xlim(zs[int(eta_min),npx_bot],zs[int(eta_min),npx_lim])
        ax.set_ylim(rs[int(eta_min),npx_lim],rs[int(eta_max),npx_lim])
        xlims = ax.get_xlim()
        ax.set_xticks(np.arange(xlims[0],xlims[1]+0.25,0.25))
        
        if save_flag == 1:
            plt.savefig(path_out+"B_ref_inC"+figs_format,bbox_inches='tight') 
            plt.close()

        
        plt.figure('alpha_ano ref')
        ax = plt.gca()
        log_type         = 0
        auto             = 1
#        min_val0         = -2.0
#        max_val0         = 300.0
        min_val0         = -2.0
        max_val0         = 520.0
        cont             = 1
        lines            = 1
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = -1
        nticks_cbar      = 14
        nticks_lines     = 12
        cbar_ticks       = np.array([500, 450, 400, 450, 400, 350, 300, 250, 200, 150, 100, 50, 0])
        lines_ticks      = np.array([0.057,0.06,0.07,0.08,0.09,0.1,1.2,2,4.8])
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.2f}'
        lines_ticks_fmt   = '{%.2f}'
        lines_width       = line_width
#        lines_ticks_color = 'k'
        lines_ticks_color = grey
        lines_style       = '-'
        if interp_MFAM_picM_plot == 1:
            [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs_mp, rs_mp, alpha_ano_mp*1E2, nodes_flag_mp, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
        else:
            [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, alpha_ano*1E2, nodes_flag, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)     
        # ax.clabel(CS2, CS2.levels, fmt=lines_ticks_fmt, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        ax.clabel(CS2, CS2.levels, fmt=lines_ticks_fmt, inline=1, fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)    
        # Plot the cathode magnetic line if given
        if plot_cath_Bline == 1:
            if elems_cath_Bline != 0:
                cath_z = elem_geom[0,elems_cath_Bline]
                cath_r = elem_geom[1,elems_cath_Bline]
                plt.plot(cath_z,cath_r,color=cath_Bline_color,linestyle=cath_Bline_linestyle,linewidth = line_width_boundary,markersize = marker_size)  
                # plt.plot(cath_Bline_z,cath_Bline_r,color=cath_Bline_color,linewidth = line_width_boundary,markersize = marker_size)
            if faces_cath_Bline != 0:
                # plt.plot(face_geom[0,faces_cath_Bline],face_geom[1,faces_cath_Bline],'c',linewidth = line_width_boundary,markersize = marker_size)
                plt.plot(faces_cath_Bline_nodez,faces_cath_Bline_noder,color=cath_Bline_color,linestyle=cath_Bline_linestyle,linewidth = line_width_boundary,markersize = marker_size)
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)    
        if ax_ticks_flag == 2:
#            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
#            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
            ax.set_xticks(np.arange(0,17,3))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,2))
            ax.set_ylim(0,18.2)
            ax.set_xlim(0,15)
        elif ax_ticks_flag == 1:
            ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],1))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],2))
        if plot_scan_points == 1:
            plt.plot(z_scan,r_scan,'k',linewidth = line_width,markersize = marker_size)
        
        if save_flag == 1:
            plt.savefig(path_out+"alpha_ano_ref"+figs_format,bbox_inches='tight') 
            plt.close()
        
        
        plt.figure('MFAM ref')
        ax = plt.gca()
        plot_MFAM_ax_color(ax,faces,nodes,streamline_width,lambda_color,sigma_color,boundary_color)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        # Plot the cathode magnetic line if given
        if plot_cath_Bline == 1:
            if elems_cath_Bline != 0:
                cath_z = elem_geom[0,elems_cath_Bline]
                cath_r = elem_geom[1,elems_cath_Bline]
                plt.plot(cath_z,cath_r,color=cath_Bline_color,linestyle=cath_Bline_linestyle,linewidth = line_width_boundary,markersize = marker_size)  
                # plt.plot(cath_Bline_z,cath_Bline_r,color=cath_Bline_color,linewidth = line_width_boundary,markersize = marker_size)
            if faces_cath_Bline != 0:
                # plt.plot(face_geom[0,faces_cath_Bline],face_geom[1,faces_cath_Bline],'c',linewidth = line_width_boundary,markersize = marker_size)
                plt.plot(faces_cath_Bline_nodez,faces_cath_Bline_noder,color=cath_Bline_color,linestyle=cath_Bline_linestyle,linewidth = line_width_boundary,markersize = marker_size)
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
        ax.set_xlim(zs[0,0],zs[0,-1])
        ax.set_ylim(rs[0,-1],rs[-1,-1])
        if ax_ticks_flag == 2:
#            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
#            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
            ax.set_xticks(np.arange(0,17,3))
            ax.set_yticks(np.arange(0,yticks_lim,2))
            ax.set_ylim(0,ylim_axes)
            ax.set_xlim(0,15)
        elif ax_ticks_flag == 1:
            ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],1))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],2))
        
        if save_flag == 1:
            plt.savefig(path_out+"MFAM_ref"+figs_format,bbox_inches='tight') 
            plt.close()
        
        plt.figure('MFAM ref inC')
        ax = plt.gca()
        plot_MFAM_ax_color(ax,faces,nodes,streamline_width,lambda_color,sigma_color,boundary_color)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
        npx_bot = 0
        npx_lim = int(xi_bottom)
        ax.set_xlim(zs[int(eta_min),npx_bot],zs[int(eta_min),npx_lim])
        ax.set_ylim(rs[int(eta_min),npx_lim],rs[int(eta_max),npx_lim])
        xlims = ax.get_xlim()
        ax.set_xticks(np.arange(xlims[0],xlims[1]+0.25,0.25))
        
        if save_flag == 1:
            plt.savefig(path_out+"MFAM_ref_inC"+figs_format,bbox_inches='tight') 
            plt.close()
        
    if plot_dens_ref == 1:   
        plt.figure('n prof ref')
        plt.semilogy(zs[rind,:],ne_plot[rind,:], linestyle=linestyles[i], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[i], color=colors[i], markeredgecolor = 'k', label=labels[i])
        plt.figure('ni1 prof ref')
        plt.semilogy(zs[rind,:],ni1_plot[rind,:], linestyle=linestyles[i], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[i], color=colors[i], markeredgecolor = 'k', label=labels[i])
        plt.figure('ni2 prof ref')
        plt.semilogy(zs[rind,:],ni2_plot[rind,:], linestyle=linestyles[i], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[i], color=colors[i], markeredgecolor = 'k', label=labels[i])
        plt.figure('ratio_ni1_ni2 prof ref')
        plt.plot(zs[rind,:],ratio_ni1_ni2_plot[rind,:], linestyle=linestyles[i], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[i], color=colors[i], markeredgecolor = 'k', label=labels[i])
        plt.figure('nn prof ref')
        plt.semilogy(zs[rind,:],nn1_plot[rind,:], linestyle=linestyles[i], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[i], color=colors[i], markeredgecolor = 'k', label=labels[i])

        plt.figure('n ref')
        ax = plt.gca()
        log_type         = 1
        auto             = 0
        min_val0         = 1E15
        max_val0         = 1E19
        cont             = 1
        lines            = 1
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = -1
        nticks_cbar      = 4
        nticks_lines     = 4
        cbar_ticks       = np.array([1E11,1E12,1E13,1E14])
#        lines_ticks      = np.sort(np.array([5E18,3E18,2E18,1E18,5E17,3E17,2E17,1E17,5E16,2E16]))
#        lines_ticks      = np.sort(np.array([2E18,5E17,2E17,1E17,5E16,1E16,5E15,1E15]))
        lines_ticks      = np.sort(np.array([2E18,6E17,2E17,1E17,5E16,1E16,5E15,1E15])) # TOPO2 N4
        lines_ticks      = np.sort(np.array([1E19,2E18,6E17,2E17,1E17,5E16,1E16,5E15,1E15])) # TOPO2 N4
#        lines_ticks_loc  = [(0.7,4.25),(3.13,4.0),(4.3,4.25),(6.14,4.25),(9.0,4.25),(9.2,6.24),(4.11,2.52),(4.15,1.02),(7.17,1.16),(7.65,0.7),(4.24,7.34)]
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.2f}'
        lines_ticks_fmt   = '{%.1f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
#        lines_ticks_color = grey
        lines_style       = '-'
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, ne_plot, nodes_flag, log_type, auto, 
                          min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                          nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                          lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)  
        # Isolines ticks (exponent)
        # ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines)
#        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, manual = lines_ticks_loc, fontsize=ticks_size_isolines, zorder = 1)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        # Plot the cathode magnetic line if given
        if plot_cath_Bline == 1:
            if elems_cath_Bline != 0:
                cath_z = elem_geom[0,elems_cath_Bline]
                cath_r = elem_geom[1,elems_cath_Bline]
                plt.plot(cath_z,cath_r,color=cath_Bline_color,linestyle=cath_Bline_linestyle,linewidth = line_width_boundary,markersize = marker_size)  
                # plt.plot(cath_Bline_z,cath_Bline_r,color=cath_Bline_color,linewidth = line_width_boundary,markersize = marker_size)
            if faces_cath_Bline != 0:
                # plt.plot(face_geom[0,faces_cath_Bline],face_geom[1,faces_cath_Bline],'c',linewidth = line_width_boundary,markersize = marker_size)
                plt.plot(faces_cath_Bline_nodez,faces_cath_Bline_noder,color=cath_Bline_color,linestyle=cath_Bline_linestyle,linewidth = line_width_boundary,markersize = marker_size)
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)         
        if ax_ticks_flag == 2:
#            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
#            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
            ax.set_xticks(np.arange(0,17,3))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,2))
            ax.set_ylim(0,18.2)
            ax.set_xlim(0,15)
        elif ax_ticks_flag == 1:
            ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],1))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],2))
            
        # plot_MFAM_ax_color(ax,faces,nodes,streamline_width,lambda_color,sigma_color,boundary_color)
        # # plt.plot(zs_mp_plot,rs_mp_plot,'bo-',linewidth = streamline_width,markersize = marker_size_mesh)
        # # plt.plot(zs_mp_plot.transpose(),rs_mp_plot.transpose(),'bo-',linewidth = streamline_width,markersize = marker_size_mesh)
        # plt.plot(zs_plot,rs_plot,'ko-',linewidth = streamline_width,markersize = marker_size_mesh)
        # plt.plot(zs_plot.transpose(),rs_plot.transpose(),'ko-',linewidth = streamline_width,markersize = marker_size_mesh)
        
        
        if save_flag == 1:
            plt.savefig(path_out+"ne_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            
        
        plt.figure('n ref inC')
        ax = plt.gca()
        log_type         = 1
        auto             = 1
        min_val0         = 1E12
        max_val0         = 5E14
        cont             = 1
        lines            = 1
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = -1
        nticks_cbar      = 4
        nticks_lines     = 4
        cbar_ticks       = np.array([1E11,1E12,1E13,1E14])
#        lines_ticks      = np.sort(np.array([5E18,3E18,2E18,1E18,5E17,3E17,2E17,1E17,5E16,2E16]))
#        lines_ticks      = np.sort(np.array([2E18,5E17,2E17,1E17,5E16,1E16,5E15,1E15]))
        lines_ticks      = np.sort(np.array([2E18,1E18,6E17,2E17,1E17,5E16,1E16,5E15,1E15])) # TOPO2 N4
#        lines_ticks_loc  = [(0.7,4.25),(3.13,4.0),(4.3,4.25),(6.14,4.25),(9.0,4.25),(9.2,6.24),(4.11,2.52),(4.15,1.02),(7.17,1.16),(7.65,0.7),(4.24,7.34)]
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.2f}'
        lines_ticks_fmt   = '{%.1f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
        # NOTE: USE HERE THE FINE PIC MESH FOR PLOTTING TO MINIMIZE EXTRAPOLATION OF CONTOUR AT CHAMFERS AT CHAMBER EXIT
#        if interp_MFAM_picM_plot == 1:
#            [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs_mp, rs_mp, ne_mp, nodes_flag_mp, log_type, auto, 
#                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
#                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
#                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
#        else:
#            [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, ne_plot, nodes_flag, log_type, auto, 
#                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
#                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
#                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)     
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, ne_plot, nodes_flag, log_type, auto, 
                          min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                          nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                          lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)  
        # Isolines ticks (exponent)
        # ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1,inline_spacing=0.0, fontsize=ticks_size_isolines, zorder = 1)
        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1,inline_spacing=0.0, fontsize=ticks_size_isolines)
#        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, manual = lines_ticks_loc, fontsize=ticks_size_isolines, zorder = 1)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size) 
            
        npx_bot = 0
        npx_lim = int(xi_bottom)
        ax.set_xlim(zs[int(eta_min),npx_bot],zs[int(eta_min),npx_lim])
        ax.set_ylim(rs[int(eta_min),npx_lim],rs[int(eta_max),npx_lim])
        xlims = ax.get_xlim()
        ax.set_xticks(np.arange(xlims[0],xlims[1]+0.25,0.25))
        
#        if ax_ticks_flag == 2:
##            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
##            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
#            ax.set_xticks(np.arange(0,17,3))
#            ax.set_yticks(np.arange(0,rs[-1,-1]+1,2))
#            ax.set_ylim(0,18.2)
#            ax.set_xlim(0,15)
#        elif ax_ticks_flag == 1:
#            ax.set_xticks(np.arange(0,zs[0,-1],1))
##            ax.set_yticks(np.arange(0,rs[-1,-1],1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],2))
        
        if save_flag == 1:
            plt.savefig(path_out+"ne_ref_inC"+figs_format,bbox_inches='tight') 
            plt.close()
            

        plt.figure('ni1 ref')
        ax = plt.gca()
        log_type         = 1
        auto             = 1
        min_val0         = 1E12
        max_val0         = 5E14
        cont             = 1
        lines            = 1
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = -1
        nticks_cbar      = 4
        nticks_lines     = 4
        cbar_ticks       = np.array([1E11,1E12,1E13,1E14])
#        lines_ticks      = np.array([5E18,3E18,2E18,1E18,7E17,5E17,3E17,2E17,1E17,5E16,3E16,2E16,1E16,5E15,1E11])
        lines_ticks      = np.sort(np.array([1E18,5E17,2E17,1E17,5E16,3E16,2E16,1E16,5E15,1E15]))
        lines_ticks_loc  = [(0.7,4.25),(2.6,4.38),(4.0,4.25),(6.4,4.25),(8.5,4.55),(7.42,6.62),(7.8,7.4),(6.87,1.37),(6.9,0.7)]
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.2f}'
        lines_ticks_fmt   = '{%.1f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, ni1_plot, nodes_flag, log_type, auto, 
                          min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                          nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                          lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)  
        # Isolines ticks (exponent)
        # ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, manual = lines_ticks_loc, fontsize=ticks_size_isolines, zorder = 1)
        # ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, manual = lines_ticks_loc, fontsize=ticks_size_isolines)
        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
        if ax_ticks_flag == 2:
#            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
#            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
            ax.set_xticks(np.arange(0,17,3))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,2))
            ax.set_ylim(0,18.2)
            ax.set_xlim(0,15)
        elif ax_ticks_flag == 1:
            ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],1))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],2))
        
        if save_flag == 1:
            plt.savefig(path_out+"ni1_ref"+figs_format,bbox_inches='tight') 
            plt.close()
        
        plt.figure('ni2 ref')
        ax = plt.gca()
        log_type         = 1
        auto             = 1
        min_val0         = 1E12
        max_val0         = 5E14
        cont             = 1
        lines            = 1
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = -1
        nticks_cbar      = 4
        nticks_lines     = 4
        cbar_ticks       = np.array([1E11,1E12,1E13,1E14])
#        lines_ticks      = np.array([4E17,2E17,1E17,7E16,5E16,3E16,2E16,1E16,5E15,1E14,1E11])
        lines_ticks      = np.sort(np.array([1E17,5E16,3E16,2E16,1E16,5E15,5E14,1E14]))        
        lines_ticks_loc  = [(0.8,4.25),(2.35,4.4),(5.15,4.25),(7.04,4.5),(7.06,5.35),(6.2,6.7),(4.8,7.0),(6.2,2.7),(5.18,1.9),(3.74,1.81),(8.15,1.22)]
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.2f}'
        lines_ticks_fmt   = '{%.1f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, ni2_plot, nodes_flag, log_type, auto, 
                          min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                          nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                          lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)  
        # Isolines ticks (exponent)
        # ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, manual = lines_ticks_loc, fontsize=ticks_size_isolines, zorder = 1)
        # ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, manual = lines_ticks_loc, fontsize=ticks_size_isolines)
        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)      
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
        if ax_ticks_flag == 2:
#            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
#            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
            ax.set_xticks(np.arange(0,17,3))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,2))
            ax.set_ylim(0,18.2)
            ax.set_xlim(0,15)
        elif ax_ticks_flag == 1:
            ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],1))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],2))
        
        if save_flag == 1:
            plt.savefig(path_out+"ni2_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            
        plt.figure('ni3 ref')
        ax = plt.gca()
        log_type         = 1
        auto             = 1
        min_val0         = 1E12
        max_val0         = 5E14
        cont             = 1
        lines            = 1
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = -1
        nticks_cbar      = 4
        nticks_lines     = 4
        cbar_ticks       = np.array([1E11,1E12,1E13,1E14])
#        lines_ticks      = np.array([4E17,2E17,1E17,7E16,5E16,3E16,2E16,1E16,5E15,1E14,1E11])
        lines_ticks      = np.sort(np.array([5E16,1E16,5E15,1E15,5E14,1E14,5E13]))         
        lines_ticks_loc  = [(0.8,4.25),(2.35,4.4),(5.15,4.25),(7.04,4.5),(7.06,5.35),(6.2,6.7),(4.8,7.0),(6.2,2.7),(5.18,1.9),(3.74,1.81),(8.15,1.22)]
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.2f}'
        lines_ticks_fmt   = '{%.1f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, ni3_plot, nodes_flag, log_type, auto, 
                          min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                          nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                          lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)  
        # Isolines ticks (exponent)
        # ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, manual = lines_ticks_loc, fontsize=ticks_size_isolines, zorder = 1)
        # ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, manual = lines_ticks_loc, fontsize=ticks_size_isolines)
        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)      
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
        if ax_ticks_flag == 2:
#            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
#            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
            ax.set_xticks(np.arange(0,17,3))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,2))
            ax.set_ylim(0,18.2)
            ax.set_xlim(0,15)
        elif ax_ticks_flag == 1:
            ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],1))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],2))
        
        if save_flag == 1:
            plt.savefig(path_out+"ni3_ref"+figs_format,bbox_inches='tight') 
            plt.close()
        
        plt.figure('ni4 ref')
        ax = plt.gca()
        log_type         = 1
        auto             = 1
        min_val0         = 1E12
        max_val0         = 5E14
        cont             = 1
        lines            = 1
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = -1
        nticks_cbar      = 4
        nticks_lines     = 4
        cbar_ticks       = np.array([1E11,1E12,1E13,1E14])
#        lines_ticks      = np.array([4E17,2E17,1E17,7E16,5E16,3E16,2E16,1E16,5E15,1E14,1E11])
        lines_ticks      =  np.sort(np.array([5E15,1E15,5E14,1E14,5E13,1E13,5E12,1E12,5E11]))         
        lines_ticks_loc  = [(0.8,4.25),(2.35,4.4),(5.15,4.25),(7.04,4.5),(7.06,5.35),(6.2,6.7),(4.8,7.0),(6.2,2.7),(5.18,1.9),(3.74,1.81),(8.15,1.22)]
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.2f}'
        lines_ticks_fmt   = '{%.1f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, ni4_plot, nodes_flag, log_type, auto, 
                          min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                          nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                          lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)  
        # Isolines ticks (exponent)
        # ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, manual = lines_ticks_loc, fontsize=ticks_size_isolines, zorder = 1)
        # ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, manual = lines_ticks_loc, fontsize=ticks_size_isolines)
        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)      
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
        if ax_ticks_flag == 2:
#            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
#            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
            ax.set_xticks(np.arange(0,17,3))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,2))
            ax.set_ylim(0,18.2)
            ax.set_xlim(0,15)
        elif ax_ticks_flag == 1:
            ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],1))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],2)) 
        
        if save_flag == 1:
            plt.savefig(path_out+"ni4_ref"+figs_format,bbox_inches='tight') 
            plt.close()
        
        plt.figure('ratio_ni1_ni2 ref')
        ax = plt.gca()
        log_type         = 1
        auto             = 1
        min_val0         = 0
        max_val0         = 5
        cont             = 1
        lines            = 1
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = 1
        nticks_cbar      = 4
        nticks_lines     = 4
        cbar_ticks       = np.array([1E11,1E12,1E13,1E14])
#        lines_ticks      = 1.0/np.array([0.05,0.1,0.5,1,2,4,6,8,10,15,20,50,100,120,150])
        lines_ticks      = np.sort(np.array([1E-1,2E-1,3E-1,5E-1,1]))      
        lines_ticks_loc  = [(1.35,3.75),(4.0,3.0),(4.45,5.54),(4.87,4.89),(5.84,1.75),(8.5,4.45),(3.63,6.45)]        
#        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.2f}'
        lines_ticks_fmt   = '{%.2f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, ratio_ni1_ni2_plot, nodes_flag, log_type, auto, 
                          min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                          nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                          lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)  
#        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, manual = lines_ticks_loc, fontsize=ticks_size_isolines, zorder = 1)
        # ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, manual = lines_ticks_loc, fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)      
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
        if ax_ticks_flag == 2:
#            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
#            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
            ax.set_xticks(np.arange(0,17,3))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,2))
            ax.set_ylim(0,18.2)
            ax.set_xlim(0,15)
        elif ax_ticks_flag == 1:
            ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],1))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],2))
        
        if save_flag == 1:
            plt.savefig(path_out+"ratio_ni1_ni2_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            
        plt.figure('ratio_ni1_ni3 ref')
        ax = plt.gca()
        log_type         = 1
        auto             = 1
        min_val0         = 0
        max_val0         = 5
        cont             = 1
        lines            = 1
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = -1
        nticks_cbar      = 4
        nticks_lines     = 4
        cbar_ticks       = np.array([1E11,1E12,1E13,1E14])
#        lines_ticks      = 1.0/np.array([0.05,0.1,0.5,1,2,4,6,8,10,15,20,50,100,120,150])
        lines_ticks      = np.sort(np.array([1E-3,5E-3,1E-2,5E-2,1E-1,2E-1,3E-1,5E-1,1]))      
#        lines_ticks_loc  = [(1.35,3.75),(4.0,3.0),(4.45,5.54),(4.87,4.89),(5.84,1.75),(8.5,4.45),(3.63,6.45)]        
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.2f}'
        lines_ticks_fmt   = '{%.2f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, ratio_ni1_ni3_plot, nodes_flag, log_type, auto, 
                          min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                          nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                          lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)  
        # ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)      
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
        if ax_ticks_flag == 2:
#            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
#            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
            ax.set_xticks(np.arange(0,17,3))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,2))
            ax.set_ylim(0,18.2)
            ax.set_xlim(0,15)
        elif ax_ticks_flag == 1:
            ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],1))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],2))
        
        if save_flag == 1:
            plt.savefig(path_out+"ratio_ni1_ni3_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            
            
        plt.figure('ratio_ni1_ni4 ref')
        ax = plt.gca()
        log_type         = 1
        auto             = 1
        min_val0         = 0
        max_val0         = 5
        cont             = 1
        lines            = 1
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = -1
        nticks_cbar      = 4
        nticks_lines     = 4
        cbar_ticks       = np.array([1E11,1E12,1E13,1E14])
#        lines_ticks      = 1.0/np.array([0.05,0.1,0.5,1,2,4,6,8,10,15,20,50,100,120,150])
        lines_ticks      = np.sort(np.array([1E-3,5E-3,1E-2,5E-2,1E-1,2E-1,3E-1,5E-1,1]))      
#        lines_ticks_loc  = [(1.35,3.75),(4.0,3.0),(4.45,5.54),(4.87,4.89),(5.84,1.75),(8.5,4.45),(3.63,6.45)]        
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.2f}'
        lines_ticks_fmt   = '{%.2f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, ratio_ni1_ni4_plot, nodes_flag, log_type, auto, 
                          min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                          nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                          lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)  
        # ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)      
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
        if ax_ticks_flag == 2:
#            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
#            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
            ax.set_xticks(np.arange(0,17,3))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,2))
            ax.set_ylim(0,18.2)
            ax.set_xlim(0,15)
        elif ax_ticks_flag == 1:
            ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],1))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],2))
        
        if save_flag == 1:
            plt.savefig(path_out+"ratio_ni1_ni4_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            
            
        plt.figure('ratio_ne_neCEX ref')
        ax = plt.gca()
        log_type         = 1
        auto             = 1
        min_val0         = 0
        max_val0         = 5
        cont             = 1
        lines            = 1
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = -1
        nticks_cbar      = 4
        nticks_lines     = 4
        cbar_ticks       = np.array([1E11,1E12,1E13,1E14])
#        lines_ticks      = 1.0/np.array([0.05,0.1,0.5,1,2,4,6,8,10,15,20,50,100,120,150])
        lines_ticks      = np.sort(np.array([1E-3,5E-3,1E-2,5E-2,1E-1,2E-1,3E-1,5E-1,1]))      
#        lines_ticks_loc  = [(1.35,3.75),(4.0,3.0),(4.45,5.54),(4.87,4.89),(5.84,1.75),(8.5,4.45),(3.63,6.45)]        
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.2f}'
        lines_ticks_fmt   = '{%.2f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, ratio_ne_neCEX_plot, nodes_flag, log_type, auto, 
                          min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                          nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                          lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)  
        # ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)      
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
        if ax_ticks_flag == 2:
#            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
#            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
            ax.set_xticks(np.arange(0,17,3))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,2))
            ax.set_ylim(0,18.2)
            ax.set_xlim(0,15)
        elif ax_ticks_flag == 1:
            ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],1))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],2))
            
        if save_flag == 1:
            plt.savefig(path_out+"ratio_ne_neCEX_ref"+figs_format,bbox_inches='tight') 
            plt.close()
        
        plt.figure('nn ref')
        ax = plt.gca()
        log_type         = 1
        auto             = 0
        min_val0         = 1E15
        max_val0         = 1E19
        cont             = 1
        lines            = 1
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = -1
        nticks_cbar      = 4
        nticks_lines     = 10
        cbar_ticks       = np.array([1E11,1E12,1E13,1E14])
        lines_ticks      = np.sort(np.array([1E19,5E18,1E18,5E17,2E17,1E17,5E16,3E16]))
#        lines_ticks      = np.sort(np.array([3E19,1.5E19,1E19,5E18,1E18,5E17,2E17,1E17,5E16,3E16,3E15]))
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.2f}'
        lines_ticks_fmt   = '{%.1f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, nn_plot, nodes_flag, log_type, auto, 
                          min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                          nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                          lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)  
        # Isolines ticks (exponent)
        # ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        # Plot the cathode magnetic line if given
        if plot_cath_Bline == 1:
            if elems_cath_Bline != 0:
                cath_z = elem_geom[0,elems_cath_Bline]
                cath_r = elem_geom[1,elems_cath_Bline]
                plt.plot(cath_z,cath_r,color=cath_Bline_color,linestyle=cath_Bline_linestyle,linewidth = line_width_boundary,markersize = marker_size)  
                # plt.plot(cath_Bline_z,cath_Bline_r,color=cath_Bline_color,linewidth = line_width_boundary,markersize = marker_size)
            if faces_cath_Bline != 0:
                # plt.plot(face_geom[0,faces_cath_Bline],face_geom[1,faces_cath_Bline],'c',linewidth = line_width_boundary,markersize = marker_size)
                plt.plot(faces_cath_Bline_nodez,faces_cath_Bline_noder,color=cath_Bline_color,linestyle=cath_Bline_linestyle,linewidth = line_width_boundary,markersize = marker_size)
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
        if ax_ticks_flag == 2:
#            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
#            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
            ax.set_xticks(np.arange(0,17,3))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,2))
            ax.set_ylim(0,18.2)
            ax.set_xlim(0,15)
        elif ax_ticks_flag == 1:
            ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],1))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],2))
        
        if save_flag == 1:
            plt.savefig(path_out+"nn_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            
        plt.figure('nn ref inC')
        ax = plt.gca()
        log_type         = 1
        auto             = 0
        min_val0         = 1E14
        max_val0         = 1E19
        cont             = 1
        lines            = 1
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = -1
        nticks_cbar      = 4
        nticks_lines     = 10
        cbar_ticks       = np.array([1E11,1E12,1E13,1E14])
#        lines_ticks      = np.sort(np.array([3E19,1.5E19,1E19,5E18,1E18,5E17,2E17,1E17,5E16,3E16,3E15]))
        lines_ticks      = np.sort(np.array([5E18,7E18,1E19,2E19]))
        lines_ticks      = np.sort(np.array([7.0E18,1.2E19,1.6E19]))
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.2f}'
        lines_ticks_fmt   = '{%.1f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'        
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, nn_plot, nodes_flag, log_type, auto, 
                          min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                          nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                          lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)  
        # Isolines ticks (exponent)
#        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines2, inline=1,inline_spacing=0.0, fontsize=ticks_size_isolines, zorder = 1)
#        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines2, inline=0,inline_spacing=5.0, fontsize=ticks_size_isolines-2, zorder = 1)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
            
        npx_bot = 0
        npx_lim = int(xi_bottom)
        ax.set_xlim(zs[int(eta_min),npx_bot],zs[int(eta_min),npx_lim])
        ax.set_ylim(rs[int(eta_min),npx_lim],rs[int(eta_max),npx_lim])
        xlims = ax.get_xlim()
        ax.set_xticks(np.arange(xlims[0],xlims[1]+0.25,0.25))
        # ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines2, inline=1,inline_spacing=10.0, fontsize=ticks_size_isolines, zorder = 1)
        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines2, inline=1,inline_spacing=10.0, fontsize=ticks_size_isolines)
        
#        if ax_ticks_flag == 2:
##            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
##            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
#            ax.set_xticks(np.arange(0,17,3))
#            ax.set_yticks(np.arange(0,rs[-1,-1]+1,2))
#            ax.set_ylim(0,18.2)
#            ax.set_xlim(0,15)
#        elif ax_ticks_flag == 1:
#            ax.set_xticks(np.arange(0,zs[0,-1],1))
##            ax.set_yticks(np.arange(0,rs[-1,-1],1))
#            ax.set_yticks(np.arange(0,rs[-1,-1]+1,1))
##            ax.set_yticks(np.arange(0,rs[-1,-1],2))
        
        if save_flag == 1:
            plt.savefig(path_out+"nn_ref_inC"+figs_format,bbox_inches='tight') 
            plt.close()
        
               
        plt.figure('ratio_nn1_nn2 ref')
        ax = plt.gca()
        log_type         = 1
        auto             = 1
        min_val0         = 0
        max_val0         = 5
        cont             = 1
        lines            = 1
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = -1
        nticks_cbar      = 4
        nticks_lines     = 4
        cbar_ticks       = np.array([1E11,1E12,1E13,1E14])
#        lines_ticks      = 1.0/np.array([0.05,0.1,0.5,1,2,4,6,8,10,15,20,50,100,120,150])
        lines_ticks      = np.sort(np.array([1E-3,5E-3,1E-2,5E-2,1E-1,2E-1,3E-1,5E-1,1]))      
#        lines_ticks_loc  = [(1.35,3.75),(4.0,3.0),(4.45,5.54),(4.87,4.89),(5.84,1.75),(8.5,4.45),(3.63,6.45)]        
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.2f}'
        lines_ticks_fmt   = '{%.2f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, ratio_nn1_nn2_plot, nodes_flag, log_type, auto, 
                          min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                          nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                          lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)  
        # ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)      
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
        if ax_ticks_flag == 2:
#            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
#            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
            ax.set_xticks(np.arange(0,17,3))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,2))
            ax.set_ylim(0,18.2)
            ax.set_xlim(0,15)
        elif ax_ticks_flag == 1:
            ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],1))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],2))
        
        if save_flag == 1:
            plt.savefig(path_out+"ratio_nn1_nn2_ref"+figs_format,bbox_inches='tight') 
            plt.close()
        
        plt.figure('ratio_nn1_nn3 ref')
        ax = plt.gca()
        log_type         = 1
        auto             = 1
        min_val0         = 0
        max_val0         = 5
        cont             = 1
        lines            = 1
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = -1
        nticks_cbar      = 4
        nticks_lines     = 4
        cbar_ticks       = np.array([1E11,1E12,1E13,1E14])
#        lines_ticks      = 1.0/np.array([0.05,0.1,0.5,1,2,4,6,8,10,15,20,50,100,120,150])
        lines_ticks      = np.sort(np.array([1E-3,5E-3,1E-2,5E-2,1E-1,2E-1,3E-1,5E-1,1]))      
#        lines_ticks_loc  = [(1.35,3.75),(4.0,3.0),(4.45,5.54),(4.87,4.89),(5.84,1.75),(8.5,4.45),(3.63,6.45)]        
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.2f}'
        lines_ticks_fmt   = '{%.2f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, ratio_nn1_nn3_plot, nodes_flag, log_type, auto, 
                          min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                          nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                          lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)  
        # ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)      
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
        if ax_ticks_flag == 2:
#            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
#            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
            ax.set_xticks(np.arange(0,17,3))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,2))
            ax.set_ylim(0,18.2)
            ax.set_xlim(0,15)
        elif ax_ticks_flag == 1:
            ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],1))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],2))
         
        if save_flag == 1:
            plt.savefig(path_out+"ratio_nn1_nn3_ref"+figs_format,bbox_inches='tight') 
            plt.close()
        
        plt.figure('ratio_nn1_nnCEX ref')
        ax = plt.gca()
        log_type         = 1
        auto             = 1
        min_val0         = 0
        max_val0         = 5
        cont             = 1
        lines            = 1
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = -1
        nticks_cbar      = 4
        nticks_lines     = 4
        cbar_ticks       = np.array([1E11,1E12,1E13,1E14])
#        lines_ticks      = 1.0/np.array([0.05,0.1,0.5,1,2,4,6,8,10,15,20,50,100,120,150])
        lines_ticks      = np.sort(np.array([1E-3,5E-3,1E-2,5E-2,1E-1,2E-1,3E-1,5E-1,1]))      
#        lines_ticks_loc  = [(1.35,3.75),(4.0,3.0),(4.45,5.54),(4.87,4.89),(5.84,1.75),(8.5,4.45),(3.63,6.45)]        
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.2f}'
        lines_ticks_fmt   = '{%.2f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, ratio_nn1_nnCEX_plot, nodes_flag, log_type, auto, 
                          min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                          nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                          lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)  
        # ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)      
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
        if ax_ticks_flag == 2:
#            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
#            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
            ax.set_xticks(np.arange(0,17,3))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,2))
            ax.set_ylim(0,18.2)
            ax.set_xlim(0,15)
        elif ax_ticks_flag == 1:
            ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],1))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],2))
        
        if save_flag == 1:
            plt.savefig(path_out+"ratio_nn1_nnCEX_ref"+figs_format,bbox_inches='tight') 
            plt.close()
        
        plt.figure('ratio_nn_nnCEX ref')
        ax = plt.gca()
        log_type         = 1
        auto             = 1
        min_val0         = 0
        max_val0         = 5
        cont             = 1
        lines            = 1
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = -1
        nticks_cbar      = 4
        nticks_lines     = 4
        cbar_ticks       = np.array([1E11,1E12,1E13,1E14])
#        lines_ticks      = 1.0/np.array([0.05,0.1,0.5,1,2,4,6,8,10,15,20,50,100,120,150])
        lines_ticks      = np.sort(np.array([1E-3,5E-3,1E-2,5E-2,1E-1,2E-1,3E-1,5E-1,1]))      
#        lines_ticks_loc  = [(1.35,3.75),(4.0,3.0),(4.45,5.54),(4.87,4.89),(5.84,1.75),(8.5,4.45),(3.63,6.45)]        
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.2f}'
        lines_ticks_fmt   = '{%.2f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, ratio_nn_nnCEX_plot, nodes_flag, log_type, auto, 
                          min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                          nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                          lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)  
        # ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)      
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
        if ax_ticks_flag == 2:
#            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
#            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
            ax.set_xticks(np.arange(0,17,3))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,2))
            ax.set_ylim(0,18.2)
            ax.set_xlim(0,15)
        elif ax_ticks_flag == 1:
            ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],1))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],2))
        
        if save_flag == 1:
            plt.savefig(path_out+"ratio_nn_nnCEX_ref"+figs_format,bbox_inches='tight') 
            plt.close()
        
    if plot_temp_ref == 1:   
        plt.figure(r'Te prof ref')
        plt.plot(zs[rind,:],Te_plot[rind,:], linestyle=linestyles[i], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[i], color=colors[i], markeredgecolor = 'k', label=labels[i])
#        plt.plot(rs[int(eta_min):int(eta_max),18],Ti1_plot[int(eta_min):int(eta_max),18], linestyle=linestyles[i], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[i], color=colors[i], markeredgecolor = 'k', label=labels[i])
        plt.figure(r'ratio_Ekin_Te prof ref')
        plt.semilogy(zs[rind,:],ratio_Ekin_Te_plot[rind,:], linestyle=linestyles[i], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[i], color=colors[i], markeredgecolor = 'k', label=labels[i])

            
        plt.figure('Te ref')
        ax = plt.gca()
        log_type         = 0
        auto             = 0
        min_val0         = 0
#        max_val0         = 50.0
        max_val0         = 30.0
#        max_val0         = 65.0
        cont             = 1
        lines            = 1
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 0 
        auto_lines_ticks = -1
        nticks_cbar      = 14
        nticks_lines     = 10
        cbar_ticks       = np.array([30,25,20,15,10,5,0])
#        cbar_ticks       = np.array([65,60,55,50,45,40,35,30,25,20,15,10,5])
#        cbar_ticks       = np.array([35,30,25,20,15,10,5])
#        cbar_ticks       = np.array([25,20,15,10,5,0]) # TOPO 1
#        cbar_ticks       = np.array([65,60,55,50,45,40,35,30,25,20,15,10,5,0]) # TOPO 2
#        lines_ticks      = np.array([7,9,12,20,25,30,35,40,45])
#        lines_ticks      = np.array([3,4,5,6,7,8,9,12,15,18,20,22,25,30,35,40,45])
#        lines_ticks      = np.array([1,5,6,7,8,10,15,18,20,21]) # TOPO1
#        lines_ticks      = np.array([1,5,10,12,14,25,30,40,50,55,58]) # TOPO2 N3
        lines_ticks      = np.array([1,2,5,7,10,12,15,20,25,27,30,34,45,47]) # TOPO2 N4
#        lines_ticks      = np.array([1,5,7,10,15,20,25,30,35,45,50,55,60])
#        lines_ticks_loc  = [(0.38,4.25),(0.88,4.25),(1.5,4.25),(2.7,4.6),(3.0,3.8),(3.6,4.8),(3.9,4.25),(4.5,4.25),(5.18,4.0),(5.3,3.2),(5.6,1.8),(3.7,6.8)]
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.0f}'
        lines_ticks_fmt   = '{%.0f}'
        lines_width       = line_width
#        lines_ticks_color = 'k'
        lines_ticks_color = grey
        lines_style       = '-'
        if interp_MFAM_picM_plot == 1:
            [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs_mp, rs_mp, Te_mp, nodes_flag_mp, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
        else:
            [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, Te_plot, nodes_flag, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
        # ax.clabel(CS2, CS2.levels, fmt=lines_ticks_fmt, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        ax.clabel(CS2, CS2.levels, fmt=lines_ticks_fmt, inline=1, fontsize=ticks_size_isolines)
#        ax.clabel(CS2, CS2.levels, fmt=lines_ticks_fmt, inline=1, manual = lines_ticks_loc, fontsize=ticks_size_isolines, zorder = 1)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        # Plot the cathode magnetic line if given
        if plot_cath_Bline == 1:
            if elems_cath_Bline != 0:
                cath_z = elem_geom[0,elems_cath_Bline]
                cath_r = elem_geom[1,elems_cath_Bline]
                plt.plot(cath_z,cath_r,color=cath_Bline_color,linestyle=cath_Bline_linestyle,linewidth = line_width_boundary,markersize = marker_size)  
                # plt.plot(cath_Bline_z,cath_Bline_r,color=cath_Bline_color,linewidth = line_width_boundary,markersize = marker_size)
            if faces_cath_Bline != 0:
                # plt.plot(face_geom[0,faces_cath_Bline],face_geom[1,faces_cath_Bline],'c',linewidth = line_width_boundary,markersize = marker_size)
                plt.plot(faces_cath_Bline_nodez,faces_cath_Bline_noder,color=cath_Bline_color,linestyle=cath_Bline_linestyle,linewidth = line_width_boundary,markersize = marker_size)
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size) 
        if ax_ticks_flag == 2:
#            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
#            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
            ax.set_xticks(np.arange(0,17,3))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,2))
            ax.set_ylim(0,18.2)
            ax.set_xlim(0,15)
        elif ax_ticks_flag == 1:
            ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],1))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],2))
            
        if save_flag == 1:
            plt.savefig(path_out+"Te_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            
            
        plt.figure('Te ref inC')
        ax = plt.gca()
        log_type         = 0
        auto             = 0
        min_val0         = 0
#        max_val0         = 50.0
        max_val0         = 30.0
#        max_val0         = 65.0
        cont             = 1
        lines            = 1
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 0 
        auto_lines_ticks = -1
        nticks_cbar      = 14
        nticks_lines     = 10
        cbar_ticks       = np.array([30,25,20,15,10,5,0])
#        cbar_ticks       = np.array([65,60,55,50,45,40,35,30,25,20,15,10,5])
#        cbar_ticks       = np.array([35,30,25,20,15,10,5])
#        cbar_ticks       = np.array([25,20,15,10,5,0]) # TOPO 1
#        cbar_ticks       = np.array([65,60,55,50,45,40,35,30,25,20,15,10,5,0]) # TOPO 2
#        lines_ticks      = np.array([7,9,12,20,25,30,35,40,45])
#        lines_ticks      = np.array([3,4,5,6,7,8,9,12,15,18,20,22,25,30,35,40,45])
#        lines_ticks      = np.array([1,5,6,7,8,10,15,18,20,21]) # TOPO1
#        lines_ticks      = np.array([1,5,10,12,14,25,30,40,50,55,58]) # TOPO2 N3
        lines_ticks      = np.array([1,3,5,7,9,10,11,12,15,20,25,30,34,45,47]) # TOPO2 N4
#        lines_ticks_loc  = [(0.38,4.25),(0.88,4.25),(1.5,4.25),(2.7,4.6),(3.0,3.8),(3.6,4.8),(3.9,4.25),(4.5,4.25),(5.18,4.0),(5.3,3.2),(5.6,1.8),(3.7,6.8)]
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.0f}'
        lines_ticks_fmt   = '{%.0f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
        if interp_MFAM_picM_plot == 1:
            [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs_mp, rs_mp, Te_mp, nodes_flag_mp, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
        else:
            [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, Te_plot, nodes_flag, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
        # ax.clabel(CS2, CS2.levels, fmt=lines_ticks_fmt, inline=1, inline_spacing=0.0, fontsize=ticks_size_isolines, zorder = 1)
        ax.clabel(CS2, CS2.levels, fmt=lines_ticks_fmt, inline=1, inline_spacing=0.0, fontsize=ticks_size_isolines)
#        ax.clabel(CS2, CS2.levels, fmt=lines_ticks_fmt, inline=1, manual = lines_ticks_loc, fontsize=ticks_size_isolines, zorder = 1)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size) 
        
        npx_bot = 0
        npx_lim = int(xi_bottom)
        ax.set_xlim(zs[int(eta_min),npx_bot],zs[int(eta_min),npx_lim])
        ax.set_ylim(rs[int(eta_min),npx_lim],rs[int(eta_max),npx_lim])
        xlims = ax.get_xlim()
        ax.set_xticks(np.arange(xlims[0],xlims[1]+0.25,0.25))   
            
#        if ax_ticks_flag == 2:
##            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
##            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
#            ax.set_xticks(np.arange(0,17,3))
#            ax.set_yticks(np.arange(0,rs[-1,-1]+1,2))
#            ax.set_ylim(0,18.2)
#            ax.set_xlim(0,15)
#        elif ax_ticks_flag == 1:
#            ax.set_xticks(np.arange(0,zs[0,-1],1))
##            ax.set_yticks(np.arange(0,rs[-1,-1],1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],2))
        
        if save_flag == 1:
            plt.savefig(path_out+"Te_ref_inC"+figs_format,bbox_inches='tight') 
            plt.close()
           
#        plt.figure('Ti1 ref')
#        ax = plt.gca()
#        log_type         = 0
#        auto             = 1
#        min_val0         = 0.0
#        max_val0         = 0.0
#        cont             = 0
#        lines            = 1
#        cont_nlevels     = 500
#        auto_cbar_ticks  = 1 
#        auto_lines_ticks = 0
#        nticks_cbar      = 5
#        nticks_lines     = 10
#        cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
#        lines_ticks      = np.array([0,0.5,1,2,5,10,15,20,25,30,35,40])
#        lines_ticks_loc  = 'default'
#        cbar_ticks_fmt    = '{%.1f}'
#        lines_ticks_fmt   = '{%.2f}'
#        lines_width       = line_width
#        lines_ticks_color = colors[k]
#        lines_style       = '-'
#        [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size_isolines, zs, rs, Ti1_plot, nodes_flag, log_type, auto, 
#                               min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
#                               nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
#                               lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)                    
#        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
#        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
#        plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
        

#        plt.figure('Ti2 ref')
#        ax = plt.gca()
#        log_type         = 0
#        auto             = 1
#        min_val0         = 0.0
#        max_val0         = 0.0
#        cont             = 0
#        lines            = 1
#        cont_nlevels     = 500
#        auto_cbar_ticks  = 1 
#        auto_lines_ticks = 0
#        nticks_cbar      = 5
#        nticks_lines     = 10
#        cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
#        lines_ticks      = np.array([0,0.5,1,2,5,10,15,20,25,30,35,40,45,50,55,60,65])
#        lines_ticks_loc  = 'default'
#        cbar_ticks_fmt    = '{%.1f}'
#        lines_ticks_fmt   = '{%.2f}'
#        lines_width       = line_width
#        lines_ticks_color = colors[k]
#        lines_style       = '-'
#        [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size_isolines, zs, rs, Ti2_plot, nodes_flag, log_type, auto, 
#                               min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
#                               nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
#                               lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)                    
#        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
#        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
#        plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
        
    
#        plt.figure('Tn ref')
#        ax = plt.gca()
#        log_type         = 0
#        auto             = 1
#        min_val0         = 0.0
#        max_val0         = 0.0
#        cont             = 0
#        lines            = 1
#        cont_nlevels     = 500
#        auto_cbar_ticks  = 1 
#        auto_lines_ticks = 0
#        nticks_cbar      = 5
#        nticks_lines     = 10
#        cbar_ticks       = np.array([0.0, -1.0, -2.0, -3.0, -5.0, -10.0])
#        lines_ticks      = np.array([0,0.01,0.02,0.03,0.04,0.05,.06,0.07,.08,0.09,0.1,0.11,0.12,0.13])
#        lines_ticks_loc  = 'default'
#        cbar_ticks_fmt    = '{%.1f}'
#        lines_ticks_fmt   = '{%.2f}'
#        lines_width       = line_width
#        lines_ticks_color = colors[k]
#        lines_style       = '-'
#        [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size_isolines, zs, rs, Tn1_plot, nodes_flag, log_type, auto, 
#                               min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
#                               nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
#                               lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)   
#        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
#        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
#        plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
       

        plt.figure('ratio_Ekin_Te ref')
        ax = plt.gca()
        log_type         = 1
        auto             = 0
        min_val0         = 1E-6
        max_val0         = 1E-1
        cont             = 1
        lines            = 1
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = -1
        nticks_cbar      = 5
        nticks_lines     = 10
        cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
#        lines_ticks      = np.array([0.005,0.01,0.02,0.05,0.1,1])
        lines_ticks      = np.array([1E-3,1E-2,5E-2,1E-1])
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.1f}'
        lines_ticks_fmt   = '{%.2f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
        if interp_MFAM_picM_plot == 1:
            [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs_mp, rs_mp, ratio_Ekin_Te_mp, nodes_flag_mp, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)  
        else:
            
            [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, ratio_Ekin_Te_plot, nodes_flag, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)  
        # Isolines ticks (exponent)
        # ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        # Plot the cathode magnetic line if given
        if plot_cath_Bline == 1:
            cath_z = elem_geom[0,elems_cath_Bline]
            cath_r = elem_geom[1,elems_cath_Bline]
            plt.plot(cath_z,cath_r,color=cath_Bline_color,linestyle=cath_Bline_linestyle,linewidth = line_width_boundary,markersize = marker_size)  
            # plt.plot(cath_Bline_z,cath_Bline_r,color=cath_Bline_color,linewidth = line_width_boundary,markersize = marker_size)
        
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
        if ax_ticks_flag == 2:
#            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
#            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
            ax.set_xticks(np.arange(0,17,3))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,2))
            ax.set_ylim(0,18.2)
            ax.set_xlim(0,15)
        elif ax_ticks_flag == 1:
            ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],1))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],2))
            
        if save_flag == 1:
            plt.savefig(path_out+"ratio_Ekin_Te_ref"+figs_format,bbox_inches='tight') 
            plt.close()
    
#        plt.figure('ratio_Ekin_Ti1 ref')
#        ax = plt.gca()
#        log_type         = 0
#        auto             = 1
#        min_val0         = 0.0
#        max_val0         = 0.0
#        cont             = 0
#        lines            = 1
#        cont_nlevels     = 500
#        auto_cbar_ticks  = 1 
#        auto_lines_ticks = 0
#        nticks_cbar      = 5
#        nticks_lines     = 10
#        cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
#        lines_ticks      = np.array([0.0,0.5,1,10,50,100,150,200])
#        lines_ticks_loc  = 'default'
#        cbar_ticks_fmt    = '{%.1f}'
#        lines_ticks_fmt   = '{%.2f}'
#        lines_width       = line_width
#        lines_ticks_color = colors[k]
#        lines_style       = '-'
#        [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size_isolines, zs, rs, ratio_Ekin_Ti1_plot, nodes_flag, log_type, auto, 
#                               min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
#                               nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
#                               lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)  
#        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
#        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
#        plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
        
      
#        plt.figure('ratio_Ekin_Ti2 ref')
#        ax = plt.gca()
#        log_type         = 0
#        auto             = 1
#        min_val0         = 0.0
#        max_val0         = 0.0
#        cont             = 0
#        lines            = 1
#        cont_nlevels     = 500
#        auto_cbar_ticks  = 1 
#        auto_lines_ticks = 0
#        nticks_cbar      = 5
#        nticks_lines     = 10
#        cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
#        lines_ticks      = np.array([0.0,0.5,1,10,50,100,150,200])
#        lines_ticks_loc  = 'default'
#        cbar_ticks_fmt    = '{%.1f}'
#        lines_ticks_fmt   = '{%.2f}'
#        lines_width       = line_width
#        lines_ticks_color = colors[k]
#        lines_style       = '-'
#        [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size_isolines, zs, rs, ratio_Ekin_Ti2_plot, nodes_flag, log_type, auto, 
#                               min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
#                               nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
#                               lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)  
#        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
#        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
#        plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
           

        plt.figure('pn ref')
        ax = plt.gca()
        log_type         = 1
        auto             = 0
        min_val0         = 1E-8
        max_val0         = 1E-3
        cont             = 1
        lines            = 1
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = -1
        nticks_cbar      = 5
        nticks_lines     = 10
        cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
#        lines_ticks      = np.array([0.005,0.01,0.02,0.05,0.1,1])
        lines_ticks      = np.array([1E-8,5E-8,1E-7,5E-7,1E-6,5E-6,1E-5,5E-5,1E-4,5E-4,1E-3,5E-3])
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.1f}'
        lines_ticks_fmt   = '{%.2f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
#        pn1_plot = nn1_plot*Tn1_plot*e*1E-2 # Neutral pressure in mbar (1Pa = 1E-2 mbar)
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, pn_plot, nodes_flag, log_type, auto, 
                               min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                               nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                               lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)  
        # Isolines ticks (exponent)
        # ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        # Plot the cathode magnetic line if given
        if plot_cath_Bline == 1:
            if elems_cath_Bline != 0:
                cath_z = elem_geom[0,elems_cath_Bline]
                cath_r = elem_geom[1,elems_cath_Bline]
                plt.plot(cath_z,cath_r,color=cath_Bline_color,linestyle=cath_Bline_linestyle,linewidth = line_width_boundary,markersize = marker_size)  
                # plt.plot(cath_Bline_z,cath_Bline_r,color=cath_Bline_color,linewidth = line_width_boundary,markersize = marker_size)
            if faces_cath_Bline != 0:
                # plt.plot(face_geom[0,faces_cath_Bline],face_geom[1,faces_cath_Bline],'c',linewidth = line_width_boundary,markersize = marker_size)
                plt.plot(faces_cath_Bline_nodez,faces_cath_Bline_noder,color=cath_Bline_color,linestyle=cath_Bline_linestyle,linewidth = line_width_boundary,markersize = marker_size)
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
        if ax_ticks_flag == 2:
#            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
#            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
            ax.set_xticks(np.arange(0,17,3))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,2))
            ax.set_ylim(0,18.2)
            ax.set_xlim(0,15)
        elif ax_ticks_flag == 1:
            ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],1))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],2))

        if save_flag == 1:
            plt.savefig(path_out+"pn_ref"+figs_format,bbox_inches='tight') 
            plt.close()


    if plot_vel_ref == 1:
        plt.figure('Mi1 ref')
        ax = plt.gca()
        log_type         = 1
        auto             = 1
        min_val0         = 0.0
        max_val0         = 0.0
        cont             = 1
        lines            = 1
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = 0
        nticks_cbar      = 5
        nticks_lines     = 10
        cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
        lines_ticks      = np.array([0.5,0.75,1.0,1.5])
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.1f}'
        lines_ticks_fmt   = '{%.2f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, Mi1_plot, nodes_flag, log_type, auto, 
                          min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                          nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                          lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)  
        # Isolines ticks (exponent)
        # ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        ax.clabel(CS2, CS2.levels, fmt=lines_ticks_fmt, inline=1, fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
        if ax_ticks_flag == 2:
#            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
#            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
            ax.set_xticks(np.arange(0,17,3))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,2))
            ax.set_ylim(0,18.2)
            ax.set_xlim(0,15)
        elif ax_ticks_flag == 1:
            ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],1))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],2))

        if save_flag == 1:
            plt.savefig(path_out+"Mi1_ref"+figs_format,bbox_inches='tight') 
            plt.close()

                         
        plt.figure('Mi2 ref')
        ax = plt.gca()
        log_type         = 1
        auto             = 1
        min_val0         = 0.0
        max_val0         = 0.0
        cont             = 1
        lines            = 1
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = 0
        nticks_cbar      = 5
        nticks_lines     = 10
        cbar_ticks       = np.array([0.5,0.8,0.9,1,1.5])
        lines_ticks      = np.array([0.5,0.75,1.0,1.5])
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.1f}'
        lines_ticks_fmt   = '{%.2f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, Mi2_plot, nodes_flag, log_type, auto, 
                          min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                          nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                          lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)  
        # Isolines ticks (exponent)
        # ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        ax.clabel(CS2, CS2.levels, fmt=lines_ticks_fmt, inline=1, fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
        if ax_ticks_flag == 2:
#            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
#            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
            ax.set_xticks(np.arange(0,17,3))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,2))
            ax.set_ylim(0,18.2)
            ax.set_xlim(0,15)
        elif ax_ticks_flag == 1:
            ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],1))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],2))

        if save_flag == 1:
            plt.savefig(path_out+"Mi2_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            
        
        plt.figure('Mi ref')
        ax = plt.gca()
        log_type         = 1
        auto             = 1
        min_val0         = 0.0
        max_val0         = 0.0
        cont             = 1
        lines            = 1
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = 0
        nticks_cbar      = 5
        nticks_lines     = 10
        cbar_ticks       = np.array([0.5,0.8,0.9,1,1.5])
        lines_ticks      = np.array([0.5,0.75,1.0,1.5])
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.1f}'
        lines_ticks_fmt   = '{%.2f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, Mi_plot, nodes_flag, log_type, auto, 
                          min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                          nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                          lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)  
        # Isolines ticks (exponent)
        # ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        ax.clabel(CS2, CS2.levels, fmt=lines_ticks_fmt, inline=1, fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     

        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
        if ax_ticks_flag == 2:
#            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
#            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
            ax.set_xticks(np.arange(0,17,3))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,2))
            ax.set_ylim(0,18.2)
            ax.set_xlim(0,15)
        elif ax_ticks_flag == 1:
            ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],1))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],2))

        if save_flag == 1:
            plt.savefig(path_out+"Mi_ref"+figs_format,bbox_inches='tight') 
            plt.close()
           
#        plt.figure('ue_r ref')
#        ax = plt.gca()
#        log_type         = 0
#        auto             = 1
#        min_val0         = 0.0
#        max_val0         = 0.0
#        cont             = 0
#        lines            = 1
#        cont_nlevels     = nlevels_2Dcontour
#        auto_cbar_ticks  = 1 
#        auto_lines_ticks = -1
#        nticks_cbar      = 5
#        nticks_lines     = 10
#        cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
#        lines_ticks      = np.array([-1E4,-5E3,-2E3,-1E3,-7E2,-5E2,-2E2,-1E2,-1E1,1E1,1E2,2E2,5E2,7E2,1E3,2E3,5E3,1E4])
#        lines_ticks_loc  = 'default'
#        cbar_ticks_fmt    = '{%.1f}'
#        lines_ticks_fmt   = '{%.2f}'
#        lines_width       = line_width
#        lines_ticks_color = colors[k]
#        lines_style       = '-'
#        
#        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel font_size, ticks_size_isolines, zs, rs, ue_r_plot, nodes_flag, log_type, auto, 
#                               min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
#                               nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
#                               lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
#        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines+5, zorder = 1)
#        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
#        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
#        plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
            
                      
#        plt.figure('ue_t ref')
#        ax = plt.gca()
#        log_type         = 0
#        auto             = 1
#        min_val0         = 0.0
#        max_val0         = 0.0
#        cont             = 0
#        lines            = 1
#        cont_nlevels     = nlevels_2Dcontour
#        auto_cbar_ticks  = 1 
#        auto_lines_ticks = -1
#        nticks_cbar      = 5
#        nticks_lines     = 10
#        cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
##            lines_ticks      = np.array([-2E6,-1E6,-7E5,-5E5,-2E5-1E5,1E3,1E4,1E5,2E5,5E5,7E5,1E6,2E6,3E6,4E6,5E6,7E6])
#        lines_ticks      = np.array([-2E6,-1E6,-2E5-1E5,1E3,1E4,1E5,2E5,5E5,7E5,1E6,2E6,3E6,4E6,5E6,7E6])
#        lines_ticks_loc  = 'default'
#        cbar_ticks_fmt    = '{%.1f}'
#        lines_ticks_fmt   = '{%.4f}'
#        lines_width       = line_width
#        lines_ticks_color = colors[k]
#        lines_style       = '-'
#        
#        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size_isolines, zs, rs, ue_t_plot, nodes_flag, log_type, auto, 
#                               min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
#                               nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
#                               lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
#        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines+3, zorder = 1)
#        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
#        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
#        plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
           
               
#        plt.figure('ue_z ref')
#        ax = plt.gca()
#        log_type         = 0
#        auto             = 1
#        min_val0         = 0.0
#        max_val0         = 0.0
#        cont             = 0
#        lines            = 1
#        cont_nlevels     = nlevels_2Dcontour
#        auto_cbar_ticks  = 1 
#        auto_lines_ticks = -1
#        nticks_cbar      = 5
#        nticks_lines     = 10
#        cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
#        lines_ticks      = np.array([-1E5,-5E4,-1E4,-5E13,-5E3,-2E3,-1E3,-7E2,-5E2,-2E2,-1E2,1E2,5E2,1E3,2E3,5E3,1E4,5E4,1E5])
#        lines_ticks_loc  = 'default'
#        cbar_ticks_fmt    = '{%.1f}'
#        lines_ticks_fmt   = '{%.2f}'
#        lines_width       = line_width
#        lines_ticks_color = colors[k]
#        lines_style       = '-'
#        
#        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size_isolines, zs, rs, ue_z_plot, nodes_flag, log_type, auto, 
#                               min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
#                               nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
#                               lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
#        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines+5, zorder = 1)
#        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
#        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
#        plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
            
        
#        plt.figure('ue_perp ref')
#        ax = plt.gca()
#        log_type         = 0
#        auto             = 1
#        min_val0         = 0.0
#        max_val0         = 0.0
#        cont             = 0
#        lines            = 1
#        cont_nlevels     = nlevels_2Dcontour
#        auto_cbar_ticks  = 1 
#        auto_lines_ticks = -1
#        nticks_cbar      = 5
#        nticks_lines     = 10
#        cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
#        lines_ticks      = np.array([-1E5,-5E4,-1E4,-5E13,-5E3,-2E3,-1E3,-7E2,-5E2,-2E2,-1E2,1E2,5E2,1E3,2E3,5E3,1E4,5E4,1E5])
#        lines_ticks_loc  = 'default'
#        cbar_ticks_fmt    = '{%.1f}'
#        lines_ticks_fmt   = '{%.2f}'
#        lines_width       = line_width
#        lines_ticks_color = colors[k]
#        lines_style       = '-'
#        
#        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size_isolines, zs, rs, ue_perp_plot, nodes_flag, log_type, auto, 
#                               min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
#                               nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
#                               lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
#        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines+5, zorder = 1)
#        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
#        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
#        plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
            
        
        # plt.figure('ue_para ref')
        # ax = plt.gca()
        # log_type         = 0
        # auto             = 0
        # min_val0         = np.nanmin(ue_para_plot)
        # max_val0         = 0.0
        # cont             = 1
        # lines            = 1
        # cont_nlevels     = nlevels_2Dcontour
        # auto_cbar_ticks  = 1 
        # auto_lines_ticks = -1
        # nticks_cbar      = 5
        # nticks_lines     = 10
        # cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
        # lines_ticks      = np.array([-1E4,-5E3,-2E3,-1E3,-7E2,-5E2,-2E2,-1E2,-1E1,1E1,1E2,2E2,5E2,7E2,1E3,2E3,5E3,1E4])
        # lines_ticks_loc  = 'default'
        # cbar_ticks_fmt    = '{%.1f}'
        # lines_ticks_fmt   = '{%.2f}'
        # lines_width       = line_width
        # lines_ticks_color = 'k'
        # lines_style       = '-'
        
        # [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size_isolines, zs, rs, ue_para_plot, nodes_flag, log_type, auto, 
        #                       min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
        #                       nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
        #                       lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
        # ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines+5)
        # plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        # plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        # plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
            

#        plt.figure('ratio ue_t_perp ref')
#        ax = plt.gca()
#        log_type         = 0
#        auto             = 1
#        min_val0         = 0.0
#        max_val0         = 0.0
#        cont             = 0
#        lines            = 1
#        cont_nlevels     = 500
#        auto_cbar_ticks  = 1 
#        auto_lines_ticks = -1
#        nticks_cbar      = 5
#        nticks_lines     = 10
#        cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
#        lines_ticks      = np.array([-1E3,-5E2,-2E2,-5E1,-1E1,-5E0,-1E0,1E0,5E0,1E1,5E1,1E2,5E2,1E3,2E3,3E3,5E3,1E4])
#        lines_ticks_loc  = 'default'
#        cbar_ticks_fmt    = '{%.1f}'
#        lines_ticks_fmt   = '{%.2f}'
#        lines_width       = line_width
#        lines_ticks_color = colors[k]
#        lines_style       = '-'
#        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size_isolines, zs, rs, ratio_ue_t_perp_plot, nodes_flag, log_type, auto, 
#                               min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
#                               nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
#                               lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
#        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines+3, zorder = 1)
#        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
#        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
#        plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
            
                
#        plt.figure('ratio ue_t_para ref')
#        ax = plt.gca()
#        log_type         = 0
#        auto             = 1
#        min_val0         = 0.0
#        max_val0         = 0.0
#        cont             = 0
#        lines            = 1
#        cont_nlevels     = nlevels_2Dcontour
#        auto_cbar_ticks  = 1 
#        auto_lines_ticks = -1
#        nticks_cbar      = 5
#        nticks_lines     = 10
#        cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
#        lines_ticks      = np.array([-1E3,-5E2,1E1,5E1,1E2,1E3])
#        lines_ticks_loc  = 'default'
#        cbar_ticks_fmt    = '{%.1f}'
#        lines_ticks_fmt   = '{%.2f}'
#        lines_width       = line_width
#        lines_ticks_color = colors[k]
#        lines_style       = '-'
#        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size_isolines, zs, rs, ratio_ue_t_para_plot, nodes_flag, log_type, auto, 
#                               min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
#                               nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
#                               lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
#        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines+3, zorder = 1)
#        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
#        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
#        plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
                    
                                
#        plt.figure('ratio ue_perp_para ref')
#        ax = plt.gca()
#        log_type         = 0
#        auto             = 1
#        min_val0         = 0.0
#        max_val0         = 0.0
#        cont             = 0
#        lines            = 1
#        cont_nlevels     = nlevels_2Dcontour
#        auto_cbar_ticks  = 1 
#        auto_lines_ticks = -1
#        nticks_cbar      = 5
#        nticks_lines     = 10
#        cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
##            lines_ticks      = np.array([-10,-1.5,-1,-0.1,-0.05,-0.01,0,0.01,0.05,0.1,1,1.5,10])
#        lines_ticks      = np.array([-1E1,-7E0,-5E0,-3E0,-1E0,-7E-1,-1E-1,])
#        lines_ticks_loc  = 'default'
#        cbar_ticks_fmt    = '{%.1f}'
#        lines_ticks_fmt   = '{%.2f}'
#        lines_width       = line_width
#        lines_ticks_color = colors[k]
#        lines_style       = '-'
#        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size_isolines, zs, rs, ratio_ue_perp_para_plot, nodes_flag, log_type, auto, 
#                               min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
#                               nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
#                               lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
#        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines+3, zorder = 1)
#        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
#        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
#        plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)         
            
            
#        plt.figure('ue ref')
#        ax = plt.gca()
#        log_type         = 1
#        auto             = 1
#        min_val0         = 0.0
#        max_val0         = 0.0
#        cont             = 1
#        lines            = 1
#        cont_nlevels     = nlevels_2Dcontour
#        auto_cbar_ticks  = 1 
#        auto_lines_ticks = -1
#        nticks_cbar      = 5
#        nticks_lines     = 10
#        cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
#        lines_ticks      = np.array([1E3,5E3,1E4,5E4,1E5,5E5,1E6,5E6])
#        lines_ticks_loc  = 'default'
#        cbar_ticks_fmt    = '{%.1f}'
#        lines_ticks_fmt   = '{%.2f}'
#        lines_width       = line_width
#        lines_ticks_color = colors[k]
#        lines_style       = '-'
#        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, ue_plot, nodes_flag, log_type, auto, 
#                               min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
#                               nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
#                               lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
#        # Isolines ticks (exponent)
#        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
#        ax.tick_params(axis='x',pad=xticks_pad)
#        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
#        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
#        plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)  
#        
#        # --- Plot the streamlines 
#        # Define number of starting points for plotting the streamlines
#        plot_start_points = 0
#        nstart_r = 25
#        nstart_z = 15
#        start_points = np.zeros((0,2))
#        # Mid chamber axial line
#        zstart = np.linspace(1,len(zvec)-2,nstart_z)
#        rstart = 38*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Top plume axial line
#        zstart = np.linspace(28,len(zvec)-2,nstart_z)
#        rstart = 68*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial line at plume 1
#        zstart = 40*np.ones(nstart_r)
#        rstart = np.linspace(1,len(zvec)-2,nstart_r)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial line at plume 2
#        zstart = 80*np.ones(nstart_r)
#        rstart = np.linspace(1,len(zvec)-2,nstart_r)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial chamber line
#        zstart = 20*np.ones(nstart_r-5)
#        rstart = np.linspace(30,50,nstart_r-5)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        
#        stream = streamline_2D(ax,zvec,rvec,dims,zs,rs,ue_z_plot,ue_r_plot,flag_start,start_points,
#                               plot_start_points,10,streamline_width,streamline_color,arrow_size,
#                               arrow_style,min_length)
#        ax.set_xlim(zs[0,0],zs[0,-1])
#        ax.set_ylim(rs[0,0],rs[-1,0])
        
        
#        plt.figure('ui ref')
#        ax = plt.gca()
#        log_type         = 1
#        auto             = 1
#        min_val0         = 0.0
#        max_val0         = 0.0
#        cont             = 1
#        lines            = 1
#        cont_nlevels     = nlevels_2Dcontour
#        auto_cbar_ticks  = 1 
#        auto_lines_ticks = -1
#        nticks_cbar      = 5
#        nticks_lines     = 10
#        cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
#        lines_ticks      = np.array([1E3,5E3,1E4,5E4,1E5,5E5,1E6,5E6])
#        lines_ticks_loc  = 'default'
#        cbar_ticks_fmt    = '{%.1f}'
#        lines_ticks_fmt   = '{%.2f}'
#        lines_width       = line_width
#        lines_ticks_color = colors[k]
#        lines_style       = '-'
#        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, uimean_plot, nodes_flag, log_type, auto, 
#                               min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
#                               nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
#                               lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
#        # Isolines ticks (exponent)
#        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
#        ax.tick_params(axis='x',pad=xticks_pad)
#        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
#        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
#        plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)  
#        
#        # --- Plot the streamlines 
#        # Define number of starting points for plotting the streamlines
#        plot_start_points = 0
#        nstart_r = 25
#        nstart_z = 15
#        start_points = np.zeros((0,2))
#        # Radial line at plume 2
#        zstart = 80*np.ones(nstart_r)
#        rstart = np.linspace(1,len(zvec)-2,nstart_r)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Top plume axial line
#        zstart = np.linspace(28,len(zvec)-2,nstart_z)
#        rstart = 68*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Bottom plume axial line
#        zstart = np.linspace(28,len(zvec)-2,nstart_z)
#        rstart = 17*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#                            
#        stream = streamline_2D(ax,zvec,rvec,dims,zs,rs,uimean_z_plot,uimean_x_plot,flag_start,start_points,
#                               plot_start_points,10,streamline_width,streamline_color,arrow_size,
#                               arrow_style,min_length)
#        ax.set_xlim(zs[0,0],zs[0,-1])
#        ax.set_ylim(rs[0,0],rs[-1,0])
        
        
        plt.figure('ui1_z ref')
        ax = plt.gca()
        log_type         = 0
        auto             = 1
        min_val0         = 0.0
        max_val0         = 0.0
        cont             = 1
        lines            = 1
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = -1
        nticks_cbar      = 5
        nticks_lines     = 10
        cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
        lines_ticks      = np.sort(np.array([-1E5,-5E4,-1E4,-5E13,-5E3,-2E3,-1E3,-7E2,-5E2,-2E2,-1E2,1E2,5E2,1E3,2E3,5E3,1E4,1.2E4,1.5E4,2E4]))
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.1f}'
        lines_ticks_fmt   = '{%.2f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, ui1_z_plot, nodes_flag, log_type, auto, 
                          min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                          nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                          lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)  
#        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines+5, zorder = 1)
        ax.clabel(CS2, CS2.levels, fmt=lines_ticks_fmt, inline=1, fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
        if ax_ticks_flag == 2:
#            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
#            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
            ax.set_xticks(np.arange(0,17,3))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,2))
            ax.set_ylim(0,18.2)
            ax.set_xlim(0,15)
        elif ax_ticks_flag == 1:
            ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],1))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],2))

        if save_flag == 1:
            plt.savefig(path_out+"uzi1_ref"+figs_format,bbox_inches='tight') 
            plt.close()


        plt.figure('un1_z ref')
        ax = plt.gca()
        log_type         = 0
        auto             = 1
        min_val0         = 0.0
        max_val0         = 0.0
        cont             = 1
        lines            = 1
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = -1
        nticks_cbar      = 5
        nticks_lines     = 10
        cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
        lines_ticks      = np.sort(np.array([50,100,150,200,250,300,350,400,450,500,550,600]))
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.1f}'
        lines_ticks_fmt   = '{%.2f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, un1_z_plot, nodes_flag, log_type, auto, 
                          min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                          nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                          lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)  
#        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines+5, zorder = 1)
        ax.clabel(CS2, CS2.levels, fmt=lines_ticks_fmt, inline=1, fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size) 
        if ax_ticks_flag == 2:
#            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
#            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
            ax.set_xticks(np.arange(0,17,3))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,2))
            ax.set_ylim(0,18.2)
            ax.set_xlim(0,15)
        elif ax_ticks_flag == 1:
            ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],1))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],2))
            
        if save_flag == 1:
            plt.savefig(path_out+"uzn1_ref"+figs_format,bbox_inches='tight') 
            plt.close()

        plt.figure('un1_z ref inC')
        ax = plt.gca()
        log_type         = 0
        auto             = 1
        min_val0         = 0.0
        max_val0         = 0.0
        cont             = 1
        lines            = 1
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = -1
        nticks_cbar      = 5
        nticks_lines     = 10
        cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
        lines_ticks      = np.sort(np.array([50,100,150,200,250,300,350,400,450,500,550,600]))
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.1f}'
        lines_ticks_fmt   = '{%.2f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, un1_z_plot, nodes_flag, log_type, auto, 
                          min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                          nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                          lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)  
#        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines+5, zorder = 1)
        ax.clabel(CS2, CS2.levels, fmt=lines_ticks_fmt, inline=1, fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size) 

        npx_bot = 0
        npx_lim = int(xi_bottom)
        ax.set_xlim(zs[int(eta_min),npx_bot],zs[int(eta_min),npx_lim])
        ax.set_ylim(rs[int(eta_min),npx_lim],rs[int(eta_max),npx_lim])
        xlims = ax.get_xlim()
        ax.set_xticks(np.arange(xlims[0],xlims[1]+0.25,0.25))   
        
#        if ax_ticks_flag == 2:
##            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
##            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
#            ax.set_xticks(np.arange(0,17,3))
#            ax.set_yticks(np.arange(0,rs[-1,-1]+1,2))
#            ax.set_ylim(0,18.2)
#            ax.set_xlim(0,15)
#        elif ax_ticks_flag == 1:
#            ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
##            ax.set_yticks(np.arange(0,rs[-1,-1],1))
#            ax.set_yticks(np.arange(0,rs[-1,-1]+1,1))
##            ax.set_yticks(np.arange(0,rs[-1,-1],2))

        if save_flag == 1:
            plt.savefig(path_out+"uzn1_ref_inC"+figs_format,bbox_inches='tight') 
            plt.close()
                
                
    if plot_curr_ref == 1:
        plt.figure('je_para prof ref')
        plt.plot(zs[rind,:],-je_para_plot[rind,:], linestyle=linestyles[i], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[i], color=colors[i], markeredgecolor = 'k', label=labels[i])
        plt.figure('je_perp prof ref')
        plt.plot(zs[rind,:],-je_perp_plot[rind,:], linestyle=linestyles[i], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[i], color=colors[i], markeredgecolor = 'k', label=labels[i])
        plt.figure('je_t prof ref')
        plt.plot(zs[rind,:],je_t_plot[rind,:], linestyle=linestyles[i], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[i], color=colors[i], markeredgecolor = 'k', label=labels[i])
        plt.figure('je zr prof ref')
        plt.plot(zs[rind,:],je2D_plot[rind,:], linestyle=linestyles[i], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[i], color=colors[i], markeredgecolor = 'k', label=labels[i])
        plt.figure('ji_r prof ref')
        plt.plot(zs[rind,:],ji_x_plot[rind,:], linestyle=linestyles[i], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[i], color=colors[i], markeredgecolor = 'k', label=labels[i])
        plt.figure('ji_z prof ref')
        plt.plot(zs[rind,:],ji_z_plot[rind,:], linestyle=linestyles[i], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[i], color=colors[i], markeredgecolor = 'k', label=labels[i])
        plt.figure('ji zr prof ref')
        plt.plot(zs[rind,:],ji2D_plot[rind,:], linestyle=linestyles[i], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[i], color=colors[i], markeredgecolor = 'k', label=labels[i])
#        plt.figure('j zr prof ref')
#        plt.plot(zs[rind,:],j2D_plot[rind,:], linestyle=linestyles[i], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[i], color=colors[i], markeredgecolor = 'k', label=labels[i])
    
        plt.figure('je_r ref')
        ax = plt.gca()
        log_type         = 0
        auto             = 1
        min_val0         = -0.6
        max_val0         = 0.3
        cont             = 1
        lines            = 1
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = -1
        nticks_cbar      = 5
        nticks_lines     = 10
        cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
#        lines_ticks      = np.array([-1E2,-7E1,-5E1,-2E1,-1E1,-7E0,-5E0,-2E0,-1E0,1E-1,2E-1,5E-1,7E-1,1E0,2E0,5E0,7E0,1E1,2E1,3E1,5E1,7E1,1E2])
        lines_ticks      = np.sort(np.array([0.01,-0.05,0.05,-0.1]))
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.1f}'
        lines_ticks_fmt   = '{%.2f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
        if interp_MFAM_picM_plot == 1:
            [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs_mp, rs_mp, -je_r_mp, nodes_flag_mp, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
        else:
            [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, -je_r_plot, nodes_flag, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
        # ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        # Plot the cathode magnetic line if given
        if plot_cath_Bline == 1:
            if elems_cath_Bline != 0:
                cath_z = elem_geom[0,elems_cath_Bline]
                cath_r = elem_geom[1,elems_cath_Bline]
                plt.plot(cath_z,cath_r,color=cath_Bline_color,linestyle=cath_Bline_linestyle,linewidth = line_width_boundary,markersize = marker_size)  
                # plt.plot(cath_Bline_z,cath_Bline_r,color=cath_Bline_color,linewidth = line_width_boundary,markersize = marker_size)
            if faces_cath_Bline != 0:
                # plt.plot(face_geom[0,faces_cath_Bline],face_geom[1,faces_cath_Bline],'c',linewidth = line_width_boundary,markersize = marker_size)
                plt.plot(faces_cath_Bline_nodez,faces_cath_Bline_noder,color=cath_Bline_color,linestyle=cath_Bline_linestyle,linewidth = line_width_boundary,markersize = marker_size)
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
        if ax_ticks_flag == 2:
#            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
#            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
            ax.set_xticks(np.arange(0,17,3))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,2))
            ax.set_ylim(0,18.2)
            ax.set_xlim(0,15)
        elif ax_ticks_flag == 1:
            ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],1))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],2))
            
        if save_flag == 1:
            plt.savefig(path_out+"je_r_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            
           
        plt.figure('je_t ref')
        ax = plt.gca()
        log_type         = 0
        auto             = 1
        min_val0         = -1.5
        max_val0         = 6.0
        cont             = 1
        lines            = 1
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = -1
        nticks_cbar      = 5
        nticks_lines     = 10
        cbar_ticks       = np.array([-1.5, 0.0, 1.5, 3.0, 4.5])
#        lines_ticks      = np.array([-1E4,-5E3,-2E3,-1E3,-5E2,-1E2,1E2,5E2,1E3,5E3,1E4,2E4,3E4,4E4])*1E-4
        lines_ticks      = np.sort(np.array([4.0,3.0,2.0,1.0,5E-1,3E-1,2E-1,1E-1,2E-2,1E-2,0,-2E-2,-1E-2,-1E-1,-2E-1,-3E-1,-5E-1]))
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.1f}'
        lines_ticks_fmt   = '{%.1f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_ticks_color = grey
        lines_style       = '-'
        if interp_MFAM_picM_plot == 1:
            [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs_mp, rs_mp, je_theta_mp, nodes_flag_mp, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
        else:
            [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, je_t_plot, nodes_flag, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
        # ax.clabel(CS2, CS2.levels, fmt=lines_ticks_fmt, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        # ax.clabel(CS2, CS2.levels, fmt=lines_ticks_fmt, inline=1, fontsize=ticks_size_isolines)
        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        # Plot the cathode magnetic line if given
        if plot_cath_Bline == 1:
            if elems_cath_Bline != 0:
                cath_z = elem_geom[0,elems_cath_Bline]
                cath_r = elem_geom[1,elems_cath_Bline]
                plt.plot(cath_z,cath_r,color=cath_Bline_color,linestyle=cath_Bline_linestyle,linewidth = line_width_boundary,markersize = marker_size)  
                # plt.plot(cath_Bline_z,cath_Bline_r,color=cath_Bline_color,linewidth = line_width_boundary,markersize = marker_size)
            if faces_cath_Bline != 0:
                # plt.plot(face_geom[0,faces_cath_Bline],face_geom[1,faces_cath_Bline],'c',linewidth = line_width_boundary,markersize = marker_size)
                plt.plot(faces_cath_Bline_nodez,faces_cath_Bline_noder,color=cath_Bline_color,linestyle=cath_Bline_linestyle,linewidth = line_width_boundary,markersize = marker_size)
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
        if ax_ticks_flag == 2:
#            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
#            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
            ax.set_xticks(np.arange(0,17,3))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,2))
            ax.set_ylim(0,18.2)
            ax.set_xlim(0,15)
        elif ax_ticks_flag == 1:
            ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],1))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],2))
        
        if save_flag == 1:
            plt.savefig(path_out+"je_t_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            
            
        plt.figure('je_t ref plume')
        ax = plt.gca()
        log_type         = 0
        auto             = 1
        min_val0         = -1.5
        max_val0         = 6.0
        cont             = 1
        lines            = 1
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = -1
        nticks_cbar      = 5
        nticks_lines     = 10
        cbar_ticks       = np.array([-1.5, 0.0, 1.5, 3.0, 4.5])
#        lines_ticks      = np.array([-1E4,-5E3,-2E3,-1E3,-5E2,-1E2,1E2,5E2,1E3,5E3,1E4,2E4,3E4,4E4])*1E-4
        lines_ticks      = np.sort(np.array([4.0,3.0,2.0,1.0,5E-1,3E-1,2E-1,1E-1,2E-2,1E-2,0,-2E-2,-1E-2,-1E-1,-2E-1,-3E-1,-5E-1]))
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.1f}'
        lines_ticks_fmt   = '{%.1f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_ticks_color = grey
        lines_style       = '-'
        if interp_MFAM_picM_plot == 1:
            var = np.copy(je_theta_mp)
            var[np.where(zs_mp < zs[0,int(xi_bottom)])] = np.nan
            [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs_mp, rs_mp, var, nodes_flag_mp, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
        else:
            var = np.copy(je_t_plot)
            var[:,0:int(xi_bottom)] = np.nan
            [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, var, nodes_flag, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
        # ax.clabel(CS2, CS2.levels, fmt=lines_ticks_fmt, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        # ax.clabel(CS2, CS2.levels, fmt=lines_ticks_fmt, inline=1, fontsize=ticks_size_isolines)
        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        # Plot the cathode magnetic line if given
        if plot_cath_Bline == 1:
            if elems_cath_Bline != 0:
                cath_z = elem_geom[0,elems_cath_Bline]
                cath_r = elem_geom[1,elems_cath_Bline]
                plt.plot(cath_z,cath_r,color=cath_Bline_color,linestyle=cath_Bline_linestyle,linewidth = line_width_boundary,markersize = marker_size)  
                # plt.plot(cath_Bline_z,cath_Bline_r,color=cath_Bline_color,linewidth = line_width_boundary,markersize = marker_size)
            if faces_cath_Bline != 0:
                # plt.plot(face_geom[0,faces_cath_Bline],face_geom[1,faces_cath_Bline],'c',linewidth = line_width_boundary,markersize = marker_size)
                plt.plot(faces_cath_Bline_nodez,faces_cath_Bline_noder,color=cath_Bline_color,linestyle=cath_Bline_linestyle,linewidth = line_width_boundary,markersize = marker_size)
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
        
        ax.set_xlim(zs[0,int(xi_bottom)],zs[0,-1])
        ax.set_ylim(rs[0,-1],rs[-1,-1])
        if ax_ticks_flag == 2:
#            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
#            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
            ax.set_xticks(np.arange(0,17,3))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,2))
            ax.set_ylim(0,18.2)
            ax.set_xlim(0,15)
        elif ax_ticks_flag == 1:
            ax.set_xticks(np.arange(zs[0,int(xi_bottom)],zs[0,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],1))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],2))
        
        if save_flag == 1:
            plt.savefig(path_out+"je_t_ref_plume"+figs_format,bbox_inches='tight') 
            plt.close()
            
        
        plt.figure('je_z ref')
        ax = plt.gca()
        log_type         = 0
        auto             = 0
        min_val0         = -1.0
        max_val0         = 1.0
        cont             = 1
        lines            = 1
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = -1
        nticks_cbar      = 5
        nticks_lines     = 10
#        cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
#        lines_ticks      = np.array([-7E2,-5E2,-2E2,-1E2,-7E1,-5E1,-2E1,-1E1,1E0,1E1,2E1,5E1,7E1,1E2,2E2])
        cbar_ticks       = np.array([-0.3,-0.2,-0.1, 0.0, 0.1])
        lines_ticks      = np.sort(np.array([-0.1,-0.05,-0.01,0.02,0.01]))
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.1f}'
        lines_ticks_fmt   = '{%.2f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
        if interp_MFAM_picM_plot == 1:
            [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs_mp, rs_mp, -je_z_mp, nodes_flag_mp, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
        else:
            [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, -je_z_plot, nodes_flag, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
        # ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        # Plot the cathode magnetic line if given
        if plot_cath_Bline == 1:
            if elems_cath_Bline != 0:
                cath_z = elem_geom[0,elems_cath_Bline]
                cath_r = elem_geom[1,elems_cath_Bline]
                plt.plot(cath_z,cath_r,color=cath_Bline_color,linestyle=cath_Bline_linestyle,linewidth = line_width_boundary,markersize = marker_size)  
                # plt.plot(cath_Bline_z,cath_Bline_r,color=cath_Bline_color,linewidth = line_width_boundary,markersize = marker_size)
            if faces_cath_Bline != 0:
                # plt.plot(face_geom[0,faces_cath_Bline],face_geom[1,faces_cath_Bline],'c',linewidth = line_width_boundary,markersize = marker_size)
                plt.plot(faces_cath_Bline_nodez,faces_cath_Bline_noder,color=cath_Bline_color,linestyle=cath_Bline_linestyle,linewidth = line_width_boundary,markersize = marker_size)
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
        if ax_ticks_flag == 2:
#            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
#            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
            ax.set_xticks(np.arange(0,17,3))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,2))
            ax.set_ylim(0,18.2)
            ax.set_xlim(0,15)
        elif ax_ticks_flag == 1:
            ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],1))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],2))
            
        if save_flag == 1:
            plt.savefig(path_out+"je_z_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            
        
        plt.figure('je_perp ref')
        ax = plt.gca()
        log_type         = 0
        auto             = 0
        min_val0         = -0.3
        max_val0         = 0.1
        cont             = 1
        lines            = 1
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 0 
        auto_lines_ticks = -1
        nticks_cbar      = 5
        nticks_lines     = 10
        cbar_ticks       = np.array([-0.3,-0.2,-0.1, 0.0, 0.1])
#        lines_ticks      = np.array([-7E2,-5E2,-2E2,-1E2,-7E1,-5E1,-2E1,-1E1,1E0,1E1,2E1,5E1,7E1,1E2,2E2])*1E-4
        lines_ticks      = np.sort(np.array([-0.1,-0.05,-0.01,0.02,0.01]))
        lines_ticks_loc  = [(1.69,4.25),(3.38,4.25),(5.51,4.25),(7.76,6.39),(6.48,1.35),(10.5,2.78),(7.0,5.5),(10.22,1.16)]        
#        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.1f}'
        lines_ticks_fmt   = '{%.2f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
        if interp_MFAM_picM_plot == 1:
            [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs_mp, rs_mp, -je_perp_mp, nodes_flag_mp, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
        else:
            [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, -je_perp_plot, nodes_flag, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
#        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        # ax.clabel(CS2, CS2.levels, fmt=lines_ticks_fmt, inline=1, manual = lines_ticks_loc, fontsize=ticks_size_isolines, zorder = 1)
        ax.clabel(CS2, CS2.levels, fmt=lines_ticks_fmt, inline=1, manual = lines_ticks_loc, fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        # Plot the cathode magnetic line if given
        if plot_cath_Bline == 1:
            if elems_cath_Bline != 0:
                cath_z = elem_geom[0,elems_cath_Bline]
                cath_r = elem_geom[1,elems_cath_Bline]
                plt.plot(cath_z,cath_r,color=cath_Bline_color,linestyle=cath_Bline_linestyle,linewidth = line_width_boundary,markersize = marker_size)  
                # plt.plot(cath_Bline_z,cath_Bline_r,color=cath_Bline_color,linewidth = line_width_boundary,markersize = marker_size)
            if faces_cath_Bline != 0:
                # plt.plot(face_geom[0,faces_cath_Bline],face_geom[1,faces_cath_Bline],'c',linewidth = line_width_boundary,markersize = marker_size)
                plt.plot(faces_cath_Bline_nodez,faces_cath_Bline_noder,color=cath_Bline_color,linestyle=cath_Bline_linestyle,linewidth = line_width_boundary,markersize = marker_size)
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
        if ax_ticks_flag == 2:
#            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
#            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
            ax.set_xticks(np.arange(0,17,3))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,2))
            ax.set_ylim(0,18.2)
            ax.set_xlim(0,15)
        elif ax_ticks_flag == 1:
            ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],1))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],2))
        
        if save_flag == 1:
            plt.savefig(path_out+"je_perp_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            
    
        plt.figure('je_para ref')
        ax = plt.gca()
        log_type         = 0
        auto             = 1
        # if interp_MFAM_picM_plot == 1:
        #     min_val0         = np.nanmin(-je_para_mp)
        # else:
        #     min_val0         = np.nanmin(-je_para_plot)
        min_val0          = 0.0
        # max_val0         = 0.0
        if interp_MFAM_picM_plot == 1:
            max_val0         = np.nanmax(-je_para_mp)
        else:
            max_val0         = np.nanmax(-je_para_plot)
        max_val0 = 20
        cont             = 1
        lines            = 1
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = -1
        nticks_cbar      = 5
        nticks_lines     = 10
        cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
#        lines_ticks      = np.array([-1E2,-7E1,-5E1,-2E1,-1E1,-7E0,-5E0,-2E0,-1E0,1E-1,2E-1,5E-1,7E-1,1E0,2E0,5E0,7E0,1E1,2E1,3E1,5E1,7E1,1E2])*1E-4
        lines_ticks      = np.sort(np.array([0.01,-0.05,0.05,-0.1]))
        lines_ticks_loc  = [(0.66,3.92),(1.82,4.0),(3.0,4.3),(4.49,6.13),(5.43,3.48),(8.20,2.78),(8.31,0.56),(9.95,4.0),(6.65,6.83)]        
#        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.1f}'
        lines_ticks_fmt   = '{%.2f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
        if interp_MFAM_picM_plot == 1:
            [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs_mp, rs_mp, -je_para_mp, nodes_flag_mp, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
        else:
            [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, -je_para_plot, nodes_flag, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
#        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        # ax.clabel(CS2, CS2.levels, fmt=lines_ticks_fmt, inline=1, manual = lines_ticks_loc, fontsize=ticks_size_isolines, zorder = 1)
        ax.clabel(CS2, CS2.levels, fmt=lines_ticks_fmt, inline=1, manual = lines_ticks_loc, fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        # Plot the cathode magnetic line if given
        if plot_cath_Bline == 1:
            if elems_cath_Bline != 0:
                cath_z = elem_geom[0,elems_cath_Bline]
                cath_r = elem_geom[1,elems_cath_Bline]
                plt.plot(cath_z,cath_r,color=cath_Bline_color,linestyle=cath_Bline_linestyle,linewidth = line_width_boundary,markersize = marker_size)  
                # plt.plot(cath_Bline_z,cath_Bline_r,color=cath_Bline_color,linewidth = line_width_boundary,markersize = marker_size)
            if faces_cath_Bline != 0:
                # plt.plot(face_geom[0,faces_cath_Bline],face_geom[1,faces_cath_Bline],'c',linewidth = line_width_boundary,markersize = marker_size)
                plt.plot(faces_cath_Bline_nodez,faces_cath_Bline_noder,color=cath_Bline_color,linestyle=cath_Bline_linestyle,linewidth = line_width_boundary,markersize = marker_size)
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
        if ax_ticks_flag == 2:
#            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
#            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
            ax.set_xticks(np.arange(0,17,3))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,2))
            ax.set_ylim(0,18.2)
            ax.set_xlim(0,15)
        elif ax_ticks_flag == 1:
            ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],1))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],2))
            
        if save_flag == 1:
            plt.savefig(path_out+"je_para_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            
        # # Delete vars to free RAM memory
        # print("delete")
        # del je_para_mp, je_perp_mp


        plt.figure('je zr ref')
        ax = plt.gca()
        log_type         = 1
        auto             = 0
#        min_val0         = 1E-1
#        max_val0         = 1E3
        min_val0         = 1E-5
        max_val0         = 1E0
        cont             = 1
        lines            = 0
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = -1
        nticks_cbar      = 5
        nticks_lines     = 10
        cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
#        lines_ticks      = np.array([8E1,1E2,5E2,1E3,2E3,5E3,1E4,2E4,3E4])
        lines_ticks      = np.array([1E2,5E2,1E3])
#        lines_ticks_loc  = [(1.5,4.25),(3.4,4.25),(4.8,1.43),(7.56,7.4),(9.34,5.16),(8.45,0.6),(5.9,5.5),(4.0,6.4)]        
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.1f}'
        lines_ticks_fmt   = '{%.2f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
        if interp_MFAM_picM_plot == 1:
            [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs_mp, rs_mp, je_2D_mp, nodes_flag_mp, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
        else:
            [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, je2D_plot, nodes_flag, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
        
#        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
#        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, manual = lines_ticks_loc, fontsize=ticks_size_isolines, zorder = 1)
            #        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines)
#        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, manual = lines_ticks_loc, fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        # Plot the cathode magnetic line if given
        if plot_cath_Bline == 1:
            if elems_cath_Bline != 0:
                cath_z = elem_geom[0,elems_cath_Bline]
                cath_r = elem_geom[1,elems_cath_Bline]
                plt.plot(cath_z,cath_r,color=cath_Bline_color,linestyle=cath_Bline_linestyle,linewidth = line_width_boundary,markersize = marker_size)  
                # plt.plot(cath_Bline_z,cath_Bline_r,color=cath_Bline_color,linewidth = line_width_boundary,markersize = marker_size)
            if faces_cath_Bline != 0:
                # plt.plot(face_geom[0,faces_cath_Bline],face_geom[1,faces_cath_Bline],'c',linewidth = line_width_boundary,markersize = marker_size)
                plt.plot(faces_cath_Bline_nodez,faces_cath_Bline_noder,color=cath_Bline_color,linestyle=cath_Bline_linestyle,linewidth = line_width_boundary,markersize = marker_size)
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
        # --- Plot the streamlines 
        # Define number of starting points for plotting the streamlines
        plot_start_points = 0
        start_points = np.zeros((0,2))
        # SPT100 thesis orig --------------------------------------------------
##        nstart_r = 40
##        nstart_z = 20
#        nstart_r = 10
#        nstart_z = 5
#        # Top plume axial line 1
#        zstart = np.linspace(30,len(zvec)-2,nstart_z)
#        rstart = 55*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Top plume axial line 2
#        zstart = np.linspace(30,len(zvec)-2,nstart_z)
#        rstart = 70*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Mid chamber axial line 1
#        zstart = np.linspace(1,len(zvec)-2,nstart_z)
#        rstart = 38*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Mid chamber axial line 2
#        zstart = np.linspace(1,len(zvec)-2,nstart_z)
#        rstart = 34*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Mid chamber axial line 2
#        zstart = np.linspace(1,len(zvec)-2,nstart_z)
#        rstart = 44*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Bottom plume axial line 1
#        zstart = np.linspace(30,len(zvec)-2,nstart_z)
#        rstart = 25*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Bottom plume axial line 2
#        zstart = np.linspace(30,len(zvec)-2,nstart_z)
#        rstart = 10*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Bottom plume axial line 3
#        zstart = np.linspace(30,len(zvec)-2,nstart_z)
#        rstart = 1*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial line at plume 1
#        zstart = 30*np.ones(nstart_r)
#        rstart = np.linspace(1,len(zvec)-2,nstart_r)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial line at plume 2
#        zstart = 27*np.ones(nstart_r)
#        rstart = np.linspace(1,len(zvec)-2,nstart_r)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial line at plume 3
#        zstart = 60*np.ones(nstart_r)
#        rstart = np.linspace(1,len(zvec)-2,nstart_r)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial line at plume 4
#        zstart = 90*np.ones(nstart_r)
#        rstart = np.linspace(1,len(zvec)-2,nstart_r)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial line at chamber 1
#        zstart = 1*np.ones(nstart_r)
#        rstart = np.linspace(32,46,nstart_r)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial line at chamber 2
#        zstart = 20*np.ones(nstart_r)
#        rstart = np.linspace(32,46,nstart_r)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial line at chamber 3
#        zstart = 22*np.ones(nstart_r)
#        rstart = np.linspace(32,46,nstart_r)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial line at chamber 3
#        zstart = 24*np.ones(nstart_r)
#        rstart = np.linspace(32,46,nstart_r)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
        # ---------------------------------------------------------------------
#        # Safran cases CHEOPS 1------------------------------------------------
##        nstart_r = 25
##        nstart_z = 15
#        nstart_r = 12
#        nstart_z = 7
#        # Mid chamber axial line
#        zstart = np.linspace(1,len(zvec)-2,nstart_z)
#        rstart = 55*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Mid chamber axial line 1
#        zstart = np.linspace(1,len(zvec)-2,nstart_z)
#        rstart = 65*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Top plume axial line 1
#        zstart = np.linspace(28,len(zvec)-2,nstart_z)
#        rstart = 100*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Top plume axial line 2
#        zstart = np.linspace(28,len(zvec)-2,nstart_z)
#        rstart = 200*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Bottom plume axial line 1
#        zstart = np.linspace(28,len(zvec)-2,nstart_z)
#        rstart = 20*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Bottom plume axial line 2
#        zstart = np.linspace(28,len(zvec)-2,nstart_z)
#        rstart = 5*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial line at plume 1
#        zstart = 40*np.ones(nstart_r)
#        rstart = np.linspace(1,len(zvec)-2,nstart_r)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial line at plume 2
#        zstart = 80*np.ones(nstart_r)
#        rstart = np.linspace(1,len(zvec)-2,nstart_r)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial line at plume 3
#        zstart = 150*np.ones(nstart_r)
#        rstart = np.linspace(1,len(zvec)-2,nstart_r)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial line at plume 4
#        zstart = 100*np.ones(nstart_r)
#        rstart = np.linspace(1,len(zvec)-2,nstart_r)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial line at plume 5
#        zstart = 120*np.ones(nstart_r)
#        rstart = np.linspace(1,len(zvec)-2,nstart_r)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial chamber line 1 
#        zstart = 20*np.ones(nstart_r-5)
#        rstart = np.linspace(50,70,nstart_r-5)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial chamber line 2 
#        zstart = 1*np.ones(nstart_r-5)
#        rstart = np.linspace(50,70,nstart_r-5)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # ---------------------------------------------------------------------
#        # HT5k cases --------------------------------------------------------
##        nstart_r = 40
##        nstart_z = 20
#        nstart_r = 10
#        nstart_z = 5
#        # Top plume axial line 1
#        zstart = np.linspace(30,len(zvec)-2,nstart_z)
#        rstart = 55*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Top plume axial line 2
#        zstart = np.linspace(30,len(zvec)-2,nstart_z)
#        rstart = 70*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Mid chamber axial line 1
#        zstart = np.linspace(1,len(zvec)-2,nstart_z)
#        rstart = 38*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Mid chamber axial line 2
#        zstart = np.linspace(1,len(zvec)-2,nstart_z)
#        rstart = 34*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Mid chamber axial line 2
#        zstart = np.linspace(1,len(zvec)-2,nstart_z)
#        rstart = 44*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Bottom plume axial line 1
#        zstart = np.linspace(30,len(zvec)-2,nstart_z)
#        rstart = 25*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Bottom plume axial line 2
#        zstart = np.linspace(30,len(zvec)-2,nstart_z)
#        rstart = 10*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Bottom plume axial line 3
#        zstart = np.linspace(30,len(zvec)-2,nstart_z)
#        rstart = 1*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial line at plume 1
#        zstart = 30*np.ones(nstart_r)
#        rstart = np.linspace(1,len(zvec)-2,nstart_r)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial line at plume 2
#        zstart = 27*np.ones(nstart_r)
#        rstart = np.linspace(1,len(zvec)-2,nstart_r)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial line at plume 3
#        zstart = 60*np.ones(nstart_r)
#        rstart = np.linspace(1,len(zvec)-2,nstart_r)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial line at plume 4
#        zstart = 90*np.ones(nstart_r)
#        rstart = np.linspace(1,len(zvec)-2,nstart_r)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial line at chamber 1
#        zstart = 1*np.ones(nstart_r)
#        rstart = np.linspace(32,46,nstart_r)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial line at chamber 2
#        zstart = 20*np.ones(nstart_r)
#        rstart = np.linspace(32,46,nstart_r)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial line at chamber 3
#        zstart = 22*np.ones(nstart_r)
#        rstart = np.linspace(32,46,nstart_r)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial line at chamber 3
#        zstart = 24*np.ones(nstart_r)
#        rstart = np.linspace(32,46,nstart_r)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
        # ---------------------------------------------------------------------
        streamline_density = 5
#        flag_start = 1
        flag_start = 0
        if interp_MFAM_picM_plot == 1:
            stream = streamline_2D(ax,zvec,rvec,dims_mp,zs_mp,rs_mp,-je_z_mp,-je_r_mp,flag_start,start_points,
                                   plot_start_points,streamline_density,streamline_width,streamline_color,arrow_size,
                                   arrow_style,min_length)
        else:
            stream = streamline_2D(ax,zvec,rvec,dims,zs,rs,-je_z_plot,-je_r_plot,flag_start,start_points,
                                   plot_start_points,streamline_density,streamline_width,streamline_color,arrow_size,
                                   arrow_style,min_length)
        ax.set_xlim(zs[0,0],zs[0,-1])
        ax.set_ylim(rs[0,-1],rs[-1,-1])
        if ax_ticks_flag == 2:
#            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
#            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
            ax.set_xticks(np.arange(0,17,3))
            ax.set_yticks(np.arange(0,yticks_lim,2))
            ax.set_ylim(0,ylim_axes)
            ax.set_xlim(0,15)
        elif ax_ticks_flag == 1:
            ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],1))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],2))
            
        if save_flag == 1:
            plt.savefig(path_out+"je2D_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            
        
        plt.figure('je zr ref inC')
        ax = plt.gca()
        log_type         = 1
        auto             = 0
#        min_val0         = 1E-1
#        max_val0         = 1E3
        min_val0         = 1E-5
        max_val0         = 1E0
        cont             = 1
        lines            = 0
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = -1
        nticks_cbar      = 5
        nticks_lines     = 10
        cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
#        lines_ticks      = np.array([8E1,1E2,5E2,1E3,2E3,5E3,1E4,2E4,3E4])
        lines_ticks      = np.array([1E2,5E2,1E3])
#        lines_ticks_loc  = [(1.5,4.25),(3.4,4.25),(4.8,1.43),(7.56,7.4),(9.34,5.16),(8.45,0.6),(5.9,5.5),(4.0,6.4)]        
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.1f}'
        lines_ticks_fmt   = '{%.2f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
        if interp_MFAM_picM_plot == 1:
            [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs_mp, rs_mp, je_2D_mp, nodes_flag_mp, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
        else:
            [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, je2D_plot, nodes_flag, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
        
#        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
#        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, manual = lines_ticks_loc, fontsize=ticks_size_isolines, zorder = 1)
            #        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines)
#        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, manual = lines_ticks_loc, fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
        # --- Plot the streamlines 
        # Define number of starting points for plotting the streamlines
        plot_start_points = 0
        start_points = np.zeros((0,2))
        streamline_density = 3
#        flag_start = 1
        flag_start = 0
        if interp_MFAM_picM_plot == 1:
#            stream = streamline_2D(ax,zvec,rvec,dims_mp,zs_mp,rs_mp,-je_z_mp,-je_r_mp,flag_start,start_points,
#                                   plot_start_points,streamline_density,streamline_width,streamline_color,arrow_size,
#                                   arrow_style,min_length)
            stream = streamline_2D(ax,zvec_inC,rvec_inC,dims_mp,zs_mp,rs_mp,-je_z_mp,-je_r_mp,flag_start,start_points,
                                   plot_start_points,streamline_density,streamline_width,streamline_color,arrow_size,
                                   arrow_style,min_length)
        else:
#            stream = streamline_2D(ax,zvec,rvec,dims,zs,rs,-je_z_plot,-je_r_plot,flag_start,start_points,
#                                   plot_start_points,streamline_density,streamline_width,streamline_color,arrow_size,
#                                   arrow_style,min_length)
            stream = streamline_2D(ax,zvec_inC,rvec_inC,dims,zs,rs,-je_z_plot,-je_r_plot,flag_start,start_points,
                                   plot_start_points,streamline_density,streamline_width,streamline_color,arrow_size,
                                   arrow_style,min_length)
        ax.set_xlim(zs[0,0],zs[0,-1])
        ax.set_ylim(rs[0,-1],rs[-1,-1])
        npx_bot = 0
        npx_lim = int(xi_bottom)
        ax.set_xlim(zs[int(eta_min),npx_bot],zs[int(eta_min),npx_lim])
        ax.set_ylim(rs[int(eta_min),npx_lim],rs[int(eta_max),npx_lim])
        xlims = ax.get_xlim()
        ax.set_xticks(np.arange(xlims[0],xlims[1]+0.25,0.25))
        
#        if ax_ticks_flag == 2:
##            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
##            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
#            ax.set_xticks(np.arange(0,17,3))
#            ax.set_yticks(np.arange(0,yticks_lim,2))
#            ax.set_ylim(0,ylim_axes)
#            ax.set_xlim(0,15)
#        elif ax_ticks_flag == 1:
#            ax.set_xticks(np.arange(0,zs[0,-1],1))
##            ax.set_yticks(np.arange(0,rs[-1,-1],1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],2)) 
        
        if save_flag == 1:
            plt.savefig(path_out+"je2D_ref_inC"+figs_format,bbox_inches='tight') 
            plt.close()
            
    
        plt.figure('ji zr ref')
        ax = plt.gca()
        log_type         = 1
        auto             = 0
#        min_val0         = 1E-1
#        max_val0         = 1E3
        min_val0         = 1E-5
        max_val0         = 1E0
        cont             = 1
        lines            = 0
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = -1
        nticks_cbar      = 5
        nticks_lines     = 10
        cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
#        lines_ticks      = np.array([1E-5,1E-4,1E-3,1E-2,1E-1,1E0,2E0,3E0,4E0,5E0,6E0,7E0,8E0,9E0,1E1,1E2,2E2,4E2,6E2,8E2])
        lines_ticks      = np.array([5E1,1E2,2E2,4E2,6E2])   
        lines_ticks_loc  = [(0.6,4.25),(1.15,4.25),(2.24,4.5),(4.3,4.25),(6.32,4.25),(7.65,6.75),(5.0,7.3),(3.6,1.9),(4.82,1.81),(7.48,1.24),(8.6,0.7),(9.95,0.25)]
#        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.1f}'
        lines_ticks_fmt   = '{%.2f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
#        if interp_MFAM_picM_plot == 1:
#            [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs_mp, rs_mp, ji_2D_mp, nodes_flag_mp, log_type, auto, 
#                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
#                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
#                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
#        else:
#            
#            [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, ji2D_plot, nodes_flag, log_type, auto, 
#                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
#                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
#                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
            
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, ji2D_plot, nodes_flag, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
#        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, manual = lines_ticks_loc, fontsize=ticks_size_isolines, zorder = 1)
#        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, manual = lines_ticks_loc, fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        # Plot the cathode magnetic line if given
        if plot_cath_Bline == 1:
            if elems_cath_Bline != 0:
                cath_z = elem_geom[0,elems_cath_Bline]
                cath_r = elem_geom[1,elems_cath_Bline]
                plt.plot(cath_z,cath_r,color=cath_Bline_color,linestyle=cath_Bline_linestyle,linewidth = line_width_boundary,markersize = marker_size)  
                # plt.plot(cath_Bline_z,cath_Bline_r,color=cath_Bline_color,linewidth = line_width_boundary,markersize = marker_size)
            if faces_cath_Bline != 0:
                # plt.plot(face_geom[0,faces_cath_Bline],face_geom[1,faces_cath_Bline],'c',linewidth = line_width_boundary,markersize = marker_size)
                plt.plot(faces_cath_Bline_nodez,faces_cath_Bline_noder,color=cath_Bline_color,linestyle=cath_Bline_linestyle,linewidth = line_width_boundary,markersize = marker_size)
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
        # --- Plot the streamlines 
        # Define number of starting points for plotting the streamlines
        flag_start = 1
        plot_start_points = 0
        start_points = np.zeros((0,2))
        # SPT100 thesis orig --------------------------------------------------
##        nstart_r = 40
##        nstart_z = 20
#        nstart_r = 10
#        nstart_z = 5
#        # Top plume axial line 1
#        zstart = np.linspace(30,len(zvec)-2,nstart_z)
#        rstart = 55*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Top plume axial line 2
#        zstart = np.linspace(30,len(zvec)-2,nstart_z)
#        rstart = 70*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Mid chamber axial line 1
#        zstart = np.linspace(1,len(zvec)-2,nstart_z)
#        rstart = 38*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Mid chamber axial line 2
#        zstart = np.linspace(1,len(zvec)-2,nstart_z)
#        rstart = 34*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Mid chamber axial line 2
#        zstart = np.linspace(1,len(zvec)-2,nstart_z)
#        rstart = 44*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Bottom plume axial line 1
#        zstart = np.linspace(30,len(zvec)-2,nstart_z)
#        rstart = 25*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Bottom plume axial line 2
#        zstart = np.linspace(30,len(zvec)-2,nstart_z)
#        rstart = 10*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Bottom plume axial line 3
#        zstart = np.linspace(30,len(zvec)-2,nstart_z)
#        rstart = 1*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial line at plume 1
#        zstart = 30*np.ones(nstart_r)
#        rstart = np.linspace(1,len(zvec)-2,nstart_r)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial line at plume 2
#        zstart = 27*np.ones(nstart_r)
#        rstart = np.linspace(1,len(zvec)-2,nstart_r)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial line at plume 3
#        zstart = 60*np.ones(nstart_r)
#        rstart = np.linspace(1,len(zvec)-2,nstart_r)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial line at plume 4
#        zstart = 90*np.ones(nstart_r)
#        rstart = np.linspace(1,len(zvec)-2,nstart_r)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial line at chamber 1
#        zstart = 1*np.ones(nstart_r)
#        rstart = np.linspace(32,46,nstart_r)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial line at chamber 2
#        zstart = 20*np.ones(nstart_r)
#        rstart = np.linspace(32,46,nstart_r)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial line at chamber 3
#        zstart = 22*np.ones(nstart_r)
#        rstart = np.linspace(32,46,nstart_r)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial line at chamber 3
#        zstart = 24*np.ones(nstart_r)
#        rstart = np.linspace(32,46,nstart_r)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
        # ---------------------------------------------------------------------
        # Safran cases CHEOPS 1------------------------------------------------
##        nstart_r = 25
##        nstart_z = 15
##        nstart_r = 12
##        nstart_z = 40
#        nstart_r = 12
#        nstart_z = 7
#        # Radial line at plume 2
#        zstart = 80*np.ones(nstart_r)
#        rstart = np.linspace(1,len(zvec)-2,nstart_r)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Top plume axial line
#        zstart = np.linspace(28,len(zvec)-2,nstart_z)
#        rstart = 68*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Bottom plume axial line
#        zstart = np.linspace(28,len(zvec)-2,nstart_z)
#        rstart = 17*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Mid chamber axial line
#        zstart = np.linspace(1,len(zvec)-2,nstart_z)
#        rstart = 55*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Mid chamber axial line 1
#        zstart = np.linspace(1,len(zvec)-2,nstart_z)
#        rstart = 65*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Top plume axial line 1
#        zstart = np.linspace(28,len(zvec)-2,nstart_z)
#        rstart = 100*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
##        # Top plume axial line 2
##        zstart = np.linspace(28,len(zvec)-2,nstart_z)
##        rstart = 200*np.ones(nstart_z)
##        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Bottom plume axial line 1
#        zstart = np.linspace(28,len(zvec)-2,nstart_z)
#        rstart = 20*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Bottom plume axial line 2
#        zstart = np.linspace(28,len(zvec)-2,nstart_z)
#        rstart = 5*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial line at plume 1
#        zstart = 40*np.ones(nstart_r)
#        rstart = np.linspace(1,len(zvec)-2,nstart_r)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial line at plume 2
#        zstart = 80*np.ones(nstart_r)
#        rstart = np.linspace(1,len(zvec)-2,nstart_r)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
##        # Radial line at plume 3
##        zstart = 150*np.ones(nstart_r)
##        rstart = np.linspace(1,len(zvec)-2,nstart_r)
##        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
##        # Radial line at plume 4
##        zstart = 100*np.ones(nstart_r)
##        rstart = np.linspace(1,len(zvec)-2,nstart_r)
##        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
##        # Radial line at plume 5
##        zstart = 120*np.ones(nstart_r)
##        rstart = np.linspace(1,len(zvec)-2,nstart_r)
##        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial chamber line 1 
#        zstart = 20*np.ones(nstart_r-5)
#        rstart = np.linspace(50,70,nstart_r-5)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial chamber line 2 
#        zstart = 1*np.ones(nstart_r-5)
#        rstart = np.linspace(50,70,nstart_r-5)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
        # ---------------------------------------------------------------------
        # HT5k cases --------------------------------------------------------
##        nstart_r = 40
##        nstart_z = 20
#        nstart_r = 10
#        nstart_z = 5
#        # Top plume axial line 1
#        zstart = np.linspace(30,len(zvec)-2,nstart_z)
#        rstart = 55*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Top plume axial line 2
#        zstart = np.linspace(30,len(zvec)-2,nstart_z)
#        rstart = 70*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Mid chamber axial line 1
#        zstart = np.linspace(1,len(zvec)-2,nstart_z)
#        rstart = 38*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Mid chamber axial line 2
#        zstart = np.linspace(1,len(zvec)-2,nstart_z)
#        rstart = 34*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Mid chamber axial line 2
#        zstart = np.linspace(1,len(zvec)-2,nstart_z)
#        rstart = 44*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Bottom plume axial line 1
#        zstart = np.linspace(30,len(zvec)-2,nstart_z)
#        rstart = 25*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Bottom plume axial line 2
#        zstart = np.linspace(30,len(zvec)-2,nstart_z)
#        rstart = 10*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Bottom plume axial line 3
#        zstart = np.linspace(30,len(zvec)-2,nstart_z)
#        rstart = 1*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial line at plume 1
#        zstart = 30*np.ones(nstart_r)
#        rstart = np.linspace(1,len(zvec)-2,nstart_r)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial line at plume 2
#        zstart = 27*np.ones(nstart_r)
#        rstart = np.linspace(1,len(zvec)-2,nstart_r)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial line at plume 3
#        zstart = 60*np.ones(nstart_r)
#        rstart = np.linspace(1,len(zvec)-2,nstart_r)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial line at plume 4
#        zstart = 90*np.ones(nstart_r)
#        rstart = np.linspace(1,len(zvec)-2,nstart_r)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial line at chamber 1
#        zstart = 1*np.ones(nstart_r)
#        rstart = np.linspace(32,46,nstart_r)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial line at chamber 2
#        zstart = 20*np.ones(nstart_r)
#        rstart = np.linspace(32,46,nstart_r)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial line at chamber 3
#        zstart = 22*np.ones(nstart_r)
#        rstart = np.linspace(32,46,nstart_r)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial line at chamber 3
#        zstart = 24*np.ones(nstart_r)
#        rstart = np.linspace(32,46,nstart_r)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
        # ---------------------------------------------------------------------
        streamline_density = 2
#        flag_start = 1
        flag_start = 0
#        if interp_MFAM_picM_plot == 1:
#            stream = streamline_2D(ax,zvec,rvec,dims_mp,zs_mp,rs_mp,ji_z_mp,ji_x_mp,flag_start,start_points,
#                                   plot_start_points,streamline_density,streamline_width,streamline_color,arrow_size,
#                                   arrow_style,min_length)
#        else:
#            stream = streamline_2D(ax,zvec,rvec,dims,zs,rs,ji_z_plot,ji_x_plot,flag_start,start_points,
#                                   plot_start_points,streamline_density,streamline_width,streamline_color,arrow_size,
#                                   arrow_style,min_length)
            
        stream = streamline_2D(ax,zvec,rvec,dims,zs,rs,ji_z_plot,ji_x_plot,flag_start,start_points,
                                   plot_start_points,streamline_density,streamline_width,streamline_color,arrow_size,
                                   arrow_style,min_length)
        ax.set_xlim(zs[0,0],zs[0,-1])
        ax.set_ylim(rs[0,-1],rs[-1,-1])
        if ax_ticks_flag == 2:
#            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
#            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
            ax.set_xticks(np.arange(0,17,3))
            ax.set_yticks(np.arange(0,yticks_lim,2))
            ax.set_ylim(0,ylim_axes)
            ax.set_xlim(0,15)
        elif ax_ticks_flag == 1:
            ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],1))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],2))
        
        if save_flag == 1:
            plt.savefig(path_out+"ji2D_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            
        
        plt.figure('ji zr ref inC')
        ax = plt.gca()
        log_type         = 1
        auto             = 0
        min_val0         = 1E-5
        max_val0         = 1E0
        cont             = 1
        lines            = 0
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = -1
        nticks_cbar      = 9
        nticks_lines     = 10
        cbar_ticks       = np.array([1E-1,1E0,1E1,1E2,2E2,4E2,6E2,8E2,1E3])
#        lines_ticks      = np.array([1E-5,1E-4,1E-3,1E-2,1E-1,1E0,2E0,3E0,4E0,5E0,6E0,7E0,8E0,9E0,1E1,1E2,2E2,4E2,6E2,8E2])
        lines_ticks      = np.array([5E1,1E2,2E2,4E2,6E2])   
        lines_ticks_loc  = [(0.6,4.25),(1.15,4.25),(2.24,4.5),(4.3,4.25),(6.32,4.25),(7.65,6.75),(5.0,7.3),(3.6,1.9),(4.82,1.81),(7.48,1.24),(8.6,0.7),(9.95,0.25)]
#        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.1f}'
        lines_ticks_fmt   = '{%.2f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
#        if interp_MFAM_picM_plot == 1:
#            [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs_mp, rs_mp, ji_2D_mp, nodes_flag_mp, log_type, auto, 
#                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
#                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
#                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
#        else:
#            [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, ji2D_plot, nodes_flag, log_type, auto, 
#                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
#                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
#                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, ji2D_plot, nodes_flag, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
#        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, manual = lines_ticks_loc, fontsize=ticks_size_isolines, zorder = 1)
#        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, manual = lines_ticks_loc, fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
        
        n_cond_f = 0
        pos_cond_f = np.array([],dtype=int)
        for ind_f in range(0,len(faces[2,:])):
            if faces[2,ind_f] == 13:
                n_cond_f = n_cond_f+1
                pos_cond_f = np.append(pos_cond_f,np.array([ind_f],dtype=int),axis=0)
        plt.plot(face_geom[0,pos_cond_f]*1E2,face_geom[1,pos_cond_f]*1E2,'r-',linewidth = line_width_boundary+1)
        
        # --- Plot the streamlines 
        # Define number of starting points for plotting the streamlines
        flag_start = 1
        plot_start_points = 0
        streamline_density = 3
#        flag_start = 1
        flag_start = 0
#        if interp_MFAM_picM_plot == 1:
#            stream = streamline_2D(ax,zvec_inC,rvec_inC,dims_mp,zs_mp,rs_mp,ji_z_mp,ji_x_mp,flag_start,start_points,
#                                   plot_start_points,streamline_density,streamline_width,streamline_color,arrow_size,
#                                   arrow_style,min_length)
#        else:
#            stream = streamline_2D(ax,zvec_inC,rvec_inC,dims,zs,rs,ji_z_plot,ji_x_plot,flag_start,start_points,
#                                   plot_start_points,streamline_density,streamline_width,streamline_color,arrow_size,
#                                   arrow_style,min_length)
        stream = streamline_2D(ax,zvec_inC,rvec_inC,dims,zs,rs,ji_z_plot,ji_x_plot,flag_start,start_points,
                               plot_start_points,streamline_density,streamline_width,streamline_color,arrow_size,
                               arrow_style,min_length)
        
        npx_bot = 0
        npx_lim = int(xi_bottom)
        ax.set_xlim(zs[int(eta_min),npx_bot],zs[int(eta_min),npx_lim])
        ax.set_ylim(rs[int(eta_min),npx_lim],rs[int(eta_max),npx_lim])
        xlims = ax.get_xlim()
        ax.set_xticks(np.arange(xlims[0],xlims[1]+0.25,0.25))
        
#        npx_bot = 0
#        npx_lim = 14
#        tol_x   = 0.98
#        tol_y   = tol_x 
#        text_size = 15
#        ax.set_xlim(zs[int(eta_min),npx_bot],zs[int(eta_min),npx_lim])
#        ax.set_ylim(rs[int(eta_min),npx_lim],rs[int(eta_max),npx_lim])
#        xlims = ax.get_xlim()
#        ax.set_xticks(np.arange(xlims[0],xlims[1]+0.25,0.25))
       
##        npx_bot = 10
##        tol_x   = 0.98
##        tol_y   = tol_x 
##        text_size = 15
##        ax.set_xlim(zs[int(eta_min),npx_bot],zs[int(eta_min),int(xi_bottom-1)])
##        ax.set_ylim(rs[int(eta_min),int(xi_bottom-1)],rs[int(eta_max),int(xi_top-1)])
##        plt.plot(zs[int(eta_min),npx_bot:int(xi_bottom)+1],rs[int(eta_min),npx_bot:int(xi_bottom)+1], linestyle='-', linewidth = line_width, markevery=1, markersize=marker_size-2, marker='s', color='k', markeredgecolor = 'k', label="")
##        plt.plot(np.array([2.2836538 , 2.465     , 2.64500007, 2.82499995]),np.array([5.24750017, 5.18448018, 5.05843982, 4.93239984]), linestyle='', linewidth = line_width, markevery=1, markersize=marker_size, marker='x', color='r', markeredgecolor = 'r', label="")           
##        plt.text(tol_x*2.2836538,tol_y*5.24750017,"P1",fontsize = text_size,color='k',ha='center',va='center')
##        plt.text(tol_x*2.465,tol_y*5.18448018,"P2",fontsize = text_size,color='k',ha='center',va='center')
##        plt.text(tol_x*2.64500007,tol_y*5.05843982,"P3",fontsize = text_size,color='k',ha='center',va='center')
##        plt.text(tol_x*2.82499995,tol_y*4.93239984,"P4",fontsize = text_size,color='k',ha='center',va='center')
###        plt.text((2.03-tol_x)*zs[int(eta_min),npx_bot+1],(2-tol_y)*rs[int(eta_min),npx_bot+1],"Bottom chamber wall",fontsize = text_size,color='k',ha='center',va='center')

        if save_flag == 1:
            plt.savefig(path_out+"ji2D_ref_inC"+figs_format,bbox_inches='tight') 
            plt.close()
            
        plt.figure('ji1 zr ref')
        ax = plt.gca()
        log_type         = 1
        auto             = 0
#        min_val0         = 1E-1
#        max_val0         = 1E3
        min_val0         = 1E-5
        max_val0         = 1E0
        cont             = 1
        lines            = 0
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = -1
        nticks_cbar      = 5
        nticks_lines     = 10
        cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
#        lines_ticks      = np.array([1E-5,1E-4,1E-3,1E-2,1E-1,1E0,2E0,3E0,4E0,5E0,6E0,7E0,8E0,9E0,1E1,1E2,2E2,4E2,6E2,8E2])
        lines_ticks      = np.array([5E1,1E2,2E2,4E2,6E2])   
        lines_ticks_loc  = [(0.6,4.25),(1.15,4.25),(2.24,4.5),(4.3,4.25),(6.32,4.25),(7.65,6.75),(5.0,7.3),(3.6,1.9),(4.82,1.81),(7.48,1.24),(8.6,0.7),(9.95,0.25)]
#        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.1f}'
        lines_ticks_fmt   = '{%.2f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, ji12D_plot, nodes_flag, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
#        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, manual = lines_ticks_loc, fontsize=ticks_size_isolines, zorder = 1)
#        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, manual = lines_ticks_loc, fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        # Plot the cathode magnetic line if given
        if plot_cath_Bline == 1:
            if elems_cath_Bline != 0:
                cath_z = elem_geom[0,elems_cath_Bline]
                cath_r = elem_geom[1,elems_cath_Bline]
                plt.plot(cath_z,cath_r,color=cath_Bline_color,linestyle=cath_Bline_linestyle,linewidth = line_width_boundary,markersize = marker_size)  
                # plt.plot(cath_Bline_z,cath_Bline_r,color=cath_Bline_color,linewidth = line_width_boundary,markersize = marker_size)
            if faces_cath_Bline != 0:
                # plt.plot(face_geom[0,faces_cath_Bline],face_geom[1,faces_cath_Bline],'c',linewidth = line_width_boundary,markersize = marker_size)
                plt.plot(faces_cath_Bline_nodez,faces_cath_Bline_noder,color=cath_Bline_color,linestyle=cath_Bline_linestyle,linewidth = line_width_boundary,markersize = marker_size)
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
        # --- Plot the streamlines 
        # Define number of starting points for plotting the streamlines
        flag_start = 1
        plot_start_points = 0
        start_points = np.zeros((0,2))
        streamline_density = 2
#        flag_start = 1
        flag_start = 0            
        stream = streamline_2D(ax,zvec,rvec,dims,zs,rs,ji1_z_plot,ji1_x_plot,flag_start,start_points,
                                   plot_start_points,streamline_density,streamline_width,streamline_color,arrow_size,
                                   arrow_style,min_length)
        ax.set_xlim(zs[0,0],zs[0,-1])
        ax.set_ylim(rs[0,-1],rs[-1,-1])
        if ax_ticks_flag == 2:
#            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
#            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
            ax.set_xticks(np.arange(0,17,3))
            ax.set_yticks(np.arange(0,yticks_lim,2))
            ax.set_ylim(0,ylim_axes)
            ax.set_xlim(0,15)
        elif ax_ticks_flag == 1:
            ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],1))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],2))
        
        if save_flag == 1:
            plt.savefig(path_out+"ji12D_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            
        plt.figure('ji2 zr ref')
        ax = plt.gca()
        log_type         = 1
        auto             = 0
#        min_val0         = 1E-1
#        max_val0         = 1E3
        min_val0         = 1E-5
        max_val0         = 1E0
        cont             = 1
        lines            = 0
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = -1
        nticks_cbar      = 5
        nticks_lines     = 10
        cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
#        lines_ticks      = np.array([1E-5,1E-4,1E-3,1E-2,1E-1,1E0,2E0,3E0,4E0,5E0,6E0,7E0,8E0,9E0,1E1,1E2,2E2,4E2,6E2,8E2])
        lines_ticks      = np.array([5E1,1E2,2E2,4E2,6E2])   
        lines_ticks_loc  = [(0.6,4.25),(1.15,4.25),(2.24,4.5),(4.3,4.25),(6.32,4.25),(7.65,6.75),(5.0,7.3),(3.6,1.9),(4.82,1.81),(7.48,1.24),(8.6,0.7),(9.95,0.25)]
#        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.1f}'
        lines_ticks_fmt   = '{%.2f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, ji22D_plot, nodes_flag, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
#        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, manual = lines_ticks_loc, fontsize=ticks_size_isolines, zorder = 1)
#        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, manual = lines_ticks_loc, fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        # Plot the cathode magnetic line if given
        if plot_cath_Bline == 1:
            if elems_cath_Bline != 0:
                cath_z = elem_geom[0,elems_cath_Bline]
                cath_r = elem_geom[1,elems_cath_Bline]
                plt.plot(cath_z,cath_r,color=cath_Bline_color,linestyle=cath_Bline_linestyle,linewidth = line_width_boundary,markersize = marker_size)  
                # plt.plot(cath_Bline_z,cath_Bline_r,color=cath_Bline_color,linewidth = line_width_boundary,markersize = marker_size)
            if faces_cath_Bline != 0:
                # plt.plot(face_geom[0,faces_cath_Bline],face_geom[1,faces_cath_Bline],'c',linewidth = line_width_boundary,markersize = marker_size)
                plt.plot(faces_cath_Bline_nodez,faces_cath_Bline_noder,color=cath_Bline_color,linestyle=cath_Bline_linestyle,linewidth = line_width_boundary,markersize = marker_size)
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
        # --- Plot the streamlines 
        # Define number of starting points for plotting the streamlines
        flag_start = 1
        plot_start_points = 0
        start_points = np.zeros((0,2))
        streamline_density = 2
#        flag_start = 1
        flag_start = 0            
        stream = streamline_2D(ax,zvec,rvec,dims,zs,rs,ji2_z_plot,ji2_x_plot,flag_start,start_points,
                                   plot_start_points,streamline_density,streamline_width,streamline_color,arrow_size,
                                   arrow_style,min_length)
        ax.set_xlim(zs[0,0],zs[0,-1])
        ax.set_ylim(rs[0,-1],rs[-1,-1])
        if ax_ticks_flag == 2:
#            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
#            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
            ax.set_xticks(np.arange(0,17,3))
            ax.set_yticks(np.arange(0,yticks_lim,2))
            ax.set_ylim(0,ylim_axes)
            ax.set_xlim(0,15)
        elif ax_ticks_flag == 1:
            ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],1))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],2))
        
        if save_flag == 1:
            plt.savefig(path_out+"ji22D_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            
        plt.figure('ji3 zr ref')
        ax = plt.gca()
        log_type         = 1
        auto             = 0
#        min_val0         = 1E-1
#        max_val0         = 1E3
        min_val0         = 1E-7
        max_val0         = 1E-3
        cont             = 1
        lines            = 0
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = -1
        nticks_cbar      = 5
        nticks_lines     = 10
        cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
#        lines_ticks      = np.array([1E-5,1E-4,1E-3,1E-2,1E-1,1E0,2E0,3E0,4E0,5E0,6E0,7E0,8E0,9E0,1E1,1E2,2E2,4E2,6E2,8E2])
        lines_ticks      = np.array([5E1,1E2,2E2,4E2,6E2])   
        lines_ticks_loc  = [(0.6,4.25),(1.15,4.25),(2.24,4.5),(4.3,4.25),(6.32,4.25),(7.65,6.75),(5.0,7.3),(3.6,1.9),(4.82,1.81),(7.48,1.24),(8.6,0.7),(9.95,0.25)]
#        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.1f}'
        lines_ticks_fmt   = '{%.2f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, ji32D_plot, nodes_flag, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
#        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, manual = lines_ticks_loc, fontsize=ticks_size_isolines, zorder = 1)
#        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, manual = lines_ticks_loc, fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        # Plot the cathode magnetic line if given
        if plot_cath_Bline == 1:
            if elems_cath_Bline != 0:
                cath_z = elem_geom[0,elems_cath_Bline]
                cath_r = elem_geom[1,elems_cath_Bline]
                plt.plot(cath_z,cath_r,color=cath_Bline_color,linestyle=cath_Bline_linestyle,linewidth = line_width_boundary,markersize = marker_size)  
                # plt.plot(cath_Bline_z,cath_Bline_r,color=cath_Bline_color,linewidth = line_width_boundary,markersize = marker_size)
            if faces_cath_Bline != 0:
                # plt.plot(face_geom[0,faces_cath_Bline],face_geom[1,faces_cath_Bline],'c',linewidth = line_width_boundary,markersize = marker_size)
                plt.plot(faces_cath_Bline_nodez,faces_cath_Bline_noder,color=cath_Bline_color,linestyle=cath_Bline_linestyle,linewidth = line_width_boundary,markersize = marker_size)
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
        # --- Plot the streamlines 
        # Define number of starting points for plotting the streamlines
        flag_start = 1
        plot_start_points = 0
        start_points = np.zeros((0,2))
        streamline_density = 2
#        flag_start = 1
        flag_start = 0            
        stream = streamline_2D(ax,zvec,rvec,dims,zs,rs,ji3_z_plot,ji3_x_plot,flag_start,start_points,
                                   plot_start_points,streamline_density,streamline_width,streamline_color,arrow_size,
                                   arrow_style,min_length)
        ax.set_xlim(zs[0,0],zs[0,-1])
        ax.set_ylim(rs[0,-1],rs[-1,-1])
        if ax_ticks_flag == 2:
#            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
#            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
            ax.set_xticks(np.arange(0,17,3))
            ax.set_yticks(np.arange(0,yticks_lim,2))
            ax.set_ylim(0,ylim_axes)
            ax.set_xlim(0,15)
        elif ax_ticks_flag == 1:
            ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],1))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],2))
        
        if save_flag == 1:
            plt.savefig(path_out+"ji32D_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            
        plt.figure('ji4 zr ref')
        ax = plt.gca()
        log_type         = 1
        auto             = 0
#        min_val0         = 1E-1
#        max_val0         = 1E3
        min_val0         = 1E-7
        max_val0         = 1E-3
        cont             = 1
        lines            = 0
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = -1
        nticks_cbar      = 5
        nticks_lines     = 10
        cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
#        lines_ticks      = np.array([1E-5,1E-4,1E-3,1E-2,1E-1,1E0,2E0,3E0,4E0,5E0,6E0,7E0,8E0,9E0,1E1,1E2,2E2,4E2,6E2,8E2])
        lines_ticks      = np.array([5E1,1E2,2E2,4E2,6E2])   
        lines_ticks_loc  = [(0.6,4.25),(1.15,4.25),(2.24,4.5),(4.3,4.25),(6.32,4.25),(7.65,6.75),(5.0,7.3),(3.6,1.9),(4.82,1.81),(7.48,1.24),(8.6,0.7),(9.95,0.25)]
#        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.1f}'
        lines_ticks_fmt   = '{%.2f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, ji42D_plot, nodes_flag, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
#        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, manual = lines_ticks_loc, fontsize=ticks_size_isolines, zorder = 1)
#        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, manual = lines_ticks_loc, fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        # Plot the cathode magnetic line if given
        if plot_cath_Bline == 1:
            if elems_cath_Bline != 0:
                cath_z = elem_geom[0,elems_cath_Bline]
                cath_r = elem_geom[1,elems_cath_Bline]
                plt.plot(cath_z,cath_r,color=cath_Bline_color,linestyle=cath_Bline_linestyle,linewidth = line_width_boundary,markersize = marker_size)  
                # plt.plot(cath_Bline_z,cath_Bline_r,color=cath_Bline_color,linewidth = line_width_boundary,markersize = marker_size)
            if faces_cath_Bline != 0:
                # plt.plot(face_geom[0,faces_cath_Bline],face_geom[1,faces_cath_Bline],'c',linewidth = line_width_boundary,markersize = marker_size)
                plt.plot(faces_cath_Bline_nodez,faces_cath_Bline_noder,color=cath_Bline_color,linestyle=cath_Bline_linestyle,linewidth = line_width_boundary,markersize = marker_size)
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
        # --- Plot the streamlines 
        # Define number of starting points for plotting the streamlines
        flag_start = 1
        plot_start_points = 0
        start_points = np.zeros((0,2))
        streamline_density = 2
#        flag_start = 1
        flag_start = 0            
        stream = streamline_2D(ax,zvec,rvec,dims,zs,rs,ji4_z_plot,ji4_x_plot,flag_start,start_points,
                                   plot_start_points,streamline_density,streamline_width,streamline_color,arrow_size,
                                   arrow_style,min_length)
        ax.set_xlim(zs[0,0],zs[0,-1])
        ax.set_ylim(rs[0,-1],rs[-1,-1])
        if ax_ticks_flag == 2:
#            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
#            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
            ax.set_xticks(np.arange(0,17,3))
            ax.set_yticks(np.arange(0,yticks_lim,2))
            ax.set_ylim(0,ylim_axes)
            ax.set_xlim(0,15)
        elif ax_ticks_flag == 1:
            ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],1))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],2))
        
        if save_flag == 1:
            plt.savefig(path_out+"ji42D_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            
        plt.figure('ji3 zr ref latplume')
        ax = plt.gca()
        log_type         = 1
        auto             = 0
#        min_val0         = 1E-1
#        max_val0         = 1E3
        min_val0         = 1E-7
        max_val0         = 1E-3
        cont             = 1
        lines            = 0
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = -1
        nticks_cbar      = 5
        nticks_lines     = 10
        cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
#        lines_ticks      = np.array([1E-5,1E-4,1E-3,1E-2,1E-1,1E0,2E0,3E0,4E0,5E0,6E0,7E0,8E0,9E0,1E1,1E2,2E2,4E2,6E2,8E2])
        lines_ticks      = np.array([5E1,1E2,2E2,4E2,6E2])   
        lines_ticks_loc  = [(0.6,4.25),(1.15,4.25),(2.24,4.5),(4.3,4.25),(6.32,4.25),(7.65,6.75),(5.0,7.3),(3.6,1.9),(4.82,1.81),(7.48,1.24),(8.6,0.7),(9.95,0.25)]
#        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.1f}'
        lines_ticks_fmt   = '{%.2f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
        var = np.copy(ji32D_plot)
        var[0:int(eta_min),:] = np.nan
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, var, nodes_flag, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
#        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, manual = lines_ticks_loc, fontsize=ticks_size_isolines, zorder = 1)
#        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, manual = lines_ticks_loc, fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        # Plot the cathode magnetic line if given
        if plot_cath_Bline == 1:
            if elems_cath_Bline != 0:
                cath_z = elem_geom[0,elems_cath_Bline]
                cath_r = elem_geom[1,elems_cath_Bline]
                plt.plot(cath_z,cath_r,color=cath_Bline_color,linestyle=cath_Bline_linestyle,linewidth = line_width_boundary,markersize = marker_size)  
                # plt.plot(cath_Bline_z,cath_Bline_r,color=cath_Bline_color,linewidth = line_width_boundary,markersize = marker_size)
            if faces_cath_Bline != 0:
                # plt.plot(face_geom[0,faces_cath_Bline],face_geom[1,faces_cath_Bline],'c',linewidth = line_width_boundary,markersize = marker_size)
                plt.plot(faces_cath_Bline_nodez,faces_cath_Bline_noder,color=cath_Bline_color,linestyle=cath_Bline_linestyle,linewidth = line_width_boundary,markersize = marker_size)
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
        # --- Plot the streamlines 
        # Define number of starting points for plotting the streamlines
        flag_start = 1
        plot_start_points = 0
        start_points = np.zeros((0,2))
        streamline_density = 3
#        flag_start = 1
        flag_start = 0            
        stream = streamline_2D(ax,zvec,rvec,dims,zs,rs,ji3_z_plot,ji3_x_plot,flag_start,start_points,
                                   plot_start_points,streamline_density,streamline_width,streamline_color,arrow_size,
                                   arrow_style,min_length)
        ax.set_xlim(zs[0,0],zs[0,-1])
        ax.set_ylim(rs[0,-1],rs[-1,-1])
        if ax_ticks_flag == 2:
#            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
#            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
            ax.set_xticks(np.arange(0,17,3))
            ax.set_yticks(np.arange(0,yticks_lim,2))
            ax.set_ylim(0,ylim_axes)
            ax.set_xlim(0,15)
        elif ax_ticks_flag == 1:
            ax.set_ylim(rs[int(eta_max),int(xi_top)],rs[-1,-1])
            ax.set_xlim(zs[0,int(xi_top)],zs[0,-1])
            ax.set_yticks(np.arange(rs[int(eta_max),int(xi_top)],rs[-1,-1]+1,1))
            ax.set_xticks(np.arange(zs[0,int(xi_top)],zs[0,-1]+1,1))
        
        if save_flag == 1:
            plt.savefig(path_out+"ji32D_ref_latplume"+figs_format,bbox_inches='tight') 
            plt.close()
            
        plt.figure('ji4 zr ref latplume')
        ax = plt.gca()
        log_type         = 1
        auto             = 0
#        min_val0         = 1E-1
#        max_val0         = 1E3
        min_val0         = 1E-7
        max_val0         = 1E-3
        cont             = 1
        lines            = 0
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = -1
        nticks_cbar      = 5
        nticks_lines     = 10
        cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
#        lines_ticks      = np.array([1E-5,1E-4,1E-3,1E-2,1E-1,1E0,2E0,3E0,4E0,5E0,6E0,7E0,8E0,9E0,1E1,1E2,2E2,4E2,6E2,8E2])
        lines_ticks      = np.array([5E1,1E2,2E2,4E2,6E2])   
        lines_ticks_loc  = [(0.6,4.25),(1.15,4.25),(2.24,4.5),(4.3,4.25),(6.32,4.25),(7.65,6.75),(5.0,7.3),(3.6,1.9),(4.82,1.81),(7.48,1.24),(8.6,0.7),(9.95,0.25)]
#        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.1f}'
        lines_ticks_fmt   = '{%.2f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
        var = np.copy(ji42D_plot)
        var[0:int(eta_min),:] = np.nan
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, var, nodes_flag, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
#        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, manual = lines_ticks_loc, fontsize=ticks_size_isolines, zorder = 1)
#        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, manual = lines_ticks_loc, fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        # Plot the cathode magnetic line if given
        if plot_cath_Bline == 1:
            if elems_cath_Bline != 0:
                cath_z = elem_geom[0,elems_cath_Bline]
                cath_r = elem_geom[1,elems_cath_Bline]
                plt.plot(cath_z,cath_r,color=cath_Bline_color,linestyle=cath_Bline_linestyle,linewidth = line_width_boundary,markersize = marker_size)  
                # plt.plot(cath_Bline_z,cath_Bline_r,color=cath_Bline_color,linewidth = line_width_boundary,markersize = marker_size)
            if faces_cath_Bline != 0:
                # plt.plot(face_geom[0,faces_cath_Bline],face_geom[1,faces_cath_Bline],'c',linewidth = line_width_boundary,markersize = marker_size)
                plt.plot(faces_cath_Bline_nodez,faces_cath_Bline_noder,color=cath_Bline_color,linestyle=cath_Bline_linestyle,linewidth = line_width_boundary,markersize = marker_size)
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
        # --- Plot the streamlines 
        # Define number of starting points for plotting the streamlines
        flag_start = 1
        plot_start_points = 0
        start_points = np.zeros((0,2))
        streamline_density = 4
#        flag_start = 1
        flag_start = 0            
        stream = streamline_2D(ax,zvec,rvec,dims,zs,rs,ji4_z_plot,ji4_x_plot,flag_start,start_points,
                                   plot_start_points,streamline_density,streamline_width,streamline_color,arrow_size,
                                   arrow_style,min_length)
        ax.set_xlim(zs[0,0],zs[0,-1])
        ax.set_ylim(rs[0,-1],rs[-1,-1])
        if ax_ticks_flag == 2:
#            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
#            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
            ax.set_xticks(np.arange(0,17,3))
            ax.set_yticks(np.arange(0,yticks_lim,2))
            ax.set_ylim(0,ylim_axes)
            ax.set_xlim(0,15)
        elif ax_ticks_flag == 1:
            ax.set_ylim(rs[int(eta_max),int(xi_top)],rs[-1,-1])
            ax.set_xlim(zs[0,int(xi_top)],zs[0,-1])
            ax.set_yticks(np.arange(rs[int(eta_max),int(xi_top)],rs[-1,-1]+1,1))
            ax.set_xticks(np.arange(zs[0,int(xi_top)],zs[0,-1]+1,1))

        if save_flag == 1:
            plt.savefig(path_out+"ji42D_ref_latplume"+figs_format,bbox_inches='tight') 
            plt.close()
        
#        plt.figure('rel err ji_je_z ref')
#        ax = plt.gca()
#        log_type         = 1
#        auto             = 0
#        min_val0         = 1E-5
#        max_val0         = 1E0
#        cont             = 1
#        lines            = 1
#        cont_nlevels     = 500
#        auto_cbar_ticks  = 1 
#        auto_lines_ticks = -1
#        nticks_cbar      = 5
#        nticks_lines     = 10
#        cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
#        lines_ticks      = np.array([0.0,1E-3,5E-3,1E-2,5E-2,1E-1,5E-1,1.0])
#        lines_ticks_loc  = 'default'
#        cbar_ticks_fmt    = '{%.1f}'
#        lines_ticks_fmt   = '{%.4f}'
#        lines_width       = line_width
#        lines_ticks_color = 'k'
#        lines_style       = '-'
##            erel_jz_plot[np.where(nodes_flag == -1 and rs == 0.0)] = 1E-10
#        [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size_isolines, zs, rs, erel_jz_plot, nodes_flag, log_type, auto, 
#                               min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
#                               nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
#                               lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
#        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
#        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
#        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
#        plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)

        

#        plt.figure('rel err ji_je_r ref')
#        ax = plt.gca()
#        log_type         = 1
#        auto             = 0
#        min_val0         = 1E-5
#        max_val0         = 1E0
#        cont             = 1
#        lines            = 1
#        cont_nlevels     = nlevels_2Dcontour
#        auto_cbar_ticks  = 1 
#        auto_lines_ticks = -1
#        nticks_cbar      = 5
#        nticks_lines     = 10
#        cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
#        lines_ticks      = np.array([0.0,1E-3,5E-3,1E-2,5E-2,1E-1,5E-1,1.0])
#        lines_ticks_loc  = 'default'
#        cbar_ticks_fmt    = '{%.1f}'
#        lines_ticks_fmt   = '{%.4f}'
#        lines_width       = line_width
#        lines_ticks_color = 'k'
#        lines_style       = '-'
#        erel_jr_plot[0,xi_bottom::] = 1E-10
#        erel_jr_plot[np.where(erel_jr_plot == 0.0)] = 1E-10
##            erel_jr_plot[np.where(np.isinf(erel_jr_plot))] = 1E-10
#        [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size_isolines, zs, rs, erel_jr_plot, nodes_flag, log_type, auto, 
#                               min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
#                               nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
#                               lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
#        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
#        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
#        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
#        plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
        

        plt.figure('j zr ref')
        ax = plt.gca()
        log_type         = 1
        auto             = 0
#        min_val0         = 1E-1
#        max_val0         = 1E3
        min_val0         = 1E-5
        max_val0         = 1E0
        cont             = 1
        lines            = 0
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = -1
        nticks_cbar      = 5
        nticks_lines     = 10
        cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
        lines_ticks      = np.array([1E1,1E2,5E2,1E3,2E3,5E3,1E4,2E4])
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.1f}'
        lines_ticks_fmt   = '{%.4f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
        if interp_MFAM_picM_plot == 1:
            [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs_mp, rs_mp, j_2D_mp, nodes_flag_mp, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)     
        else:
            [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, j2D_plot, nodes_flag, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
#        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
#        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        # Plot the cathode magnetic line if given
        if plot_cath_Bline == 1:
            if elems_cath_Bline != 0:
                cath_z = elem_geom[0,elems_cath_Bline]
                cath_r = elem_geom[1,elems_cath_Bline]
                plt.plot(cath_z,cath_r,color=cath_Bline_color,linestyle=cath_Bline_linestyle,linewidth = line_width_boundary,markersize = marker_size)  
                # plt.plot(cath_Bline_z,cath_Bline_r,color=cath_Bline_color,linewidth = line_width_boundary,markersize = marker_size)
            if faces_cath_Bline != 0:
                # plt.plot(face_geom[0,faces_cath_Bline],face_geom[1,faces_cath_Bline],'c',linewidth = line_width_boundary,markersize = marker_size)
                plt.plot(faces_cath_Bline_nodez,faces_cath_Bline_noder,color=cath_Bline_color,linestyle=cath_Bline_linestyle,linewidth = line_width_boundary,markersize = marker_size)
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
        # --- Plot the streamlines 
        # Define number of starting points for plotting the streamlines
        plot_start_points = 0
        start_points = np.zeros((0,2))
        # SPT100 thesis orig --------------------------------------------------
##        nstart_r = 40
##        nstart_z = 20
#        nstart_r = 10
#        nstart_z = 5
#        # Top plume axial line 1
#        zstart = np.linspace(30,len(zvec)-2,nstart_z)
#        rstart = 55*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Top plume axial line 2
#        zstart = np.linspace(30,len(zvec)-2,nstart_z)
#        rstart = 70*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Mid chamber axial line 1
#        zstart = np.linspace(1,len(zvec)-2,nstart_z)
#        rstart = 38*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Mid chamber axial line 2
#        zstart = np.linspace(1,len(zvec)-2,nstart_z)
#        rstart = 34*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Mid chamber axial line 2
#        zstart = np.linspace(1,len(zvec)-2,nstart_z)
#        rstart = 44*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Bottom plume axial line 1
#        zstart = np.linspace(30,len(zvec)-2,nstart_z)
#        rstart = 25*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Bottom plume axial line 2
#        zstart = np.linspace(30,len(zvec)-2,nstart_z)
#        rstart = 10*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Bottom plume axial line 3
#        zstart = np.linspace(30,len(zvec)-2,nstart_z)
#        rstart = 1*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial line at plume 1
#        zstart = 30*np.ones(nstart_r)
#        rstart = np.linspace(1,len(zvec)-2,nstart_r)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial line at plume 2
#        zstart = 27*np.ones(nstart_r)
#        rstart = np.linspace(1,len(zvec)-2,nstart_r)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial line at plume 3
#        zstart = 60*np.ones(nstart_r)
#        rstart = np.linspace(1,len(zvec)-2,nstart_r)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial line at plume 4
#        zstart = 90*np.ones(nstart_r)
#        rstart = np.linspace(1,len(zvec)-2,nstart_r)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial line at chamber 1
#        zstart = 1*np.ones(nstart_r)
#        rstart = np.linspace(32,46,nstart_r)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial line at chamber 2
#        zstart = 20*np.ones(nstart_r)
#        rstart = np.linspace(32,46,nstart_r)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial line at chamber 3
#        zstart = 22*np.ones(nstart_r)
#        rstart = np.linspace(32,46,nstart_r)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial line at chamber 3
#        zstart = 24*np.ones(nstart_r)
#        rstart = np.linspace(32,46,nstart_r)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
        # ---------------------------------------------------------------------
        # Safran cases CHEOPS 1 -----------------------------------------------
##        nstart_r = 25
##        nstart_z = 15
#        nstart_r = 12
#        nstart_z = 7
#        # Mid chamber axial line
#        zstart = np.linspace(1,len(zvec)-2,nstart_z)
#        rstart = 55*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Mid chamber axial line 1
#        zstart = np.linspace(1,len(zvec)-2,nstart_z)
#        rstart = 65*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Top plume axial line 1
#        zstart = np.linspace(28,len(zvec)-2,nstart_z)
#        rstart = 100*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
##        # Top plume axial line 2
##        zstart = np.linspace(28,len(zvec)-2,nstart_z)
##        rstart = 200*np.ones(nstart_z)
##        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Bottom plume axial line 1
#        zstart = np.linspace(28,len(zvec)-2,nstart_z)
#        rstart = 20*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Bottom plume axial line 2
#        zstart = np.linspace(28,len(zvec)-2,nstart_z)
#        rstart = 5*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial line at plume 1
#        zstart = 40*np.ones(nstart_r)
#        rstart = np.linspace(1,len(zvec)-2,nstart_r)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial line at plume 2
#        zstart = 80*np.ones(nstart_r)
#        rstart = np.linspace(1,len(zvec)-2,nstart_r)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
##        # Radial line at plume 3
##        zstart = 150*np.ones(nstart_r)
##        rstart = np.linspace(1,len(zvec)-2,nstart_r)
##        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial line at plume 4
#        zstart = 100*np.ones(nstart_r)
#        rstart = np.linspace(1,len(zvec)-2,nstart_r)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
##        # Radial line at plume 5
##        zstart = 120*np.ones(nstart_r)
##        rstart = np.linspace(1,len(zvec)-2,nstart_r)
##        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial chamber line 1 
#        zstart = 20*np.ones(nstart_r-5)
#        rstart = np.linspace(50,70,nstart_r-5)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial chamber line 2 
#        zstart = 1*np.ones(nstart_r-5)
#        rstart = np.linspace(50,70,nstart_r-5)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # ---------------------------------------------------------------------
         # HT5k cases --------------------------------------------------------
##        nstart_r = 40
##        nstart_z = 20
#        nstart_r = 10
#        nstart_z = 5
#        # Top plume axial line 1
#        zstart = np.linspace(30,len(zvec)-2,nstart_z)
#        rstart = 55*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Top plume axial line 2
#        zstart = np.linspace(30,len(zvec)-2,nstart_z)
#        rstart = 70*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Mid chamber axial line 1
#        zstart = np.linspace(1,len(zvec)-2,nstart_z)
#        rstart = 38*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Mid chamber axial line 2
#        zstart = np.linspace(1,len(zvec)-2,nstart_z)
#        rstart = 34*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Mid chamber axial line 2
#        zstart = np.linspace(1,len(zvec)-2,nstart_z)
#        rstart = 44*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Bottom plume axial line 1
#        zstart = np.linspace(30,len(zvec)-2,nstart_z)
#        rstart = 25*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Bottom plume axial line 2
#        zstart = np.linspace(30,len(zvec)-2,nstart_z)
#        rstart = 10*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Bottom plume axial line 3
#        zstart = np.linspace(30,len(zvec)-2,nstart_z)
#        rstart = 1*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial line at plume 1
#        zstart = 30*np.ones(nstart_r)
#        rstart = np.linspace(1,len(zvec)-2,nstart_r)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial line at plume 2
#        zstart = 27*np.ones(nstart_r)
#        rstart = np.linspace(1,len(zvec)-2,nstart_r)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial line at plume 3
#        zstart = 60*np.ones(nstart_r)
#        rstart = np.linspace(1,len(zvec)-2,nstart_r)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial line at plume 4
#        zstart = 90*np.ones(nstart_r)
#        rstart = np.linspace(1,len(zvec)-2,nstart_r)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial line at chamber 1
#        zstart = 1*np.ones(nstart_r)
#        rstart = np.linspace(32,46,nstart_r)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial line at chamber 2
#        zstart = 20*np.ones(nstart_r)
#        rstart = np.linspace(32,46,nstart_r)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial line at chamber 3
#        zstart = 22*np.ones(nstart_r)
#        rstart = np.linspace(32,46,nstart_r)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Radial line at chamber 3
#        zstart = 24*np.ones(nstart_r)
#        rstart = np.linspace(32,46,nstart_r)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
        # ---------------------------------------------------------------------
        streamline_density = 2
#        flag_start = 1
        flag_start = 0
        if interp_MFAM_picM_plot == 1:
            stream = streamline_2D(ax,zvec,rvec,dims_mp,zs_mp,rs_mp,j_z_mp,j_r_mp,flag_start,start_points,
                                   plot_start_points,streamline_density,streamline_width,streamline_color,arrow_size,
                                   arrow_style,min_length)
        else:
            
            stream = streamline_2D(ax,zvec,rvec,dims,zs,rs,j_z_plot,j_r_plot,flag_start,start_points,
                                   plot_start_points,streamline_density,streamline_width,streamline_color,arrow_size,
                                   arrow_style,min_length)
        ax.set_xlim(zs[0,0],zs[0,-1])
        ax.set_ylim(rs[0,-1],rs[-1,-1])
        if ax_ticks_flag == 2:
#            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
#            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
            ax.set_xticks(np.arange(0,17,3))
            ax.set_yticks(np.arange(0,yticks_lim,2))
            ax.set_ylim(0,ylim_axes)
            ax.set_xlim(0,15)
        elif ax_ticks_flag == 1:
            ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],1))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],2))
            
        if save_flag == 1:
            plt.savefig(path_out+"j2D_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            
        plt.figure('j zr ref inC')
        ax = plt.gca()
        log_type         = 1
        auto             = 0
        min_val0         = 1E-5
        max_val0         = 1E0
        cont             = 1
        lines            = 0
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = -1
        nticks_cbar      = 6
        nticks_lines     = 10
        cbar_ticks       = np.array([1E2,2E2,4E2,6E2,8E2,1E3])
#        lines_ticks      = np.array([1E-5,1E-4,1E-3,1E-2,1E-1,1E0,2E0,3E0,4E0,5E0,6E0,7E0,8E0,9E0,1E1,1E2,2E2,4E2,6E2,8E2])
        lines_ticks      = np.array([5E1,1E2,2E2,4E2,6E2])   
        lines_ticks_loc  = [(0.6,4.25),(1.15,4.25),(2.24,4.5),(4.3,4.25),(6.32,4.25),(7.65,6.75),(5.0,7.3),(3.6,1.9),(4.82,1.81),(7.48,1.24),(8.6,0.7),(9.95,0.25)]
#        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.1f}'
        lines_ticks_fmt   = '{%.2f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
        if interp_MFAM_picM_plot == 1:
            [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs_mp, rs_mp, j_2D_mp, nodes_flag_mp, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)     
        else:
            [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, j2D_plot, nodes_flag, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
#        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, manual = lines_ticks_loc, fontsize=ticks_size_isolines, zorder = 1)
#        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, manual = lines_ticks_loc, fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
        
        n_cond_f = 0
        pos_cond_f = np.array([],dtype=int)
        for ind_f in range(0,len(faces[2,:])):
            if faces[2,ind_f] == 13:
                n_cond_f = n_cond_f+1
                pos_cond_f = np.append(pos_cond_f,np.array([ind_f],dtype=int),axis=0)
        plt.plot(face_geom[0,pos_cond_f]*1E2,face_geom[1,pos_cond_f]*1E2,'r-',linewidth = line_width_boundary+1)
                
        # --- Plot the streamlines 
        # Define number of starting points for plotting the streamlines
        flag_start = 1
        plot_start_points = 0
        streamline_density = 3
#        flag_start = 1
        flag_start = 0
        if interp_MFAM_picM_plot == 1:
            stream = streamline_2D(ax,zvec_inC,rvec_inC,dims_mp,zs_mp,rs_mp,j_z_mp,j_r_mp,flag_start,start_points,
                                   plot_start_points,streamline_density,streamline_width,streamline_color,arrow_size,
                                   arrow_style,min_length)
        else:
            stream = streamline_2D(ax,zvec_inC,rvec_inC,dims,zs,rs,j_z_plot,j_r_plot,flag_start,start_points,
                                   plot_start_points,streamline_density,streamline_width,streamline_color,arrow_size,
                                   arrow_style,min_length)
        
        npx_bot = 0
        npx_lim = int(xi_bottom)
        ax.set_xlim(zs[int(eta_min),npx_bot],zs[int(eta_min),npx_lim])
        ax.set_ylim(rs[int(eta_min),npx_lim],rs[int(eta_max),npx_lim])
        xlims = ax.get_xlim()
        ax.set_xticks(np.arange(xlims[0],xlims[1]+0.25,0.25))
        
#        delta_x = 0.011     # Plot dimensional axes
#        zvec2 = np.arange(zs[0,0],zs[0,int(xi_bottom)]+delta_x,delta_x)
#        rvec2 = np.copy(zvec2) + rs[int(eta_min),0]
#        
#        nstart_r = 12
#        nstart_z = 51
#        start_points = np.zeros((0,2))
        
##        # Axial line on floating wall at chamber 1
##        zstart = np.linspace(100,200,nstart_z)
##        rstart = 200*np.ones(nstart_z)
##        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Axial line on floating wall at chamber 2
#        zstart = np.linspace(150,200,nstart_z)
#        rstart = 200*np.ones(nstart_z)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        
#        streamline_density = 10
#        flag_start = 1
#        plot_start_points = 0
#        stream = streamline_2D(ax,zvec2,rvec2,dims,zs,rs,j_z_plot,j_r_plot,flag_start,start_points,
#                               plot_start_points,streamline_density,streamline_width,streamline_color,arrow_size,
#                               arrow_style,min_length)
       
#        npx_bot = 0
#        npx_lim = 14
#        tol_x   = 0.98
#        tol_y   = tol_x 
#        text_size = 15
#        ax.set_xlim(zs[int(eta_min),npx_bot],zs[int(eta_min),npx_lim])
#        ax.set_ylim(rs[int(eta_min),npx_lim],rs[int(eta_max),npx_lim])
        
#        ax.set_xlim(zs[int(eta_min),npx_bot],zs[int(eta_min),int(xi_bottom-1)])
#        ax.set_ylim(rs[int(eta_min),int(xi_bottom-1)],rs[int(eta_max),int(xi_top-1)])
#        plt.plot(zs[int(eta_min),npx_bot:int(xi_bottom)+1],rs[int(eta_min),npx_bot:int(xi_bottom)+1], linestyle='-', linewidth = line_width, markevery=1, markersize=marker_size-2, marker='s', color='k', markeredgecolor = 'k', label="")
#        plt.plot(np.array([2.2836538 , 2.465     , 2.64500007, 2.82499995]),np.array([5.24750017, 5.18448018, 5.05843982, 4.93239984]), linestyle='', linewidth = line_width, markevery=1, markersize=marker_size, marker='x', color='r', markeredgecolor = 'r', label="")           
#        plt.text(tol_x*2.2836538,tol_y*5.24750017,"P1",fontsize = text_size,color='k',ha='center',va='center')
#        plt.text(tol_x*2.465,tol_y*5.18448018,"P2",fontsize = text_size,color='k',ha='center',va='center')
#        plt.text(tol_x*2.64500007,tol_y*5.05843982,"P3",fontsize = text_size,color='k',ha='center',va='center')
#        plt.text(tol_x*2.82499995,tol_y*4.93239984,"P4",fontsize = text_size,color='k',ha='center',va='center')
###        plt.text((2.03-tol_x)*zs[int(eta_min),npx_bot+1],(2-tol_y)*rs[int(eta_min),npx_bot+1],"Bottom chamber wall",fontsize = text_size,color='k',ha='center',va='center')

        if save_flag == 1:
            plt.savefig(path_out+"j2D_ref_inC"+figs_format,bbox_inches='tight') 
            plt.close()
            
            
#        plt.figure('F_theta ref')
#        ax = plt.gca()
#        log_type         = 0
#        auto             = 1
#        min_val0         = 0.0
#        max_val0         = 0.0
#        cont             = 0
#        lines            = 1
#        cont_nlevels     = nlevels_2Dcontour
#        auto_cbar_ticks  = 1 
#        auto_lines_ticks = -1
#        nticks_cbar      = 5
#        nticks_lines     = 10
#        cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
#        lines_ticks      = np.array([-1E4,-5E3,-2E3,-1E3,-5E2,-1E2,1E2,5E2,1E3,2E3,5E3,1E4,2E4])
#        lines_ticks_loc  = 'default'
#        cbar_ticks_fmt    = '{%.1f}'
#        lines_ticks_fmt   = '{%.4f}'
#        lines_width       = line_width
#        lines_ticks_color = colors[k]
#        lines_style       = '-'
#        [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size, zs, rs, F_theta_plot, nodes_flag, log_type, auto, 
#                               min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
#                               nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
#                               lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
#        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines+5, zorder = 1)
#        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
#        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
#        plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
        
        
        
        plt.figure('je_tB_r ref')
        ax = plt.gca()
        log_type         = 0
        auto             = 1
        min_val0         = -1.5
        max_val0         = 6.0
        cont             = 1
        lines            = 1
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 0 
        auto_lines_ticks = -1
        nticks_cbar      = 5
        nticks_lines     = 10
        cbar_ticks       = np.array([-50, 250, 550, 850, 1150, 1450, 1750, 2000])
#        lines_ticks      = np.array([-1E4,-5E3,-2E3,-1E3,-5E2,-1E2,1E2,5E2,1E3,5E3,1E4,2E4,3E4,4E4])*1E-4
#        lines_ticks      = np.sort(np.array([-50, -20,-10, -5, -1, -5E-2, 1E-2, 2E-2, 3E-2, 4E-2, 5E-2, 1,  5, 10, 20, 50]))
        lines_ticks      = np.sort(np.array([1E-2, 2E-2, 3E-2, 4E-2, 5E-2, 1,  5, 10, 20, 50]))
        lines_ticks      = np.sort(np.array([-2E-2, -1E-1, 1E-2, 2E-2, 1,  5, 10, 20, 50]))
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.1f}'
        lines_ticks_fmt   = '{%.1f}'
        lines_width       = line_width
        lines_ticks_color = grey
        lines_style       = '-'
        if interp_MFAM_picM_plot == 1:
#            var = je_theta_mp*Br_mp*1E-3 # mN/cm3 with je_theta in A/cm2 and Br in G
            var = je_theta_mp*Br_mp      # N/m3 with je_theta in A/cm2 and Br in G
            [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs_mp, rs_mp, var, nodes_flag_mp, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
        else:
#            var = je_t_plot*Br_plot*1E-3 # mN/cm3 with je_theta in A/cm2 and Br in G
            var = je_t_plot*Br_plot      # N/m3 with je_theta in A/cm2 and Br in G 
            [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, var, nodes_flag, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
#        ax.clabel(CS2, CS2.levels, fmt=lines_ticks_fmt, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        # Isolines ticks (exponent)
        # ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        # Plot the cathode magnetic line if given
        if plot_cath_Bline == 1:
            if elems_cath_Bline != 0:
                cath_z = elem_geom[0,elems_cath_Bline]
                cath_r = elem_geom[1,elems_cath_Bline]
                plt.plot(cath_z,cath_r,color=cath_Bline_color,linestyle=cath_Bline_linestyle,linewidth = line_width_boundary,markersize = marker_size)  
                # plt.plot(cath_Bline_z,cath_Bline_r,color=cath_Bline_color,linewidth = line_width_boundary,markersize = marker_size)
            if faces_cath_Bline != 0:
                # plt.plot(face_geom[0,faces_cath_Bline],face_geom[1,faces_cath_Bline],'c',linewidth = line_width_boundary,markersize = marker_size)
                plt.plot(faces_cath_Bline_nodez,faces_cath_Bline_noder,color=cath_Bline_color,linestyle=cath_Bline_linestyle,linewidth = line_width_boundary,markersize = marker_size)
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
        ax.set_xlim(zs[0,0],zs[0,-1])
        ax.set_ylim(rs[0,-1],rs[-1,-1])
        if ax_ticks_flag == 2:
#            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
#            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
            ax.set_xticks(np.arange(0,17,3))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,2))
            ax.set_ylim(0,18.2)
            ax.set_xlim(0,15)
        elif ax_ticks_flag == 1:
            ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],1))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],2))
        
        if save_flag == 1:
            plt.savefig(path_out+"je_tBr_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            
       
        plt.figure('je_tB_r ref plume')
        ax = plt.gca()
        log_type         = 0
        auto             = 1
        min_val0         = -1.5
        max_val0         = 6.0
        cont             = 1
        lines            = 1
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 0 
        auto_lines_ticks = -1
        nticks_cbar      = 5
        nticks_lines     = 10
        cbar_ticks       = np.array([-50, 250, 550, 850, 1150, 1450, 1750, 2000])
#        lines_ticks      = np.array([-1E4,-5E3,-2E3,-1E3,-5E2,-1E2,1E2,5E2,1E3,5E3,1E4,2E4,3E4,4E4])*1E-4
#        lines_ticks      = np.sort(np.array([-50, -20,-10, -5, -1, -5E-2, 1E-2, 2E-2, 3E-2, 4E-2, 5E-2, 1,  5, 10, 20, 50]))
        lines_ticks      = np.sort(np.array([1E-2, 2E-2, 3E-2, 4E-2, 5E-2, 1,  5, 10, 20, 50]))
        lines_ticks      = np.sort(np.array([-2E-2, -1E-1, 1E-2, 2E-2, 1,  5, 10, 20, 50]))
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.1f}'
        lines_ticks_fmt   = '{%.1f}'
        lines_width       = line_width
        lines_ticks_color = grey
        lines_style       = '-'
        if interp_MFAM_picM_plot == 1:
#            var = je_theta_mp*Br_mp*1E-3 # mN/cm3 with je_theta in A/cm2 and Br in G
            var = je_theta_mp*Br_mp      # N/m3 with je_theta in A/cm2 and Br in G
            var[np.where(zs_mp < zs[0,int(xi_bottom)])] = np.nan
            [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs_mp, rs_mp, var, nodes_flag_mp, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
        else:
#            var = je_t_plot*Br_plot*1E-3 # mN/cm3 with je_theta in A/cm2 and Br in G
            var = je_t_plot*Br_plot      # N/m3 with je_theta in A/cm2 and Br in G 
            var[:,0:int(xi_bottom)] = np.nan
            [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, var, nodes_flag, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
#        ax.clabel(CS2, CS2.levels, fmt=lines_ticks_fmt, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        # Isolines ticks (exponent)
        # ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        # Plot the cathode magnetic line if given
        if plot_cath_Bline == 1:
            if elems_cath_Bline != 0:
                cath_z = elem_geom[0,elems_cath_Bline]
                cath_r = elem_geom[1,elems_cath_Bline]
                plt.plot(cath_z,cath_r,color=cath_Bline_color,linestyle=cath_Bline_linestyle,linewidth = line_width_boundary,markersize = marker_size)  
                # plt.plot(cath_Bline_z,cath_Bline_r,color=cath_Bline_color,linewidth = line_width_boundary,markersize = marker_size)
            if faces_cath_Bline != 0:
                # plt.plot(face_geom[0,faces_cath_Bline],face_geom[1,faces_cath_Bline],'c',linewidth = line_width_boundary,markersize = marker_size)
                plt.plot(faces_cath_Bline_nodez,faces_cath_Bline_noder,color=cath_Bline_color,linestyle=cath_Bline_linestyle,linewidth = line_width_boundary,markersize = marker_size)
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
        ax.set_xlim(zs[0,int(xi_bottom)],zs[0,-1])
        ax.set_ylim(rs[0,-1],rs[-1,-1])
        
        if ax_ticks_flag == 2:
#            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
#            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
            ax.set_xticks(np.arange(0,17,3))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,2))
            ax.set_ylim(0,18.2)
            ax.set_xlim(0,15)
        elif ax_ticks_flag == 1:
            ax.set_xticks(np.arange(zs[0,int(xi_bottom)],zs[0,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],1))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,-1],2))
        
        if save_flag == 1:
            plt.savefig(path_out+"je_tBr_ref_plume"+figs_format,bbox_inches='tight') 
            plt.close()
            
    if plot_nmp_ref == 1:
        plt.figure('Nmpi1 ref')
        ax = plt.gca()
        log_type         = 0
        auto             = 1
        min_val0         = 0.0
        max_val0         = 0.0
        cont             = 1
        lines            = 1
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = 0
        nticks_cbar      = 5
        nticks_lines     = 10
        cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
        lines_ticks      = np.array([0.5,1.0,5.0,10.0,20.0,40.0,80.0])
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.1f}'
        lines_ticks_fmt   = '{%.2f}'
        lines_width       = line_width
        lines_ticks_color = colors[k]
        lines_style       = '-'
        var = n_mp_i1_plot[0:-1,0:-1]
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size_isolines, zscells, rscells, var, nodes_flag[0:-1,0:-1], log_type, auto, 
                               min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                               nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                               lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)   
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
        
        if save_flag == 1:
            plt.savefig(path_out+"Nmpi1_ref"+figs_format,bbox_inches='tight') 
            plt.close()

        plt.figure('Nmpi2 ref')
        ax = plt.gca()
        log_type         = 0
        auto             = 1
        min_val0         = 0.0
        max_val0         = 0.0
        cont             = 1
        lines            = 1
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = 1
        nticks_cbar      = 5
        nticks_lines     = 10
        cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
        lines_ticks      = np.array([0.0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1,1.1,1.2])
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.1f}'
        lines_ticks_fmt   = '{%.2f}'
        lines_width       = line_width
        lines_ticks_color = colors[k]
        lines_style       = '-'
        var = n_mp_i2_plot[0:-1,0:-1]
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size_isolines, zscells, rscells, var, nodes_flag[0:-1,0:-1], log_type, auto, 
                               min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                               nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                               lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)   
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
        
        if save_flag == 1:
            plt.savefig(path_out+"Nmpi2_ref"+figs_format,bbox_inches='tight') 
            plt.close()
           
        plt.figure('Nmpn1 ref')
        ax = plt.gca()
        log_type         = 0
        auto             = 1
        min_val0         = 0.0
        max_val0         = 0.0
        cont             = 1
        lines            = 1
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = 1
        nticks_cbar      = 5
        nticks_lines     = 10
        cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
        lines_ticks      = np.array([0.0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1,1.1,1.2])
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.1f}'
        lines_ticks_fmt   = '{%.2f}'
        lines_width       = line_width
        lines_ticks_color = colors[k]
        lines_style       = '-'
        var = n_mp_n1_plot[0:-1,0:-1]
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size_isolines, zscells, rscells, var, nodes_flag[0:-1,0:-1], log_type, auto, 
                               min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                               nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                               lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)   
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
        
        if save_flag == 1:
            plt.savefig(path_out+"Nmpn1_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            
    if plot_freq_ref == 1:
        plt.figure('all nus average prof ref')
        plt.semilogy(zs[rind,:],nu_e_tot_eff_plot[rind,:], linestyle=linestyles[i], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker='s', color='k', markeredgecolor = 'k', label=r"$\nu_e^\ast$")
        plt.semilogy(zs[rind,:],nu_e_tot_plot[rind,:], linestyle=linestyles[i], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker='o', color='r', markeredgecolor = 'k', label=r"$\nu_e$")            
        plt.semilogy(zs[rind,:],nu_en_plot[rind,:], linestyle=linestyles[i], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker='^', color='g', markeredgecolor = 'k', label=r"$\nu_{en}^{el}$")            
        plt.semilogy(zs[rind,:],nu_ei1_plot[rind,:], linestyle=linestyles[i], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker='v', color='b', markeredgecolor = 'k', label=r"$\nu_{ei1}^{el}$")            
        plt.semilogy(zs[rind,:],nu_ei2_plot[rind,:], linestyle=linestyles[i], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker='<', color='c', markeredgecolor = 'k', label=r"$\nu_{ei2}^{el}$")            
        plt.semilogy(zs[rind,:],nu_i01_plot[rind,:], linestyle=linestyles[i], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker='>', color='m', markeredgecolor = 'k', label=r"$\nu_{en}^{ion01}$")            
        plt.semilogy(zs[rind,:],nu_i02_plot[rind,:], linestyle=linestyles[i], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker='D', color=orange, markeredgecolor = 'k', label=r"$\nu_{en}^{ion02}$")            
        plt.semilogy(zs[rind,:],nu_i12_plot[rind,:], linestyle=linestyles[i], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker='p', color=brown, markeredgecolor = 'k', label=r"$\nu_{ei1}^{ion12}$")            
        plt.figure('Hall_par prof ref')
        plt.semilogy(zs[rind,:],Hall_par_plot[rind,:], linestyle=linestyles[i], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[i], color=colors[i], markeredgecolor = 'k', label=labels[i])            
        plt.figure('Hall_par_eff prof ref')
        plt.plot(zs[rind,:],Hall_par_eff_plot[rind,:], linestyle=linestyles[i], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[i], color=colors[i], markeredgecolor = 'k', label=labels[i])            
        


        plt.figure('Hall_par ref')
        ax = plt.gca()
        log_type         = 1
        auto             = 1
        min_val0         = 1E1
        max_val0         = 1E6
        cont             = 1
        lines            = 1
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = -1
        nticks_cbar      = 5
        nticks_lines     = 10
        cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
        lines_ticks      = np.array([1E0,1E1,1E2,1E3,1E4,1E5])
        lines_ticks_loc  =  [(0.6,4.5),(1.5,4.25),(4.0,4.25),(3.2,5.5),(3.3,3.0),(5.0, 4.25),(9.5, 1.5)]
#        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.1f}'
        lines_ticks_fmt   = '{%.2f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, Hall_par_plot, nodes_flag, log_type, auto, 
                               min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                               nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                               lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
#        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        # ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, manual = lines_ticks_loc, fontsize=ticks_size_isolines, zorder = 1)
        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, manual = lines_ticks_loc, fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
        
        ax.set_xlim(zs[0,0],zs[0,-1])
        ax.set_ylim(rs[0,-1],rs[-1,-1])
        if ax_ticks_flag == 2:
#            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
#            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
            ax.set_xticks(np.arange(0,17,3))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,2))
            ax.set_ylim(0,18.2)
            ax.set_xlim(0,15)
        elif ax_ticks_flag == 1:
            ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,0],1))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,1))
        
        if save_flag == 1:
            plt.savefig(path_out+"Hall_par_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            

#        if np.any(Hall_par_plot) != np.any(Hall_par_eff_plot):
        plt.figure('Hall_par_eff ref')
        ax = plt.gca()
        log_type         = 0
        auto             = 1
        min_val0         = 10
        max_val0         = 110
        cont             = 1
        lines            = 1
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = -1
        nticks_cbar      = 5
        nticks_lines     = 10
        cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
        lines_ticks      = np.array([0.5,1,2,2.5,3,4,5,15,20,50,75,85,95,100,150,200,250,300,400,450,500])
#        lines_ticks      = np.array([1,5E0,1E1,15,20,30,35,39,40,50,60,70,80,90,100])
#        lines_ticks_loc  =  [(0.5,4.25),(1.0,4.25),(2.2,4.25),(7.9,3.5),(10.3, 1.1)]
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.0f}'
        lines_ticks_fmt   = '{%.0f}'
        lines_width       = line_width
        lines_ticks_color = grey
        lines_style       = '-'
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, Hall_par_eff_plot, nodes_flag, log_type, auto, 
                               min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                               nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                               lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
#        ax.clabel(CS2, CS2.levels, fmt=lines_ticks_fmt, inline=1, manual = lines_ticks_loc, fontsize=ticks_size_isolines, zorder = 1)
        # ax.clabel(CS2, CS2.levels, fmt=lines_ticks_fmt, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        ax.clabel(CS2, CS2.levels, fmt=lines_ticks_fmt, inline=1, fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
        
        ax.set_xlim(zs[0,0],zs[0,-1])
        ax.set_ylim(rs[0,-1],rs[-1,-1])
        if ax_ticks_flag == 2:
#            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
#            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
            ax.set_xticks(np.arange(0,17,3))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,2))
            ax.set_ylim(0,18.2)
            ax.set_xlim(0,15)
        elif ax_ticks_flag == 1:
            ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,0],1))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,1))
        
        if save_flag == 1:
            plt.savefig(path_out+"Hall_par_eff_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            
            
            
        plt.figure('Hall_par_eff ref plume')
        ax = plt.gca()
        log_type         = 0
        auto             = 1
        min_val0         = 10
        max_val0         = 110
        cont             = 1
        lines            = 1
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = -1
        nticks_cbar      = 5
        nticks_lines     = 10
        cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
        lines_ticks      = np.array([0.5,1,2,2.5,3,4,5,15,20,50,75,85,95,100,150,200,250,300,400,450,500])
#        lines_ticks      = np.array([1,5E0,1E1,15,20,30,35,39,40,50,60,70,80,90,100])
#        lines_ticks_loc  =  [(0.5,4.25),(1.0,4.25),(2.2,4.25),(7.9,3.5),(10.3, 1.1)]
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.0f}'
        lines_ticks_fmt   = '{%.0f}'
        lines_width       = line_width
        lines_ticks_color = grey
        lines_style       = '-'
        var = np.copy(Hall_par_eff_plot)
        var[:,0:int(xi_bottom)] = np.nan
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, var, nodes_flag, log_type, auto, 
                               min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                               nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                               lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
#        ax.clabel(CS2, CS2.levels, fmt=lines_ticks_fmt, inline=1, manual = lines_ticks_loc, fontsize=ticks_size_isolines, zorder = 1)
        # ax.clabel(CS2, CS2.levels, fmt=lines_ticks_fmt, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        ax.clabel(CS2, CS2.levels, fmt=lines_ticks_fmt, inline=1, fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
        
        ax.set_xlim(zs[0,int(xi_bottom)],zs[0,-1])
        ax.set_ylim(rs[0,-1],rs[-1,-1])
        if ax_ticks_flag == 2:
#            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
#            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
            ax.set_xticks(np.arange(0,17,3))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,2))
            ax.set_ylim(0,18.2)
            ax.set_xlim(0,15)
        elif ax_ticks_flag == 1:
            ax.set_xticks(np.arange(zs[0,int(xi_bottom)],zs[0,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,0],1))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,1))
        
        if save_flag == 1:
            plt.savefig(path_out+"Hall_par_eff_ref_plume"+figs_format,bbox_inches='tight') 
            plt.close()
            
        
        plt.figure('Hall_par_effect ref')
        ax = plt.gca()
        log_type         = 1
        auto             = 0
        min_val0         = 1E0
        max_val0         = 1E4
        cont             = 1
        lines            = 1
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = -1
        nticks_cbar      = 5
        nticks_lines     = 10
        cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
        lines_ticks      = np.array([10,20,50,75,85,95,100,150,200,300,400,500,600,800,1000])
#        lines_ticks      = np.array([1,5E0,1E1,15,20,30,35,39,40,50,60,70,80,90,100])
#        lines_ticks_loc  =  [(0.5,4.25),(1.0,4.25),(2.2,4.25),(7.9,3.5),(10.3, 1.1)]
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.0f}'
        lines_ticks_fmt   = '{%.0f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, Hall_par_effect_plot, nodes_flag, log_type, auto, 
                               min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                               nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                               lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
#        ax.clabel(CS2, CS2.levels, fmt=lines_ticks_fmt, inline=1, manual = lines_ticks_loc, fontsize=ticks_size_isolines, zorder = 1)
        # ax.clabel(CS2, CS2.levels, fmt=lines_ticks_fmt, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        ax.clabel(CS2, CS2.levels, fmt=lines_ticks_fmt, inline=1, fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
        
        ax.set_xlim(zs[0,0],zs[0,-1])
        ax.set_ylim(rs[0,-1],rs[-1,-1])
        if ax_ticks_flag == 2:
#            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
#            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
            ax.set_xticks(np.arange(0,17,3))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,2))
            ax.set_ylim(0,18.2)
            ax.set_xlim(0,15)
        elif ax_ticks_flag == 1:
            ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,0],1))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,1))
        
        if save_flag == 1:
            plt.savefig(path_out+"Hall_par_effect_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            
        
            
            
        plt.figure('Hall_par_effect ref plume')
        ax = plt.gca()
        log_type         = 1
        auto             = 0
        min_val0         = 1E0
        max_val0         = 1E4
        cont             = 1
        lines            = 1
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = -1
        nticks_cbar      = 5
        nticks_lines     = 10
        cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
        lines_ticks      = np.array([10,20,50,75,85,95,100,150,200,300,400,500,600,800,1000])
#        lines_ticks      = np.array([1,5E0,1E1,15,20,30,35,39,40,50,60,70,80,90,100])
#        lines_ticks_loc  =  [(0.5,4.25),(1.0,4.25),(2.2,4.25),(7.9,3.5),(10.3, 1.1)]
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.0f}'
        lines_ticks_fmt   = '{%.0f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
        var = np.copy(Hall_par_effect_plot)
        var[:,0:int(xi_bottom)] = np.nan
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, var, nodes_flag, log_type, auto, 
                               min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                               nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                               lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
#        ax.clabel(CS2, CS2.levels, fmt=lines_ticks_fmt, inline=1, manual = lines_ticks_loc, fontsize=ticks_size_isolines, zorder = 1)
        # ax.clabel(CS2, CS2.levels, fmt=lines_ticks_fmt, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        ax.clabel(CS2, CS2.levels, fmt=lines_ticks_fmt, inline=1, fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
        
        ax.set_xlim(zs[0,int(xi_bottom)],zs[0,-1])
        ax.set_ylim(rs[0,-1],rs[-1,-1])
        if ax_ticks_flag == 2:
#            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
#            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
            ax.set_xticks(np.arange(0,17,3))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,2))
            ax.set_ylim(0,18.2)
            ax.set_xlim(0,15)
        elif ax_ticks_flag == 1:
            ax.set_xticks(np.arange(zs[0,int(xi_bottom)],zs[0,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,0],1))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,1))
        
        if save_flag == 1:
            plt.savefig(path_out+"Hall_par_effect_ref_plume"+figs_format,bbox_inches='tight') 
            plt.close()
        
        plt.figure('nu_e_tot ref')
        ax = plt.gca()
        log_type         = 1
        auto             = 0
        min_val0         = 1E4
        max_val0         = 1E7
        cont             = 1
        lines            = 1
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = -1
        nticks_cbar      = 5
        nticks_lines     = 10
        cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
        lines_ticks      = np.array([2E3,5E3,1E4,5E4,1E5,3E5,5E5,1E6,5E6,1E7,5E7,1E8])
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.1f}'
        lines_ticks_fmt   = '{%.2f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, nu_e_tot_plot, nodes_flag, log_type, auto, 
                               min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                               nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                               lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
        # ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
            
        ax.set_xlim(zs[0,0],zs[0,-1])
        ax.set_ylim(rs[0,-1],rs[-1,-1])
        if ax_ticks_flag == 2:
#            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
#            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
            ax.set_xticks(np.arange(0,17,3))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,2))
            ax.set_ylim(0,18.2)
            ax.set_xlim(0,15)
        elif ax_ticks_flag == 1:
            ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,0],1))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,1))
        
        if save_flag == 1:
            plt.savefig(path_out+"nu_e_tot_ref"+figs_format,bbox_inches='tight') 
            plt.close()
    
#        if np.any(nu_e_tot_plot) != np.any(nu_e_tot_eff_plot):
        plt.figure('nu_e_tot_eff ref')
        ax = plt.gca()
        log_type         = 1
        auto             = 0
        min_val0         = 1E6
        max_val0         = 1E8
        cont             = 1
        lines            = 1
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = -1
        nticks_cbar      = 5
        nticks_lines     = 10
        cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
        lines_ticks      = np.array([2E3,5E3,1E4,5E4,1E5,5E5,1E6,5E6,1E7,5E7,1E8])
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.1f}'
        lines_ticks_fmt   = '{%.4f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, nu_e_tot_eff_plot, nodes_flag, log_type, auto, 
                               min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                               nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                               lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
        # ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
                
        ax.set_xlim(zs[0,0],zs[0,-1])
        ax.set_ylim(rs[0,-1],rs[-1,-1])
        if ax_ticks_flag == 2:
#            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
#            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
            ax.set_xticks(np.arange(0,17,3))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,2))
            ax.set_ylim(0,18.2)
            ax.set_xlim(0,15)
        elif ax_ticks_flag == 1:
            ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,0],1))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,1))
    
        if save_flag == 1:
            plt.savefig(path_out+"nu_e_tot_eff_ref"+figs_format,bbox_inches='tight') 
            plt.close()
        
    
        plt.figure('nu_en ref')
        ax = plt.gca()
        log_type         = 1
        auto             = 1
        min_val0         = 0.0
        max_val0         = 0.0
        cont             = 1
        lines            = 1
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = -1
        nticks_cbar      = 5
        nticks_lines     = 10
        cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
        lines_ticks      = np.array([5E2,1E3,5E3,1E4,5E4,1E5,5E5,1E6,5E6,1E7])
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.1f}'
        lines_ticks_fmt   = '{%.4f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, nu_en_plot, nodes_flag, log_type, auto, 
                               min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                               nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                               lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
        # ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
            
        ax.set_xlim(zs[0,0],zs[0,-1])
        ax.set_ylim(rs[0,-1],rs[-1,-1])
        if ax_ticks_flag == 2:
#            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
#            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
            ax.set_xticks(np.arange(0,17,3))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,2))
            ax.set_ylim(0,18.2)
            ax.set_xlim(0,15)
        elif ax_ticks_flag == 1:
            ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,0],1))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,1))    
    
        if save_flag == 1:
            plt.savefig(path_out+"nu_en_ref"+figs_format,bbox_inches='tight') 
            plt.close()
        
    
        plt.figure('nu_ei1 ref')
        ax = plt.gca()
        log_type         = 1
        auto             = 1
        min_val0         = 0.0
        max_val0         = 0.0
        cont             = 1
        lines            = 1
        cont_nlevels     = 500
        auto_cbar_ticks  = 1 
        auto_lines_ticks = -1
        nticks_cbar      = 5
        nticks_lines     = 10
        cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
        lines_ticks      = np.array([5E2,1E3,5E3,1E4,5E4,1E5,5E5,1E6,5E6,1E7,5E7])
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.1f}'
        lines_ticks_fmt   = '{%.4f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, nu_ei1_plot, nodes_flag, log_type, auto, 
                               min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                               nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                               lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
        # ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)         
            
        ax.set_xlim(zs[0,0],zs[0,-1])
        ax.set_ylim(rs[0,-1],rs[-1,-1])
        if ax_ticks_flag == 2:
#            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
#            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
            ax.set_xticks(np.arange(0,17,3))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,2))
            ax.set_ylim(0,18.2)
            ax.set_xlim(0,15)
        elif ax_ticks_flag == 1:
            ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,0],1))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,1))       
    
        if save_flag == 1:
            plt.savefig(path_out+"nu_ei1_ref"+figs_format,bbox_inches='tight') 
            plt.close()
        
    
        plt.figure('nu_ei2 ref')
        ax = plt.gca()
        log_type         = 1
        auto             = 1
        min_val0         = 0.0
        max_val0         = 0.0
        cont             = 1
        lines            = 1
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = -1
        nticks_cbar      = 5
        nticks_lines     = 10
        cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
        lines_ticks      = np.array([5E2,1E3,5E3,1E4,5E4,1E5,5E5,1E6,5E6,1E7,5E7])
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.1f}'
        lines_ticks_fmt   = '{%.4f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, nu_ei2_plot, nodes_flag, log_type, auto, 
                               min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                               nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                               lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
        # ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
            
        ax.set_xlim(zs[0,0],zs[0,-1])
        ax.set_ylim(rs[0,-1],rs[-1,-1])
        if ax_ticks_flag == 2:
#            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
#            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
            ax.set_xticks(np.arange(0,17,3))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,2))
            ax.set_ylim(0,18.2)
            ax.set_xlim(0,15)
        elif ax_ticks_flag == 1:
            ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,0],1))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,1))       
    
        if save_flag == 1:
            plt.savefig(path_out+"nu_ei2_ref"+figs_format,bbox_inches='tight') 
            plt.close()
        
    
        plt.figure('nu_i01 ref')
        ax = plt.gca()
        log_type         = 1
        auto             = 0
        min_val0         = 1E-4
        max_val0         = 1E5
        cont             = 1
        lines            = 1
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = -1
        nticks_cbar      = 5
        nticks_lines     = 10
        cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
        lines_ticks      = np.array([1E0,5E2,1E3,5E3,1E4,5E4,1E5,5E5,1E6])
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.1f}'
        lines_ticks_fmt   = '{%.4f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, nu_i01_plot, nodes_flag, log_type, auto, 
                               min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                               nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                               lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
        # ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
            
        ax.set_xlim(zs[0,0],zs[0,-1])
        ax.set_ylim(rs[0,-1],rs[-1,-1])
        if ax_ticks_flag == 2:
#            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
#            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
            ax.set_xticks(np.arange(0,17,3))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,2))
            ax.set_ylim(0,18.2)
            ax.set_xlim(0,15)
        elif ax_ticks_flag == 1:
            ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,0],1))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,1))       
    
        if save_flag == 1:
            plt.savefig(path_out+"nu_i01_ref"+figs_format,bbox_inches='tight') 
            plt.close()
        
    
        plt.figure('nu_i02 ref')
        ax = plt.gca()
        log_type         = 1
        auto             = 1
        min_val0         = 0.0
        max_val0         = 0.0
        cont             = 1
        lines            = 1
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = -1
        nticks_cbar      = 5
        nticks_lines     = 10
        cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
        lines_ticks      = np.array([5E1,8E1,1E2,2E2,5E2,1E3,5E3,1E4,5E4])
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.1f}'
        lines_ticks_fmt   = '{%.4f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, nu_i02_plot, nodes_flag, log_type, auto, 
                               min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                               nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                               lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
        # ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
    
        ax.set_xlim(zs[0,0],zs[0,-1])
        ax.set_ylim(rs[0,-1],rs[-1,-1])
        if ax_ticks_flag == 2:
#            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
#            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
            ax.set_xticks(np.arange(0,17,3))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,2))
            ax.set_ylim(0,18.2)
            ax.set_xlim(0,15)
        elif ax_ticks_flag == 1:
            ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,0],1))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,1))   
    
        if save_flag == 1:
            plt.savefig(path_out+"nu_i02_ref"+figs_format,bbox_inches='tight') 
            plt.close()
        
    
        plt.figure('nu_i12 ref')
        ax = plt.gca()
        log_type         = 1
        auto             = 1
        min_val0         = 0.0
        max_val0         = 0.0
        cont             = 1
        lines            = 1
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = -1
        nticks_cbar      = 5
        nticks_lines     = 10
        cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
        lines_ticks      = np.array([1E0,5E2,1E3,5E3,1E4])
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.1f}'
        lines_ticks_fmt   = '{%.4f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, nu_i12_plot, nodes_flag, log_type, auto, 
                               min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                               nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                               lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
        # ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
            
        ax.set_xlim(zs[0,0],zs[0,-1])
        ax.set_ylim(rs[0,-1],rs[-1,-1])
        if ax_ticks_flag == 2:
#            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
#            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
            ax.set_xticks(np.arange(0,17,3))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,2))
            ax.set_ylim(0,18.2)
            ax.set_xlim(0,15)
        elif ax_ticks_flag == 1:
            ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,0],1))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,1))   

        if save_flag == 1:
            plt.savefig(path_out+"nu_i12_ref"+figs_format,bbox_inches='tight') 
            plt.close()

        plt.figure('nu_ei_el_tot ref')
        ax = plt.gca()
        log_type         = 1
        auto             = 1
        min_val0         = 0.0
        max_val0         = 0.0
        cont             = 1
        lines            = 1
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = -1
        nticks_cbar      = 5
        nticks_lines     = 10
        cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
        lines_ticks      = np.array([5E2,1E3,5E3,1E4,5E4,1E5,5E5,1E6,5E6,1E7,5E7])
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.1f}'
        lines_ticks_fmt   = '{%.4f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, nu_ei_el_tot_plot, nodes_flag, log_type, auto, 
                               min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                               nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                               lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
        # ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
            
        ax.set_xlim(zs[0,0],zs[0,-1])
        ax.set_ylim(rs[0,-1],rs[-1,-1])
        if ax_ticks_flag == 2:
#            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
#            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
            ax.set_xticks(np.arange(0,17,3))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,2))
            ax.set_ylim(0,18.2)
            ax.set_xlim(0,15)
        elif ax_ticks_flag == 1:
            ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,0],1))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,1))      
        
        if save_flag == 1:
            plt.savefig(path_out+"nu_ei_el_tot_ref"+figs_format,bbox_inches='tight') 
            plt.close()

        plt.figure('nu_ion_tot ref')
        ax = plt.gca()
        log_type         = 1
        auto             = 1
        min_val0         = 0.0
        max_val0         = 0.0
        cont             = 1
        lines            = 1
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = -1
        nticks_cbar      = 5
        nticks_lines     = 10
        cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
        lines_ticks      = np.array([5E1,8E1,1E2,2E2,5E2,1E3,5E3,1E4,5E4])
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.1f}'
        lines_ticks_fmt   = '{%.4f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, nu_ion_tot_plot, nodes_flag, log_type, auto, 
                               min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                               nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                               lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
        # ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
    
        ax.set_xlim(zs[0,0],zs[0,-1])
        ax.set_ylim(rs[0,-1],rs[-1,-1])
        if ax_ticks_flag == 2:
#            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
#            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
            ax.set_xticks(np.arange(0,17,3))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,2))
            ax.set_ylim(0,18.2)
            ax.set_xlim(0,15)
        elif ax_ticks_flag == 1:
            ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,0],1))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,1))  
               
        if save_flag == 1:
            plt.savefig(path_out+"nu_ion_tot_ref"+figs_format,bbox_inches='tight') 
            plt.close()  
                
        plt.figure('ndot_e ref')
        ax = plt.gca()
        log_type         = 1
        auto             = 1
        min_val0         = 1e1
        max_val0         = 1e22
        cont             = 1
        lines            = 1
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = -1
        nticks_cbar      = 5
        nticks_lines     = 10
        cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
        lines_ticks      = np.array([1E0,5E2,1E3,5E3,1E4])
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.1f}'
        lines_ticks_fmt   = '{%.4f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
        var = ndot_ion01_n1_plot[0:-1,0:-1] + ndot_ion01_n2_plot[0:-1,0:-1] + ndot_ion01_n3_plot[0:-1,0:-1] + 2.0*ndot_ion02_n1_plot[0:-1,0:-1] + 2.0*ndot_ion02_n2_plot[0:-1,0:-1] + 2.0*ndot_ion02_n3_plot[0:-1,0:-1] + ndot_ion12_i1_plot[0:-1,0:-1] + ndot_ion12_i3_plot[0:-1,0:-1]
        var[np.where(var < np.nanmax(var)/1E7)] = np.nanmax(var)/1E7
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zscells, rscells, var, nodes_flag[0:-1,0:-1], log_type, auto, 
                               min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                               nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                               lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
        # ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)    
            
        ax.set_xlim(zs[0,0],zs[0,-1])
        ax.set_ylim(rs[0,-1],rs[-1,-1])
        if ax_ticks_flag == 2:
#            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
#            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
            ax.set_xticks(np.arange(0,17,3))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,2))
            ax.set_ylim(0,18.2)
            ax.set_xlim(0,15)
        elif ax_ticks_flag == 1:
            ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,0],1))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,1))        
        
        if save_flag == 1:
            plt.savefig(path_out+"ndot_e_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            
        plt.figure('ndot_CEX01 ref')
        ax = plt.gca()
        log_type         = 1
        auto             = 1
        min_val0         = 1e13
        max_val0         = 1e19
        cont             = 1
        lines            = 1
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = -1
        nticks_cbar      = 5
        nticks_lines     = 10
        cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
        lines_ticks      = np.array([1E0,5E2,1E3,5E3,1E4])
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.1f}'
        lines_ticks_fmt   = '{%.4f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
        var = ndot_CEX01_i3_plot[0:-1,0:-1]
        var[np.where(var < np.nanmax(var)/1E7)] = np.nanmax(var)/1E7
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zscells, rscells, var, nodes_flag[0:-1,0:-1], log_type, auto, 
                                min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
        # ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
        
        ax.set_xlim(zs[0,0],zs[0,-1])
        ax.set_ylim(rs[0,-1],rs[-1,-1])
        if ax_ticks_flag == 2:
#            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
#            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
            ax.set_xticks(np.arange(0,17,3))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,2))
            ax.set_ylim(0,18.2)
            ax.set_xlim(0,15)
        elif ax_ticks_flag == 1:
            ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,0],1))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,1))   
        
        if save_flag == 1:
            plt.savefig(path_out+"ndot_CEX01_i3_ref"+figs_format,bbox_inches='tight') 
            plt.close()
        
        plt.figure('ndot_CEX02 ref')
        ax = plt.gca()
        log_type         = 1
        auto             = 1
        min_val0         = 1e13
        max_val0         = 1e19
        cont             = 1
        lines            = 1
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = -1
        nticks_cbar      = 5
        nticks_lines     = 10
        cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
        lines_ticks      = np.array([1E0,5E2,1E3,5E3,1E4])
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.1f}'
        lines_ticks_fmt   = '{%.4f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
        var = ndot_CEX02_i4_plot[0:-1,0:-1]
        var[np.where(var < np.nanmax(var)/1E7)] = np.nanmax(var)/1E7
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zscells, rscells, var, nodes_flag[0:-1,0:-1], log_type, auto, 
                                min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
        # ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
    
        ax.set_xlim(zs[0,0],zs[0,-1])
        ax.set_ylim(rs[0,-1],rs[-1,-1])
        if ax_ticks_flag == 2:
#            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
#            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
            ax.set_xticks(np.arange(0,17,3))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,2))
            ax.set_ylim(0,18.2)
            ax.set_xlim(0,15)
        elif ax_ticks_flag == 1:
            ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,0],1))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,1))   
        
        if save_flag == 1:
            plt.savefig(path_out+"ndot_CEX02_i4_ref"+figs_format,bbox_inches='tight') 
            plt.close()

    if plot_anode_ref  == 1:
        plt.figure(r'phi_anode prof ref')
        plt.plot(zs[rind_anode1,0:zind_anode],phi_plot[rind_anode1,0:zind_anode], linestyle='-', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker='', color='k', markeredgecolor = 'k', label=r"$r_p = 4.63$")
        plt.plot(zs[rind_anode2,0:zind_anode],phi_plot[rind_anode2,0:zind_anode], linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker='', color='r', markeredgecolor = 'k', label=r"TCL")
        plt.figure(r'Ez_anode prof ref')
        plt.plot(zs[rind_anode1,0:zind_anode],Ez_plot_anode[rind_anode1,0:zind_anode], linestyle='-', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker='', color='k', markeredgecolor = 'k', label=r"$r_p = 4.63$")
        plt.plot(zs[rind_anode2,0:zind_anode],Ez_plot_anode[rind_anode2,0:zind_anode], linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker='', color='r', markeredgecolor = 'k', label=r"TCL")
        plt.figure('je_z_anode prof ref')
        plt.plot(zs[rind_anode1,0:zind_anode],-je_z_plot_anode[rind_anode1,0:zind_anode], linestyle='-', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker='', color='k', markeredgecolor = 'k', label=r"$r_p = 4.63$")
        plt.plot(zs[rind_anode2,0:zind_anode],-je_z_plot_anode[rind_anode2,0:zind_anode], linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker='', color='r', markeredgecolor = 'k', label=r"TCL")
        plt.figure('ji_z_anode prof ref')
        plt.plot(zs[rind_anode1,0:zind_anode],ji_z_plot_anode[rind_anode1,0:zind_anode], linestyle='-', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker='', color='k', markeredgecolor = 'k', label=r"$r_p = 4.63$")
        plt.plot(zs[rind_anode2,0:zind_anode],ji_z_plot_anode[rind_anode2,0:zind_anode], linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker='', color='r', markeredgecolor = 'k', label=r"TCL")
        plt.figure('n_anode prof ref')
        plt.semilogy(zs[rind_anode1,0:zind_anode],ne_plot[rind_anode1,0:zind_anode], linestyle='-', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker='', color='k', markeredgecolor = 'k', label=r"$r_p = 4.63$")
        plt.semilogy(zs[rind_anode2,0:zind_anode],ne_plot[rind_anode2,0:zind_anode], linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker='', color='r', markeredgecolor = 'k', label=r"TCL")
        plt.figure(r'Te_anode prof ref')
        plt.plot(zs[rind_anode1,0:zind_anode],Te_plot[rind_anode1,0:zind_anode], linestyle='-', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker='', color='k', markeredgecolor = 'k', label=r"$r_p = 4.63$")
        plt.plot(zs[rind_anode2,0:zind_anode],Te_plot[rind_anode2,0:zind_anode], linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker='', color='r', markeredgecolor = 'k', label=r"TCL")

    if plot_err_interp_ref == 1:
        plt.figure(r'err_interp_n prof ref')
        plt.semilogy(zs[rind,:],err_interp_n_plot[rind,:], linestyle=linestyles[i], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[i], color=colors[i], markeredgecolor = 'k', label=labels[i])

        plt.figure('err_interp_n ref')
        ax = plt.gca()
        log_type         = 1
        auto             = 0
        min_val0         = 1E-4
        max_val0         = 1E0
        cont             = 1
        lines            = 1
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = -1
        nticks_cbar      = 5
        nticks_lines     = 10
        cbar_ticks       = np.array([0.0,5E-4,1E-3,5E-3,1E-2,5E-2,1E-1,5E-1])
        lines_ticks      = np.array([0.0,5E-4,1E-3,5E-3,1E-2,5E-2,1E-1,5E-1])
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.1f}'
        lines_ticks_fmt   = '{%.4f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, err_interp_n_plot, nodes_flag, log_type, auto, 
                               min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                               nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                               lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
        # ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)

        ax.set_xlim(zs[0,0],zs[0,-1])
        ax.set_ylim(rs[0,-1],rs[-1,-1])
        if ax_ticks_flag == 2:
#            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
#            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
            ax.set_xticks(np.arange(0,17,3))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,2))
            ax.set_ylim(0,18.2)
            ax.set_xlim(0,15)
        elif ax_ticks_flag == 1:
            ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,0],1))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,1))  
           
        if save_flag == 1:
            plt.savefig(path_out+"err_interp_n_ref"+figs_format,bbox_inches='tight') 
            plt.close()
    
    if plot_lambdaD_ref == 1:
        plt.figure(r'lambdaD prof ref')
        plt.plot(zs[rind,:],lambdaD_plot[rind,:], linestyle=linestyles[i], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[i], color=colors[i], markeredgecolor = 'k', label=labels[i])   
        
        plt.figure('lambdaD ref')
        ax = plt.gca()
        log_type         = 1
        auto             = 1
        min_val0         = 0.0
        max_val0         = 0.0
        cont             = 1
        lines            = 1
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = -1
        nticks_cbar      = 5
        nticks_lines     = 10
        cbar_ticks       = np.array([0.0,5E-4,1E-3,5E-3,1E-2,5E-2,1E-1,5E-1])
        lines_ticks      = np.array([0.0,5E-4,1E-3,5E-3,1E-2,5E-2,1E-1,5E-1])
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.1f}'
        lines_ticks_fmt   = '{%.4f}'
        lines_width       = line_width
        lines_ticks_color = 'k'
        lines_style       = '-'
        [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size, zs, rs, lambdaD_plot, nodes_flag, log_type, auto, 
                               min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                               nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                               lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
        # ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)

        ax.set_xlim(zs[0,0],zs[0,-1])
        ax.set_ylim(rs[0,-1],rs[-1,-1])
        if ax_ticks_flag == 2:
#            ax.set_xticks(np.arange(0,zs[0,-1]+1,2))
#            ax.set_yticks(np.arange(0,rs[-1,0]+1,2))
            ax.set_xticks(np.arange(0,17,3))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,2))
            ax.set_ylim(0,18.2)
            ax.set_xlim(0,15)
        elif ax_ticks_flag == 1:
            ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
#            ax.set_yticks(np.arange(0,rs[-1,0],1))
            ax.set_yticks(np.arange(0,rs[-1,-1]+1,1))  

        if save_flag == 1:
            plt.savefig(path_out+"lambdaD_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            
    if plot_fsplit_ref == 1:        
        plt.figure('fsplit adv ref')
        ax = plt.gca()
        log_type         = 0
        auto             = 0
        min_val0         = -20.0
        max_val0         = 5.0
        cont             = 1
        lines            = 0
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = 1
        nticks_cbar      = 5
        nticks_lines     = 10
        cbar_ticks       = np.array([0.0,5E-4,1E-3,5E-3,1E-2,5E-2,1E-1,5E-1])
        lines_ticks      = np.array([0.0,5E-4,1E-3,5E-3,1E-2,5E-2,1E-1,5E-1])
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.1f}'
        lines_ticks_fmt   = '{%.1f}'
        lines_width       = line_width_fsplit
        lines_ticks_color = 'k'
        lines_style       = '-'
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, f_split_adv_plot, nodes_flag, log_type, auto, 
                               min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                               nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                               lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
#        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size_fsplit)
            
            
        plt.figure('fsplit qperp ref')
        ax = plt.gca()
        log_type         = 0
        auto             = 0
        min_val0         = -5.0
        max_val0         = 20.0
        cont             = 1
        lines            = 0
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = 1
        nticks_cbar      = 5
        nticks_lines     = 10
        cbar_ticks       = np.array([0.0,5E-4,1E-3,5E-3,1E-2,5E-2,1E-1,5E-1])
        lines_ticks      = np.array([0.0,5E-4,1E-3,5E-3,1E-2,5E-2,1E-1,5E-1])
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.1f}'
        lines_ticks_fmt   = '{%.4f}'
        lines_width       = line_width_fsplit
        lines_ticks_color = 'k'
        lines_style       = '-'
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, f_split_qperp_plot, nodes_flag, log_type, auto, 
                               min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                               nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                               lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
#        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size_fsplit)
            
            
        plt.figure('fsplit qpara ref')
        ax = plt.gca()
        log_type         = 0
        auto             = 0
        min_val0         = -50.0
        max_val0         = 110.0
        cont             = 1
        lines            = 0
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = 1
        nticks_cbar      = 5
        nticks_lines     = 10
        cbar_ticks       = np.array([0.0,5E-4,1E-3,5E-3,1E-2,5E-2,1E-1,5E-1])
        lines_ticks      = np.array([0.0,5E-4,1E-3,5E-3,1E-2,5E-2,1E-1,5E-1])
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.1f}'
        lines_ticks_fmt   = '{%.4f}'
        lines_width       = line_width_fsplit
        lines_ticks_color = 'k'
        lines_style       = '-'
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, f_split_qpara_plot, nodes_flag, log_type, auto, 
                               min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                               nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                               lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
#        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size_fsplit)
            
            
        plt.figure('fsplit qb ref')
        ax = plt.gca()
        log_type         = 0
        auto             = 0
        min_val0         = -180.0
        max_val0         = 0.0
        cont             = 1
        lines            = 0
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = 1
        nticks_cbar      = 5
        nticks_lines     = 10
        cbar_ticks       = np.array([0.0,5E-4,1E-3,5E-3,1E-2,5E-2,1E-1,5E-1])
        lines_ticks      = np.array([0.0,5E-4,1E-3,5E-3,1E-2,5E-2,1E-1,5E-1])
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.1f}'
        lines_ticks_fmt   = '{%.4f}'
        lines_width       = line_width_fsplit
        lines_ticks_color = 'k'
        lines_style       = '-'
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, f_split_qb_plot, nodes_flag, log_type, auto, 
                               min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                               nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                               lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
#        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size_fsplit)
            
            
        plt.figure('fsplit Pperp ref')
        ax = plt.gca()
        log_type         = 0
        auto             = 0
        min_val0         = -4.0
        max_val0         = 4.0
        cont             = 1
        lines            = 0
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = 1
        nticks_cbar      = 5
        nticks_lines     = 10
        cbar_ticks       = np.array([0.0,5E-4,1E-3,5E-3,1E-2,5E-2,1E-1,5E-1])
        lines_ticks      = np.array([0.0,5E-4,1E-3,5E-3,1E-2,5E-2,1E-1,5E-1])
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.1f}'
        lines_ticks_fmt   = '{%.4f}'
        lines_width       = line_width_fsplit
        lines_ticks_color = 'k'
        lines_style       = '-'
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, f_split_Pperp_plot, nodes_flag, log_type, auto, 
                               min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                               nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                               lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
#        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size_fsplit)
        
        
        plt.figure('fsplit Ppara ref')
        ax = plt.gca()
        log_type         = 0
        auto             = 0
        min_val0         = -1.0
        max_val0         = 30.0
        cont             = 1
        lines            = 0
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = 1
        nticks_cbar      = 5
        nticks_lines     = 10
        cbar_ticks       = np.array([0.0,5E-4,1E-3,5E-3,1E-2,5E-2,1E-1,5E-1])
        lines_ticks      = np.array([0.0,5E-4,1E-3,5E-3,1E-2,5E-2,1E-1,5E-1])
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.1f}'
        lines_ticks_fmt   = '{%.4f}'
        lines_width       = line_width_fsplit
        lines_ticks_color = 'k'
        lines_style       = '-'
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, f_split_Ppara_plot, nodes_flag, log_type, auto, 
                               min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                               nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                               lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
#        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size_fsplit)
        
        
        plt.figure('fsplit ecterm ref')
        ax = plt.gca()
        log_type         = 0
        auto             = 0
        min_val0         = -5.0
        max_val0         = 0.0
        cont             = 1
        lines            = 0
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = 1
        nticks_cbar      = 5
        nticks_lines     = 10
        cbar_ticks       = np.array([0.0,5E-4,1E-3,5E-3,1E-2,5E-2,1E-1,5E-1])
        lines_ticks      = np.array([0.0,5E-4,1E-3,5E-3,1E-2,5E-2,1E-1,5E-1])
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.1f}'
        lines_ticks_fmt   = '{%.4f}'
        lines_width       = line_width_fsplit
        lines_ticks_color = 'k'
        lines_style       = '-'
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, f_split_ecterm_plot, nodes_flag, log_type, auto, 
                               min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                               nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                               lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
#        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size_fsplit)
        
        
        plt.figure('fsplit inel ref')
        ax = plt.gca()
        log_type         = 0
        auto             = 0
        min_val0         = -2.0
        max_val0         = 0.0
        cont             = 1
        lines            = 0
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = 1
        nticks_cbar      = 5
        nticks_lines     = 10
        cbar_ticks       = np.array([0.0,5E-4,1E-3,5E-3,1E-2,5E-2,1E-1,5E-1])
        lines_ticks      = np.array([0.0,5E-4,1E-3,5E-3,1E-2,5E-2,1E-1,5E-1])
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.1f}'
        lines_ticks_fmt   = '{%.4f}'
        lines_width       = line_width_fsplit
        lines_ticks_color = 'k'
        lines_style       = '-'
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, f_split_inel_plot, nodes_flag, log_type, auto, 
                               min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                               nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                               lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
#        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size_fsplit)
            
            
        plt.figure('fsplit q ref')
        ax = plt.gca()
        log_type         = 0
        auto             = 0
        min_val0         = -60.0
        max_val0         = 15.0
        cont             = 1
        lines            = 0
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = 1
        nticks_cbar      = 5
        nticks_lines     = 10
        cbar_ticks       = np.array([0.0,5E-4,1E-3,5E-3,1E-2,5E-2,1E-1,5E-1])
        lines_ticks      = np.array([0.0,5E-4,1E-3,5E-3,1E-2,5E-2,1E-1,5E-1])
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.1f}'
        lines_ticks_fmt   = '{%.4f}'
        lines_width       = line_width_fsplit
        lines_ticks_color = 'k'
        lines_style       = '-'
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, f_split_q_plot, nodes_flag, log_type, auto, 
                               min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                               nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                               lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
#        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size_fsplit)


        plt.figure('fsplit eflux ref')
        ax = plt.gca()
        log_type         = 0
        auto             = 0
        min_val0         = -90.0
        max_val0         = 15.0
        cont             = 1
        lines            = 0
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = 1
        nticks_cbar      = 5
        nticks_lines     = 10
        cbar_ticks       = np.array([0.0,5E-4,1E-3,5E-3,1E-2,5E-2,1E-1,5E-1])
        lines_ticks      = np.array([0.0,5E-4,1E-3,5E-3,1E-2,5E-2,1E-1,5E-1])
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.1f}'
        lines_ticks_fmt   = '{%.4f}'
        lines_width       = line_width_fsplit
        lines_ticks_color = 'k'
        lines_style       = '-'
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, f_split_eflux_plot, nodes_flag, log_type, auto, 
                               min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                               nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                               lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
#        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size_fsplit)


        plt.figure('fsplit P ref')
        ax = plt.gca()
        log_type         = 0
        auto             = 0
        min_val0         = -5.0
        max_val0         = 30.0
        cont             = 1
        lines            = 0
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = 1
        nticks_cbar      = 5
        nticks_lines     = 10
        cbar_ticks       = np.array([0.0,5E-4,1E-3,5E-3,1E-2,5E-2,1E-1,5E-1])
        lines_ticks      = np.array([0.0,5E-4,1E-3,5E-3,1E-2,5E-2,1E-1,5E-1])
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.1f}'
        lines_ticks_fmt   = '{%.4f}'
        lines_width       = line_width_fsplit
        lines_ticks_color = 'k'
        lines_style       = '-'
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, f_split_P_plot, nodes_flag, log_type, auto, 
                               min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                               nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                               lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
#        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size_fsplit)
            
        
        plt.figure('fsplit LHS ref')
        ax = plt.gca()
        log_type         = 0
        auto             = 0
        min_val0         = -60.0
        max_val0         = 15.0
        cont             = 1
        lines            = 0
        cont_nlevels     = nlevels_2Dcontour
        auto_cbar_ticks  = 1 
        auto_lines_ticks = 1
        nticks_cbar      = 5
        nticks_lines     = 10
        cbar_ticks       = np.array([0.0,5E-4,1E-3,5E-3,1E-2,5E-2,1E-1,5E-1])
        lines_ticks      = np.array([0.0,5E-4,1E-3,5E-3,1E-2,5E-2,1E-1,5E-1])
        lines_ticks_loc  = 'default'
        cbar_ticks_fmt    = '{%.1f}'
        lines_ticks_fmt   = '{%.4f}'
        lines_width       = line_width_fsplit
        lines_ticks_color = 'k'
        lines_style       = '-'
        [CS,CS2] = contour_2D (ax,cont_xlabel, cont_ylabel, font_size, ticks_size, zs, rs, f_split_LHS_plot, nodes_flag, log_type, auto, 
                               min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                               nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                               lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
#        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
        plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
        plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
        if plot_cath_contours == 1:
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size_fsplit)
        
        
            

    
    # Add legend and extra lines to profiles plots
    if plot_fields_ref == 1:
        plt.figure(r'phi prof ref')
        plt.legend(fontsize = font_size_legend,loc=1) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        plt.plot(zs[rind,int(xi_top)]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
#        plt.plot(zs[rind,:],np.zeros(np.shape(zs[rind,:])), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        plt.figure(r'E prof ref')
        plt.legend(fontsize = font_size_legend,loc=1) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        plt.plot(zs[rind,int(xi_top)]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
#        plt.plot(zs[rind,:],np.zeros(np.shape(zs[rind,:])), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        plt.figure(r'Ez prof ref')    
        plt.legend(fontsize = font_size_legend,loc=1) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        plt.plot(zs[rind,int(xi_top)]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
#        plt.plot(zs[rind,:],np.zeros(np.shape(zs[rind,:])), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
    if plot_dens_ref == 1:
        plt.figure('n prof ref')
        plt.legend(fontsize = font_size_legend,loc=1)
        ax = plt.gca()
        ylims = ax.get_ylim()
        plt.plot(zs[rind,int(xi_top)]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        plt.figure('ni1 prof ref')
        plt.legend(fontsize = font_size_legend,loc=1)
        ax = plt.gca()
        ylims = ax.get_ylim()
        plt.plot(zs[rind,int(xi_top)]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        plt.figure('ni2 prof ref')
        plt.legend(fontsize = font_size_legend,loc=4)
        ax = plt.gca()
        ylims = ax.get_ylim()
        plt.plot(zs[rind,int(xi_top)]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")        
        plt.figure('ratio_ni1_ni2 prof ref')
        plt.legend(fontsize = font_size_legend,loc=4)
        ax = plt.gca()
        ylims = ax.get_ylim()
        plt.plot(zs[rind,int(xi_top)]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")        
        plt.figure('nn prof ref')
        plt.legend(fontsize = font_size_legend,loc=1)
        ax = plt.gca()
        ylims = ax.get_ylim()
        plt.plot(zs[rind,int(xi_top)]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")    
    if plot_temp_ref == 1:
        plt.figure(r'Te prof ref')
        plt.legend(fontsize = font_size_legend,loc=1)
        ax = plt.gca()
        ylims = ax.get_ylim()
        plt.plot(zs[rind,int(xi_top)]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        plt.figure(r'ratio_Ekin_Te prof ref') 
        plt.legend(fontsize = font_size_legend,loc=4)
        ax = plt.gca()
        ylims = ax.get_ylim()
        plt.plot(zs[rind,int(xi_top)]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")          
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")    
    if plot_curr_ref == 1:
        plt.figure('je_para prof ref')
        plt.legend(fontsize = font_size_legend,loc=4)
        ax = plt.gca()
        ylims = ax.get_ylim()
        plt.plot(zs[rind,int(xi_top)]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")        
        ax.set_ylim(ylims[0],ylims[1])        
        plt.figure('je_perp prof ref')
        plt.legend(fontsize = font_size_legend,loc=4)
        ax = plt.gca()
        ax.set_ylim(-1.2,0.4)
        ylims = ax.get_ylim()
        plt.plot(zs[rind,int(xi_top)]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")        
        ax.set_ylim(ylims[0],ylims[1])          
        plt.figure('je_t prof ref')
        plt.legend(fontsize = font_size_legend,loc=1)
        ax = plt.gca()
        ylims = ax.get_ylim()
        plt.plot(zs[rind,int(xi_top)]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")        
        plt.figure('je zr prof ref')
        plt.legend(fontsize = font_size_legend,loc=1,ncol=2)
        ax = plt.gca()
        ylims = ax.get_ylim()
        plt.plot(zs[rind,int(xi_top)]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")        
        plt.figure('ji_r prof ref')
        plt.legend(fontsize = font_size_legend,loc=1)
        ax = plt.gca()
        ylims = ax.get_ylim()
        plt.plot(zs[rind,int(xi_top)]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")       
        ax.set_ylim(ylims[0],ylims[1])         
        plt.figure('ji_z prof ref')
        plt.legend(fontsize = font_size_legend,loc=1)
        ax = plt.gca()
        ylims = ax.get_ylim()
        plt.plot(zs[rind,int(xi_top)]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")        
        ax.set_ylim(ylims[0],ylims[1])         
        plt.figure('ji zr prof ref')
        plt.legend(fontsize = font_size_legend,loc=4,ncol=2)
        ax = plt.gca()
        ylims = ax.get_ylim()
        plt.plot(zs[rind,int(xi_top)]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
#        plt.figure('j zr prof ref')
#        plt.legend(fontsize = font_size_legend,loc=1)
#        ax = plt.gca()
#        ylims = ax.get_ylim()
#        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
    if plot_freq_ref == 1:
        plt.figure('all nus at A prof ref')
#        plt.legend(fontsize = font_size_legend,loc=1)
        ax = plt.gca()
        ax.set_ylim(1E1,1E9)
        ylims = ax.get_ylim()
        plt.plot(zs[rind,int(xi_top)]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")        
        plt.figure('all nus at B prof ref')
#        plt.legend(fontsize = font_size_legend,loc=1)
        ax = plt.gca()
        ax.set_ylim(1E1,1E9)
        ylims = ax.get_ylim()
        plt.plot(zs[rind,int(xi_top)]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")        
        plt.figure('all nus at C prof ref')
#        plt.legend(fontsize = font_size_legend,loc=1)
        ax = plt.gca()
        ax.set_ylim(1E1,1E9)
        ylims = ax.get_ylim()
        plt.plot(zs[rind,int(xi_top)]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")        
        plt.figure('all nus at D prof ref')
#        plt.legend(fontsize = font_size_legend,loc=1)
        ax = plt.gca()
        ax.set_ylim(1E1,1E9)
        ylims = ax.get_ylim()
        plt.plot(zs[rind,int(xi_top)]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")        
        plt.figure('all nus average prof ref')
#        plt.legend(fontsize = font_size_legend,loc=1)
        ax = plt.gca()
        ax.set_ylim(1E1,1E9)
        ylims = ax.get_ylim()
        plt.plot(zs[rind,int(xi_top)]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")        
        # Generate the legend outside the plot        
#        ax.legend(fontsize = font_size_legend,loc='center left', bbox_to_anchor=(1, 0.5))  
        # Generate a separated figure for the legend
        h1, l1 = ax.get_legend_handles_labels()
        plt.figure('all nus prof ref legend',figsize=(2.0,4.8)) # Fig size in inches (width,height)
        plt.legend(h1, l1, fontsize = font_size,loc=9)
        plt.axis('off')      
        plt.figure('Hall_par prof ref')
        plt.legend(fontsize = font_size_legend,loc=4)
        ax = plt.gca()
        ylims = ax.get_ylim()
        plt.plot(zs[rind,int(xi_top)]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")        
        plt.figure('Hall_par_eff prof ref')
        plt.legend(fontsize = font_size_legend,loc=4)
        ax = plt.gca()
        ax.set_ylim(20,45)
        ylims = ax.get_ylim()
        plt.plot(zs[rind,int(xi_top)]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")    
    if plot_anode_ref == 1:
        plt.figure(r'phi_anode prof ref')
#        plt.legend(fontsize = font_size_legend,loc=1)
        plt.figure(r'Ez_anode prof ref')
#        plt.legend(fontsize = font_size_legend,loc=1)
        plt.figure('je_z_anode prof ref')
#        plt.legend(fontsize = font_size_legend,loc=1)
        plt.figure('ji_z_anode prof ref')
#        plt.legend(fontsize = font_size_legend,loc=1)
        plt.figure('n_anode prof ref')
#        plt.legend(fontsize = font_size_legend,loc=1)
        plt.figure(r'Te_anode prof ref')
#        plt.legend(fontsize = font_size_legend,loc=1)
    if plot_err_interp_ref == 1:
        plt.figure(r'err_interp_n prof ref')
        plt.legend(fontsize = font_size_legend,loc=1)
        ax = plt.gca()
        ylims = ax.get_ylim()
        plt.plot(zs[rind,int(xi_top)]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
    if plot_lambdaD_ref == 1:
        plt.figure(r'lambdaD prof ref')
        plt.legend(fontsize = font_size_legend,loc=1)
        ax = plt.gca()
        ylims = ax.get_ylim()
        plt.plot(zs[rind,int(xi_top)]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
    
                   
    if save_flag == 1:
        if plot_fields_ref == 1:
            plt.figure(r'phi prof ref')
#            plt.savefig(path_out+"phi_prof_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure(r'E prof ref')
#            plt.savefig(path_out+"E_prof_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure(r'Ez prof ref')
#            plt.savefig(path_out+"Ez_prof_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            # plt.figure('phi ref')
            # plt.savefig(path_out+"phi_ref"+figs_format,bbox_inches='tight') 
            # plt.close()
            # plt.figure('phi ref inC')
            # plt.savefig(path_out+"phi_ref_inC"+figs_format,bbox_inches='tight') 
            # plt.close()
            # plt.figure('E ref')
            # plt.savefig(path_out+"E_ref"+figs_format,bbox_inches='tight') 
            # plt.close()
#            plt.figure('Er ref')
#            plt.savefig(path_out+"Er_ref"+figs_format,bbox_inches='tight') 
#            plt.close()
#            plt.figure('Ez ref')
#            plt.savefig(path_out+"Ez_ref"+figs_format,bbox_inches='tight') 
#            plt.close()
            # plt.figure('B ref')
            # plt.savefig(path_out+"B_ref"+figs_format,bbox_inches='tight') 
            # plt.close()
            # plt.figure('B ref inC')
            # plt.savefig(path_out+"B_ref_inC"+figs_format,bbox_inches='tight') 
            # plt.close()
            # plt.figure('alpha_ano ref')
            # plt.savefig(path_out+"alpha_ano_ref"+figs_format,bbox_inches='tight') 
            # plt.close()
            # plt.figure('MFAM ref')
            # plt.savefig(path_out+"MFAM_ref"+figs_format,bbox_inches='tight') 
            # plt.close()
            # plt.figure('MFAM ref inC')
            # plt.savefig(path_out+"MFAM_ref_inC"+figs_format,bbox_inches='tight') 
            # plt.close()
        if plot_dens_ref == 1:
            plt.figure('n prof ref')
#            plt.savefig(path_out+"ne_prof_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('ni1 prof ref')
#            plt.savefig(path_out+"ni1_prof_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('ni2 prof ref')
#            plt.savefig(path_out+"ni2_prof_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('ratio_ni1_ni2 prof ref')
#            plt.savefig(path_out+"ratio_ni1_ni2_prof_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('nn prof ref')
#            plt.savefig(path_out+"nn_prof_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            
            # plt.figure('n ref')
            # plt.savefig(path_out+"ne_ref"+figs_format,bbox_inches='tight') 
            # plt.close()
            # plt.figure('n ref inC')
            # plt.savefig(path_out+"ne_ref_inC"+figs_format,bbox_inches='tight') 
            # plt.close()
            # plt.figure('ni1 ref')
            # plt.savefig(path_out+"ni1_ref"+figs_format,bbox_inches='tight') 
            # plt.close()
            # plt.figure('ni2 ref')
            # plt.savefig(path_out+"ni2_ref"+figs_format,bbox_inches='tight') 
            # plt.close()
            # plt.figure('ratio_ni1_ni2 ref')
            # plt.savefig(path_out+"ratio_ni1_ni2_ref"+figs_format,bbox_inches='tight') 
            # plt.close()
            # plt.figure('ratio_ni1_ni3 ref')
            # plt.savefig(path_out+"ratio_ni1_ni3_ref"+figs_format,bbox_inches='tight') 
            # plt.close()
            # plt.figure('ratio_ni1_ni4 ref')
            # plt.savefig(path_out+"ratio_ni1_ni4_ref"+figs_format,bbox_inches='tight') 
            # plt.close()
            # plt.figure('ratio_ne_neCEX ref')
            # plt.savefig(path_out+"ratio_ne_neCEX_ref"+figs_format,bbox_inches='tight') 
            # plt.close()
            # plt.figure('nn ref')
            # plt.savefig(path_out+"nn_ref"+figs_format,bbox_inches='tight') 
            # plt.close()
            # plt.figure('nn ref inC')
            # plt.savefig(path_out+"nn_ref_inC"+figs_format,bbox_inches='tight') 
            # plt.close()
            # plt.figure('ratio_nn1_nn2 ref')
            # plt.savefig(path_out+"ratio_nn1_nn2_ref"+figs_format,bbox_inches='tight') 
            # plt.close()
            # plt.figure('ratio_nn1_nn3 ref')
            # plt.savefig(path_out+"ratio_nn1_nn3_ref"+figs_format,bbox_inches='tight') 
            # plt.close()
            # plt.figure('ratio_nn1_nnCEX ref')
            # plt.savefig(path_out+"ratio_nn1_nnCEX_ref"+figs_format,bbox_inches='tight') 
            # plt.close()
            # plt.figure('ratio_nn_nnCEX ref')
            # plt.savefig(path_out+"ratio_nn_nnCEX_ref"+figs_format,bbox_inches='tight') 
            # plt.close()
        if plot_temp_ref == 1:
            plt.figure(r'Te prof ref')
#            plt.savefig(path_out+"Te_prof_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure(r'ratio_Ekin_Te prof ref') 
#            plt.savefig(path_out+"ratio_Ekin_Te_prof_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            # plt.figure('Te ref')
            # plt.savefig(path_out+"Te_ref"+figs_format,bbox_inches='tight') 
            # plt.close()
            # plt.figure('Te ref inC')
            # plt.savefig(path_out+"Te_ref_inC"+figs_format,bbox_inches='tight') 
            # plt.close()
#            plt.figure('Ti1 ref')
#            plt.savefig(path_out+"Ti1_ref"+figs_format,bbox_inches='tight') 
#            plt.close()
#            plt.figure('Ti2 ref')
#            plt.savefig(path_out+"Ti2_ref"+figs_format,bbox_inches='tight') 
#            plt.close()
#            plt.figure('Tn ref')
#            plt.savefig(path_out+"Tn_ref"+figs_format,bbox_inches='tight') 
#            plt.close()
            # plt.figure('ratio_Ekin_Te ref')
            # plt.savefig(path_out+"ratio_Ekin_Te_ref"+figs_format,bbox_inches='tight') 
            # plt.close()
#            plt.figure('ratio_Ekin_Ti1 ref')
#            plt.savefig(path_out+"ratio_Ekin_Ti1_ref"+figs_format,bbox_inches='tight') 
#            plt.close()
#            plt.figure('ratio_Ekin_Ti2 ref')
#            plt.savefig(path_out+"ratio_Ekin_Ti2_ref"+figs_format,bbox_inches='tight') 
#            plt.close()
            # plt.figure('pn ref')
            # plt.savefig(path_out+"pn_ref"+figs_format,bbox_inches='tight') 
            # plt.close()
        if plot_vel_ref == 1:
            plt.figure('Mi1 ref')
#            plt.savefig(path_out+"Mi1_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('Mi2 ref')
#            plt.savefig(path_out+"Mi2_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('Mi ref')
#            plt.savefig(path_out+"Mi2_ref"+figs_format,bbox_inches='tight') 
            plt.close()
           # plt.figure('ue_r ref')
           # plt.savefig(path_out+"ue_r_ref"+figs_format,bbox_inches='tight') 
           # plt.close()
           # plt.figure('ue_t ref')
           # plt.savefig(path_out+"ue_t_ref"+figs_format,bbox_inches='tight') 
           # plt.close()
           # plt.figure('ue_z ref')
           # plt.savefig(path_out+"ue_z_ref"+figs_format,bbox_inches='tight') 
           # plt.close()
           # plt.figure('ue_perp ref')
           # plt.savefig(path_out+"ue_perp_ref"+figs_format,bbox_inches='tight') 
           # plt.close()
           # plt.figure('ue_para ref')
           # plt.savefig(path_out+"ue_para_ref"+figs_format,bbox_inches='tight') 
           # plt.close()
           # plt.figure('ratio ue_t_perp ref')
           # plt.savefig(path_out+"ratio_ue_t_perp_ref"+figs_format,bbox_inches='tight') 
           # plt.close()
           # plt.figure('ratio ue_t_para ref')
           # plt.savefig(path_out+"ratio_ue_t_para_ref"+figs_format,bbox_inches='tight') 
           # plt.close()
           # plt.figure('ratio ue_perp_para ref')
           # plt.savefig(path_out+"ratio_ue_perp_para_ref"+figs_format,bbox_inches='tight') 
           # plt.close()
           # plt.figure('ue ref')
           # plt.savefig(path_out+"ue_ref"+figs_format,bbox_inches='tight') 
           # plt.close()
           # plt.figure('ui ref')
           # plt.savefig(path_out+"ui_ref"+figs_format,bbox_inches='tight') 
           # plt.close()
            plt.figure('ui1_z ref')
#            plt.savefig(path_out+"uzi1_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('un1_z ref')
#            plt.savefig(path_out+"uzn1_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('un1_z ref inC')
#            plt.savefig(path_out+"uzn1_ref_inC"+figs_format,bbox_inches='tight') 
            plt.close()
        if plot_curr_ref == 1:
            plt.figure('je_para prof ref')
#            plt.savefig(path_out+"je_para_prof_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('je_perp prof ref')
#            plt.savefig(path_out+"je_perp_prof_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('je_t prof ref')
#            plt.savefig(path_out+"je_t_prof_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('je zr prof ref')
#            plt.savefig(path_out+"je2D_prof_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('ji_r prof ref')
#            plt.savefig(path_out+"ji_r_prof_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('ji_z prof ref')
#            plt.savefig(path_out+"ji_z_prof_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('ji zr prof ref')
#            plt.savefig(path_out+"ji2D_prof_ref"+figs_format,bbox_inches='tight') 
            plt.close()
#            plt.figure('j zr prof ref')
#            plt.savefig(path_out+"j2D_prof_ref"+figs_format,bbox_inches='tight') 
#            plt.close()
            
            # plt.figure('je_r ref')
            # plt.savefig(path_out+"je_r_ref"+figs_format,bbox_inches='tight') 
            # plt.close()
            # plt.figure('je_t ref')
            # plt.savefig(path_out+"je_t_ref"+figs_format,bbox_inches='tight') 
            # plt.close()
            # plt.figure('je_z ref')
            # plt.savefig(path_out+"je_z_ref"+figs_format,bbox_inches='tight') 
            # plt.close()
            # plt.figure('je_perp ref')
            # plt.savefig(path_out+"je_perp_ref"+figs_format,bbox_inches='tight') 
            # plt.close()
            # plt.figure('je_para ref')
            # plt.savefig(path_out+"je_para_ref"+figs_format,bbox_inches='tight') 
            # plt.close()
            # plt.figure('je zr ref')
            # plt.savefig(path_out+"je2D_ref"+figs_format,bbox_inches='tight') 
            # plt.close()
            # plt.figure('je zr ref inC')
            # plt.savefig(path_out+"je2D_ref_inC"+figs_format,bbox_inches='tight') 
            # plt.close()
            # plt.figure('ji zr ref')
            # plt.savefig(path_out+"ji2D_ref"+figs_format,bbox_inches='tight') 
            # plt.close()
            # plt.figure('ji zr ref inC')
            # plt.savefig(path_out+"ji2D_ref_inC"+figs_format,bbox_inches='tight') 
            # plt.close()
            # plt.figure('j zr ref')
            # plt.savefig(path_out+"j2D_ref"+figs_format,bbox_inches='tight') 
            # plt.close()
            # plt.figure('j zr ref inC')
            # plt.savefig(path_out+"j2D_ref_inC"+figs_format,bbox_inches='tight') 
            # plt.close()
            # plt.figure('je_tB_r ref')
            # plt.savefig(path_out+"je_tBr_ref"+figs_format,bbox_inches='tight') 
            # plt.close()
        # if plot_nmp_ref == 1:
            # plt.figure('Nmpi1 ref')
            # plt.savefig(path_out+"Nmpi1_ref"+figs_format,bbox_inches='tight') 
            # plt.close()
            # plt.figure('Nmpi2 ref')
            # plt.savefig(path_out+"Nmpi2_ref"+figs_format,bbox_inches='tight') 
            # plt.close()
            # plt.figure('Nmpn1 ref')
            # plt.savefig(path_out+"Nmpn1_ref"+figs_format,bbox_inches='tight') 
            # plt.close()
        if plot_freq_ref == 1:
            plt.figure('all nus at A prof ref')
            plt.savefig(path_out+"A_all_nus_prof_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('all nus at B prof ref')
            plt.savefig(path_out+"B_all_nus_prof_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('all nus at C prof ref')
            plt.savefig(path_out+"C_all_nus_prof_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('all nus at D prof ref')
            plt.savefig(path_out+"D_all_nus_prof_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('all nus average prof ref')
            plt.savefig(path_out+"avg_all_nus_prof_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('all nus prof ref legend')
            plt.savefig(path_out+"all_nus_prof_ref_legend"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('Hall_par prof ref')
            plt.savefig(path_out+"Hall_par_prof_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('Hall_par_eff prof ref')
            plt.savefig(path_out+"Hall_par_eff_prof_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            # plt.figure('Hall_par ref')
            # plt.savefig(path_out+"Hall_par_ref"+figs_format,bbox_inches='tight') 
            # plt.close()
            # plt.figure('Hall_par_eff ref')
            # plt.savefig(path_out+"Hall_par_eff_ref"+figs_format,bbox_inches='tight') 
            # plt.close()
            # plt.figure('Hall_par_effect ref')
            # plt.savefig(path_out+"Hall_par_effect_ref"+figs_format,bbox_inches='tight') 
            # plt.close()
            # plt.figure('nu_e_tot ref')
            # plt.savefig(path_out+"nu_e_tot_ref"+figs_format,bbox_inches='tight') 
            # plt.close()
            # plt.figure('nu_e_tot_eff ref')
            # plt.savefig(path_out+"nu_e_tot_eff_ref"+figs_format,bbox_inches='tight') 
            # plt.close()
            # plt.figure('nu_en ref')
            # plt.savefig(path_out+"nu_en_ref"+figs_format,bbox_inches='tight') 
            # plt.close()
            # plt.figure('nu_ei1 ref')
            # plt.savefig(path_out+"nu_ei1_ref"+figs_format,bbox_inches='tight') 
            # plt.close()
            # plt.figure('nu_ei2 ref')
            # plt.savefig(path_out+"nu_ei2_ref"+figs_format,bbox_inches='tight') 
            # plt.close()
            # plt.figure('nu_i01 ref')
            # plt.savefig(path_out+"nu_i01_ref"+figs_format,bbox_inches='tight') 
            # plt.close()
            # plt.figure('nu_i02 ref')
            # plt.savefig(path_out+"nu_i02_ref"+figs_format,bbox_inches='tight') 
            # plt.close()
            # plt.figure('nu_i12 ref')
            # plt.savefig(path_out+"nu_i12_ref"+figs_format,bbox_inches='tight') 
            # plt.close()
            # plt.figure('nu_ei_el_tot ref')
            # plt.savefig(path_out+"nu_ei_el_tot_ref"+figs_format,bbox_inches='tight') 
            # plt.close()
            # plt.figure('nu_ion_tot ref')
            # plt.savefig(path_out+"nu_ion_tot_ref"+figs_format,bbox_inches='tight') 
            # plt.close()            
            # plt.figure('ndot_e ref')
            # plt.savefig(path_out+"ndot_e_ref"+figs_format,bbox_inches='tight') 
            # plt.close()
            # plt.figure('ndot_CEX01 ref')
            # plt.savefig(path_out+"ndot_CEX01_i3_ref"+figs_format,bbox_inches='tight') 
            # plt.close()
            # plt.figure('ndot_CEX02 ref')
            # plt.savefig(path_out+"ndot_CEX02_i4_ref"+figs_format,bbox_inches='tight') 
            # plt.close()
            
        if plot_anode_ref == 1:
            plt.figure(r'phi_anode prof ref')
            plt.savefig(path_out+"phi_anode_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure(r'Ez_anode prof ref')
            plt.savefig(path_out+"Ez_anode_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('je_z_anode prof ref')
            plt.savefig(path_out+"jez_anode_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('ji_z_anode prof ref')
            plt.savefig(path_out+"jiz_anode_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('n_anode prof ref')
            plt.savefig(path_out+"ne_anode_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure(r'Te_anode prof ref')
            plt.savefig(path_out+"Te_anode_ref"+figs_format,bbox_inches='tight') 
            plt.close()
        if plot_err_interp_ref == 1:
            plt.figure(r'err_interp_n prof ref')
#            plt.savefig(path_out+"err_interp_n_prof_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            # plt.figure('err_interp_n ref')
            # plt.savefig(path_out+"err_interp_n_ref"+figs_format,bbox_inches='tight') 
            # plt.close()
        if plot_lambdaD_ref == 1:
            plt.figure(r'lambdaD prof ref')
#            plt.savefig(path_out+"lambdaD_prof_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            # plt.figure('lambdaD ref')
            # plt.savefig(path_out+"lambdaD_ref"+figs_format,bbox_inches='tight') 
            # plt.close()
        if plot_fsplit_ref == 1:
            plt.figure('fsplit adv ref')
            plt.savefig(path_out+"fsplit_adv_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('fsplit qperp ref')
            plt.savefig(path_out+"fsplit_qperp_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('fsplit qpara ref')
            plt.savefig(path_out+"fsplit_qpara_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('fsplit qb ref')
            plt.savefig(path_out+"fsplit_qb_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('fsplit Pperp ref')
            plt.savefig(path_out+"fsplit_Pperp_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('fsplit Ppara ref')
            plt.savefig(path_out+"fsplit_Ppara_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('fsplit ecterm ref')
            plt.savefig(path_out+"fsplit_ecterm_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('fsplit inel ref')
            plt.savefig(path_out+"fsplit_inel_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('fsplit q ref')
            plt.savefig(path_out+"fsplit_q_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('fsplit eflux ref')
            plt.savefig(path_out+"fsplit_eflux_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('fsplit P ref')
            plt.savefig(path_out+"fsplit_P_ref"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('fsplit LHS ref')
            plt.savefig(path_out+"fsplit_LHS_ref"+figs_format,bbox_inches='tight') 
            plt.close()

    ###########################################################################
    

if time_plots == 1:
    print("######## time_plots ########")
    
    marker_size = 4
#    marker_size_ID = marker_size + 2
#    marker_size = 0
    marker_size_ID = 10
    if generate_thesis_figures == 1:
        font_size_legend = font_size - 7
    
    font_size_legend = 15
    font_size_legend = 8
    props = dict(boxstyle='round', facecolor='white', edgecolor = 'k',alpha=1) 
    
    timestep        = 0
    allsteps_flag   = 1
    read_inst_data  = 1
    read_part_lists = 0
#    read_flag       = 0
    read_flag       = 1
    
    ###########################################################################
    # NOTE: only mean_type = 2 must be used since average values and FFTs are 
#           computed considering, for each signal, a time interval containing
#           an integer number of cycles. The computations for mean_type = 0
#           are wrong since the average and FFTs are not computed in intervals
#           containing an integer number of periods for each signal. The same 
#           happens with mean_type = 1. The approach mean_type = 2 should be 
#           extended in the future for considering partial time series between
#           two given steps (step_i,step_f) and (step_i_fast,step_f_fast) 
#           (as done in mean_type = 1). Up to now is only available for a
#           partial time series containing the last number of
#           steps given in last_steps and last_steps_fast. In the approach
#           mean_type = 2,  the implemented functions max_min_mean_vals,
#           comp_phase_shift and comp_FFT consider a time interval containing
#           an integer number of cycles. This interval is contained within the
#           given time serie of the signal (as mentioned above, currently only  
#           the series containing the last number of steps in last_steps or
#           last_steps_fast are available).     
    ###########################################################################
    make_mean       = 1  # 0 Do not compute nor print mean values; 1 Compute and print mean values
    mean_type       = 2
    order           = 50
    order_fast      = 500
    

#    last_steps      = 700
#    last_steps      = 670
#    last_steps      = 600
#    last_steps      = 1670
    last_steps      = 1200
    # last_steps      = 1200
    # last_steps      = 800
#    last_steps      = 500
    step_i          = 350
    step_f          = 1000
    step_i          = 400
    step_f          = 1000
    last_steps_fast = 33500
#    last_steps_fast = 60000
#    last_steps_fast = 16750 # For 2dt
#    last_steps_fast = 10000 # For 5dt
    step_i_fast     = int(step_i*50)
    step_f_fast     = int(step_f*50)
    print_mean_vars = 1
    num_firstmax       = 20 # Number of first maximum values searched for in the FFTs of Id
    num_firstmax_print = 5 # Number of first maximum values above to be printed
    
    # Define PIC mesh (i,j) indeces for the point at which we want to plot Te and phi at the free loss boundary
    # Cheops 1
#    i_plot_ver = 17
#    j_plot_ver = 42
#    i_plot_lat = 44
#    j_plot_lat = 32
    # Cheops LP
#    i_plot_ver = 15
#    j_plot_ver = 44
#    i_plot_lat = 30
#    j_plot_lat = 36
    # VHT_US MP
    i_plot_ver = 15
    j_plot_ver = -1
    i_plot_lat = 38
    j_plot_lat = 29
    # VHT_US_LP
#    i_plot_ver = 15
#    j_plot_ver = -1
#    i_plot_lat = 35
#    j_plot_lat = 30
    
#    i_plot_ver = 20
#    j_plot_ver = 40
#    i_plot_lat = 37
#    j_plot_lat = -1
    
    # Define radial index of the thruster channel midline
    rind = 15
    # Define axial position of crossing point between cathode magnetic line and thurster channel midline
    # zcat_pos = 15.55
    zcat_pos = 15.71 # paper GDML
    zcat_pos_vec = np.array([15.71,15.66,15.74,15.66,zcat_pos,zcat_pos],dtype = float) # CML OLD: P1C1, P2C1, P3C1, P4C1
    # zcat_pos_vec = np.array([15.62],dtype = float) # P2C1
    zcat_pos_vec = np.array([zcat_pos,15.6329,15.7359,15.6048],dtype = float)           # CML NEW: P1C1 (no cross), P2C1, P3C1, P4C1
    zcat_pos_vec = np.array([zcat_pos,16.0103,16.0385,16.03545],dtype = float)          # MS  NEW: P1 (no cross), P2, P3, P4
    # zcat_pos_vec = np.array([16.0103,16.0385,16.03545],dtype = float)                   # MS  NEW: P2, P3, P4
    # zcat_pos_vec = np.array([22.9,32.9,42.9],dtype = float)                             # P  C2 cases: P2, P3, P4
    zcat_pos_vec = np.array([15.7359,15.6048,15.9284,15.6048],dtype = float)           # CML NEW: P3C1, P4C1, P4_C1fcat2533, P4_C1fcat2532_2533
    
    plot_mass = 0
    plot_dens = 0
    plot_Nmp  = 0
    plot_eff  = 0
    plot_thr  = 0
    plot_Te   = 0
    plot_Id   = 1
    plot_Vd   = 0
    plot_Pd   = 0
    plot_cath = 0
    plot_mbal = 0
    plot_Pbal = 0
    plot_Pbal_inistep = 300
    plot_FLvars = 0
    
    Nke_effects = 0
    
    time2steps_axis  = 0
    prntstepsID_axis = 0 
    
    prntstep_IDs         = [996, 1010, 1050, 1095]
    fast_prntstep_IDs    = [50*996, 50*1010, 50*1050, 50*1095]
    prntstep_IDs_text    = [r"A",r"B",r"C",r"D"]
    prntstep_IDs_colors  = ['r','g','b','m']
    prntstep_IDs_markers = ['^','>','v','<']
    plot_tol = 3
    fact_x = np.array([0.97,1.03,1.0,0.98])
    fact_y = np.array([1.05,0.99,0.60,1.01])
    
    prntstep_IDs = []
    prntstep_IDs_text = []
    fast_prntstep_IDs = []
    
    #### READ EXPERIMENTAL DATA IF REQUIRED
    exp_data_time_plots = 0
    # CHEOPS Phase 1
#    exp_datafile_name   = "TOPO1_n1_UC3M.CSV"
#    exp_datafile_name   = "TOPO1_n2_UC3M.CSV"
#    exp_datafile_name   = "TOPO2_n3_UC3M.CSV"
#    exp_datafile_name   = "TOPO2_n4_UC3M.CSV"
#    exp_data = np.genfromtxt(exp_datafile_name, delimiter='\t')
#    exp_time = exp_data[:,0]
#    exp_Vd   = exp_data[:,1]  # Vd experimental values
#    exp_Id   = exp_data[:,4]  # Id experimental values
#    exp_Pd   = exp_Id*exp_Vd
    # CHEOPS LP testcase2
#    exp_datafile_name = "data_LP_testcase2/Oscillo - TestCase 2a.CSV"
#    exp_datafile_name = "data_LP_testcase2/Oscillo - TestCase 2b.CSV"
#    exp_datafile_name = "data_LP_testcase2/Oscillo - TestCase 2c.CSV"
#    exp_datafile_name = "data_LP_testcase2/Oscillo - TestCase 2f.CSV"
#    exp_datafile_name = "data_LP_testcase2/Oscillo - TestCase 2g.CSV"
    exp_datafile_name = "data_LP_testcase2/Oscillo - TestCase 2h.CSV"
    exp_data = np.genfromtxt(exp_datafile_name, delimiter=',')
    exp_time = exp_data[:,0]
    exp_Vd   = exp_data[:,1]  # Vd experimental values
    exp_Id   = exp_data[:,2]  # Id experimental values
    exp_Pd   = exp_Id*exp_Vd
    
    exp_nsteps     = len(exp_time)
    exp_last_steps = exp_nsteps
    exp_order      = 20
    
    ########################################
        
    # Simulation names
    nsims = 4
    
    # Flag for old sims (1: old sim files, 0: new sim files)
    #oldpost_sim      = np.array([0,3,3,3,0,0,3,3,3,0,0,0,0],dtype = int)
    #oldsimparams_sim = np.array([6,7,7,7,6,6,7,7,7,6,6,5,0],dtype = int)

#    oldpost_sim      = np.array([3,3,3,3,3,3,0,0,3,3,3,0,0,0,0],dtype = int)
#    oldsimparams_sim = np.array([7,7,7,7,7,7,6,6,7,7,7,6,6,5,0],dtype = int)
    
#    oldpost_sim      = np.array([3,3,3,3,3,3,0,0,3,3,3,0,0,0,0],dtype = int)
#    oldsimparams_sim = np.array([8,8,8,8,7,7,6,6,7,7,7,6,6,5,0],dtype = int)
    
#    oldpost_sim      = np.array([1,3,3,3,3,3,0,0,3,3,3,0,0,0,0],dtype = int)
#    oldsimparams_sim = np.array([0,9,7,7,7,7,6,6,7,7,7,6,6,5,0],dtype = int)
    
#    oldpost_sim      = np.array([3,4,3,3,3,3,3,3,0,0,3,3,3,0,0,0,0],dtype = int)
#    oldsimparams_sim = np.array([12,13,12,9,7,7,7,7,6,6,7,7,7,6,6,5,0],dtype = int)
    
#    oldpost_sim      = np.array([3,3,3,3,3,3,3,3,0,0,3,3,3,0,0,0,0],dtype = int)
#    oldsimparams_sim = np.array([12,12,12,9,7,7,7,7,6,6,7,7,7,6,6,5,0],dtype = int)

#    oldpost_sim      = np.array([3,4,4,4,3,3,3,3,0,0,3,3,3,3,0,0,0,0],dtype = int)
#    oldsimparams_sim = np.array([11,13,13,13,8,7,7,7,6,6,7,7,7,7,6,6,5,0],dtype = int)  
        
#    oldpost_sim      = np.array([4,4,4,4,4,3,3,3,3,3,0,0,3,3,3,0,0,0,0],dtype = int)
#    oldsimparams_sim = np.array([13,13,13,13,13,8,7,7,7,6,6,7,7,7,7,6,6,5,0],dtype = int)  
    
#    oldpost_sim      = np.array([6,6,6,6,4,3,3,3,3,3,0,0,3,3,3,0,0,0,0],dtype = int)
#    oldsimparams_sim = np.array([20,20,17,17,13,8,7,7,7,6,6,7,7,7,7,6,6,5,0],dtype = int)  
    
    oldpost_sim      = np.array([6,6,6,6,6,6,6,6,6,6,6,5,4,3,3,3,3,3,0,0,3,3,3,0,0,0,0],dtype = int)
    oldsimparams_sim = np.array([21,21,21,21,20,20,20,17,17,17,17,17,15,13,8,7,7,7,6,6,7,7,7,7,6,6,5,0],dtype = int)  
    
    # CHEOPS LP PPSX00 OP1, OP1_CEX Alejandro
#    oldpost_sim      = np.array([6,6,6,6,6,6,6,6,6,6,5,4,3,3,3,3,3,0,0,3,3,3,0,0,0,0],dtype = int)
#    oldsimparams_sim = np.array([17,19,19,19,17,17,17,17,17,17,15,13,8,7,7,7,6,6,7,7,7,7,6,6,5,0],dtype = int)  
    
    # For figures of CHEOPS T2N4 cases comparison for CHEOPS-LP meeting 06092021
#    oldpost_sim      = np.array([3,3,4,4,3,3,3,3,0,0,3,3,3,3,0,0,0,0],dtype = int)
#    oldsimparams_sim = np.array([7,8,13,13,8,7,7,7,6,6,7,7,7,7,6,6,5,0],dtype = int)      
#    oldpost_sim      = np.array([3,4,4,4,3,3,3,3,0,0,3,3,3,3,0,0,0,0],dtype = int)
#    oldsimparams_sim = np.array([7,13,13,13,8,7,7,7,6,6,7,7,7,7,6,6,5,0],dtype = int)  
    
#    oldpost_sim      = np.array([3,4,4,4,3,3,3,3,0,0,3,3,3,3,0,0,0,0],dtype = int)
#    oldsimparams_sim = np.array([7,13,15,13,8,7,7,7,6,6,7,7,7,7,6,6,5,0],dtype = int)  
    
    # For figures of CHEOPS T2N4 cases comparison for CHEOPS-LP meeting 10032022
#    oldpost_sim      = np.array([3,3,4,4,3,3,3,3,0,0,3,3,3,3,0,0,0,0],dtype = int)
#    oldsimparams_sim = np.array([7,8,13,13,8,7,7,7,6,6,7,7,7,7,6,6,5,0],dtype = int)      
#    oldpost_sim      = np.array([3,5,5,3,3,3,3,0,0,3,3,3,3,0,0,0,0],dtype = int)
#    oldsimparams_sim = np.array([8,15,15,8,7,7,7,6,6,7,7,7,7,6,6,5,0],dtype = int)  
    
    # HYPHEN_activities_report: anode treatment and thermalized potential CHEOPS T2N4 cases 
#    oldpost_sim      = np.array([3,4,4,4,3,3,3,3,0,0,3,3,3,3,0,0,0,0],dtype = int)
#    oldsimparams_sim = np.array([7,13,15,13,8,7,7,7,6,6,7,7,7,7,6,6,5,0],dtype = int) 
#    oldpost_sim      = np.array([3,4,4,4,3,3,3,3,0,0,3,3,3,3,0,0,0,0],dtype = int)
#    oldsimparams_sim = np.array([7,15,15,13,8,7,7,7,6,6,7,7,7,7,6,6,5,0],dtype = int) 
    


    
    sim_names = [
        
                  # "../../../sim/sims/CHT_sep_imp_injC_mfr8_new",
        
#                  "../../../Ca_hyphen/sim/sims/MP_N1_VC3423_tmtetq2",
#                  "../../../Ca_hyphen/sim/sims/MP_N1_VC1296_tmtetq2",
#                  "../../../Ca_hyphen/sim/sims/MP_N1_VC1296_tm2te1tq2",
#                  "../../../Ca_hyphen/sim/sims/MP_N1_VC1296_tm2te1tq2_Nparts",
#                 "../../../Sr_hyphen/sim/sims/HT5k_rm6_tm08_10te1tq25s01_WCext_mdotC_qcat_global",
#                 "../../../Sr_hyphen/sim/sims/HT5k_rm6_tm08_10te1tq25s01_WCext_mdotC_qcat",
#                 "../../../Sr_hyphen/sim/sims/HT5k_rm6_tm08_10te1tq25s01_WCext_mdotC_Tcat_bohm_avg_flag1_propverified",
#                 "../../../Sr_hyphen/sim/sims/HT5k_rm6_tm08_10te1tq25s01_WCext_mdotC_Tcat55",
#                 "../../../Sr_hyphen/sim/sims/HT5k_rm6_tm08_10te1tq25s01_WC3_mdotC_Tcat",
#                 "../../../Sr_hyphen/sim/sims/HT5k_rm6_tm08_10te1tq25s01_WC1_mdotC_Tcat",
#                 "../../../Sr_hyphen/sim/sims/HT5k_rm6_tm08_10te1tq25s01_WCext_mdotC_Tcat",
            
#                 "../../../sim/sims/SPT100_pm2em2_cat3328_tmtetq5_flqe45_tests",
#                 "../../../sim/sims/SPT100_pm2em2_cat3328_tmtetq5_flqe45_tests",
                 
                 
#                "../../../sim/sims/SPT100_pm2em2_cat3328_tmtetq5_flqe45_tqine0",
#                "../../../sim/sims/SPT100_pm2em2_cat3328_tmtetq25_flqe45",
            
#                "../../../sim/sims/SPT100_pm2em2_cat3328_tmtetq5_flqe45_1f4d17a",
#                "../../../sim/sims/SPT100_pm2em2_cat3328_tmtetq5_flqe45_tqine0",
#                "../../../sim/sims/SPT100_pm2em2_cat3328_tmte5tq0_flqe45",
                
#                "../../../sim/sims/SPT100_pm2em2_cat3328_tmtetq5_flqe45_tests",
##                "../../../sim/sims/SPT100_pm2em2_cat3328_tmtetq5_flqe45_40f7463",
#                "../../../sim/sims/SPT100_pm2em2_cat3328_tmtetq5_flqe45_1f4d17a",
            
#                "../../../sim/sims/SPT100_check_commit_8ccc1d3",
#                "../../../sim/sims/SPT100_check_commit_031d443",
#                "../../../sim/sims/SPT100_check_commit_031d443_2",
#                "../../../sim/sims/SPT100_check_commit_031d443_3",
#                "../../../sim/sims/SPT100_check_commit_031d443_4",
            
            
#                "../../../sim/sims/SPT100_check_commit_8ccc1d3",
#                "../../../sim/sims/SPT100_check_commit_8ccc1d3_serial",
#                "../../../sim/sims/SPT100_check_commit_031d443",
#                "../../../sim/sims/SPT100_check_commit_031d443_serial",
            
#                "../../../Sr_sims_files/SPT100_DMD_pm2em2_cat3328_tmtetq2_Vd300",
#                "../../../sim/sims/SPT100_pm2em2_cat3328_tmtetq5_flqe45_tests",
            
            
#                 "../../../sim/sims/SPT100_pm2em2_cat3328_tmtetq5_flqe45_tests",
#                 "../../../sim/sims/SPT100_pm2em2_cat3328_tmtetq5_flqe45_noi2",
                 
#                 "../../../sim/sims/SPT100_pm2em2_cat3328_tmtetq5_flqe45_tests",
#                 "../../../sim/sims/SPT100_pm2em2_cat3328_tmtetq5_flqe45_tests",
            
#                 "../../../sim/sims/SPT100_pm2em2_cat3328_tmtetq5_flqe45",
#                 "../../../sim/sims/SPT100_pm2em2_cat3328_tmtetq5_flqe45_tests",
    
#                 "../../../sim/sims/SPT100_pm2em2_cat3328_tmtetq5_flqe45",
#                 "../../../sim/sims/SPT100_pm2em2_cat3328_tmtetq5_flqe45_Vd200",     
            
#                 "../../../sim/sims/SPT100_pm2em2_cat3328_tmtetq5_flqe45",
#                 "../../../sim/sims/SPT100_pm2em2_cat3328_tmtetq5_flqe45_mA2",
    
#                 "../../../sim/sims/SPT100_pm2em2_cat3328_tmtetq5_flqe45",
#                 "../../../sim/sims/SPT100_pm2em2_cat3328_tmtetq5_flqe45_sig1",
            
#                 "../../../sim/sims/SPT100_pm2em2_cat3328_tmtetq5_flqe45",
#                 "../../../sim/sims/SPT100_pm2em2_wcat6143_tmtetq5_flqe45",
#                 "../../../sim/sims/SPT100_pm2em2_wcat5958_tmtetq5_flqe45",
                 

#                 "../../../sim/sims/SPT100_pm2em2_cat3328_PHIchanges_newSET",
            
#                 "../../../sim/sims/SPT100_pm2em2_cat3328_PHIchanges",
#                 "../../../sim/sims/SPT100_pm2em1_cat481_PHIchanges",
            
#                 "../../../Sr_sims_files/SPT100_DMD_pm2em2_cat3328_tmtetq2_rel",
#                 "../../../Sr_sims_files/SPT100_DMD_pm2em2_cat3328_tmtetq2",
            
            
#                 "../../../Rb_hyphen/sim/sims/SPT100_al0025_Ne5_C5",
#                 "../../../Sr_hyphen/sim/sims/SPT100_pm1em1_cat878_tmtetq25",
            
#                 "../../../Rb_sims_files/Topo2_n4_l200s200_cat1200_tm110_tetq125",
#                 "../../../Rb_sims_files/Topo2_n4_l200s200_cat1200_tm110_tetq125_CEX",
    
                 
#                "../../../Rb_sims_files/Topo2_n4_l200s200_cat1200_tm15_te1_tq125",
#                "../../../H_sims/Ca/hyphen/sims/T2N4_pm1em1_cat1200_tm15_te1_tq125_71d0dcb",
#                "../../../sim/sims/T2N4_pm1em1_cat1200_tm15_te1_tq125_NEW",
#                "../../../Sr_hyphen/sim/sims/T2N4_pm1em1_cat1200_tm15_te1_tq125_0438e2a",
#                "../../../Sr_hyphen/sim/sims/T2N4_pm1em1_cat1200_tm15_te1_tq125_0438e2a_Es65",
#                "../../../Sr_hyphen/sim/sims/T2N4_pm1em1_cat1200_tm15_te1_tq125_REF",
#                "../../../Sr_hyphen/sim/sims/T2N4_pm1em1_cat1200_tm15_te1_tq125_floating",
#                "../../../Sr_hyphen/sim/sims/T2N4_pm1em1_cat1200_tm15_te1_tq125_GDML",
#                "../../../Sr_hyphen/sim/sims/T2N4_pm1em1_WC1959_tm15_te1_tq125_GDML_mc0",
#                "../../../Sr_hyphen/sim/sims/T2N4_pm1em1_WC1959_tm15_te1_tq125_GDML",
#                "../../../Ca_hyphen/sim/sims/T2N4_pm1em1_WC1959_tm15_te1_tq125_GDML_mc0_Temin",
#                "../../../Ca_hyphen/sim/sims/T2N4_pm1em1_WC1959_tmte15_tq125_GDML_mc0_Temin",
#                "../../../Ca_hyphen/sim/sims/T2N4_pm1em1_WC1959_tm15_te1_tq125_GDML_phiinf",
#                "../../../Ca_hyphen/sim/sims/T2N4_pm1em1_WC1959_tm15_te1_tq125_GDML_phiinfplus",
#                "../../../Ca_hyphen/sim/sims/T2N4_pm1em1_WC1959_tm15_te1_tq125_GDML_phiinfminus",
#                "../../../Ca_hyphen/sim/sims/T2N4_pm1em1_WC1959_tm15_te1_tq125_GDML_mindens",
#                "../../../Ca_hyphen/sim/sims/T2N4_pm1em1_WC1959_tm15_te1_tq125_GDML_limje",
#                "../../../Ca_hyphen/sim/sims/T2N4_pm1em1_WC1959_tm15_te1_tq125_GDML_scham_alwn1",
#                "../../../Ca_hyphen/sim/sims/T2N4_pm1em1_WC1959_tm15_te1_tq125_GDML_tqine0",
#                "../../../sim/sims/T2N4_pm1em1_WC1959_tm15_te1_tq125_GDML_tests",
#                "../../../Ca_hyphen/sim/sims/T2N4_pm1em1_WC1959_tm15_te1_tq125_GDML_CSL",
                
#                "../../../Ca_hyphen/sim/sims/VHT_US_plume10_OP1",
#                "../../../Ca_hyphen/sim/sims/VHT_US_plume20_OP1",
#                "../../../Ca_hyphen/sim/sims/VHT_US_plume40_OP1",

#                "../../../H_sims/Mg/hyphen/sims/IEPC_2022/Plume30_OP3_global_CEX_Np",
#                "../../../Mg_hyphen/sim/sims/Plume30_OP3_global_CEX_Np_new",

#                "../../../Mg_hyphen/sim/sims/Plume30_OP3_global_CEX_Np_new",
#                "../../../Mg_hyphen/sim/sims/Plume30_OP3_global_CEX_Np_new_efieldcomp1",
    
        
                # "../../../sim/sims/P3G",
                # # "../../../sim/sims/P3G_fcat3608",
                # # "../../../sim/sims/P3G_fcat1003",
                # # "../../../sim/sims/P3G_fcat1298",
                # "../../../sim/sims/P3G_fcat1962",
                # "../../../sim/sims/P3G_fcat1962_alphat2",
                # "../../../sim/sims/P3G_fcat1962_alphat5",
                # "../../../sim/sims/P3G_fcat1962_alphat10",
        
                # "../../../sim/sims/P3G",
                # "../../../sim/sims/P3G_alphat2",
                # "../../../sim/sims/P3G_alphat1_2",
                # "../../../sim/sims/P3G_fcat1962",
                # "../../../sim/sims/P3G_fcat1962_alphat2",

                # "../../../sim/sims/P3G_Tcath_new",
                # "../../../sim/sims/P3G_fcat1962_Tcath_new",
                # "../../../sim/sims/P3L_Tcath_new",
                # "../../../sim/sims/P3L_fcat1962_Tcath_new",
        
                # "../../../sim/sims/P3G_Tcath_new",
                # "../../../sim/sims/P3G_fcat6259_5993_Tcath_new",
                # "../../../sim/sims/P3L_Tcath_new",
                # "../../../sim/sims/P3L_fcat6259_5993_Tcath_new",
                
                # "../../../sim/sims/P2G",
                # "../../../sim/sims/P2G_fcat905",
                # "../../../sim/sims/P2L",
                # "../../../sim/sims/P2L_fcat905",
        
                # "../../../sim/sims/P2G_Tcath_new",
                # "../../../sim/sims/P2G_fcat3198_Tcath_new",
                # "../../../sim/sims/P2L_Tcath_new",
                # "../../../sim/sims/P2L_fcat3198_Tcath_new",
                
                # "../../../sim/sims/P2G_Tcath_new",
                # "../../../sim/sims/P2G_fcat2543_2542_Tcath_new",
                # "../../../sim/sims/P2L_Tcath_new",
                # "../../../sim/sims/P2L_fcat2543_2542_Tcath_new",
        
                # "../../../sim/sims/P4G_Fz_Tcath_new",
                # "../../../sim/sims/P4G_fcat7610_Fz_Tcath_new",
                # "../../../sim/sims/P4L_Fz_Tcath_new",
                # "../../../sim/sims/P4L_fcat7610_Fz_Tcath_new",
                
                # "../../../sim/sims/P4G_Fz_Tcath_new",
                # "../../../sim/sims/P4G_fcat6266_2356_Fz_Tcath_new",
                # "../../../sim/sims/P4L_Fz_Tcath_new",
                # "../../../sim/sims/P4L_fcat6266_2356_Fz_Tcath_new",
        
                # "../../../sim/sims/P2G_fcat3198_Tcath_new",
                # "../../../sim/sims/P3G_fcat1962_Tcath_new",
                # "../../../sim/sims/P4G_fcat7610_Fz_Tcath_new",
               
                # "../../../sim/sims/P2L_fcat3198_Tcath_new",
                # "../../../sim/sims/P3L_fcat1962_Tcath_new",
                # "../../../sim/sims/P4L_fcat7610_Fz_Tcath_new",
                
                # "../../../sim/sims/P2G_fcat2543_2542_Tcath_new",
                # "../../../sim/sims/P3G_fcat6259_5993_Tcath_new",
                # "../../../sim/sims/P4G_fcat6266_2356_Fz_Tcath_new",
                
                # "../../../sim/sims/P2L_fcat2543_2542_Tcath_new",
                # "../../../sim/sims/P3L_fcat6259_5993_Tcath_new",
                # "../../../sim/sims/P4L_fcat6266_2356_Fz_Tcath_new",
                
                # "../../../sim/sims/P3G_Tcath_new",
                # "../../../sim/sims/P4G_Fz_Tcath_new",
                # "../../../sim/sims/P4G_Fz_C1fcat2533_Tcath_new",
                # "../../../sim/sims/P4G_Fz_C1fcat2532_2533_Tcath_new",
                # "/media/adrian/easystore/PC_UMA/repos/hyphen/sims_paper_GDML/P4G_Fz_C1fcat2533_Tcath_new",
                # "/media/adrian/easystore/PC_UMA/repos/hyphen/sims_paper_GDML/P4G_Fz_C1fcat2532_2533_Tcath_new",
                
                "../../../sim/sims/P3G_Tcath_new",
                "../../../sim/sims/P3G_Tcath_new_alineq_05",
                "../../../sim/sims/P4G_Fz_Tcath_new",
                "../../../sim/sims/P4G_Fz_Tcath_new_alineq_05",
                
                
                
                
                
        
               # "../../../sim/sims/P3G",
               #  "../../../sim/sims/P3G_fcat1962",
               # "../../../sim/sims/P3G_fcat6259_5993",
               # "../../../sim/sims/P3L",
               #  "../../../sim/sims/P3L_fcat1962",
               # "../../../sim/sims/P3L_fcat6259_5993",
               
               # "../../../sim/sims/P3G_fcat6259_5993",
               # "../../../sim/sims/P3G_fcat6259_5993_efieldcomp1",
  
               # "../../../sim/sims/P3G",       
               # "../../../sim/sims/P3G_Tcath",
               # "../../../sim/sims/P3G_Tcath_efieldcomp1",
                
                # "../../../sim/sims/P2G_ionGDML",
                # "../../../sim/sims/P2G_fcat905_ionGDML",
    
        
                # "../../../sim/sims/P1L",
                # "../../../sim/sims/P2L",
                # "../../../sim/sims/P3L",
                # "../../../sim/sims/P4L",
                
                # "../../../sim/sims/P1G",
                # "../../../sim/sims/P2G",
                # "../../../sim/sims/P3G",
                # "../../../sim/sims/P4G",
        
                # "../../../sim/sims/P1G_test_jesh",
        
                # "../../../sim/sims/P1G_Tcath_new",
                # "../../../sim/sims/P2G_Tcath_new",
                # "../../../sim/sims/P3G_Tcath_new",
                # "../../../sim/sims/P4G_Fz_Tcath_new",
                
                # "../../../sim/sims/P1L_Tcath_new",
                # "../../../sim/sims/P2L_Tcath_new",
                # "../../../sim/sims/P3L_Tcath_new",
                # "../../../sim/sims/P4L_Fz_Tcath_new",

                # "../../../Mg_hyphen/sim/sims/Plume10_OP3_global_CEX_Np_new",
                # "../../../Mg_hyphen/sim/sims/Plume20_OP3_global_CEX_Np_new",
                # "../../../Mg_hyphen/sim/sims/Plume30_OP3_global_CEX_Np_new",
                # "../../../Mg_hyphen/sim/sims/Plume40_OP3_global_CEX_Np_new",

#                "../../../Mg_hyphen/sim/sims/Plume10_OP3_local_CEX_Np_new",
#                "../../../Mg_hyphen/sim/sims/Plume20_OP3_local_CEX_Np_new",
#                "../../../Mg_hyphen/sim/sims/Plume30_OP3_local_CEX_Np_new",
#                "../../../Mg_hyphen/sim/sims/Plume40_OP3_local_CEX_Np_new",
    
#               "../../../H_sims/Mg/hyphen/sims/IEPC_2022/Plume10_OP3_global_CEX_Np",
#                "../../../H_sims/Mg/hyphen/sims/IEPC_2022/Plume20_OP3_global_CEX_Np",
#                "../../../H_sims/Mg/hyphen/sims/IEPC_2022/Plume30_OP3_global_CEX_Np",
#                "../../../H_sims/Mg/hyphen/sims/IEPC_2022/Plume40_OP3_global_CEX_Np",
                
#                "../../../H_sims/Mg/hyphen/sims/IEPC_2022/Plume10_OP3_local_CEX_Np",
#                "../../../H_sims/Mg/hyphen/sims/IEPC_2022/Plume20_OP3_local_CEX_Np",
#                "../../../H_sims/Mg/hyphen/sims/IEPC_2022/Plume30_OP3_local_CEX_Np",
#                "../../../H_sims/Mg/hyphen/sims/IEPC_2022/Plume40_OP3_local_CEX_Np",
    
#                "../../../Mg_hyphen_alejandro/sim/sims/VLP_300_35_Kr",
#                "../../../Mg_hyphen_alejandro/sim/sims/VLP_300_35_VDF",
                
#                "../../../Mg_hyphen_alejandro/sim/sims/VLP_9L_refined",
#                "../../../Mg_hyphen_alejandro/sim/sims/Neutral_injection_VLP",
                  
#                "../../../sim/sims/CHEOPS_LP_OP1",
#                "../../../Mg_hyphen_alejandro/sim/sims/VLP_300_25",
                
#                "../../../Mg_hyphen_alejandro/sim/sims/VLP_300_25",
#                 "../../../Mg_hyphen_alejandro/sim/sims/VLP_6L_CEX",
                 
#                 "../../../Mg_hyphen_alejandro/sim/sims/VLP_300_25",
#                 "../../../H_sims/Mg/hyphen/sims/CHEOPS_LP/PPSX00_OP1_CEX",
    
#                  "../../../sim/sims/PPSX00_OP1",
#                  "../../../sim/sims/PPSX00_OP1_CEX",
    
#                 "../../../sim/sims/PPSX00_OP1_new",
#                 "../../../Mg_hyphen_borja/sim/sims/PPSX00_OP1_tmte12_tq1",
#                 "../../../Mg_hyphen_borja/sim/sims/PPSX00_em1_OP2c_tmte08_2_tq1",
                 
#                 "../../../Mg_hyphen_borja/sim/sims/PPSX00_em1_OP2c_tmte08_2_tq1_fcat5803_CEX",
#                 "../../../Mg_hyphen_borja/sim/sims/PPSX00_em1_OP2c_tmte08_2_tq1_fcat3360_CEX",
#                 "../../../Mg_hyphen_borja/sim/sims/PPSX00_em1_OP2c_tmte08_2_tq1_fcat3361_CEX",
#                 "../../../Mg_hyphen_borja/sim/sims/PPSX00_em1_OP2c_tmte08_2_tq1_fcat203_CEX",
#                 "../../../Mg_hyphen_borja/sim/sims/PPSX00_em1_OP2c_tmte08_2_tq1_fcat4058_CEX",
                 
                 
#                 "../../../Mg_hyphen_borja/sim/sims/PPSX00_em2_OP2c_tmte08_2_tq1_fcat6113",
#                 "../../../Mg_hyphen_borja/sim/sims/PPSX00_em2_OP2c_tmte08_2_tq1_fcat6113_CEX",
#                 "../../../Mg_hyphen_borja/sim/sims/PPSX00_em2_OP2c_tmte08_2_tq1_fcat6113_CEX_Kr",
#                 "../../../Mg_hyphen_borja/sim/sims/PPSX00_em2_OP2f_tmte08_2_tq1_fcat6113_CEX",
#                 "../../../Mg_hyphen_borja/sim/sims/PPSX00_em2_OP2g_tmte08_2_tq1_fcat6113_CEX",
                 
#                 "../../../Mg_hyphen_borja/sim/sims/PPSX00_em2_OP2c_tmte08_2_tq1_fcat6113_CEX",
#                 "../../../Mg_hyphen_borja/sim/sims/PPSX00_em2_OP2c_tmte08_2_tq1_fcat6113_CEX_Kr",
#                 "../../../Mg_hyphen_borja/sim/sims/PPSX00_em2_OP2c_tmte08_2_tq1_fcat6113_CEX_Kr2",
                 
#                 "../../../Mg_hyphen_borja/sim/sims/PPSX00_em2_OP2h_tmte07_2_tq1_fcat6113_CEX",
#                 "../../../Mg_hyphen_borja/sim/sims/PPSX00_em2_OP2h_tmte08_2_tq1_fcat6113_CEX",
    
#                  "../../../Mg_hyphen_borja/sim/sims/PPSX00_em2_OP2c_tmte08_2_tq1_fcat6113_CEX",
#                  "../../../Mg_hyphen_borja/sim/sims/PPSX00_em2_OP2c_tmte08_2_tq1_fcat6113_CEX_uz0",
                 
#                 "../../../Mg_hyphen_borja/sim/sims/PPSX00_em2_OP2a_tm2_2_te52_tq1_fcat4656_CEX",
#                 "../../../Mg_hyphen_borja/sim/sims/PPSX00_em2_OP2b_tm2_2_te3_tq1_fcat4656_CEX",
#                  "../../../Ca_hyphen/sim/sims/PPSX00_em2_OP2c_tmte08_2_tq1_fcat4656_CEX",
#                  "../../../Ca_hyphen/sim/sims/PPSX00_em2_OP2f_tmte08_2_tq1_fcat4656_CEX",
#                  "../../../Mg_hyphen_borja/sim/sims/PPSX00_em2_OP2g_tmte08_2_tq1_fcat4656_CEX",
#                  "../../../Mg_hyphen_borja/sim/sims/PPSX00_em2_OP2h_tmte06_2_tq1_fcat4656_CEX",

#                 "../../../Mg_hyphen_borja/sim/sims/PPSX00_em2_OP2c_tmte08_2_tq1_fcat2774_CEX",   
#                 "../../../Ca_hyphen/sim/sims/PPSX00_em2_OP2c_tmte08_2_tq1_fcat4656_CEX",    
#                 "../../../Mg_hyphen_borja/sim/sims/PPSX00_em2_OP2c_tmte08_2_tq1_fcat5026_CEX",         
#                 "../../../Mg_hyphen_borja/sim/sims/PPSX00_em2_OP2c_tmte08_2_tq1_fcat654_CEX",  
#                 "../../../Ca_hyphen/sim/sims/PPSX00_em2_OP2c_tmte08_2_tq1_fcat1171_CEX",  
    

#                 "../../../Ca_hyphen/sim/sims/PPSX00_em2_OP2c_tmte08_2_tq1_fcat4656_CEX",
#                 "../../../Ca_hyphen/sim/sims/PPSX00_em2_OP2c_tmte08_2_tq1_fcat4656_CEX_Kr",

#                 "../../../Mg_hyphen_borja/sim/sims/PPSX00_em2_OP2h_tmte06_2_tq1_fcat4656_CEX",
#                 "../../../Mg_hyphen_borja/sim/sims/PPSX00_em2_OP2h_tmte06_2_tq1_fcat4656_CEX_Kr",
    
#                 "../../../H_AModesti/HYPHEN-input-sims-19052023/VUS_OP3_isoturb",
#                  "../../../Ca_hyphen/sim/sims/Plume20_OP3_global_CEX_Np_new_efield_comp1",
#                  "../../../Ca_hyphen/sim/sims/Plume20_OP3_global_CEX_Np_new",
                  

#                "../../../Ca_hyphen/sim/sims/LP_testcase1_VC1612_tmtetq1_GDML",
#                "../../../Ca_hyphen/sim/sims/LP_testcase1_WC2219_tmtetq1_GDML",
                 
#                 "../../../Ca_hyphen/sim/sims/HT5k_rm6_tm08_8te1tq25s01_V300_m14_change_inj",
                 
                 


                 ]
    
    topo_case = 0
    if topo_case == 1:
        PIC_mesh_file_name = ["PIC_mesh_topo1_refined4.hdf5",
                              "PIC_mesh_topo1_refined4.hdf5",
                              "PIC_mesh_topo1_refined4.hdf5",
                              "PIC_mesh_topo1_refined4.hdf5",
                              "PIC_mesh_topo1_refined4.hdf5",
                              "PIC_mesh_topo1_refined4.hdf5",
                              "PIC_mesh_topo1_refined4.hdf5",
                              "PIC_mesh_topo1_refined4.hdf5",
                             ]
    elif topo_case == 2:
        PIC_mesh_file_name = [
                              "PIC_mesh_topo2_refined4.hdf5",
                              "PIC_mesh_topo2_refined4.hdf5",
                              "PIC_mesh_topo2_refined4.hdf5",
                              "PIC_mesh_topo2_refined4.hdf5",
                              "PIC_mesh_topo2_refined4.hdf5",
                              "PIC_mesh_topo2_refined4.hdf5",
                              "PIC_mesh_topo2_refined4.hdf5"
                              ]
    elif topo_case == 3:
        PIC_mesh_file_name = [
                              "PIC_mesh_LP.hdf5",
                              "HT5k_PIC_mesh_rm3.hdf5",
                              "HT5k_PIC_mesh_rm3.hdf5",
                              "HT5k_PIC_mesh_rm3.hdf5",
                              "HT5k_PIC_mesh_rm3.hdf5",
                              "HT5k_PIC_mesh_rm3.hdf5",
                              "HT5k_PIC_mesh_rm3.hdf5",
                             ]
    elif topo_case == 0:    
        PIC_mesh_file_name = [
            
                              # "PIC_mesh_may1.hdf5",
#                              "PIC_mesh_MP.hdf5",
                              "PIC_mesh.hdf5",
                              "PIC_mesh.hdf5",
                              "PIC_mesh.hdf5",
                              "PIC_mesh.hdf5",
                              "PIC_mesh.hdf5",
                              "PIC_mesh.hdf5",
                              "PIC_mesh.hdf5",
                              "PIC_mesh.hdf5",
                              "PIC_mesh.hdf5",
                              "SPT100_picM_Reference1500points_rm2.hdf5",
                              "SPT100_picM_Reference1500points_rm2.hdf5",
                              "SPT100_picM_Reference1500points_rm2.hdf5",
                              "SPT100_picM_Reference1500points_rm2.hdf5",
                              "SPT100_picM_Reference1500points_rm2.hdf5",
                              "SPT100_picM.hdf5",
                              "SPT100_picM.hdf5",
                              "SPT100_picM.hdf5",
                              "SPT100_picM.hdf5",
                              "SPT100_picM_Reference1500points_rm.hdf5",
                              "SPT100_picM_Reference1500points_rm.hdf5",
                              "SPT100_picM_Reference1500points_rm.hdf5",
                              "SPT100_picM.hdf5",
                              "SPT100_picM.hdf5"
                              ]

    # Labels  

    labels = [ 
            
#               r"PPSX00 OP1 Xe",
#               r"VHT LP OP1 Xe 6L",
               
#               r"No CEX",
#               r"CEX",
#               
#               r"$\dot{m} = 0$ mg/s",
#               r"$\dot{m} = 0.25$ mg/s",
               
#               r"5803",
#               r"3360",
#               r"3361",
#               r"203",
#               r"4058",

#               r"OP2c No CEX",
#               r"OP2c",
#               r"OP2c Kr",
#               r"OP2f",
#               r"OP2g",
#               r"",
    
        
               # r"$r_\mathrm{c0}$",
               # r"$r_\mathrm{c}/r_\mathrm{c0} = 1.2\%$",
               # r"$r_\mathrm{c}/r_\mathrm{c0} = 2.5\%$",
               # r"$r_\mathrm{c}/r_\mathrm{c0} = 5.5\%$",
               # r"$r_\mathrm{c}/r_\mathrm{c0} = 5.5\%$, $2\alpha_\mathrm{t2}$ ",
               # r"$r_\mathrm{c}/r_\mathrm{c0} = 5.5\%$, $5\alpha_\mathrm{t2}$ ",
               # r"$r_\mathrm{c}/r_\mathrm{c0} = 5.5\%$, $10\alpha_\mathrm{t2}$ ",
        
        
        
               # r"$r_\mathrm{c0}$",
               # r"$r_\mathrm{c0}$, $2\alpha_\mathrm{t2}$",
               # r"$r_\mathrm{c0}$, $2\alpha_\mathrm{t1}$",
               # r"$r_\mathrm{c}/r_\mathrm{c0} = 5.5\%$",
               # r"$r_\mathrm{c}/r_\mathrm{c0} = 5.5\%$, $2\alpha_\mathrm{t2}$",
        
                # r"GP3C1",
                # r"GP3C2",
                # r"LP3C1",
                # r"LP3C2",
        
                # r"GP3C1",
                # r"GP3C3",
                # r"LP3C1",
                # r"LP3C3",
                
                # r"GP2C1",
                # r"GP2C2",
                # r"LP2C1",
                # r"LP2C2",
                
                # r"GP2C1",
                # r"GP2C3",
                # r"LP2C1",
                # r"LP2C3",
                
                # r"GP4C1",
                # r"GP4C2",
                # r"LP4C1",
                # r"LP4C2",
                
                # r"GP4C1",
                # r"GP4C3",
                # r"LP4C1",
                # r"LP4C3",
                
                # r"P2G ionGDML",
                # r"P2GC ionGDML",
        
                r"GP3C1",
                r"GP3C1 $\alpha_\mathrm{ine} = 0.5\%$",
                r"GP4C1",
                r"GP4C1 $\alpha_\mathrm{ine} = 0.5\%$",
               
                r"LP1C1",
                r"LP2C1",
                r"LP3C1",
                r"LP4C1",
               
                r"GP1C1",
                r"GP2C1",
                r"GP3C1",
                r"GP4C1",
        
                # r"P3G1",
                # r"P3G2",
                # r"P3G3",
                # r"P3L1",
                # r"P3L2",
                # r"P3L3",
        
                 # r"P3G3, $P''_{eC}$",
                 # r"P3G3, $P''_{eC}$ efieldcomp1",
                 
                 # r"P3G1, $P''_{eC}$",
                 # r"P3G1, $T_{eC}$",
                 # r"P3G1, $T_{eC}$ efieldcomp1",
        
        
               r"",
               r"",
               r"",
               r"",
               r"",
               r"",

               r"$r_\mathrm{C}/r_\mathrm{C0} = 0.98$",
               r"$r_\mathrm{C}/r_\mathrm{C0} = 1.00$",
               r"$r_\mathrm{C}/r_\mathrm{C0} = 1.02$",
               r"$r_\mathrm{C}/r_\mathrm{C0} = 1.05$",
               r"$r_\mathrm{C}/r_\mathrm{C0} = 1.20$",
               
#               r"T2N4 before improvements",
#               r"T2N4 after improvements (031d443)",
#               r"T2N4 after improvements (0438e2a)",
               
#               r"T2N4 before improvements",
#               r"T2N4 after improvements (0438e2a)",
#               r"T2N4 after improvements (0438e2a) bis",
               
                r"HT5k rm6 WC mdotC Tcat",
            
#               r"pm2em2 cat3328 tmtetq5 tqine0",
#               r"pm2em2 cat3328 tmtetq4 tqine0",
            
#               r"pm2em2 cat3328 1f4d17a",
#               r"pm2em2 cat3328 tqine0",
#               r"pm2em2 cat3328 tmte5te0",
            
            
#               r"pm2em2 cat3328",
#               r"pm2em2 cat3328 1f4d17a",
            
#               r"pm2em2 cat3328 DMD ref tmtetq2",
#               r"pm2em2 cat3328 mod iter tmtetq5",
            
            
#               r"T2N4 orig",
#               r"T2N4 71d0dcb (final report)",
#               r"T2N4 NEW",
               
#               r"T2N4 before improvements",
#               r"T2N4 after improvements",
               
               r"Local zero current",
               r"Global DML",
               
#               r"VC",
#               r"WC1",
#               r"WC2",
            
#               r"$V_d = 300$ V",
#               r"$V_d = 200$ V",
            
#               r"$\dot{m}_A = 5$ mg/s",
#               r"$\dot{m}_A = 2$ mg/s",
            
#               r"$\sigma_t = 0.3$",
#               r"$\sigma_t = 1.0$",
    
    
               r"pm2em2 cat3328",
               r"pm2em2 cat3328 no i2",
    
               r"pm2em2 cat3328 hefunc1 fl 1",
               r"pm2em2 cat3328 hefunc1 fl 1 condwall connect1",
#               r"pm2em2 cat3328 hefunc1 fl 1 condwall connect0",
    
#               r"pm2em2 cat3328 hefunc1 fl 1",
#               r"pm2em2 cat3328 hefunc0 fl 2",
    
#               r"pm2em2 cat3328 mod iter noRLC",
#               r"pm2em2 cat3328 mod iter RLC",
    
#               r"pm2em2 cat3328 mod nonewiter",
#               r"pm2em2 cat3328 mod iterations",
    
#               r"pm2em2 cat3328 mod nonewiter",
#               r"pm2em2 cat3328 jemean nonewiter",
    
               r"pm2em2 cat3328 RLC mod noiter",
               r"pm2em2 cat3328 RLC mod iter",
    
               r"pm2em2 cat3328 RLC iter mod",
               r"pm2em2 cat3328 RLC iter jemean",
            
               r"pm2em2 cat3328",
               r"pm2em2 cat3328 tests",
            
               r"pm2em1 cat481 PHIchanges",
               
               r"SPT100 C4 thesis",
               r"SPT100 C4 new",
            
               r"T2N4",
               r"T2N4 CEX",
            
               r"T2N3-REF Kr",
            
            

              ]
              

    # Titles for the reference case and S case
    titles_Id_fig = [r"(a) $I_d$ (A)",
                     r"(e) $I_d$ instantaneous (A)",
                     r"(b) $I_d$ normalized spectrum (-)",
                     r"(e) Instantaneous $I_d$ normalized spectrum (-)",
                     r"(g) $I_{i \infty}$ (A)",
                     r"(h) $I_{i \infty}$ normalized spectrum (-)",
                     r"(c) $I_d$, $I_{i \infty}$ (A)",
                     r"(d) $I_d$, $I_{i \infty}$ normalized spectrum (-)"]
                     
    titles_dens_fig = [r"(c) $\bar{n}_e$ (m$^{-3}$)",
                       r"(a) $\bar{n}_{n}$ (m$^{-3}$)",
                       r"(d) $\bar{n}_e$ normalized spectrum (-)",
                       r"(b) $\bar{n}_n$ normalized spectrum (-)",
                       r"(a) $\bar{n}_e$, $\bar{n}_n$ (m$^{-3}$)",
                       r"(b) $\bar{n}_e$, $\bar{n}_n$ normalized spectrum (-)"]
                       
    titles_eff_fig  = [r"(e) $\eta_{u}$ (-)",
                       r"(f) $\eta_{thr}$ (-)"]
                       
                       
    # Titles for the cathode cases
    titles_Id_fig = [r"$I_\mathrm{d}$ (A)",
                     r"$I_\mathrm{d}$ instantaneous (A)",
                     r"$I_\mathrm{d}$ normalized spectrum",
                     r"Instantaneous $I_\mathrm{d}$ normalized spectrum",
                     r"$I_\mathrm{i \infty}$ (A)",
                     r"$I_\mathrm{i \infty}$ normalized spectrum",
                     r"$I_\mathrm{d}$, $I_{i \infty}$ (A)",
                     r"$I_\mathrm{d}$, $I_\mathrm{i \infty}$ normalized spectrum",
#                     r"$I_\mathrm{C}$ (A)",
                     r"$I_\mathrm{d}$ (A)",
#                     r"$I_\mathrm{C}$ normalized spectrum",
                     r"$I_\mathrm{d}$ normalized spectrum",
                     r"$I_\mathrm{cond}$ (A)",
                     r"$I_\mathrm{cond}$ normalized spectrum",
                     r"$\epsilon_{I}$",
                     r"$I_\mathrm{cond}$ + $I_\mathrm{d}$ (A)",
                     ]
                     
    titles_dens_fig = [r"$\bar{n}_e$ (m$^{-3}$)",
                       r"$\bar{n}_{n}$ (m$^{-3}$)",
                       r"$\bar{n}_e$ normalized spectrum (-)",
                       r"$\bar{n}_n$ normalized spectrum (-)",
                       r"$\bar{n}_e$, $\bar{n}_n$ (m$^{-3}$)",
                       r"$\bar{n}_e$, $\bar{n}_n$ normalized spectrum (-)"]
                       
                       
#    # Titles for the alpha_t g1 cases
#    titles_Id_fig = [r"(a) $I_d$ (A)",
#                     r"(e) $I_d$ instantaneous (A)",
#                     r"(c) $I_d$ normalized spectrum (-)",
#                     r"(e) Instantaneous $I_d$ normalized spectrum (-)",
#                     r"(g) $I_{i \infty}$ (A)",
#                     r"(h) $I_{i \infty}$ normalized spectrum (-)",
#                     r"(c) $I_d$, $I_{i \infty}$ (A)",
#                     r"(d) $I_d$, $I_{i \infty}$ normalized spectrum (-)"]
#                     
#    titles_dens_fig = [r"(e) $\bar{n}_e$ (m$^{-3}$)",
#                       r"(g) $\bar{n}_{n}$ (m$^{-3}$)",
#                       r"(d) $\bar{n}_e$ normalized spectrum (-)",
#                       r"(b) $\bar{n}_n$ normalized spectrum (-)",
#                       r"(a) $\bar{n}_e$, $\bar{n}_n$ (m$^{-3}$)",
#                       r"(b) $\bar{n}_e$, $\bar{n}_n$ normalized spectrum (-)"]
                       
                       
#    # Titles for the alpha_t g2 cases
#    titles_Id_fig = [r"(b) $I_d$ (A)",
#                     r"(e) $I_d$ instantaneous (A)",
#                     r"(d) $I_d$ normalized spectrum (-)",
#                     r"(e) Instantaneous $I_d$ normalized spectrum (-)",
#                     r"(g) $I_{i \infty}$ (A)",
#                     r"(h) $I_{i \infty}$ normalized spectrum (-)",
#                     r"(c) $I_d$, $I_{i \infty}$ (A)",
#                     r"(d) $I_d$, $I_{i \infty}$ normalized spectrum (-)"]
#                     
#    titles_dens_fig = [r"(f) $\bar{n}_e$ (m$^{-3}$)",
#                       r"(h) $\bar{n}_{n}$ (m$^{-3}$)",
#                       r"(d) $\bar{n}_e$ normalized spectrum (-)",
#                       r"(b) $\bar{n}_n$ normalized spectrum (-)",
#                       r"(a) $\bar{n}_e$, $\bar{n}_n$ (m$^{-3}$)",
#                       r"(b) $\bar{n}_e$, $\bar{n}_n$ normalized spectrum (-)"]
                       
    # Titles for the Vd_cases and mA_cases
#    titles_Id_fig = [r"(a) $I_d$ (A)",
#                     r"(e) $I_d$ instantaneous (A)",
#                     r"(b) $I_d$ normalized spectrum (-)",
#                     r"(e) Instantaneous $I_d$ normalized spectrum (-)",
#                     r"(g) $I_{i \infty}$ (A)",
#                     r"(h) $I_{i \infty}$ normalized amplitude (-)",
#                     r"(c) $I_d$, $I_{i \infty}$ (A)",
#                     r"(d) $I_d$, $I_{i \infty}$ normalized spectrum (-)"]
#                     
#    titles_dens_fig = [r"(c) $\bar{n}_e$ (m$^{-3}$)",
#                       r"(e) $\bar{n}_{n}$ (m$^{-3}$)",
#                       r"(d) $\bar{n}_e$ normalized spectrum (-)",
#                       r"(f) $\bar{n}_n$ normalized spectrum (-)",
#                       r"(a) $\bar{n}_e$, $\bar{n}_n$ (m$^{-3}$)",
#                       r"(b) $\bar{n}_e$, $\bar{n}_n$ normalized spectrum (-)"]
#                       
#    titles_eff_fig  = [r"(g) $\eta_{u}$ (-)",
#                       r"(g) $\eta_{thr}$ (-)"]
    
    
    # Line colors
#    colors = ['r','g','b','k','c','m','y',orange,brown]
    colors = ['k','r','g','b','m','c','m','y',orange,brown]
    colors = ['m','k','b','r','g','c','m','c','m','y',orange,brown] # P1G-P4G, P1L-P4L (paper)
    colors = ['k','b','r','m','g','c','m','c','m','y',orange,brown] # P1G-P4G, P1L-P4L (paper)
#    colors = ['m','k','b','r','m','c','m','y',orange,brown]
#    colors = ['k','b','g','b','m','c','m','y',orange,brown]
#    colors = ['k','m',orange,brown]
    # Markers
    markers = ['s','o','v', '^', '<', '>','*']
#    markers = ['s','','D','p']
    markers = ['','','','','','','']
#    markers = ['s','o','v','^','<', '>','D','p','*']
    # Line style
    linestyles = ['-','--','-.', ':','-','--','-.']
#    linestyles = ['-','-','--','-.', ':','-','--','-.']
    linestyles = ['-','-','-','-','-','-','-']
#    linestyles = ['--','-','-.',':','-','-','-']
    
    dashList = [(None,None),(None,None),(12,6,12,6,3,6),(12,6,3,6,3,6),(5,2,20,2)] 
              
              
    if plot_mass == 1:
        # Plot the time evolution of the ions 1 mass
        plt.figure(r'mi1(t)')
        plt.xlabel(r"$t$ (ms)",fontsize = font_size)
        if time2steps_axis == 1:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        plt.title(r"(a) $m_{i1}$ ($10^{-11}$ kg)",fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the time evolution of the ions 2 mass
        plt.figure(r'mi2(t)')
        plt.xlabel(r"$t$ (ms)",fontsize = font_size)
        if time2steps_axis == 1:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        plt.title(r"(b) $m_{i2}$ ($10^{-11}$ kg)",fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the time evolution of the total ion mass
        plt.figure(r'mitot(t)')
        plt.xlabel(r"$t$ (ms)",fontsize = font_size)
        if time2steps_axis == 1:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        plt.title(r"(b) $m_{i} = m_{i1} + m_{i2}$ ($10^{-11}$ kg)",fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the time evolution of the neutral mass
        plt.figure(r'mn(t)')
        plt.xlabel(r"$t$ (ms)",fontsize = font_size)
        if time2steps_axis == 1:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        plt.title(r"(b) $m_{n}$ ($10^{-11}$ kg)",fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
    if plot_dens == 1:
        # Plot the time evolution of the average plasma density in the domain
        plt.figure(r'dens_e(t)')
        plt.xlabel(r"$t$ (ms)",fontsize = font_size)
        if time2steps_axis == 1:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        plt.title(titles_dens_fig[0],fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the time evolution of the average neutral density in the domain
        plt.figure(r'dens_n(t)')
        plt.xlabel(r"$t$ (ms)",fontsize = font_size)
        if time2steps_axis == 1:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        plt.title(titles_dens_fig[1],fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the FFT plot for the average plasma density in the domain
        plt.figure(r'FFT dens_e(t)')
        plt.xlabel(r"$f$ (Hz)",fontsize = font_size)
        plt.title(titles_dens_fig[2],fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the FFT plot for the average neutral density in the domain
        plt.figure(r'FFT dens_n(t)')
        plt.xlabel(r"$f$ (Hz)",fontsize = font_size)
        plt.title(titles_dens_fig[3],fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the time evolution of both the average plasma and neutral density in the domain
        plt.figure(r'dens_e_dens_n(t)')
        plt.xlabel(r"$t$ (ms)",fontsize = font_size)
        if time2steps_axis == 1:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        plt.title(titles_dens_fig[4],fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the FFT plot for both the average plasma and neutral density in the domain
        plt.figure(r'FFT dens_e_dens_n(t)')
        plt.xlabel(r"$f$ (Hz)",fontsize = font_size)
        plt.title(titles_dens_fig[5],fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the time evolution of both the average plasma and neutral density in the domain (normalized)
        plt.figure(r'norm_dens_e_dens_n(t)')
        plt.xlabel(r"$t$ (ms)",fontsize = font_size)
        if time2steps_axis == 1:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        plt.title(titles_dens_fig[4]+" (normalized)",fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
    if plot_Nmp == 1:
        # Plot the time evolution of the ions 1 number of particles
        plt.figure(r'Nmpi1(t)')
        plt.xlabel(r"$t$ (ms)",fontsize = font_size)
        if time2steps_axis == 1:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        plt.title(r"(a) $N_{mp,i1}$ ($10^{6}$ -)",fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the time evolution of the ions 2 number of particles
        plt.figure(r'Nmpi2(t)')
        plt.xlabel(r"$t$ (ms)",fontsize = font_size)
        if time2steps_axis == 1:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        plt.title(r"(b) $N_{mp,i2}$ ($10^{6}$ -)",fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the time evolution of the total ion number of particles
        plt.figure(r'Nmpitot(t)')
        plt.xlabel(r"$t$ (ms)",fontsize = font_size)
        if time2steps_axis == 1:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        plt.title(r"(b) $N_{mp,i} = N_{mp,i1} + N_{mp,i2}$ ($10^{6}$ -)",fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the time evolution of the neutral number of particles
        plt.figure(r'Nmpn(t)')
        plt.xlabel(r"$t$ (ms)",fontsize = font_size)
        if time2steps_axis == 1:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        plt.title(r"(b) $N_{mp,n}$ ($10^{6}$ -)",fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
    if plot_eff == 1:
        # Plot the time evolution of the utilization efficiency
        plt.figure(r'eta_u(t)')
        plt.xlabel(r"$t$ (ms)",fontsize = font_size)
        if time2steps_axis == 1 and prntstepsID_axis == 0:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        elif time2steps_axis == 1 and prntstepsID_axis == 1:
            plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
        plt.title(titles_eff_fig[0],fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the time evolution of the production efficiency
        plt.figure(r'eta_prod(t)')
        plt.xlabel(r"$t$ (ms)",fontsize = font_size)
        if time2steps_axis == 1 and prntstepsID_axis == 0:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        elif time2steps_axis == 1 and prntstepsID_axis == 1:
            plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
        plt.title(r"(e) $\eta_{prod}$ (-)",fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the time evolution of the current efficiency
        plt.figure(r'eta_cur(t)')
        plt.xlabel(r"$t$ (ms)",fontsize = font_size)
        if time2steps_axis == 1 and prntstepsID_axis == 0:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        elif time2steps_axis == 1 and prntstepsID_axis == 1:
            plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
        plt.title(r"(e) $\eta_{cur}$ (-)",fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the time evolution of the divergence efficiency
        plt.figure(r'eta_div(t)')
        plt.xlabel(r"$t$ (ms)",fontsize = font_size)
        if time2steps_axis == 1 and prntstepsID_axis == 0:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        elif time2steps_axis == 1 and prntstepsID_axis == 1:
            plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
        plt.title(r"(e) $\eta_{div}$ (-)",fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the time evolution of the thrust efficiency
        plt.figure(r'eta_thr(t)')
        plt.xlabel(r"$t$ (ms)",fontsize = font_size)
        if time2steps_axis == 1 and prntstepsID_axis == 0:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        elif time2steps_axis == 1 and prntstepsID_axis == 1:
            plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
        plt.title(titles_eff_fig[1],fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
    if plot_thr == 1:
        # Plot the time evolution of the total thrust
        plt.figure(r'T(t)')
        plt.xlabel(r"$t$ (ms)",fontsize = font_size)
        if time2steps_axis == 1 and prntstepsID_axis == 0:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        elif time2steps_axis == 1 and prntstepsID_axis == 1:
            plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
        plt.title(r"(h) $F$ (mN)",fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the time evolution of the ions 1 thrust
        plt.figure(r'Ti1(t)')
        plt.xlabel(r"$t$ (ms)",fontsize = font_size)
        if time2steps_axis == 1 and prntstepsID_axis == 0:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        elif time2steps_axis == 1 and prntstepsID_axis == 1:
            plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
        plt.title(r"(e) $F_{i1}$ (mN)",fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the time evolution of the ions 2 thrust
        plt.figure(r'Ti2(t)')
        plt.xlabel(r"$t$ (ms)",fontsize = font_size)
        if time2steps_axis == 1 and prntstepsID_axis == 0:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        elif time2steps_axis == 1 and prntstepsID_axis == 1:
            plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
        plt.title(r"(e) $F_{i2}$ (mN)",fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the time evolution of the neutrals 1 thrust
        plt.figure(r'Tn(t)')
        plt.xlabel(r"$t$ (ms)",fontsize = font_size)
        if time2steps_axis == 1 and prntstepsID_axis == 0:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        elif time2steps_axis == 1 and prntstepsID_axis == 1:
            plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
        plt.title(r"(e) $F_{n}$ (mN)",fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
    if plot_Te == 1:
        # Plot the time evolution of the average Te in the domain
        plt.figure(r'Te(t)')
        plt.xlabel(r"$t$ (ms)",fontsize = font_size)
        if time2steps_axis == 1 and prntstepsID_axis == 0:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        elif time2steps_axis == 1 and prntstepsID_axis == 1:
            plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
        plt.title(r"(e) $T_e$ (eV)",fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the FFT plot for the average Te in the domain
        plt.figure(r'FFT Te(t)')
        plt.xlabel(r"$f$ (Hz)",fontsize = font_size)
        plt.title(r"(b) $T_e$ normalized amplitude (-)",fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the time evolution of both the normalized Id and Te_mean_dom            
        plt.figure(r'Te_Id(t)')
        plt.xlabel(r"$t$ (ms)",fontsize = font_size)
        if time2steps_axis == 1 and prntstepsID_axis == 0:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        elif time2steps_axis == 1 and prntstepsID_axis == 1:
            plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
        plt.title(r"(e) $T_e/\bar{T}_e$, $I_d/\bar{I}_d$ (-)",fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
    if plot_Id == 1:
        # Plot the time evolution of the discharge current
        plt.figure(r'Id(t)')
        plt.xlabel(r"$t$ (ms)",fontsize = font_size)
        if time2steps_axis == 1 and prntstepsID_axis == 0:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        elif time2steps_axis == 1 and prntstepsID_axis == 1:
            plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
        plt.title(titles_Id_fig[0],fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the time evolution of the instantaneous discharge current
        plt.figure(r'Id_inst(t)')
        plt.xlabel(r"$t$ (ms)",fontsize = font_size)
        if time2steps_axis == 1 and prntstepsID_axis == 0:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        elif time2steps_axis == 1 and prntstepsID_axis == 1:
            plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
        plt.title(titles_Id_fig[1],fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the FFT plot for the discharge current
        plt.figure(r'FFT Id(t)')
        plt.xlabel(r"$f$ (Hz)",fontsize = font_size)
        plt.title(titles_Id_fig[2],fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the FFT plot for the instantaneous discharge current
        plt.figure(r'FFT Id_inst(t)')
        plt.xlabel(r"$f$ (Hz)",fontsize = font_size)
        plt.title(titles_Id_fig[3],fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the time evolution of the ion beam current
        plt.figure(r'I_beam(t)')
        plt.xlabel(r"$t$ (ms)",fontsize = font_size)
        if time2steps_axis == 1 and prntstepsID_axis == 0:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        elif time2steps_axis == 1 and prntstepsID_axis == 1:
            plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
        plt.title(titles_Id_fig[4],fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the FFT plot for the ion beam current
        plt.figure(r'FFT I_beam(t)')
        plt.xlabel(r"$f$ (Hz)",fontsize = font_size)
        plt.title(titles_Id_fig[5],fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the time evolution of both the discharge and the beam current
        plt.figure(r'Id_Ibeam(t)')
        plt.xlabel(r"$t$ (ms)",fontsize = font_size)
        if time2steps_axis == 1 and prntstepsID_axis == 0:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        elif time2steps_axis == 1 and prntstepsID_axis == 1:
            plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
        plt.title(titles_Id_fig[6],fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the FFT plot for both the discharge and the ion beam current
        plt.figure(r'FFT Id_Ibeam(t)')
        plt.xlabel(r"$t$ (ms)",fontsize = font_size)
        if time2steps_axis == 1 and prntstepsID_axis == 0:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        elif time2steps_axis == 1 and prntstepsID_axis == 1:
            plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
        plt.title(titles_Id_fig[7],fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the time evolution of both the discharge and the beam current (normalized)
        plt.figure(r'norm_Id_Ibeam(t)')
        plt.xlabel(r"$t$ (ms)",fontsize = font_size)
        if time2steps_axis == 1 and prntstepsID_axis == 0:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        elif time2steps_axis == 1 and prntstepsID_axis == 1:
            plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
        plt.title(titles_Id_fig[6]+" (normalized)",fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the time evolution of the cathode current
        plt.figure(r'Icath(t)')
        plt.xlabel(r"$t$ (ms)",fontsize = font_size)
        if time2steps_axis == 1 and prntstepsID_axis == 0:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        elif time2steps_axis == 1 and prntstepsID_axis == 1:
            plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
        plt.title(titles_Id_fig[8],fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the FFT plot for the cathode current            
        plt.figure(r'FFT Icath(t)')
        plt.xlabel(r"$f$ (Hz)",fontsize = font_size)
        plt.title(titles_Id_fig[9],fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the time evolution of the conducting wall current
        plt.figure(r'Icond(t)')
        plt.xlabel(r"$t$ (ms)",fontsize = font_size)
        if time2steps_axis == 1 and prntstepsID_axis == 0:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        elif time2steps_axis == 1 and prntstepsID_axis == 1:
            plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
        plt.title(titles_Id_fig[10],fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size) 
        # Plot the FFT plot for the conducting wall current            
        plt.figure(r'FFT Icond(t)')
        plt.xlabel(r"$f$ (Hz)",fontsize = font_size)
        plt.title(titles_Id_fig[11],fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the time evolution of the error in currents of the external circuit
        plt.figure(r'err_I(t)')
        plt.xlabel(r"$t$ (ms)",fontsize = font_size)
        if time2steps_axis == 1 and prntstepsID_axis == 0:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        elif time2steps_axis == 1 and prntstepsID_axis == 1:
            plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
        plt.title(titles_Id_fig[12],fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the time evolution of the conducting wall current plus the discharge current
        plt.figure(r'Icond+Id(t)')
        plt.xlabel(r"$t$ (ms)",fontsize = font_size)
        if time2steps_axis == 1 and prntstepsID_axis == 0:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        elif time2steps_axis == 1 and prntstepsID_axis == 1:
            plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
        plt.title(titles_Id_fig[13],fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size) 

    if plot_Vd == 1:
        # Plot the time evolution of the discharge voltage
        plt.figure(r'Vd(t)')
        plt.xlabel(r"$t$ (ms)",fontsize = font_size)
        if time2steps_axis == 1 and prntstepsID_axis == 0:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        elif time2steps_axis == 1 and prntstepsID_axis == 1:
            plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
        plt.title(r"$V_d$ (V)",fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the time evolution of the conductig walls voltage
        plt.figure(r'Vcond(t)')
        plt.xlabel(r"$t$ (ms)",fontsize = font_size)
        if time2steps_axis == 1 and prntstepsID_axis == 0:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        elif time2steps_axis == 1 and prntstepsID_axis == 1:
            plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
        plt.title(r"$V_{cond}$ (V)",fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the FFT plot for the conducting wall voltage
        plt.figure(r'FFT Vcond(t)')
        plt.xlabel(r"$f$ (Hz)",fontsize = font_size)
        plt.title(r"$V_{cond}$ normalized amplitude (-)",fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
    if plot_Pd == 1:
        # Plot the time evolution of the input power
        plt.figure(r'Pd(t)')
        plt.xlabel(r"$t$ (ms)",fontsize = font_size)
        if time2steps_axis == 1 and prntstepsID_axis == 0:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        elif time2steps_axis == 1 and prntstepsID_axis == 1:
            plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
        plt.title(r"$P_d$ (kW)",fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the time evolution of the power deposited to material (dielectric) walls
        plt.figure(r'P_mat(t)')
        plt.xlabel(r"$t$ (ms)",fontsize = font_size)
        if time2steps_axis == 1 and prntstepsID_axis == 0:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        elif time2steps_axis == 1 and prntstepsID_axis == 1:
            plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
        plt.title(r"$P_{W,D}$ (W)",fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the time evolution of the power deposited to the injection (anode) wall
        plt.figure(r'P_inj(t)')
        plt.xlabel(r"$t$ (ms)",fontsize = font_size)
        if time2steps_axis == 1 and prntstepsID_axis == 0:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        elif time2steps_axis == 1 and prntstepsID_axis == 1:
            plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
        plt.title(r"$P_{W,A}$ (W)",fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the time evolution of the power deposited to the free loss wall
        plt.figure(r'P_inf(t)')
        plt.xlabel(r"$t$ (ms)",fontsize = font_size)
        if time2steps_axis == 1 and prntstepsID_axis == 0:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        elif time2steps_axis == 1 and prntstepsID_axis == 1:
            plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
        plt.title(r"$P_{\infty}$ (W)",fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the time evolution of the power spent in ionization
        plt.figure(r'P_ion(t)')
        plt.xlabel(r"$t$ (ms)",fontsize = font_size)
        if time2steps_axis == 1 and prntstepsID_axis == 0:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        elif time2steps_axis == 1 and prntstepsID_axis == 1:
            plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
        plt.title(r"$P_{ion}$ (W)",fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the time evolution of the power spent in excitation
        plt.figure(r'P_ex(t)')
        plt.xlabel(r"$t$ (ms)",fontsize = font_size)
        if time2steps_axis == 1 and prntstepsID_axis == 0:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        elif time2steps_axis == 1 and prntstepsID_axis == 1:
            plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
        plt.title(r"$P_{ex}$ (W)",fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the time evolution of the total ion and neutral power deposited to the free loss wall
        plt.figure(r'P_use_tot ion plus neu (t)')
        plt.xlabel(r"$t$ (ms)",fontsize = font_size)
        if time2steps_axis == 1 and prntstepsID_axis == 0:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        elif time2steps_axis == 1 and prntstepsID_axis == 1:
            plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
        plt.title(r"$P_{\infty,hs}$ (W)",fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the time evolution of the axial ion and neutral power deposited to the free loss wall
        plt.figure(r'P_use_z ion plus neu (t)')
        plt.xlabel(r"$t$ (ms)",fontsize = font_size)
        if time2steps_axis == 1 and prntstepsID_axis == 0:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        elif time2steps_axis == 1 and prntstepsID_axis == 1:
            plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
        plt.title(r"$P_{z,\infty,hs}$ (W)",fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the time evolution of the power deposited to material (dielectric) walls by the heavy species
        plt.figure(r'P_mat_hs(t)')
        plt.xlabel(r"$t$ (ms)",fontsize = font_size)
        if time2steps_axis == 1 and prntstepsID_axis == 0:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        elif time2steps_axis == 1 and prntstepsID_axis == 1:
            plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
        plt.title(r"$P_{W,D,hs}$ (W)",fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the time evolution of the power deposited to the injection (anode) wall by the heavy species
        plt.figure(r'P_inj_hs(t)')
        plt.xlabel(r"$t$ (ms)",fontsize = font_size)
        if time2steps_axis == 1 and prntstepsID_axis == 0:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        elif time2steps_axis == 1 and prntstepsID_axis == 1:
            plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
        plt.title(r"$P_{W,A,hs}$ (W)",fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the time evolution of the power deposited to the injection (anode) wall faces by the electrons
        plt.figure(r'P_inj_faces_e(t)')
        plt.xlabel(r"$t$ (ms)",fontsize = font_size)
        if time2steps_axis == 1 and prntstepsID_axis == 0:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        elif time2steps_axis == 1 and prntstepsID_axis == 1:
            plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
        plt.title(r"$P_{W,A,faces,e}$ (W)",fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
    if plot_cath == 1:
        # Plot the time evolution of the cathode equivalent emission frequency
        plt.figure(r'nu_cat(t)')
        plt.xlabel(r"$t$ (ms)",fontsize = font_size)
        if time2steps_axis == 1 and prntstepsID_axis == 0:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        elif time2steps_axis == 1 and prntstepsID_axis == 1:
            plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
        plt.title(r"$\nu_{cat}$ (Hz)",fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the FFT plot for the cathode equivalent emission frequency
        plt.figure(r'FFT nu_cat(t)')
        plt.xlabel(r"$f$ (Hz)",fontsize = font_size)
        plt.title(r'$\nu_{cat}$ normalized amplitude (-)',fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the time evolution of the cathode emission power
        plt.figure(r'P_cat(t)')
        plt.xlabel(r"$t$ (ms)",fontsize = font_size)
        if time2steps_axis == 1 and prntstepsID_axis == 0:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        elif time2steps_axis == 1 and prntstepsID_axis == 1:
            plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
        plt.title(r"$P_{cat}$ (W)",fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the FFT plot for the cathode emission power
        plt.figure(r'FFT P_cat(t)')
        plt.xlabel(r"$f$ (Hz)",fontsize = font_size)
        plt.title(r'$P_{cat}$ normalized amplitude (-)',fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
    if plot_mbal == 1:
        # Plot the time evolution of the neutrals 1 mass balance
        plt.figure("n1 mass bal")
        plt.xlabel(r'$t$ (ms)', fontsize = font_size)
        if time2steps_axis == 1 and prntstepsID_axis == 0:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        elif time2steps_axis == 1 and prntstepsID_axis == 1:
            plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
        plt.title(r"(f) $dM_{n1}/dt$ (mgs$^{-1}$)", fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the time evolution of the ions 1 mass balance
        plt.figure("i1 mass bal")
        plt.xlabel(r'$t$ (ms)', fontsize = font_size)
        if time2steps_axis == 1 and prntstepsID_axis == 0:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        elif time2steps_axis == 1 and prntstepsID_axis == 1:
            plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
        plt.title(r"(f) $dM_{i1}/dt$ (mgs$^{-1}$)",fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the time evolution of the ions 2 mass balance
        plt.figure("i2 mass bal")
        plt.xlabel(r'$t$ (ms)', fontsize = font_size)
        if time2steps_axis == 1 and prntstepsID_axis == 0:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        elif time2steps_axis == 1 and prntstepsID_axis == 1:
            plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
        plt.title(r"(f) $dM_{i2}/dt$ (mgs$^{-1}$)", fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the time evolution of the total mass balance
        plt.figure("Total mass bal")
        plt.xlabel(r'$t$ (ms)', fontsize = font_size)
        if time2steps_axis == 1 and prntstepsID_axis == 0:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        elif time2steps_axis == 1 and prntstepsID_axis == 1:
            plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
        plt.title(r"(f) $dM_{tot}/dt$ (mgs$^{-1}$)", fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the time evolution of the neutrals 1 mass balance error 
        plt.figure("err n1 mass bal")
        plt.xlabel(r'$t$ (ms)', fontsize = font_size)
        if time2steps_axis == 1 and prntstepsID_axis == 0:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        elif time2steps_axis == 1 and prntstepsID_axis == 1:
            plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
        plt.title(r"(f) $\epsilon_{M,n1}$ (-)", fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the time evolution of the ions 1 mass balance error 
        plt.figure("err i1 mass bal")
        plt.xlabel(r'$t$ (ms)', fontsize = font_size)
        if time2steps_axis == 1 and prntstepsID_axis == 0:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        elif time2steps_axis == 1 and prntstepsID_axis == 1:
            plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
        plt.title(r"(f) $\epsilon_{M,i1}$ (-)", fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the time evolution of the ions 2 mass balance error 
        plt.figure("err i2 mass bal")
        plt.xlabel(r'$t$ (ms)', fontsize = font_size)
        if time2steps_axis == 1 and prntstepsID_axis == 0:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        elif time2steps_axis == 1 and prntstepsID_axis == 1:
            plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
        plt.title(r"(f) $\epsilon_{M,i2}$ (-)", fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the time evolution of the total mass balance error 
        plt.figure("err total mass bal")
        plt.xlabel(r'$t$ (ms)', fontsize = font_size)
        if time2steps_axis == 1 and prntstepsID_axis == 0:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        elif time2steps_axis == 1 and prntstepsID_axis == 1:
            plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
        plt.title(r"(f) $\epsilon_{M}$ (-)", fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        if nsims == 1:
            # Plot the time evolution of the species and the total mass balance
            plt.figure("All mass bal")
            plt.xlabel(r'$t$ (ms)', fontsize = font_size)
            if time2steps_axis == 1 and prntstepsID_axis == 0:
                plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
            elif time2steps_axis == 1 and prntstepsID_axis == 1:
                plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
            plt.title(r"(a) Heavy species mass balances (mgs$^{-1}$)", fontsize = font_size,y=1.02)
            plt.xticks(fontsize = ticks_size) 
            plt.yticks(fontsize = ticks_size)
            # Plot the time evolution of the species and the total mass balance errors
            plt.figure("All err mass bal")
            plt.xlabel(r'$t$ (ms)', fontsize = font_size)
            if time2steps_axis == 1 and prntstepsID_axis == 0:
                plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
            elif time2steps_axis == 1 and prntstepsID_axis == 1:
                plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
            plt.title(r"(c) Heavy species mass balances errors (-)", fontsize = font_size,y=1.02)
            plt.xticks(fontsize = ticks_size) 
            plt.yticks(fontsize = ticks_size)
            # Plot the time evolution of the contributions to the total mass balance
            plt.figure("Contributions on total mass bal")
            plt.xlabel(r'$t$ (ms)', fontsize = font_size)
            if time2steps_axis == 1 and prntstepsID_axis == 0:
                plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
            elif time2steps_axis == 1 and prntstepsID_axis == 1:
                plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
            plt.title(r"(e) Heavy species total mass balance contr. (-)", fontsize = font_size,y=1.02)
            plt.xticks(fontsize = ticks_size) 
            plt.yticks(fontsize = ticks_size)
            # Plot the time evolution of the contributions to the n1 mass balance
            plt.figure("Contributions on n1 mass bal")
            plt.xlabel(r'$t$ (ms)', fontsize = font_size)
            if time2steps_axis == 1 and prntstepsID_axis == 0:
                plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
            elif time2steps_axis == 1 and prntstepsID_axis == 1:
                plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
            plt.title(r"$\varepsilon_{M,n1}^{coll}$, $\varepsilon_{M,n1}^{tw}$, $\varepsilon_{M,n1}^{fw}$ (-)", fontsize = font_size,y=1.02)
            plt.xticks(fontsize = ticks_size) 
            plt.yticks(fontsize = ticks_size)
            # Plot the time evolution of the contributions to the i1 mass balance
            plt.figure("Contributions on i1 mass bal")
            plt.xlabel(r'$t$ (ms)', fontsize = font_size)
            if time2steps_axis == 1 and prntstepsID_axis == 0:
                plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
            elif time2steps_axis == 1 and prntstepsID_axis == 1:
                plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
            plt.title(r"$\varepsilon_{M,i1}^{coll}$, $\varepsilon_{M,i1}^{tw}$ (-)", fontsize = font_size,y=1.02)
            plt.xticks(fontsize = ticks_size) 
            plt.yticks(fontsize = ticks_size)
            # Plot the time evolution of the contributions to the i2 mass balance
            plt.figure("Contributions on i2 mass bal")
            plt.xlabel(r'$t$ (ms)', fontsize = font_size)
            if time2steps_axis == 1 and prntstepsID_axis == 0:
                plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
            elif time2steps_axis == 1 and prntstepsID_axis == 1:
                plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
            plt.title(r"$\varepsilon_{M,i2}^{coll}$, $\varepsilon_{M,i2}^{tw}$ (-)", fontsize = font_size,y=1.02)
            plt.xticks(fontsize = ticks_size) 
            plt.yticks(fontsize = ticks_size)     
    if plot_Pbal == 1:
        # Plot the time evolution of the total energy balance
        plt.figure("P balance")
        plt.xlabel(r'$t$ (ms)', fontsize = font_size)
        if time2steps_axis == 1 and prntstepsID_axis == 0:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        elif time2steps_axis == 1 and prntstepsID_axis == 1:
            plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
        plt.title(r"(b) (kW)", fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the time evolution of the total energy balance error
        plt.figure("P balance error")
        plt.xlabel(r'$t$ (ms)', fontsize = font_size)
        if time2steps_axis == 1 and prntstepsID_axis == 0:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        elif time2steps_axis == 1 and prntstepsID_axis == 1:
            plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
        plt.title(r"(d) $\epsilon_E$ (-)", fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the time evolution of the contributions to the total energy balance
        plt.figure("Contributions on P balance")
        plt.xlabel(r'$t$ (ms)', fontsize = font_size)
        if time2steps_axis == 1 and prntstepsID_axis == 0:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        elif time2steps_axis == 1 and prntstepsID_axis == 1:
            plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
        plt.title(r"(f) Total energy balance contr. (-)", fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)   
    if plot_FLvars == 1:
        # Plot the time evolution of the phi infinity at free loss
        plt.figure("phi_inf FL")
        plt.xlabel(r'$t$ (ms)', fontsize = font_size)
        if time2steps_axis == 1 and prntstepsID_axis == 0:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        elif time2steps_axis == 1 and prntstepsID_axis == 1:
            plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
        plt.title(r"$\phi_{\infty}$ (V)", fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the FFT plot for the phi infinity at free loss
        plt.figure(r'FFT phi_inf')
        plt.xlabel(r"$f$ (Hz)",fontsize = font_size)
        plt.title(r"$\phi_\infty$ normalized amplitude (-)",fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the time evolution of the I infinity at free loss
        plt.figure("I_inf FL")
        plt.xlabel(r'$t$ (ms)', fontsize = font_size)
        if time2steps_axis == 1 and prntstepsID_axis == 0:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        elif time2steps_axis == 1 and prntstepsID_axis == 1:
            plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
        plt.title(r"$I_{\infty}$ (A)", fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the FFT plot for the I infinity at free loss
        plt.figure(r'FFT I_inf')
        plt.xlabel(r"$f$ (Hz)",fontsize = font_size)
        plt.title(r"$I_\infty$ normalized amplitude (-)",fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the time evolution of the sum of Id and I infinity at free loss
        plt.figure("I_inf+Id FL")
        plt.xlabel(r'$t$ (ms)', fontsize = font_size)
        if time2steps_axis == 1 and prntstepsID_axis == 0:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        elif time2steps_axis == 1 and prntstepsID_axis == 1:
            plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
        plt.title(r"$I_{\infty}$ + $I_d$ (A)", fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the time evolution of the current balance error
        plt.figure(r'err_I_inf FL')
        plt.xlabel(r'$t$ (ms)', fontsize = font_size)
        if time2steps_axis == 1 and prntstepsID_axis == 0:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        elif time2steps_axis == 1 and prntstepsID_axis == 1:
            plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
        plt.title(r"$\epsilon_{I_\infty}$ (-)", fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the time evolution of the electron temperatures at free loss
        plt.figure("Te FL")
        plt.xlabel(r'$t$ (ms)', fontsize = font_size)
        if time2steps_axis == 1 and prntstepsID_axis == 0:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        elif time2steps_axis == 1 and prntstepsID_axis == 1:
            plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
        plt.title(r"$T_e$ (eV)", fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the time evolution of the electron temperatures at vertical free loss
        plt.figure("Te FL ver")
        plt.xlabel(r'$t$ (ms)', fontsize = font_size)
        if time2steps_axis == 1 and prntstepsID_axis == 0:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        elif time2steps_axis == 1 and prntstepsID_axis == 1:
            plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
        plt.title(r"$T_e$ (eV)", fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the time evolution of the electron temperatures at lateral free loss
        plt.figure("Te FL lat")
        plt.xlabel(r'$t$ (ms)', fontsize = font_size)
        if time2steps_axis == 1 and prntstepsID_axis == 0:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        elif time2steps_axis == 1 and prntstepsID_axis == 1:
            plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
        plt.title(r"$T_e$ (eV)", fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the FFT plot for the electron temperatures at vertical free loss
        plt.figure(r'FFT Te FL ver')
        plt.xlabel(r"$f$ (Hz)",fontsize = font_size)
        plt.title(r"$T_e$ normalized amplitude (-)",fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        
        # Plot the time evolution of the electric potential at free loss
        plt.figure("phi FL")
        plt.xlabel(r'$t$ (ms)', fontsize = font_size)
        if time2steps_axis == 1 and prntstepsID_axis == 0:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        elif time2steps_axis == 1 and prntstepsID_axis == 1:
            plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
        plt.title(r"$\phi$ (V)", fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the time evolution of the electric potential at vertical free loss
        plt.figure("phi FL ver")
        plt.xlabel(r'$t$ (ms)', fontsize = font_size)
        if time2steps_axis == 1 and prntstepsID_axis == 0:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        elif time2steps_axis == 1 and prntstepsID_axis == 1:
            plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
        plt.title(r"$\phi$ (V)", fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the time evolution of the electric potential at lateral free loss
        plt.figure("phi FL lat")
        plt.xlabel(r'$t$ (ms)', fontsize = font_size)
        if time2steps_axis == 1 and prntstepsID_axis == 0:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        elif time2steps_axis == 1 and prntstepsID_axis == 1:
            plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
        plt.title(r"$\phi$ (V)", fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the FFT plot for the electric potential at vertical free loss
        plt.figure(r'FFT phi FL ver')
        plt.xlabel(r"$f$ (Hz)",fontsize = font_size)
        plt.title(r"$\phi$ normalized amplitude (-)",fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        
        # Plot the time evolution of the dphi/Te at free loss
        plt.figure("dphi/Te FL")
        plt.xlabel(r'$t$ (ms)', fontsize = font_size)
        if time2steps_axis == 1 and prntstepsID_axis == 0:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        elif time2steps_axis == 1 and prntstepsID_axis == 1:
            plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
        plt.title(r"$e\Delta\phi_\infty/T_e$ (-)", fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the time evolution of the dphi/Te at vertical free loss
        plt.figure("dphi/Te FL ver")
        plt.xlabel(r'$t$ (ms)', fontsize = font_size)
        if time2steps_axis == 1 and prntstepsID_axis == 0:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        elif time2steps_axis == 1 and prntstepsID_axis == 1:
            plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
        plt.title(r"$e\Delta\phi_\infty/T_e$ (-)", fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the time evolution of the dphi/Te at lateral free loss
        plt.figure("dphi/Te FL lat")
        plt.xlabel(r'$t$ (ms)', fontsize = font_size)
        if time2steps_axis == 1 and prntstepsID_axis == 0:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        elif time2steps_axis == 1 and prntstepsID_axis == 1:
            plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
        plt.title(r"$e\Delta\phi_\infty/T_e$ (-)", fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        # Plot the FFT plot for the dphi/Te at vertical free loss
        plt.figure(r'FFT dphi/Te FL ver')
        plt.xlabel(r"$f$ (Hz)",fontsize = font_size)
        plt.title(r"$e\Delta\phi_\infty/T_e$ normalized amplitude (-)",fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        
        
    if generate_thesis_figures == 1:
        if Nke_effects == 1:
            [fig1, axes] = plt.subplots(nrows=1, ncols=2, figsize=(15,6))
            ax1 = plt.subplot2grid( (1,2), (0,0) )
            ax2 = plt.subplot2grid( (1,2), (0,1) )
            
            ax1.set_title(r"(a) $I_d$ (A)", fontsize = font_size,y=1.02)   
            ax1.set_xlabel(r"$t$ (ms)",fontsize = font_size)
            ax1.tick_params(labelsize = ticks_size) 
            ax2.set_title(r"(b) $I_d$ normalized amplitude spectrum (-)", fontsize = font_size,y=1.02)   
            ax2.set_xlabel(r"$f$ (Hz)",fontsize = font_size)
            ax2.tick_params(labelsize = ticks_size) 
        
        


    ind = 0
    ind2 = 0
    ind3 = 0
    
    for k in range(0,nsims):
        ind_ini_letter = sim_names[k].rfind('/') + 1
        print("##### CASE "+str(k+1)+": "+sim_names[k][ind_ini_letter::]+" #####")
        print("##### oldsimparams_sim = "+str(oldsimparams_sim[k])+" #####")
        print("##### oldpost_sim      = "+str(oldpost_sim[k])+" #####")
        print("##### last_steps       = "+str(last_steps)+" #####")
        ######################## READ INPUT/OUTPUT FILES ##########################
        # Obtain paths to simulation files
        path_picM         = sim_names[k]+"/SET/inp/"+PIC_mesh_file_name[k]
        path_simstate_inp = sim_names[k]+"/CORE/inp/SimState.hdf5"
#        path_simstate_out = sim_names[k]+"/CORE/out/SimState.hdf5"
#        path_postdata_out = sim_names[k]+"/CORE/out/PostData.hdf5"
#        path_simparams_inp = sim_names[k]+"/CORE/inp/sim_params.inp"
        if k == 0:
            path_simstate_out = sim_names[k]+"/CORE/out/SimState.hdf5"
            path_postdata_out = sim_names[k]+"/CORE/out/PostData.hdf5"
            path_simparams_inp = sim_names[k]+"/CORE/inp/sim_params.inp"
            # --------------
#            path_simstate_out = sim_names[k]+"/CORE/out/SimState.hdf5"
#            path_postdata_out = sim_names[k]+"/CORE/out/PostData.hdf5"
##            path_simparams_inp = sim_names[k]+"/CORE/inp/sim_params.inp"
#            path_simparams_inp = sim_names[k]+"/CORE/inp/sim_params_read.inp"
            # --------------
#            path_simstate_out = sim_names[k]+"/CORE/out/60000steps_after_changes_it_matching_modified_nonewiter/SimState.hdf5"
#            path_postdata_out = sim_names[k]+"/CORE/out/60000steps_after_changes_it_matching_modified_nonewiter/PostData.hdf5"
#            path_simparams_inp = sim_names[k]+"/CORE/inp/sim_params.inp"
            # --------------
#            path_simstate_out = sim_names[k]+"/CORE/out/60000steps_after_changes_it_matching_modified_iterations/SimState.hdf5"
#            path_postdata_out = sim_names[k]+"/CORE/out/60000steps_after_changes_it_matching_modified_iterations/PostData.hdf5"
##            path_simparams_inp = sim_names[k]+"/CORE/inp/sim_params.inp"
#            path_simparams_inp = sim_names[k]+"/CORE/inp/after_condwalls_nocond/sim_params.inp"
            # --------------
#            path_simstate_out = sim_names[k]+"/CORE/out/60000steps_after_changes_it_matching_RLC_modified_iterations/SimState.hdf5"
#            path_postdata_out = sim_names[k]+"/CORE/out/60000steps_after_changes_it_matching_RLC_modified_iterations/PostData.hdf5"
#            path_simparams_inp = sim_names[k]+"/CORE/inp/sim_params.inp"
            # --------------
#            path_simstate_out = sim_names[k]+"/CORE/out/60000steps_after_changes_it_matching_RLC_modified_nonewiter/SimState.hdf5"
#            path_postdata_out = sim_names[k]+"/CORE/out/60000steps_after_changes_it_matching_RLC_modified_nonewiter/PostData.hdf5"
#            path_simparams_inp = sim_names[k]+"/CORE/inp/sim_params.inp"
            # --------------
#            path_simstate_out = sim_names[k]+"/CORE/out/60000steps_cond_wall_connect1_hefunc1_jefl1_280V/SimState.hdf5"
#            path_postdata_out = sim_names[k]+"/CORE/out/60000steps_cond_wall_connect1_hefunc1_jefl1_280V/PostData.hdf5"
#            path_simparams_inp = sim_names[k]+"/CORE/inp/sim_params.inp"
            # --------------
#            path_simstate_out = sim_names[k]+"/CORE/out/60000steps_cond_wall_connect1_hefunc1_jefl1_70V_plume/SimState.hdf5"
#            path_postdata_out = sim_names[k]+"/CORE/out/60000steps_cond_wall_connect1_hefunc1_jefl1_70V_plume/PostData.hdf5"
#            path_simparams_inp = sim_names[k]+"/CORE/inp/sim_params.inp"
            # --------------
        elif k >= 1:
            path_simstate_out = sim_names[k]+"/CORE/out/SimState.hdf5"
            path_postdata_out = sim_names[k]+"/CORE/out/PostData.hdf5"
            path_simparams_inp = sim_names[k]+"/CORE/inp/sim_params.inp"
            # --------------
#            path_simstate_out = sim_names[k]+"/CORE/out/60000steps_after_changes_it_matching_modified_iterations/SimState.hdf5"
#            path_postdata_out = sim_names[k]+"/CORE/out/60000steps_after_changes_it_matching_modified_iterations/PostData.hdf5"
#            path_simparams_inp = sim_names[k]+"/CORE/inp/sim_params.inp"
            # --------------
#            path_simstate_out = sim_names[k]+"/CORE/out/SimState.hdf5"
#            path_postdata_out = sim_names[k]+"/CORE/out/PostData.hdf5"
##            path_simparams_inp = sim_names[k]+"/CORE/inp/sim_params.inp"
#            path_simparams_inp = sim_names[k]+"/CORE/inp/sim_params_read.inp"
            # --------------
#            path_simstate_out = sim_names[k]+"/CORE/out/60000steps_removing_it_matching_inipop/SimState.hdf5"
#            path_postdata_out = sim_names[k]+"/CORE/out/60000steps_removing_it_matching_inipop/PostData.hdf5"
#            path_simparams_inp = sim_names[k]+"/CORE/inp/inipop_inputs/sim_params.inp"
            # --------------
#            path_simstate_out = sim_names[k]+"/CORE/out/60000steps_after_changes_it_matching_RLC/SimState.hdf5"
#            path_postdata_out = sim_names[k]+"/CORE/out/60000steps_after_changes_it_matching_RLC/PostData.hdf5"
#            path_simparams_inp = sim_names[k]+"/CORE/inp/sim_params.inp"
            # --------------
#            path_simstate_out = sim_names[k]+"/CORE/out/60000steps_after_changes_it_matching_RLC_modified/SimState.hdf5"
#            path_postdata_out = sim_names[k]+"/CORE/out/60000steps_after_changes_it_matching_RLC_modified/PostData.hdf5"
#            path_simparams_inp = sim_names[k]+"/CORE/inp/sim_params.inp"
            # --------------
#            path_simstate_out = sim_names[k]+"/CORE/out/60000steps_before_removing_it_matching_RLC_1it_max_Ca/SimState.hdf5"
#            path_postdata_out = sim_names[k]+"/CORE/out/60000steps_before_removing_it_matching_RLC_1it_max_Ca/PostData.hdf5"
#            path_simparams_inp = sim_names[k]+"/CORE/inp/original_inputs/sim_params.inp"
            # --------------
#            path_simstate_out = sim_names[k]+"/CORE/out/60000steps_before_removing_it_matching_RLC_10it_max_Ca/SimState.hdf5"
#            path_postdata_out = sim_names[k]+"/CORE/out/60000steps_before_removing_it_matching_RLC_10it_max_Ca/PostData.hdf5"
#            path_simparams_inp = sim_names[k]+"/CORE/inp/original_inputs/sim_params.inp"
            # --------------
#            path_simstate_out = sim_names[k]+"/CORE/out/60000steps_before_removing_it_matching_RLC_10it_max_Ca_fixdummy8/SimState.hdf5"
#            path_postdata_out = sim_names[k]+"/CORE/out/60000steps_before_removing_it_matching_RLC_10it_max_Ca_fixdummy8/PostData.hdf5"
#            path_simparams_inp = sim_names[k]+"/CORE/inp/original_inputs/sim_params.inp"
            # --------------
#            path_simstate_out = sim_names[k]+"/CORE/out/60000steps_after_changes_it_matching_jemean_always_nonewiter/SimState.hdf5"
#            path_postdata_out = sim_names[k]+"/CORE/out/60000steps_after_changes_it_matching_jemean_always_nonewiter/PostData.hdf5"
#            path_simparams_inp = sim_names[k]+"/CORE/inp/sim_params.inp"
            # --------------
#            path_simstate_out = sim_names[k]+"/CORE/out/60000steps_after_changes_it_matching_RLC_modified_iterations/SimState.hdf5"
#            path_postdata_out = sim_names[k]+"/CORE/out/60000steps_after_changes_it_matching_RLC_modified_iterations/PostData.hdf5"
#            path_simparams_inp = sim_names[k]+"/CORE/inp/sim_params.inp"
            # --------------
#            path_simstate_out = sim_names[k]+"/CORE/out/60000steps_after_changes_it_matching_RLC_jemean_always_iterations/SimState.hdf5"
#            path_postdata_out = sim_names[k]+"/CORE/out/60000steps_after_changes_it_matching_RLC_jemean_always_iterations/PostData.hdf5"
#            path_simparams_inp = sim_names[k]+"/CORE/inp/sim_params.inp"
            # --------------
#            path_simstate_out = sim_names[k]+"/CORE/out/60000steps_after_changes_it_matching_RLC_modified_iterations/SimState.hdf5"
#            path_postdata_out = sim_names[k]+"/CORE/out/60000steps_after_changes_it_matching_RLC_modified_iterations/PostData.hdf5"
#            path_simparams_inp = sim_names[k]+"/CORE/inp/sim_params.inp"
            # --------------
#            path_simstate_out = sim_names[k]+"/CORE/out/60000steps_cond_wall_connect1_hefunc1_jefl1_70V_plume/SimState.hdf5"
#            path_postdata_out = sim_names[k]+"/CORE/out/60000steps_cond_wall_connect1_hefunc1_jefl1_70V_plume/PostData.hdf5"
#            path_simparams_inp = sim_names[k]+"/CORE/inp/sim_params.inp"
            # --------------
#            path_simstate_out = sim_names[k]+"/CORE/out/60000steps_phi_inf_hefunc0/SimState.hdf5"
#            path_postdata_out = sim_names[k]+"/CORE/out/60000steps_phi_inf_hefunc0/PostData.hdf5"
##            path_simparams_inp = sim_names[k]+"/CORE/inp/sim_params.inp"
#            path_simparams_inp = sim_names[k]+"/CORE/inp/after_condwalls_nocond/sim_params.inp"
                        
        print("Reading results...")
        [num_ion_spe,num_neu_spe,Z_ion_spe,n_mp_cell_i,n_mp_cell_n,n_mp_cell_i_min,
           n_mp_cell_i_max,n_mp_cell_n_min,n_mp_cell_n_max,min_ion_plasma_density,
           m_A,spec_refl_prob,ene_bal,points,zs,rs,zscells,rscells,dims,
           nodes_flag,cells_flag,cells_vol,volume,vol,ind_maxr_c,ind_maxz_c,nr_c,nz_c,
           eta_max,eta_min,xi_top,xi_bottom,time,time_fast,steps,steps_fast,dt,dt_e,
           nsteps,nsteps_fast,nsteps_eFld,faces,nodes,elem_n,boundary_f,face_geom,elem_geom,
           versors_e,versors_f,n_faces,n_elems,n_faces_boundary,bIDfaces_Dwall,bIDfaces_Awall,
           bIDfaces_FLwall,IDfaces_Dwall,IDfaces_Awall,IDfaces_FLwall,zfaces_Dwall,
           rfaces_Dwall,Afaces_Dwall,zfaces_Awall,rfaces_Awall,Afaces_Awall,
           zfaces_FLwall,rfaces_FLwall,Afaces_FLwall,zfaces_Cwall,rfaces_Cwall,Afaces_Cwall,
           cath_elem,z_cath,r_cath,V_cath,mass,ssIons1,ssIons2,ssNeutrals1,ssNeutrals2,
           n_mp_i1_list,n_mp_i2_list,n_mp_n1_list,n_mp_n2_list,
           alpha_ano,alpha_ano_e,alpha_ano_q,alpha_ine,alpha_ine_q,
           alpha_ano_elems,alpha_ano_e_elems,alpha_ano_q_elems,alpha_ine_elems,
           alpha_ine_q_elems,alpha_ano_faces,alpha_ano_e_faces,alpha_ano_q_faces,
           alpha_ine_faces,alpha_ine_q_faces,
           phi,phi_elems,phi_faces,Ez,Er,Efield,Bz,Br,Bfield,Te,Te_elems,Te_faces,
           je_mag_elems,je_perp_elems,je_theta_elems,je_para_elems,je_z_elems,je_r_elems,
           je_mag_faces,je_perp_faces,je_theta_faces,je_para_faces,je_z_faces,je_r_faces,
           cs01,cs02,cs03,cs04,nn1,nn2,nn3,ni1,ni2,ni3,ni4,
           ne,ne_elems,ne_faces,fn1_x,fn1_y,fn1_z,fn2_x,fn2_y,fn2_z,fn3_x,fn3_y,fn3_z,
           fi1_x,fi1_y,fi1_z,fi2_x,fi2_y,fi2_z,fi3_x,fi3_y,fi3_z,fi4_x,fi4_y,fi4_z,
           un1_x,un1_y,un1_z,un2_x,un2_y,un2_z,un3_x,un3_y,un3_z,
           ui1_x,ui1_y,ui1_z,ui2_x,ui2_y,ui2_z,ui3_x,ui3_y,ui3_z,ui4_x,ui4_y,ui4_z,
           ji1_x,ji1_y,ji1_z,ji2_x,ji2_y,ji2_z,ji3_x,ji3_y,ji3_z,ji4_x,ji4_y,ji4_z,
           je_r,je_t,je_z,je_perp,je_para,ue_r,ue_t,ue_z,
           ue_perp,ue_para,uthetaExB,Tn1,Tn2,Tn3,Ti1,Ti2,Ti3,Ti4,
           n_mp_n1,n_mp_n2,n_mp_n3,n_mp_i1,n_mp_i2,n_mp_i3,n_mp_i4,
           avg_w_n1,avg_w_n2,avg_w_i1,avg_w_i2,neu_gen_weights1,neu_gen_weights2,
           ion_gen_weights1,ion_gen_weights2,surf_elems,n_imp_elems,imp_elems,
           imp_elems_kbc,imp_elems_MkQ1,imp_elems_Te,imp_elems_dphi_kbc,
           imp_elems_dphi_sh,imp_elems_nQ1,imp_elems_nQ2,imp_elems_ion_flux_in1,
           imp_elems_ion_flux_out1,imp_elems_ion_ene_flux_in1,
           imp_elems_ion_ene_flux_out1,imp_elems_ion_imp_ene1,
           imp_elems_ion_flux_in2,imp_elems_ion_flux_out2,
           imp_elems_ion_ene_flux_in2,imp_elems_ion_ene_flux_out2,
           imp_elems_ion_imp_ene2,imp_elems_neu_flux_in1,imp_elems_neu_flux_out1,
           imp_elems_neu_ene_flux_in1,imp_elems_neu_ene_flux_out1,
           imp_elems_neu_imp_ene1,imp_elems_neu_flux_in2,imp_elems_neu_flux_out2,
           imp_elems_neu_ene_flux_in2,imp_elems_neu_ene_flux_out2,
           imp_elems_neu_imp_ene2,tot_mass_mp_neus,tot_mass_mp_ions,tot_num_mp_neus,
           tot_num_mp_ions,tot_mass_exit_neus,tot_mass_exit_ions,mass_mp_neus,
           mass_mp_ions,num_mp_neus,num_mp_ions,avg_dens_mp_neus,avg_dens_mp_ions,
           eta_u,eta_prod,eta_thr,eta_div,eta_cur,thrust,thrust_ion,thrust_neu,thrust_e,
           thrust_m,thrust_pres,Id_inst,Id,Vd_inst,Vd,I_beam,I_tw_tot,Pd,Pd_inst,P_mat,
           P_inj,P_inf,P_ion,P_ex,P_use_tot_i,P_use_tot_n,P_use_tot,P_use_z_i,P_use_z_n,
           P_use_z_e,P_use_z,qe_wall,qe_wall_inst,Pe_faces_Dwall,Pe_faces_Awall,
           Pe_faces_FLwall,Pe_faces_Dwall_inst,Pe_faces_Awall_inst,Pe_faces_FLwall_inst,
           Pe_Dwall,Pe_Awall,Pe_FLwall,Pe_Dwall_inst,Pe_Awall_inst,Pe_FLwall_inst, 
           Pe_Cwall,Pe_Cwall_inst,
           Pi_Dwall,Pi_Awall,Pi_FLwall,Pi_FLwall_nonz,Pi_Cwall,Pn_Dwall,Pn_Awall,Pn_FLwall,
           Pn_FLwall_nonz,Pn_Cwall,P_Dwall,P_Awall,P_FLwall,Pwalls,Pionex,Ploss,Psource,Pthrust,
           Pnothrust,Pnothrust_walls,Pturb,balP,err_balP,ctr_Pd,ctr_Ploss,ctr_Pwalls,
           ctr_Pionex,ctr_P_DAwalls,ctr_P_FLwalls,ctr_P_FLwalls_in,ctr_P_FLwalls_i,
           ctr_P_FLwalls_n,ctr_P_FLwalls_e,balP_Pthrust,err_balP_Pthrust,
           ctr_balPthrust_Pd,ctr_balPthrust_Pnothrust,ctr_balPthrust_Pthrust,
           ctr_balPthrust_Pnothrust_walls,ctr_balPthrust_Pnothrust_ionex,
           err_def_balP,Isp_s,Isp_ms,
           dMdt_i1,dMdt_i2,dMdt_i3,dMdt_i4,dMdt_n1,dMdt_n2,dMdt_n3,dMdt_tot,
           mflow_coll_i1,mflow_coll_i2,mflow_coll_i3,mflow_coll_i4,mflow_coll_n1,
           mflow_coll_n2,mflow_coll_n3,mflow_fw_i1,mflow_fw_i2,mflow_fw_i3,
           mflow_fw_i4,mflow_fw_n1,mflow_fw_n2,mflow_fw_n3,mflow_tw_i1,mflow_tw_i2,
           mflow_tw_i3,mflow_tw_i4,mflow_tw_n1,mflow_tw_n2,mflow_tw_n3,
           mflow_ircmb_picS_n1,mflow_ircmb_picS_n2,mflow_ircmb_picS_n3,
           mflow_inj_i1,mflow_fwinf_i1,mflow_fwmat_i1,mflow_fwcat_i1,
           mflow_inj_i2,mflow_fwinf_i2,mflow_fwmat_i2,mflow_fwcat_i2,
           mflow_inj_i3,mflow_fwinf_i3,mflow_fwmat_i3,mflow_fwcat_i3,
           mflow_inj_i4,mflow_fwinf_i4,mflow_fwmat_i4,mflow_fwcat_i4,
           mflow_inj_n1,mflow_fwinf_n1,mflow_fwmat_n1,mflow_fwcat_n1,
           mflow_inj_n2,mflow_fwinf_n2,mflow_fwmat_n2,mflow_fwcat_n2,
           mflow_inj_n3,mflow_fwinf_n3,mflow_fwmat_n3,mflow_fwcat_n3,
           mflow_twa_i1,mflow_twinf_i1,mflow_twmat_i1,mflow_twcat_i1,
           mflow_twa_i2,mflow_twinf_i2,mflow_twmat_i2,mflow_twcat_i2,
           mflow_twa_i3,mflow_twinf_i3,mflow_twmat_i3,mflow_twcat_i3,
           mflow_twa_i4,mflow_twinf_i4,mflow_twmat_i4,mflow_twcat_i4,
           mflow_twa_n1,mflow_twinf_n1,mflow_twmat_n1,mflow_twcat_n1,
           mflow_twa_n2,mflow_twinf_n2,mflow_twmat_n2,mflow_twcat_n2,
           mflow_twa_n3,mflow_twinf_n3,mflow_twmat_n3,mflow_twcat_n3,
           mbal_n1,mbal_n2,mbal_n3,mbal_i1,mbal_i2,mbal_i3,mbal_i4,mbal_tot,
           err_mbal_n1,err_mbal_n2,err_mbal_n3,err_mbal_i1,err_mbal_i2,
           err_mbal_i3,err_mbal_i4,err_mbal_tot,ctr_mflow_coll_n1,
           ctr_mflow_fw_n1,ctr_mflow_tw_n1,ctr_mflow_coll_i1,ctr_mflow_fw_i1,
           ctr_mflow_tw_i1,ctr_mflow_coll_i2,ctr_mflow_fw_i2,ctr_mflow_tw_i2,
           ctr_mflow_coll_tot,ctr_mflow_fw_tot,ctr_mflow_tw_tot,
           dEdt_i1,dEdt_i2,dEdt_i3,dEdt_i4,dEdt_n1,dEdt_n2,dEdt_n3,
           eneflow_coll_i1,eneflow_coll_i2,eneflow_coll_i3,eneflow_coll_i4,
           eneflow_coll_n1,eneflow_coll_n2,eneflow_coll_n3,eneflow_fw_i1,
           eneflow_fw_i2,eneflow_fw_i3,eneflow_fw_i4,eneflow_fw_n1,eneflow_fw_n2,
           eneflow_fw_n3,eneflow_tw_i1,eneflow_tw_i2,eneflow_tw_i3,eneflow_tw_i4,
           eneflow_tw_n1,eneflow_tw_n2,eneflow_tw_n3,Pfield_i1,Pfield_i2,
           Pfield_i3,Pfield_i4,eneflow_inj_i1,eneflow_fwinf_i1,eneflow_fwmat_i1,
           eneflow_inj_i2,eneflow_fwinf_i2,eneflow_fwmat_i2,
           eneflow_inj_i3,eneflow_fwinf_i3,eneflow_fwmat_i3,
           eneflow_inj_i4,eneflow_fwinf_i4,eneflow_fwmat_i4,
           eneflow_inj_n1,eneflow_fwinf_n1,eneflow_fwmat_n1,
           eneflow_inj_n2,eneflow_fwinf_n2,eneflow_fwmat_n2,
           eneflow_inj_n3,eneflow_fwinf_n3,eneflow_fwmat_n3,
           eneflow_twa_i1,eneflow_twinf_i1,eneflow_twmat_i1,
           eneflow_twa_i2,eneflow_twinf_i2,eneflow_twmat_i2,
           eneflow_twa_i3,eneflow_twinf_i3,eneflow_twmat_i3,
           eneflow_twa_i4,eneflow_twinf_i4,eneflow_twmat_i4,
           eneflow_twa_n1,eneflow_twinf_n1,eneflow_twmat_n1,
           eneflow_twa_n2,eneflow_twinf_n2,eneflow_twmat_n2,
           eneflow_twa_n3,eneflow_twinf_n3,eneflow_twmat_n3,
           ndot_ion01_n1,ndot_ion02_n1,ndot_ion12_i1,ndot_ion01_n2,
           ndot_ion02_n2,ndot_ion01_n3,ndot_ion02_n3,ndot_ion12_i3,
           ndot_CEX01_i3,ndot_CEX02_i4,
           cath_type,ne_cath,Te_cath,
           nu_cath,ndot_cath,Q_cath,P_cath,V_cath_tot,ne_cath_avg,
           F_theta,Hall_par,Hall_par_eff,nu_e_tot,nu_e_tot_eff,nu_en,nu_ei1,
           nu_ei2,nu_i01,nu_i02,nu_i12,nu_ex,
           F_theta_elems,Hall_par_elems,Hall_par_eff_elems,nu_e_tot_elems,
           nu_e_tot_eff_elems,F_theta_faces,Hall_par_faces,Hall_par_eff_faces,
           nu_e_tot_faces,nu_e_tot_eff_faces,nu_en_elems,nu_ei1_elems,
           nu_ei2_elems,nu_i01_elems,nu_i02_elems,nu_i12_elems,nu_ex_elems,
           nu_en_faces,nu_ei1_faces,nu_ei2_faces,nu_i01_faces,nu_i02_faces,
           nu_i12_faces,nu_ex_faces, 
           felec_para_elems,felec_para_faces,felec_perp_elems,felec_perp_faces,
           felec_z_elems,felec_z_faces,felec_r_elems,felec_r_faces,
           Boltz,Boltz_dim,Pfield_e,Ebal_e,
           dphi_sh_b,dphi_sh_b_Te,imp_ene_e_b,imp_ene_e_b_Te,imp_ene_e_wall,
           imp_ene_e_wall_Te,ge_b,ge_b_acc,ge_sb_b,ge_sb_b_acc,delta_see,
           delta_see_acc,err_interp_n,n_cond_wall,Icond,Vcond,Icath,phi_inf,
           I_inf,f_split,f_split_adv,f_split_qperp,f_split_qpara,f_split_qb,
           f_split_Pperp,f_split_Ppara,f_split_ecterm,f_split_inel] = HET_sims_read(path_simstate_inp,path_simstate_out,
                                                                                    path_postdata_out,path_simparams_inp,
                                                                                    path_picM,allsteps_flag,timestep,read_inst_data,
                                                                                    read_part_lists,read_flag,oldpost_sim[k],oldsimparams_sim[k])
            
        # Set initial time to zero
        time = time - time[0]
        time_fast = time_fast - time_fast[0]
        # Domain averaged (spatially averaged) variables using the nodal weighting volumes
        [Te_mean_dom,_] = domain_average(Te,time,vol)
        # Obtain the ion temperature (weighted average with ion particle densities)
        Ti = (ni1*Ti1 + ni2*Ti2 + ni3*Ti3 + ni4*Ti4)/(ni1+ni2+ni3+ni4)
        
        # Obtain axial position of crossing point between cathode magnetic line and thruster channel midline
        zcat_pos = zcat_pos_vec[k]
        if zs[rind,-1] > zcat_pos*1E-2:
            pos = np.where(zs[rind,:]>=zcat_pos*1E-2)[0][0]
        else:
            pos = -1
        Vcoupling      = phi[rind,pos,:]
        Vcoupling_axis = phi[0,-1,:]
        
        # Obtain the cathode coupling voltage by interpolating to the prescribed
        # point from the MFAM elements and faces at each time step
        Vcoupling_interp = np.zeros(nsteps,dtype=float)
        # Introduce zcat_pos in meters
        zpoint = zcat_pos*1E-2
        rpoint = rs[rind,0]
        ji_x   = ji1_x + ji2_x + ji3_x + ji4_x
        ji_y   = ji1_y + ji2_y + ji3_y + ji4_y
        ji_z   = ji1_z + ji2_z + ji3_z + ji4_z
        nn     = nn1 + nn2 + nn3
        for indt in range(0,nsteps):
            [Vcoupling_interp[indt]] = HET_sims_interp_point(zpoint,rpoint,
                                                             n_elems,n_faces,elem_geom,face_geom,versors_e,versors_f,
                                                             phi_elems[indt,:],phi_faces[indt,:],Te_elems[indt,:],Te_faces[indt,:],
                                                             je_perp_elems[indt,:],je_theta_elems[indt,:],je_para_elems[indt,:],
                                                             je_z_elems[indt,:],je_r_elems[indt,:],je_perp_faces[indt,:],
                                                             je_theta_faces[indt,:],je_para_faces[indt,:],je_z_faces[indt,:],
                                                             je_r_faces[indt,:],
                                                             zs,rs,zs,rs,
                                                             ji_x[:,:,indt],ji_y[:,:,indt],ji_z[:,:,indt],ne[:,:,indt],nn[:,:,indt],Hall_par[:,:,indt],
                                                             Hall_par_eff[:,:,indt])
        
        
        # Check indeces at free loss boundary and change them if necessary to avoid error (send message if indeces are changed)
        if i_plot_ver != (eta_min+eta_max)/2:
            i_plot_ver_old = i_plot_ver
            i_plot_ver = int((eta_min+eta_max)/2)
            print("WARNING: FL var i_plot_ver = %d changed to i_plot_ver = %d" %(i_plot_ver_old,i_plot_ver))
        if i_plot_ver >= dims[0]:
            i_plot_ver_old = i_plot_ver
            i_plot_ver = dims[0]-1
            print("WARNING: FL var i_plot_ver = %d changed to i_plot_ver = %d" %(i_plot_ver_old,i_plot_ver))
        if j_plot_ver != dims[1]-1 and j_plot_ver !=-1:
            j_plot_ver_old = j_plot_ver
            j_plot_ver = dims[1]-1
            print("WARNING: FL var j_plot_ver = %d changed to j_plot_ver = %d" %(j_plot_ver_old,j_plot_ver))  
        
        if i_plot_lat != dims[0]-1 and i_plot_lat != -1:
            i_plot_lat_old = i_plot_lat
            i_plot_lat = dims[0]-1
            print("WARNING: FL var i_plot_lat = %d changed to i_plot_lat = %d" %(i_plot_lat_old,i_plot_lat))  
        if j_plot_lat >= dims[1] or j_plot_lat <= xi_top:
            j_plot_lat_old = j_plot_lat
            j_plot_lat = int((xi_top + dims[1]-1)/2)
            print("WARNING: FL var j_plot_lat = %d changed to j_plot_lat = %d" %(j_plot_lat_old,j_plot_lat))  
        
        
        # Average electron temperature, potential, density electron pressure,
        # Hall parameter and value of the ratio deltaphi_infty/Te at free loss boundary
        pe                       = ne*Te*e
        Te_FL_lat                = np.mean(Te[-1,int(xi_bottom)::,:],axis=0)
        Te_FL_ver                = np.mean(Te[:,-1,:],axis=0)
        Te_FL                    = 0.5*(Te_FL_lat+Te_FL_ver)
        phi_FL_lat               = np.mean(phi[-1,int(xi_bottom)::,:],axis=0)
        phi_FL_ver               = np.mean(phi[:,-1,:],axis=0)
        phi_FL                   = 0.5*(phi_FL_lat+phi_FL_ver)
        ne_FL_lat                = np.mean(ne[-1,int(xi_bottom)::,:],axis=0)
        ne_FL_ver                = np.mean(ne[:,-1,:],axis=0)
        ne_FL                    = 0.5*(ne_FL_lat+ne_FL_ver)
        pe_FL_lat                = np.mean(pe[-1,int(xi_bottom)::,:],axis=0)
        pe_FL_ver                = np.mean(pe[:,-1,:],axis=0)
        pe_FL                    = 0.5*(pe_FL_lat+pe_FL_ver)
        Hall_par_eff_FL_lat      = np.mean(Hall_par_eff[-1,int(xi_bottom)::,:],axis=0)
        Hall_par_eff_FL_ver      = np.mean(Hall_par_eff[:,-1,:],axis=0)
        Hall_par_eff_FL          = 0.5*(Hall_par_eff_FL_lat+Hall_par_eff_FL_ver)
        Hall_par_FL_lat          = np.mean(Hall_par[-1,int(xi_bottom)::,:],axis=0)
        Hall_par_FL_ver          = np.mean(Hall_par[:,-1,:],axis=0)
        Hall_par_FL              = 0.5*(Hall_par_FL_lat+Hall_par_FL_ver)
        Dphi_FL_lat              = phi[-1,int(xi_bottom)::,:] - phi_inf
        Dphi_FL_ver              = phi[:,-1,:] - phi_inf
        inst_ratio_DphiTe_FL_lat = np.mean(Dphi_FL_lat/Te[-1,int(xi_bottom)::,:],axis=0)
        inst_ratio_DphiTe_FL_ver = np.mean(Dphi_FL_ver/Te[:,-1,:],axis=0)
        inst_ratio_DphiTe_FL     = 0.5*(inst_ratio_DphiTe_FL_lat+inst_ratio_DphiTe_FL_ver)

        Te_FL_lat_int                = np.zeros(np.shape(Te_FL_lat),dtype=float)
        Te_FL_ver_int                = np.zeros(np.shape(Te_FL_ver),dtype=float)
        phi_FL_lat_int               = np.zeros(np.shape(phi_FL_lat),dtype=float)
        phi_FL_ver_int               = np.zeros(np.shape(phi_FL_ver),dtype=float)
        ne_FL_lat_int                = np.zeros(np.shape(phi_FL_lat),dtype=float)
        ne_FL_ver_int                = np.zeros(np.shape(phi_FL_ver),dtype=float)
        pe_FL_lat_int                = np.zeros(np.shape(phi_FL_lat),dtype=float)
        pe_FL_ver_int                = np.zeros(np.shape(phi_FL_ver),dtype=float)
        Hall_par_eff_FL_lat_int      = np.zeros(np.shape(phi_FL_lat),dtype=float)
        Hall_par_eff_FL_ver_int      = np.zeros(np.shape(phi_FL_ver),dtype=float)
        Hall_par_FL_lat_int          = np.zeros(np.shape(phi_FL_lat),dtype=float)
        Hall_par_FL_ver_int          = np.zeros(np.shape(phi_FL_ver),dtype=float)
        inst_ratio_DphiTe_FL_lat_int = np.zeros(np.shape(phi_FL_lat),dtype=float)
        inst_ratio_DphiTe_FL_ver_int = np.zeros(np.shape(phi_FL_ver),dtype=float)
        dphi_sh_b_FL_lat_int         = np.zeros(np.shape(phi_FL_ver),dtype=float)
        dphi_sh_b_FL_ver_int         = np.zeros(np.shape(phi_FL_ver),dtype=float)
        dphi_sh_b_Te_FL_lat_int      = np.zeros(np.shape(phi_FL_ver),dtype=float)
        dphi_sh_b_Te_FL_ver_int      = np.zeros(np.shape(phi_FL_ver),dtype=float)
        imp_ene_e_b_FL_lat_int       = np.zeros(np.shape(phi_FL_ver),dtype=float)
        imp_ene_e_b_FL_ver_int       = np.zeros(np.shape(phi_FL_ver),dtype=float)
        imp_ene_e_b_Te_FL_lat_int    = np.zeros(np.shape(phi_FL_ver),dtype=float)
        imp_ene_e_b_Te_FL_ver_int    = np.zeros(np.shape(phi_FL_ver),dtype=float)
        imp_ene_e_wall_FL_lat_int    = np.zeros(np.shape(phi_FL_ver),dtype=float)
        imp_ene_e_wall_FL_ver_int    = np.zeros(np.shape(phi_FL_ver),dtype=float)
        imp_ene_e_wall_Te_FL_lat_int = np.zeros(np.shape(phi_FL_ver),dtype=float)
        imp_ene_e_wall_Te_FL_ver_int = np.zeros(np.shape(phi_FL_ver),dtype=float)
        Ti_FL_lat_int                = np.zeros(np.shape(Te_FL_lat),dtype=float)
        Ti_FL_ver_int                = np.zeros(np.shape(Te_FL_ver),dtype=float)
        
        vec_z2 = zs[0,int(xi_bottom+1)::]
        vec_z1 = zs[0,int(xi_bottom):-1:1]
        vec_r2 = rs[-1,int(xi_bottom+1)::]
        vec_r1 = rs[-1,int(xi_bottom):-1:1]
        surf_lat = np.zeros(len(vec_z2),dtype=float)
        surf_lat_tot = 0.0
        for index_node in range(0,len(surf_lat)):
            Lpanel = np.sqrt( (vec_z2[index_node]-vec_z1[index_node])**2 + (vec_r2[index_node] - vec_r1[index_node])**2 )
            rpanel = 0.5*(vec_r2[index_node]+vec_r1[index_node])
            surf_lat[index_node] = 2.0*np.pi*rpanel*Lpanel
            surf_lat_tot = surf_lat_tot + surf_lat[index_node]
            
        for istep in range(0,nsteps):
#            vec_z = zs[0,int(xi_bottom)::]
#            Te_FL_lat_int[istep] = np.trapz(Te[-1,int(xi_bottom)::,istep],x=vec_z)
#            phi_FL_lat_int[istep] = np.trapz(phi[-1,int(xi_bottom)::,istep],x=vec_z)
#            Hall_par_eff_FL_lat_int[istep] = np.trapz(Hall_par_eff[-1,int(xi_bottom)::,istep],x=vec_z)
#            Hall_par_FL_lat_int[istep] = np.trapz(Hall_par[-1,int(xi_bottom)::,istep],x=vec_z)
            
            Te_FL_lat_int[istep]                = np.dot(0.5*(Te[-1,int(xi_bottom+1)::,istep] + Te[-1,int(xi_bottom):-1:1,istep]),surf_lat)
            phi_FL_lat_int[istep]               = np.dot(0.5*(phi[-1,int(xi_bottom+1)::,istep] + phi[-1,int(xi_bottom):-1:1,istep]),surf_lat)
            ne_FL_lat_int[istep]                = np.dot(0.5*(ne[-1,int(xi_bottom+1)::,istep] + ne[-1,int(xi_bottom):-1:1,istep]),surf_lat)
            pe_FL_lat_int[istep]                = np.dot(0.5*(pe[-1,int(xi_bottom+1)::,istep] + pe[-1,int(xi_bottom):-1:1,istep]),surf_lat)
            Hall_par_eff_FL_lat_int[istep]      = np.dot(0.5*(Hall_par_eff[-1,int(xi_bottom+1)::,istep] + Hall_par_eff[-1,int(xi_bottom):-1:1,istep]),surf_lat)
            Hall_par_FL_lat_int[istep]          = np.dot(0.5*(Hall_par[-1,int(xi_bottom+1)::,istep] + Hall_par[-1,int(xi_bottom):-1:1,istep]),surf_lat)
            inst_ratio_DphiTe_FL_lat_int[istep] = np.dot(0.5*(Dphi_FL_lat[1::,istep]/Te[-1,int(xi_bottom+1)::,istep] + Dphi_FL_lat[0:-1:1,istep]/Te[-1,int(xi_bottom):-1:1,istep]),surf_lat)
            dphi_sh_b_FL_lat_int[istep]         = np.dot(0.5*(dphi_sh_b[-1,int(xi_bottom+1)::,istep] + dphi_sh_b[-1,int(xi_bottom):-1:1,istep]),surf_lat)
            dphi_sh_b_Te_FL_lat_int[istep]      = np.dot(0.5*(dphi_sh_b_Te[-1,int(xi_bottom+1)::,istep] + dphi_sh_b_Te[-1,int(xi_bottom):-1:1,istep]),surf_lat)
            imp_ene_e_b_FL_lat_int[istep]       = np.dot(0.5*(imp_ene_e_b[-1,int(xi_bottom+1)::,istep] + imp_ene_e_b[-1,int(xi_bottom):-1:1,istep]),surf_lat)
            imp_ene_e_b_Te_FL_lat_int[istep]    = np.dot(0.5*(imp_ene_e_b_Te[-1,int(xi_bottom+1)::,istep] + imp_ene_e_b_Te[-1,int(xi_bottom):-1:1,istep]),surf_lat)
            imp_ene_e_wall_FL_lat_int[istep]    = np.dot(0.5*(imp_ene_e_wall[-1,int(xi_bottom+1)::,istep] + imp_ene_e_wall[-1,int(xi_bottom):-1:1,istep]),surf_lat)
            imp_ene_e_wall_Te_FL_lat_int[istep] = np.dot(0.5*(imp_ene_e_wall_Te[-1,int(xi_bottom+1)::,istep] + imp_ene_e_wall_Te[-1,int(xi_bottom):-1:1,istep]),surf_lat)
            Ti_FL_lat_int[istep]                = np.dot(0.5*(Ti[-1,int(xi_bottom+1)::,istep] + Ti[-1,int(xi_bottom):-1:1,istep]),surf_lat)
        
            
            vec_r = rs[:,-1]
            Te_FL_ver_int[istep]                = 2*np.pi*np.trapz(np.multiply(Te[:,-1,istep],rs[:,-1]),x=vec_r)
            phi_FL_ver_int[istep]               = 2*np.pi*np.trapz(np.multiply(phi[:,-1,istep],rs[:,-1]),x=vec_r)
            ne_FL_ver_int[istep]                = 2*np.pi*np.trapz(np.multiply(ne[:,-1,istep],rs[:,-1]),x=vec_r)
            pe_FL_ver_int[istep]                = 2*np.pi*np.trapz(np.multiply(pe[:,-1,istep],rs[:,-1]),x=vec_r)
            Hall_par_eff_FL_ver_int[istep]      = 2*np.pi*np.trapz(np.multiply(Hall_par_eff[:,-1,istep],rs[:,-1]),x=vec_r)
            Hall_par_FL_ver_int[istep]          = 2*np.pi*np.trapz(np.multiply(Hall_par[:,-1,istep],rs[:,-1]),x=vec_r)
            inst_ratio_DphiTe_FL_ver_int[istep] = 2*np.pi*np.trapz(np.multiply(Dphi_FL_ver[:,istep]/Te[:,-1,istep],rs[:,-1]),x=vec_r)
            dphi_sh_b_FL_ver_int[istep]         = 2*np.pi*np.trapz(np.multiply(dphi_sh_b[:,-1,istep],rs[:,-1]),x=vec_r)
            dphi_sh_b_Te_FL_ver_int[istep]      = 2*np.pi*np.trapz(np.multiply(dphi_sh_b_Te[:,-1,istep],rs[:,-1]),x=vec_r)
            imp_ene_e_b_FL_ver_int[istep]       = 2*np.pi*np.trapz(np.multiply(imp_ene_e_b[:,-1,istep],rs[:,-1]),x=vec_r)
            imp_ene_e_b_Te_FL_ver_int[istep]    = 2*np.pi*np.trapz(np.multiply(imp_ene_e_b_Te[:,-1,istep],rs[:,-1]),x=vec_r)
            imp_ene_e_wall_FL_ver_int[istep]    = 2*np.pi*np.trapz(np.multiply(imp_ene_e_wall[:,-1,istep],rs[:,-1]),x=vec_r)
            imp_ene_e_wall_Te_FL_ver_int[istep] = 2*np.pi*np.trapz(np.multiply(imp_ene_e_wall_Te[:,-1,istep],rs[:,-1]),x=vec_r)
            Ti_FL_ver_int[istep]                = 2*np.pi*np.trapz(np.multiply(Ti[:,-1,istep],rs[:,-1]),x=vec_r)
         

        
        Te_FL_lat_int                = Te_FL_lat_int/surf_lat_tot
        phi_FL_lat_int               = phi_FL_lat_int/surf_lat_tot
        ne_FL_lat_int                = ne_FL_lat_int/surf_lat_tot
        pe_FL_lat_int                = pe_FL_lat_int/surf_lat_tot
        Hall_par_eff_FL_lat_int      = Hall_par_eff_FL_lat_int/surf_lat_tot
        Hall_par_FL_lat_int          = Hall_par_FL_lat_int/surf_lat_tot
        inst_ratio_DphiTe_FL_lat_int = inst_ratio_DphiTe_FL_lat_int/surf_lat_tot
        dphi_sh_b_FL_lat_int         = dphi_sh_b_FL_lat_int/surf_lat_tot
        dphi_sh_b_Te_FL_lat_int      = dphi_sh_b_Te_FL_lat_int/surf_lat_tot
        imp_ene_e_b_FL_lat_int       = imp_ene_e_b_FL_lat_int/surf_lat_tot
        imp_ene_e_b_Te_FL_lat_int    = imp_ene_e_b_Te_FL_lat_int/surf_lat_tot
        imp_ene_e_wall_FL_lat_int    = imp_ene_e_wall_FL_lat_int/surf_lat_tot
        imp_ene_e_wall_Te_FL_lat_int = imp_ene_e_wall_Te_FL_lat_int/surf_lat_tot
        Ti_FL_lat_int                = Ti_FL_lat_int/surf_lat_tot
        
        Te_FL_ver_int                = Te_FL_ver_int/(np.pi*(rs[-1,-1]**2-rs[0,-1]**2))
        phi_FL_ver_int               = phi_FL_ver_int/(np.pi*(rs[-1,-1]**2-rs[0,-1]**2))
        ne_FL_ver_int                = ne_FL_ver_int/(np.pi*(rs[-1,-1]**2-rs[0,-1]**2))
        pe_FL_ver_int                = pe_FL_ver_int/(np.pi*(rs[-1,-1]**2-rs[0,-1]**2))
        Hall_par_eff_FL_ver_int      = Hall_par_eff_FL_ver_int/(np.pi*(rs[-1,-1]**2-rs[0,-1]**2))
        Hall_par_FL_ver_int          = Hall_par_FL_ver_int/(np.pi*(rs[-1,-1]**2-rs[0,-1]**2))
        inst_ratio_DphiTe_FL_ver_int = inst_ratio_DphiTe_FL_ver_int/(np.pi*(rs[-1,-1]**2-rs[0,-1]**2))
        dphi_sh_b_FL_ver_int         = dphi_sh_b_FL_ver_int/(np.pi*(rs[-1,-1]**2-rs[0,-1]**2))
        dphi_sh_b_Te_FL_ver_int      = dphi_sh_b_Te_FL_ver_int/(np.pi*(rs[-1,-1]**2-rs[0,-1]**2))
        imp_ene_e_b_FL_ver_int       = imp_ene_e_b_FL_ver_int/(np.pi*(rs[-1,-1]**2-rs[0,-1]**2))
        imp_ene_e_b_Te_FL_ver_int    = imp_ene_e_b_Te_FL_ver_int/(np.pi*(rs[-1,-1]**2-rs[0,-1]**2))
        imp_ene_e_wall_FL_ver_int    = imp_ene_e_wall_FL_ver_int/(np.pi*(rs[-1,-1]**2-rs[0,-1]**2))
        imp_ene_e_wall_Te_FL_ver_int = imp_ene_e_wall_Te_FL_ver_int/(np.pi*(rs[-1,-1]**2-rs[0,-1]**2))
        Ti_FL_ver_int                = Ti_FL_ver_int/(np.pi*(rs[-1,-1]**2-rs[0,-1]**2))
        

        Te_FL_int                = (Te_FL_lat_int*surf_lat_tot + Te_FL_ver_int*np.pi*(rs[-1,-1]**2-rs[0,-1]**2))/(surf_lat_tot+np.pi*(rs[-1,-1]**2-rs[0,-1]**2))
        phi_FL_int               = (phi_FL_lat_int*surf_lat_tot + phi_FL_ver_int*np.pi*(rs[-1,-1]**2-rs[0,-1]**2))/(surf_lat_tot+np.pi*(rs[-1,-1]**2-rs[0,-1]**2))
        ne_FL_int                = (ne_FL_lat_int*surf_lat_tot + ne_FL_ver_int*np.pi*(rs[-1,-1]**2-rs[0,-1]**2))/(surf_lat_tot+np.pi*(rs[-1,-1]**2-rs[0,-1]**2))
        pe_FL_int                = (pe_FL_lat_int*surf_lat_tot + pe_FL_ver_int*np.pi*(rs[-1,-1]**2-rs[0,-1]**2))/(surf_lat_tot+np.pi*(rs[-1,-1]**2-rs[0,-1]**2))
        Hall_par_eff_FL_int      = (Hall_par_eff_FL_lat_int*surf_lat_tot + Hall_par_eff_FL_ver_int*np.pi*(rs[-1,-1]**2-rs[0,-1]**2))/(surf_lat_tot+np.pi*(rs[-1,-1]**2-rs[0,-1]**2))
        Hall_par_FL_int          = (Hall_par_FL_lat_int*surf_lat_tot + Hall_par_FL_ver_int*np.pi*(rs[-1,-1]**2-rs[0,-1]**2))/(surf_lat_tot+np.pi*(rs[-1,-1]**2-rs[0,-1]**2))
        inst_ratio_DphiTe_FL_int = (inst_ratio_DphiTe_FL_lat_int*surf_lat_tot + inst_ratio_DphiTe_FL_ver_int*np.pi*(rs[-1,-1]**2-rs[0,-1]**2))/(surf_lat_tot+np.pi*(rs[-1,-1]**2-rs[0,-1]**2))
        dphi_sh_b_FL_int         = (dphi_sh_b_FL_lat_int*surf_lat_tot + dphi_sh_b_FL_ver_int*np.pi*(rs[-1,-1]**2-rs[0,-1]**2))/(surf_lat_tot+np.pi*(rs[-1,-1]**2-rs[0,-1]**2))
        dphi_sh_b_Te_FL_int      = (dphi_sh_b_Te_FL_lat_int*surf_lat_tot + dphi_sh_b_Te_FL_ver_int*np.pi*(rs[-1,-1]**2-rs[0,-1]**2))/(surf_lat_tot+np.pi*(rs[-1,-1]**2-rs[0,-1]**2))
        imp_ene_e_b_FL_int       = (imp_ene_e_b_FL_lat_int*surf_lat_tot + imp_ene_e_b_FL_ver_int*np.pi*(rs[-1,-1]**2-rs[0,-1]**2))/(surf_lat_tot+np.pi*(rs[-1,-1]**2-rs[0,-1]**2))
        imp_ene_e_b_Te_FL_int    = (imp_ene_e_b_Te_FL_lat_int*surf_lat_tot + imp_ene_e_b_Te_FL_ver_int*np.pi*(rs[-1,-1]**2-rs[0,-1]**2))/(surf_lat_tot+np.pi*(rs[-1,-1]**2-rs[0,-1]**2))
        imp_ene_e_wall_FL_int    = (imp_ene_e_wall_FL_lat_int*surf_lat_tot + imp_ene_e_wall_FL_ver_int*np.pi*(rs[-1,-1]**2-rs[0,-1]**2))/(surf_lat_tot+np.pi*(rs[-1,-1]**2-rs[0,-1]**2))
        imp_ene_e_wall_Te_FL_int = (imp_ene_e_wall_Te_FL_lat_int*surf_lat_tot + imp_ene_e_wall_Te_FL_ver_int*np.pi*(rs[-1,-1]**2-rs[0,-1]**2))/(surf_lat_tot+np.pi*(rs[-1,-1]**2-rs[0,-1]**2))
        Ti_FL_int                = (Ti_FL_lat_int*surf_lat_tot + Ti_FL_ver_int*np.pi*(rs[-1,-1]**2-rs[0,-1]**2))/(surf_lat_tot+np.pi*(rs[-1,-1]**2-rs[0,-1]**2))
        
        ratio_DphiTe_FL_lat      = (phi_FL_lat - phi_inf)/Te_FL_lat
        ratio_DphiTe_FL_ver      = (phi_FL_ver - phi_inf)/Te_FL_ver
        ratio_DphiTe_FL          = (phi_FL - phi_inf)/Te_FL
        ratio_DphiTe_FL_lat_int  = (phi_FL_lat_int - phi_inf)/Te_FL_lat_int
        ratio_DphiTe_FL_ver_int  = (phi_FL_ver_int - phi_inf)/Te_FL_ver_int
        ratio_DphiTe_FL_int      = (phi_FL_int - phi_inf)/Te_FL_int
                                                        
        # Obtain the FFT of the discharge current and the beam current
        if make_mean == 1 and mean_type == 0:
            time_vector   = time[nsteps-last_steps::]
            Id_vector     = Id[nsteps-last_steps::]
            I_beam_vector = I_beam[nsteps-last_steps::]
            nsamples = len(time_vector)
            [fft_Id,freq_Id,max_fft_Id,max_freq_Id]                     = FFT(time[1]-time[0],time[nsteps-last_steps::],Id[nsteps-last_steps::])
            [fft_Id_inst,freq_Id_inst,max_fft_Id_inst,max_freq_Id_inst] = FFT(time[1]-time[0],time[nsteps-last_steps::],Id_inst[nsteps-last_steps::])
            [fft_I_beam,freq_I_beam,max_fft_I_beam,max_freq_I_beam]     = FFT(time[1]-time[0],time[nsteps-last_steps::],I_beam[nsteps-last_steps::])
            [fft_avg_dens_mp_ions,freq_avg_dens_mp_ions,
             max_fft_avg_dens_mp_ions,max_freq_avg_dens_mp_ions]        = FFT(time_fast[1]-time_fast[0],time_fast[nsteps_fast-last_steps_fast::],avg_dens_mp_ions[nsteps_fast-last_steps_fast::])  
            [fft_avg_dens_mp_neus,freq_avg_dens_mp_neus,
             max_fft_avg_dens_mp_neus,max_freq_avg_dens_mp_neus]        = FFT(time_fast[1]-time_fast[0],time_fast[nsteps_fast-last_steps_fast::],avg_dens_mp_neus[nsteps_fast-last_steps_fast::])  
            # Obtain the phase shift of the signals Id and I_beam from the time between max peaks
            [_,_,time_shift_IdIbeam,phase_shift_IdIbeam_deg] = comp_phase_shift(time,Id,I_beam,time[nsteps-last_steps::],Id[nsteps-last_steps::],
                                                                                time[nsteps-last_steps::],I_beam[nsteps-last_steps::],order)        
        elif make_mean == 1 and mean_type == 1:
            time_vector   = time[step_i:step_f+1]
            Id_vector     = Id[step_i:step_f+1]
            I_beam_vector = I_beam[step_i:step_f+1]
            nsamples = len(time_vector)
            if exp_data_time_plots == 1:
                [fft_exp_Id,freq_exp_Id,max_fft_exp_Id,max_freq_exp_Id] = comp_FFT(exp_time,exp_Id,exp_time[exp_nsteps-exp_last_steps::],exp_Id[exp_nsteps-exp_last_steps::],exp_order)
                [maxs_fft_exp_Id,maxs_freq_exp_Id] = find_firstmax(freq_exp_Id[1:],np.abs(fft_exp_Id[1:]),num_firstmax)
            [fft_Te_mean_dom,freq_Te_mean_dom,max_fft_Te_mean_dom,max_freq_Te_mean_dom] = FFT(time[1]-time[0],time[step_i:step_f+1],Te_mean_dom[step_i:step_f+1])
            [fft_Id,freq_Id,max_fft_Id,max_freq_Id]                     = FFT(time[1]-time[0],time[step_i:step_f+1],Id[step_i:step_f+1])
            [maxs_fft_Id,maxs_freq_Id] = find_firstmax(freq_Id[1:],np.abs(fft_Id[1:]),num_firstmax)
            [fft_Id_inst,freq_Id_inst,max_fft_Id_inst,max_freq_Id_inst] = FFT(time[1]-time[0],time[step_i:step_f+1],Id_inst[step_i:step_f+1])
            [fft_I_beam,freq_I_beam,max_fft_I_beam,max_freq_I_beam]     = FFT(time[1]-time[0],time[step_i:step_f+1],I_beam[step_i:step_f+1])
            [fft_avg_dens_mp_ions,freq_avg_dens_mp_ions,
             max_fft_avg_dens_mp_ions,max_freq_avg_dens_mp_ions]        = FFT(time_fast[1]-time_fast[0],time_fast[step_i_fast:step_f_fast+1],avg_dens_mp_ions[step_i_fast:step_f_fast+1])  
            [fft_avg_dens_mp_neus,freq_avg_dens_mp_neus,
             max_fft_avg_dens_mp_neus,max_freq_avg_dens_mp_neus]        = FFT(time_fast[1]-time_fast[0],time_fast[step_i_fast:step_f_fast+1],avg_dens_mp_neus[step_i_fast:step_f_fast+1])  
            [fft_nu_cath,freq_nu_cath,max_fft_nu_cath,max_freq_nu_cath] = FFT(time[1]-time[0],time[step_i:step_f+1],nu_cath[step_i:step_f+1])
            [fft_P_cath,freq_P_cath,max_fft_P_cath,max_freq_P_cath]     = FFT(time[1]-time[0],time[step_i:step_f+1],P_cath[step_i:step_f+1])
            # Obtain the phase shift of the signals Id and Te_mean_dom from the time between max peaks
            [_,_,time_shift_IdTe_mean_dom,phase_shift_IdTe_mean_dom_deg] = comp_phase_shift(time,Id,Te_mean_dom,time[step_i:step_f+1],Id[step_i:step_f+1],
                                                                                            time[step_i:step_f+1],Te_mean_dom[step_i:step_f+1],order)
            # Obtain the phase shift of the signals Id and I_beam from the time between max peaks
            [_,_,time_shift_IdIbeam,phase_shift_IdIbeam_deg] = comp_phase_shift(time,Id,I_beam,time[step_i:step_f+1],Id[step_i:step_f+1],
                                                                                time[step_i:step_f+1],I_beam[step_i:step_f+1],order)  
            # Obtain the phase shift of the signals avg_dens_mp_neus and avg_dens_mp_ions from the time between max peaks
            [_,_,time_shift_avg_dens_mp_neusions,phase_shift_avg_dens_mp_neusions_deg] = comp_phase_shift(time_fast,avg_dens_mp_neus,avg_dens_mp_ions,time_fast[step_i_fast:step_f_fast+1],avg_dens_mp_neus[step_i_fast:step_f_fast+1],
                                                                                                          time_fast[step_i_fast:step_f_fast+1],avg_dens_mp_ions[step_i_fast:step_f_fast+1],order_fast)
            # Obtain the phase shift of the signals representing the contributions to the total heavy species mass balance
            [_,_,time_shift_ctr_mbal_tot,phase_shift_ctr_mbal_tot_deg] = comp_phase_shift(time,ctr_mflow_fw_tot,ctr_mflow_tw_tot,time[step_i:step_f+1],ctr_mflow_fw_tot[step_i:step_f+1],
                                                                                          time[step_i:step_f+1],ctr_mflow_tw_tot[step_i:step_f+1],order)   
        elif make_mean == 1 and mean_type == 2:
            if exp_data_time_plots == 1:
                # Obtain FFT for Id considering an integer number of periods
                [fft_exp_Id,freq_exp_Id,max_fft_exp_Id,max_freq_exp_Id] = comp_FFT(exp_time,exp_Id,exp_time[exp_nsteps-exp_last_steps::],exp_Id[exp_nsteps-exp_last_steps::],exp_order)
                [maxs_fft_exp_Id,maxs_freq_exp_Id] = find_firstmax(freq_exp_Id[1:],np.abs(fft_exp_Id[1:]),num_firstmax)
            # Obtain FFT for Te_mean_dom considering an integer number of periods
            [fft_Te_mean_dom,freq_Te_mean_dom,max_fft_Te_mean_dom,max_freq_Te_mean_dom] = comp_FFT(time,Te_mean_dom,time[nsteps-last_steps::],Te_mean_dom[nsteps-last_steps::],order)
            # Obtain FFT for Id considering an integer number of periods
            [fft_Id,freq_Id,max_fft_Id,max_freq_Id] = comp_FFT(time,Id,time[nsteps-last_steps::],Id[nsteps-last_steps::],order)
            [maxs_fft_Id,maxs_freq_Id] = find_firstmax(freq_Id[1:],np.abs(fft_Id[1:]),num_firstmax)
            # Obtain FFT for Id_inst considering an integer number of periods
            [fft_Id_inst,freq_Id_inst,max_fft_Id_inst,max_freq_Id_inst] = comp_FFT(time,Id_inst,time[nsteps-last_steps::],Id_inst[nsteps-last_steps::],order)
            # Obtain FFT for I_beam considering an integer number of periods
            [fft_I_beam,freq_I_beam,max_fft_I_beam,max_freq_I_beam] = comp_FFT(time,I_beam,time[nsteps-last_steps::],I_beam[nsteps-last_steps::],order)
            # Obtain FFT for avg_dens_mp_ions considering an integer number of periods
            [fft_avg_dens_mp_ions,freq_avg_dens_mp_ions,max_fft_avg_dens_mp_ions,max_freq_avg_dens_mp_ions] = comp_FFT(time_fast,avg_dens_mp_ions,time_fast[nsteps_fast-last_steps_fast::],avg_dens_mp_ions[nsteps_fast-last_steps_fast::],order_fast)
            # Obtain FFT for avg_dens_mp_neus considering an integer number of periods
            [fft_avg_dens_mp_neus,freq_avg_dens_mp_neus,max_fft_avg_dens_mp_neus,max_freq_avg_dens_mp_neus] = comp_FFT(time_fast,avg_dens_mp_neus,time_fast[nsteps_fast-last_steps_fast::],avg_dens_mp_neus[nsteps_fast-last_steps_fast::],order_fast)
            
       
            # Obtain FFT for Icond considering an integer number of periods
            if n_cond_wall > 0:
                for i in range(0,n_cond_wall):
                    [fft_Icond,freq_Icond,max_fft_Icond,max_freq_Icond] = comp_FFT(time,Icond[:,i],time[nsteps-last_steps::],Icond[nsteps-last_steps::,i],order)
                    if np.any(Vcond != 0):
                        if Vcond[1,0] != Vcond[2,0]:
                            [fft_Vcond,freq_Vcond,max_fft_Vcond,max_freq_Vcond] = comp_FFT(time,Vcond[:,i],time[nsteps-last_steps::],Vcond[nsteps-last_steps::,i],order)
            if np.any(Icath != 0):
                [fft_Icath,freq_Icath,max_fft_Icath,max_freq_Icath] = comp_FFT(time,Icath,time[nsteps-last_steps::],Icath[nsteps-last_steps::],order)
            
            if cath_type == 2:
                # Obtain FFT for nu_cath considering an integer number of periods
                [fft_nu_cath,freq_nu_cath,max_fft_nu_cath,max_freq_nu_cath] = comp_FFT(time,nu_cath,time[nsteps-last_steps::],nu_cath[nsteps-last_steps::],order)
                # Obtain FFT for P_cath considering an integer number of periods
                [fft_P_cath,freq_P_cath,max_fft_P_cath,max_freq_P_cath] = comp_FFT(time,P_cath,time[nsteps-last_steps::],P_cath[nsteps-last_steps::],order)
            elif cath_type == 1:
                fft_nu_cath      = 0
                freq_nu_cath     = 0
                max_fft_nu_cath  = 0
                max_freq_nu_cath = 0
                # Obtain FFT for P_cath considering an integer number of periods
                [fft_P_cath,freq_P_cath,max_fft_P_cath,max_freq_P_cath] = comp_FFT(time,P_cath,time[nsteps-last_steps::],P_cath[nsteps-last_steps::],order)
            
            if np.any(np.diff(phi_inf != 0)):
                # Obtain FFT for phi_inf considering an integer number of periods
                [fft_phi_inf,freq_phi_inf,max_fft_phi_inf,max_freq_phi_inf] = comp_FFT(time,phi_inf,time[nsteps-last_steps::],phi_inf[nsteps-last_steps::],order)
            else:
                fft_phi_inf      = 0
                freq_phi_inf     = 0
                max_fft_phi_inf  = 0
                max_freq_phi_inf = 0

            if np.any(I_inf != 0):
                # Obtain FFT for I_inf considering an integer number of periods
                [fft_I_inf,freq_I_inf,max_fft_I_inf,max_freq_I_inf] = comp_FFT(time,I_inf,time[nsteps-last_steps::],I_inf[nsteps-last_steps::],order)
            else:
                fft_I_inf      = 0
                freq_I_inf     = 0
                max_fft_I_inf  = 0
                max_freq_I_inf = 0
                
            # Obtain FFT for Te at vertical free loss
            [fft_Te_FL_pver,freq_Te_FL_pver,max_fft_Te_FL_pver,max_freq_Te_FL_pver] = comp_FFT(time,Te[i_plot_ver,j_plot_ver,:],time[nsteps-last_steps::],Te[i_plot_ver,j_plot_ver,nsteps-last_steps::],order)
            # Obtain FFT for phi at vertical free loss
            [fft_phi_FL_pver,freq_phi_FL_pver,max_fft_phi_FL_pver,max_freq_phi_FL_pver] = comp_FFT(time,phi[i_plot_ver,j_plot_ver,:],time[nsteps-last_steps::],phi[i_plot_ver,j_plot_ver,nsteps-last_steps::],order)

            if np.any(phi_inf != 0):
                # Obtain FFT for Dphi/Te at vertical free loss
                [fft_DphiTe_FL_pver,freq_DphiTe_FL_pver,max_fft_DphiTe_FL_pver,max_freq_DphiTe_FL_pver] = comp_FFT(time,(phi[i_plot_lat,j_plot_lat,:]-phi_inf[:])/Te[i_plot_lat,j_plot_lat,:],time[nsteps-last_steps::],(phi[i_plot_lat,j_plot_lat,nsteps-last_steps::]-phi_inf[nsteps-last_steps::])/Te[i_plot_lat,j_plot_lat,nsteps-last_steps::],order)
            else:
                fft_DphiTe_FL_pver      = 0
                freq_DphiTe_FL_pver     = 0 
                max_fft_DphiTe_FL_pver  = 0
                max_freq_DphiTe_FL_pver = 0
                

            
            # Obtain the phase shift of the signals Id and Te_mean_dom from the time between max peaks
            [_,_,time_shift_IdTe_mean_dom,phase_shift_IdTe_mean_dom_deg] = comp_phase_shift(time,Id,Te_mean_dom,time[nsteps-last_steps::],Id[nsteps-last_steps::],
                                                                                            time[nsteps-last_steps::],Te_mean_dom[nsteps-last_steps::],order)
            # Obtain the phase shift of the signals Id and I_beam from the time between max peaks
            [_,_,time_shift_IdIbeam,phase_shift_IdIbeam_deg] = comp_phase_shift(time,Id,I_beam,time[nsteps-last_steps::],Id[nsteps-last_steps::],
                                                                                time[nsteps-last_steps::],I_beam[nsteps-last_steps::],order)
            # Obtain the phase shift of the signals avg_dens_mp_neus and avg_dens_mp_ions from the time between max peaks
            [_,_,time_shift_avg_dens_mp_neusions,phase_shift_avg_dens_mp_neusions_deg] = comp_phase_shift(time_fast,avg_dens_mp_neus,avg_dens_mp_ions,time_fast[nsteps_fast-last_steps_fast::],avg_dens_mp_neus[nsteps_fast-last_steps_fast::],
                                                                                                          time_fast[nsteps_fast-last_steps_fast::],avg_dens_mp_ions[nsteps_fast-last_steps_fast::],order_fast)
            
            phase_shift_avg_dens_mp_neusions_deg = 0.0
            # Obtain the phase shift of the signals representing the contributions to the total heavy species mass balance
            [_,_,time_shift_ctr_mbal_tot,phase_shift_ctr_mbal_tot_deg] = comp_phase_shift(time,ctr_mflow_fw_tot,ctr_mflow_tw_tot,time[nsteps-last_steps::],ctr_mflow_fw_tot[nsteps-last_steps::],
                                                                                          time[nsteps-last_steps::],ctr_mflow_tw_tot[nsteps-last_steps::],order)     
        ######################### OLD CODE ####################################
#        # Obtain the cross-correlation of Id and I_beam signals to obtaing their phase shift
#        if mean_type == 2:
#            time_vector   = time[nsteps-last_steps::]
#            Id_vector     = Id[nsteps-last_steps::]
#            I_beam_vector = I_beam[nsteps-last_steps::]
#            nsamples = len(time_vector)
#        xcorr = correlate(Id_vector, I_beam_vector)
##        xcorr = correlate(I_beam_vector, Id_vector)
#        # The peak of the cross-correlation gives the shift between the two signals
#        # The xcorr array goes from -nsamples to nsamples
#        dt = np.linspace(-time_vector[-1], time_vector[-1], 2*nsamples-1)
#        time_shift_IdIbeam = dt[xcorr.argmax()]
#        # force the phase shift to be in [-pi:pi]
#        period = 1.0/max_freq_Id
#        phase_shift_IdIbeam = 2*np.pi*(((0.5 + time_shift_IdIbeam/period) % 1.0) - 0.5)
#        # Convert to degrees
#        phase_shift_IdIbeam_deg = phase_shift_IdIbeam*180.0/np.pi
        #######################################################################
        
        # Obtain the utilization efficiency from the actual flows
        eta_u_bis = (mflow_twinf_i1 + mflow_twinf_i2)/(mflow_inj_n1-(mflow_twa_i1+mflow_twa_i2+mflow_twa_n1))   
        
        # Obtain the total net power of the heavy species deposited to the injection (anode) wall
#        P_inj_hs = eneflow_twa_i1 + eneflow_twa_i2 + eneflow_twa_n1 - (eneflow_inj_i1 + eneflow_inj_i2 + eneflow_inj_n1)
        P_inj_hs = Pi_Awall + Pn_Awall
        # Obtain the total net power of the heavy species deposited to the dielectric walls
#        P_mat_hs = eneflow_twmat_i1 + eneflow_twmat_i2 + eneflow_twmat_n1 - (eneflow_fwmat_i1 + eneflow_fwmat_i2 + eneflow_fwmat_n1)
        P_mat_hs = Pi_Dwall + Pn_Dwall
        
        # Obtain mean values
        if make_mean == 1 and mean_type == 0:  
            mass_mp_ions1_mean       = np.mean(mass_mp_ions[nsteps_fast-last_steps_fast::,0])            
            mass_mp_ions2_mean       = np.mean(mass_mp_ions[nsteps_fast-last_steps_fast::,1])   
            tot_mass_mp_ions_mean    = np.mean(tot_mass_mp_ions[nsteps_fast-last_steps_fast::])   
            tot_mass_mp_neus_mean    = np.mean(tot_mass_mp_neus[nsteps_fast-last_steps_fast::])  
            Isp_s_mean               = np.mean(Isp_s[nsteps-last_steps::])
            Isp_ms_mean              = np.mean(Isp_ms[nsteps-last_steps::])
            eta_u_mean               = np.mean(eta_u[nsteps-last_steps::])           
            eta_u_bis_mean           = np.mean(eta_u_bis[nsteps-last_steps::]) 
            eta_prod_mean            = np.mean(eta_prod[nsteps-last_steps::])   
            eta_cur_mean             = np.mean(eta_cur[nsteps-last_steps::]) 
            eta_div_mean             = np.mean(eta_div[nsteps-last_steps::])  
            eta_thr_mean             = np.mean(eta_thr[nsteps-last_steps::])  
            thrust_mean              = np.mean(thrust[nsteps-last_steps::]) 
            thrust_i1_mean           = np.mean(thrust_ion[nsteps-last_steps::,0]) 
            thrust_i2_mean           = np.mean(thrust_ion[nsteps-last_steps::,1]) 
            thrust_n_mean            = np.mean(thrust_neu[nsteps-last_steps::])  
            Id_mean                  = np.mean(Id[nsteps-last_steps::])  
            Id_inst_mean             = np.mean(Id_inst[nsteps-last_steps::])  
            I_beam_mean              = np.mean(I_beam[nsteps-last_steps::]) 
            avg_dens_mp_ions_mean    = np.mean(avg_dens_mp_ions[nsteps_fast-last_steps_fast::]) 
            avg_dens_mp_neus_mean    = np.mean(avg_dens_mp_neus[nsteps_fast-last_steps_fast::]) 
            Pd_mean                  = np.mean(Pd[nsteps-last_steps::])
            P_mat_mean               = np.mean(P_mat[nsteps-last_steps::])
            P_inj_mean               = np.mean(P_inj[nsteps-last_steps::])
            P_inf_mean               = np.mean(P_inf[nsteps-last_steps::])
            P_ion_mean               = np.mean(P_ion[nsteps-last_steps::])
            P_ex_mean                = np.mean(P_ex[nsteps-last_steps::])
            P_inj_hs_mean            = np.mean(P_inj_hs[nsteps-last_steps::])
            P_mat_hs_mean            = np.mean(P_mat_hs[nsteps-last_steps::])
            P_use_tot_i_mean         = np.mean(P_use_tot_i[nsteps-last_steps::])
            P_use_tot_n_mean         = np.mean(P_use_tot_n[nsteps-last_steps::])
            P_use_tot_mean           = np.mean(P_use_tot[nsteps-last_steps::])
            P_use_z_i_mean           = np.mean(P_use_z_i[nsteps-last_steps::])
            P_use_z_n_mean           = np.mean(P_use_z_n[nsteps-last_steps::])
            P_use_z_mean             = np.mean(P_use_z[nsteps-last_steps::])
            P_cath_mean              = np.mean(P_cath[nsteps-last_steps::])
            nu_cath_mean             = np.mean(nu_cath[nsteps-last_steps::])
            I_tw_tot_mean            = np.mean(I_tw_tot[nsteps-last_steps::])
            mflow_twinf_i1_mean      = np.mean(mflow_twinf_i1[nsteps-last_steps::])
            mflow_twinf_i2_mean      = np.mean(mflow_twinf_i2[nsteps-last_steps::])
            mflow_twinf_n1_mean      = np.mean(mflow_twinf_n1[nsteps-last_steps::])
            mflow_inj_n1_mean        = np.mean(mflow_inj_n1[nsteps-last_steps::])
            mflow_twa_i1_mean        = np.mean(mflow_twa_i1[nsteps-last_steps::])
            mflow_twa_i2_mean        = np.mean(mflow_twa_i2[nsteps-last_steps::])
            mflow_twa_n1_mean        = np.mean(mflow_twa_n1[nsteps-last_steps::])
            err_mbal_n1_mean         = np.mean(err_mbal_n1[nsteps-last_steps::])
            err_mbal_i1_mean         = np.mean(err_mbal_i1[nsteps-last_steps::])
            err_mbal_i2_mean         = np.mean(err_mbal_i2[nsteps-last_steps::])
            Pe_Dwall_mean            = np.mean(Pe_Dwall[nsteps-last_steps::])
            Pe_Awall_mean            = np.mean(Pe_Awall[nsteps-last_steps::])
            Pe_FLwall_mean           = np.mean(Pe_FLwall[nsteps-last_steps::])
            Pi_Dwall_mean            = np.mean(Pi_Dwall[nsteps-last_steps::])
            Pi_Awall_mean            = np.mean(Pi_Awall[nsteps-last_steps::])
            Pi_FLwall_mean           = np.mean(Pi_FLwall[nsteps-last_steps::])
            Pn_Dwall_mean            = np.mean(Pn_Dwall[nsteps-last_steps::])
            Pn_Awall_mean            = np.mean(Pn_Awall[nsteps-last_steps::])
            Pn_FLwall_mean           = np.mean(Pn_FLwall[nsteps-last_steps::])
            P_Dwall_mean             = np.mean(P_Dwall[nsteps-last_steps::])
            P_Awall_mean             = np.mean(P_Awall[nsteps-last_steps::])
            P_FLwall_mean            = np.mean(P_FLwall[nsteps-last_steps::])
            Pfield_e_mean            = np.mean(Pfield_e[nsteps-last_steps::])
        elif make_mean == 1 and mean_type == 1:      
            mass_mp_ions1_mean       = np.mean(mass_mp_ions[step_i_fast:step_f_fast+1,0])            
            mass_mp_ions2_mean       = np.mean(mass_mp_ions[step_i_fast:step_f_fast+1,1])   
            tot_mass_mp_ions_mean    = np.mean(tot_mass_mp_ions[step_i_fast:step_f_fast+1])   
            tot_mass_mp_neus_mean    = np.mean(tot_mass_mp_neus[step_i_fast:step_f_fast+1])  
            Isp_s_mean               = np.mean(Isp_s[step_i:step_f+1])
            Isp_ms_mean              = np.mean(Isp_ms[step_i:step_f+1])
            eta_u_mean               = np.mean(eta_u[step_i:step_f+1])   
            eta_u_bis_mean           = np.mean(eta_u_bis[step_i:step_f+1]) 
            eta_prod_mean            = np.mean(eta_prod[step_i:step_f+1])   
            eta_cur_mean             = np.mean(eta_cur[step_i:step_f+1])  
            eta_div_mean             = np.mean(eta_div[step_i:step_f+1])  
            eta_thr_mean             = np.mean(eta_thr[step_i:step_f+1])  
            thrust_mean              = np.mean(thrust[step_i:step_f+1]) 
            thrust_i1_mean           = np.mean(thrust_ion[step_i:step_f+1,0]) 
            thrust_i2_mean           = np.mean(thrust_ion[step_i:step_f+1,1]) 
            thrust_n_mean            = np.mean(thrust_neu[step_i:step_f+1])                                     
            Id_mean                  = np.mean(Id[step_i:step_f+1])
            Id_inst_mean             = np.mean(Id_inst[step_i:step_f+1])
            I_beam_mean              = np.mean(I_beam[step_i:step_f+1])
            avg_dens_mp_ions_mean    = np.mean(avg_dens_mp_ions[step_i_fast:step_f_fast+1]) 
            avg_dens_mp_neus_mean    = np.mean(avg_dens_mp_neus[step_i_fast:step_f_fast+1]) 
            Pd_mean                  = np.mean(Pd[step_i:step_f+1])
            P_mat_mean               = np.mean(P_mat[step_i:step_f+1])
            P_inj_mean               = np.mean(P_inj[step_i:step_f+1])
            P_inf_mean               = np.mean(P_inf[step_i:step_f+1])
            P_ion_mean               = np.mean(P_ion[step_i:step_f+1])
            P_ex_mean                = np.mean(P_ex[step_i:step_f+1])
            P_inj_hs_mean            = np.mean(P_inj_hs[step_i:step_f+1])
            P_mat_hs_mean            = np.mean(P_mat_hs[step_i:step_f+1])
            P_use_tot_i_mean         = np.mean(P_use_tot_i[step_i:step_f+1])
            P_use_tot_n_mean         = np.mean(P_use_tot_n[step_i:step_f+1])
            P_use_tot_mean           = np.mean(P_use_tot[step_i:step_f+1])
            P_use_z_i_mean           = np.mean(P_use_z_i[step_i:step_f+1])
            P_use_z_n_mean           = np.mean(P_use_z_n[step_i:step_f+1])
            P_use_z_mean             = np.mean(P_use_z[step_i:step_f+1])
            P_cath_mean              = np.mean(P_cath[step_i:step_f+1])
            nu_cath_mean             = np.mean(nu_cath[step_i:step_f+1])
            I_tw_tot_mean            = np.mean(I_tw_tot[step_i:step_f+1])
            mflow_twinf_i1_mean      = np.mean(mflow_twinf_i1[step_i:step_f+1])
            mflow_twinf_i2_mean      = np.mean(mflow_twinf_i2[step_i:step_f+1])
            mflow_twinf_n1_mean      = np.mean(mflow_twinf_n1[step_i:step_f+1])
            mflow_inj_n1_mean        = np.mean(mflow_inj_n1[step_i:step_f+1])
            mflow_twa_i1_mean        = np.mean(mflow_twa_i1[step_i:step_f+1])
            mflow_twa_i2_mean        = np.mean(mflow_twa_i2[step_i:step_f+1])
            mflow_twa_n1_mean        = np.mean(mflow_twa_n1[step_i:step_f+1])
            err_mbal_n1_mean         = np.mean(err_mbal_n1[step_i:step_f+1])
            err_mbal_i1_mean         = np.mean(err_mbal_i1[step_i:step_f+1])
            err_mbal_i2_mean         = np.mean(err_mbal_i2[step_i:step_f+1])
            err_mbal_tot_mean        = np.mean(err_mbal_tot[step_i:step_f+1])  
            Pe_Dwall_mean            = np.mean(Pe_Dwall[step_i:step_f+1])
            Pe_Awall_mean            = np.mean(Pe_Awall[step_i:step_f+1])
            Pe_FLwall_mean           = np.mean(Pe_FLwall[step_i:step_f+1])
            Pi_Dwall_mean            = np.mean(Pi_Dwall[step_i:step_f+1])
            Pi_Awall_mean            = np.mean(Pi_Awall[step_i:step_f+1])
            Pi_FLwall_mean           = np.mean(Pi_FLwall[step_i:step_f+1])
            Pn_Dwall_mean            = np.mean(Pn_Dwall[step_i:step_f+1])
            Pn_Awall_mean            = np.mean(Pn_Awall[step_i:step_f+1])
            Pn_FLwall_mean           = np.mean(Pn_FLwall[step_i:step_f+1])
            P_Dwall_mean             = np.mean(P_Dwall[step_i:step_f+1])
            P_Awall_mean             = np.mean(P_Awall[step_i:step_f+1])
            P_FLwall_mean            = np.mean(P_FLwall[step_i:step_f+1])
            Pionex_mean              = np.mean(Pionex[step_i:step_f+1])               
            Pnothrust_walls_mean     = np.mean(Pnothrust_walls[step_i:step_f+1])       
            Pnothrust_mean           = np.mean(Pnothrust[step_i:step_f+1])   
            Pthrust_mean             = np.mean(Pthrust[step_i:step_f+1])   
            Ploss_mean               = np.mean(Ploss[step_i:step_f+1])                
            Pfield_e_mean            = np.mean(Pfield_e[step_i:step_f+1])
        if make_mean == 1 and mean_type == 2:
            [_,_,_,_,_,_,
             mean_min_exp_Id,mean_max_exp_Id,exp_Id_mean,
             max2mean_exp_Id,min2mean_exp_Id,amp_exp_Id,
             mins_ind_comp_exp_Id,maxs_ind_comp_exp_Id]                                 = max_min_mean_vals(exp_time,exp_time[exp_nsteps-exp_last_steps::],exp_Id[exp_nsteps-exp_last_steps::],exp_order)
#            [_,_,_,_,_,_,
#             mean_min_exp_Vd,mean_max_exp_Vd,exp_Vd_mean,
#             max2mean_exp_Vd,min2mean_exp_Vd,amp_exp_Vd,
#             mins_ind_comp_exp_Vd,maxs_ind_comp_exp_Vd]                                 = max_min_mean_vals(exp_time,exp_time[exp_nsteps-exp_last_steps::],exp_Vd[exp_nsteps-exp_last_steps::],exp_order)
            [_,_,_,_,_,_,
             mean_min_exp_Pd,mean_max_exp_Pd,exp_Pd_mean,
             max2mean_exp_Pd,min2mean_exp_Pd,amp_exp_Pd,
             mins_ind_comp_exp_Pd,maxs_ind_comp_exp_Pd]                                 = max_min_mean_vals(exp_time,exp_time[exp_nsteps-exp_last_steps::],exp_Pd[exp_nsteps-exp_last_steps::],exp_order)
            [_,_,_,_,_,_,
             mean_min_mass_mp_ions1,mean_max_mass_mp_ions1,mass_mp_ions1_mean,
             max2mean_mass_mp_ions1,min2mean_mass_mp_ions1,amp_mass_mp_ions1,
             mins_ind_comp_mass_mp_ions1,maxs_ind_comp_mass_mp_ions1]                   = max_min_mean_vals(time_fast,time_fast[nsteps_fast-last_steps_fast::],mass_mp_ions[nsteps_fast-last_steps_fast::,0],order)
            if num_ion_spe > 1:
                [_,_,_,_,_,_,
                 mean_min_mass_mp_ions2,mean_max_mass_mp_ions2,mass_mp_ions2_mean,
                 max2mean_mass_mp_ions2,min2mean_mass_mp_ions2,amp_mass_mp_ions2,
                 mins_ind_comp_mass_mp_ions2,maxs_ind_comp_mass_mp_ions2]               = max_min_mean_vals(time_fast,time_fast[nsteps_fast-last_steps_fast::],mass_mp_ions[nsteps_fast-last_steps_fast::,1],order)
            else:
                mean_min_mass_mp_ions2 = 0.0
                mean_max_mass_mp_ions2 = 0.0
                mass_mp_ions2_mean     = 0.0
                max2mean_mass_mp_ions2 = 0.0
                min2mean_mass_mp_ions2 = 0.0
                amp_mass_mp_ions2      = 0.0
                mins_ind_comp_mass_mp_ions2 = np.zeros(np.shape(maxs_ind_comp_mass_mp_ions1),dtype=int)
                maxs_ind_comp_mass_mp_ions2 = np.zeros(np.shape(maxs_ind_comp_mass_mp_ions1),dtype=int)
                
            [_,_,_,_,_,_,
             mean_min_tot_mass_mp_ions,mean_max_tot_mass_mp_ions,tot_mass_mp_ions_mean,
             max2mean_tot_mass_mp_ions,min2mean_tot_mass_mp_ions,amp_tot_mass_mp_ions,
             mins_ind_comp_tot_mass_mp_ions,maxs_ind_comp_tot_mass_mp_ions]             = max_min_mean_vals(time_fast,time_fast[nsteps_fast-last_steps_fast::],tot_mass_mp_ions[nsteps_fast-last_steps_fast::],order)
            [_,_,_,_,_,_,
             mean_min_tot_mass_mp_neus,mean_max_tot_mass_mp_neus,tot_mass_mp_neus_mean,
             max2mean_tot_mass_mp_neus,min2mean_tot_mass_mp_neus,amp_tot_mass_mp_neus,
             mins_ind_comp_tot_mass_mp_neus,maxs_ind_comp_tot_mass_mp_neus]             = max_min_mean_vals(time_fast,time_fast[nsteps_fast-last_steps_fast::],tot_mass_mp_neus[nsteps_fast-last_steps_fast::],order)            
            [_,_,_,_,_,_,
             mean_min_avg_dens_mp_ions,mean_max_avg_dens_mp_ions,avg_dens_mp_ions_mean,
             max2mean_avg_dens_mp_ions,min2mean_avg_dens_mp_ions,amp_avg_dens_mp_ions,
             mins_ind_comp_avg_dens_mp_ions,maxs_ind_comp_avg_dens_mp_ions]             = max_min_mean_vals(time_fast,time_fast[nsteps_fast-last_steps_fast::],avg_dens_mp_ions[nsteps_fast-last_steps_fast::],order)
            [_,_,_,_,_,_,
             mean_min_avg_dens_mp_neus,mean_max_avg_dens_mp_neus,avg_dens_mp_neus_mean,
             max2mean_avg_dens_mp_neus,min2mean_avg_dens_mp_neus,amp_avg_dens_mp_neus,
             mins_ind_comp_avg_dens_mp_neus,maxs_ind_comp_avg_dens_mp_neus]             = max_min_mean_vals(time_fast,time_fast[nsteps_fast-last_steps_fast::],avg_dens_mp_neus[nsteps_fast-last_steps_fast::],order)            
            [_,_,_,_,_,_,
             mean_min_Isp_s,mean_max_Isp_s,Isp_s_mean,
             max2mean_Isp_s,min2mean_Isp_s,amp_Isp_s,
             mins_ind_comp_Isp_s,maxs_ind_comp_Isp_s]                                   = max_min_mean_vals(time,time[nsteps-last_steps::],Isp_s[nsteps-last_steps::],order) 
            [_,_,_,_,_,_,
             mean_min_Isp_ms,mean_max_Isp_ms,Isp_ms_mean,
             max2mean_Isp_ms,min2mean_Isp_ms,amp_Isp_ms,
             mins_ind_comp_Isp_ms,maxs_ind_comp_Isp_ms]                                 = max_min_mean_vals(time,time[nsteps-last_steps::],Isp_ms[nsteps-last_steps::],order) 
            [_,_,_,_,_,_,
             mean_min_eta_u,mean_max_eta_u,eta_u_mean,
             max2mean_eta_u,min2mean_eta_u,amp_eta_u,
             mins_ind_comp_eta_u,maxs_ind_comp_eta_u]                                   = max_min_mean_vals(time,time[nsteps-last_steps::],eta_u[nsteps-last_steps::],order) 
            [_,_,_,_,_,_,
             mean_min_eta_u_bis,mean_max_eta_u_bis,eta_u_bis_mean,
             max2mean_eta_u_bis,min2mean_eta_u_bis,amp_eta_u_bis,
             mins_ind_comp_eta_u_bis,maxs_ind_comp_eta_u_bis]                           = max_min_mean_vals(time,time[nsteps-last_steps::],eta_u_bis[nsteps-last_steps::],order) 
            [_,_,_,_,_,_,
             mean_min_eta_prod,mean_max_eta_prod,eta_prod_mean,
             max2mean_eta_prod,min2mean_eta_prod,amp_eta_prod,
             mins_ind_comp_eta_prod,maxs_ind_comp_eta_prod]                             = max_min_mean_vals(time,time[nsteps-last_steps::],eta_prod[nsteps-last_steps::],order)
            [_,_,_,_,_,_,
             mean_min_eta_cur,mean_max_eta_cur,eta_cur_mean,
             max2mean_eta_cur,min2mean_eta_cur,amp_eta_cur,
             mins_ind_comp_eta_cur,maxs_ind_comp_eta_cur]                               = max_min_mean_vals(time,time[nsteps-last_steps::],eta_cur[nsteps-last_steps::],order)
            [_,_,_,_,_,_,
             mean_min_eta_div,mean_max_eta_div,eta_div_mean,
             max2mean_eta_div,min2mean_eta_div,amp_eta_div,
             mins_ind_comp_eta_div,maxs_ind_comp_eta_div]                               = max_min_mean_vals(time,time[nsteps-last_steps::],eta_div[nsteps-last_steps::],order)
            [_,_,_,_,_,_,
             mean_min_eta_thr,mean_max_eta_thr,eta_thr_mean,
             max2mean_eta_thr,min2mean_eta_thr,amp_eta_thr,
             mins_ind_comp_eta_thr,maxs_ind_comp_eta_thr]                               = max_min_mean_vals(time,time[nsteps-last_steps::],eta_thr[nsteps-last_steps::],order)
            [_,_,_,_,_,_,
             mean_min_thrust_m,mean_max_thrust_m,thrust_m_mean,
             max2mean_thrust_m,min2mean_thrust_m,amp_thrust_m,
             mins_ind_comp_thrust_m,maxs_ind_comp_thrust_m]                             = max_min_mean_vals(time,time[nsteps-last_steps::],thrust_m[nsteps-last_steps::],order)
            [_,_,_,_,_,_,
             mean_min_thrust_pres,mean_max_thrust_pres,thrust_pres_mean,
             max2mean_thrust_pres,min2mean_thrust_pres,amp_thrust_pres,
             mins_ind_comp_thrust_pres,maxs_ind_comp_thrust_pres]                       = max_min_mean_vals(time,time[nsteps-last_steps::],thrust_pres[nsteps-last_steps::],order)
            [_,_,_,_,_,_,
             mean_min_thrust,mean_max_thrust,thrust_mean,
             max2mean_thrust,min2mean_thrust,amp_thrust,
             mins_ind_comp_thrust,maxs_ind_comp_thrust]                                 = max_min_mean_vals(time,time[nsteps-last_steps::],thrust[nsteps-last_steps::],order)
            [_,_,_,_,_,_,
             mean_min_thrust_i1,mean_max_thrust_i1,thrust_i1_mean,
             max2mean_thrust_i1,min2mean_thrust_i1,amp_thrust_i1,
             mins_ind_comp_thrust_i1,maxs_ind_comp_thrust_i1]                           = max_min_mean_vals(time,time[nsteps-last_steps::],thrust_ion[nsteps-last_steps::,0],order)
            if num_ion_spe == 2:
                [_,_,_,_,_,_,
                 mean_min_thrust_i2,mean_max_thrust_i2,thrust_i2_mean,
                 max2mean_thrust_i2,min2mean_thrust_i2,amp_thrust_i2,
                 mins_ind_comp_thrust_i2,maxs_ind_comp_thrust_i2]                           = max_min_mean_vals(time,time[nsteps-last_steps::],thrust_ion[nsteps-last_steps::,1],order)
                mean_min_thrust_i3 = 0.0
                mean_max_thrust_i3 = 0.0
                thrust_i3_mean     = 0.0
                max2mean_thrust_i3 = 0.0
                min2mean_thrust_i3 = 0.0
                amp_thrust_i3      = 0.0
                mins_ind_comp_thrust_i3 = np.zeros(np.shape(maxs_ind_comp_thrust_i1),dtype=int)
                maxs_ind_comp_thrust_i3 = np.zeros(np.shape(maxs_ind_comp_thrust_i1),dtype=int)
                mean_min_thrust_i4 = 0.0
                mean_max_thrust_i4 = 0.0
                thrust_i4_mean     = 0.0
                max2mean_thrust_i4 = 0.0
                min2mean_thrust_i4 = 0.0
                amp_thrust_i4      = 0.0
                mins_ind_comp_thrust_i4 = np.zeros(np.shape(maxs_ind_comp_thrust_i1),dtype=int)
                maxs_ind_comp_thrust_i4 = np.zeros(np.shape(maxs_ind_comp_thrust_i1),dtype=int)
            elif num_ion_spe == 4:
                [_,_,_,_,_,_,
                 mean_min_thrust_i2,mean_max_thrust_i2,thrust_i2_mean,
                 max2mean_thrust_i2,min2mean_thrust_i2,amp_thrust_i2,
                 mins_ind_comp_thrust_i2,maxs_ind_comp_thrust_i2]                           = max_min_mean_vals(time,time[nsteps-last_steps::],thrust_ion[nsteps-last_steps::,1],order)
                [_,_,_,_,_,_,
                 mean_min_thrust_i3,mean_max_thrust_i3,thrust_i3_mean,
                 max2mean_thrust_i3,min2mean_thrust_i3,amp_thrust_i3,
                 mins_ind_comp_thrust_i3,maxs_ind_comp_thrust_i3]                           = max_min_mean_vals(time,time[nsteps-last_steps::],thrust_ion[nsteps-last_steps::,2],order)
                [_,_,_,_,_,_,
                 mean_min_thrust_i4,mean_max_thrust_i4,thrust_i4_mean,
                 max2mean_thrust_i4,min2mean_thrust_i4,amp_thrust_i4,
                 mins_ind_comp_thrust_i4,maxs_ind_comp_thrust_i4]                           = max_min_mean_vals(time,time[nsteps-last_steps::],thrust_ion[nsteps-last_steps::,3],order)
            
            else:
                mean_min_thrust_i2 = 0.0
                mean_max_thrust_i2 = 0.0
                thrust_i2_mean     = 0.0
                max2mean_thrust_i2 = 0.0
                min2mean_thrust_i2 = 0.0
                amp_thrust_i2      = 0.0
                mins_ind_comp_thrust_i2 = np.zeros(np.shape(maxs_ind_comp_thrust_i1),dtype=int)
                maxs_ind_comp_thrust_i2 = np.zeros(np.shape(maxs_ind_comp_thrust_i1),dtype=int)
                mean_min_thrust_i3 = 0.0
                mean_max_thrust_i3 = 0.0
                thrust_i3_mean     = 0.0
                max2mean_thrust_i3 = 0.0
                min2mean_thrust_i3 = 0.0
                amp_thrust_i3      = 0.0
                mins_ind_comp_thrust_i3 = np.zeros(np.shape(maxs_ind_comp_thrust_i1),dtype=int)
                maxs_ind_comp_thrust_i3 = np.zeros(np.shape(maxs_ind_comp_thrust_i1),dtype=int)
                mean_min_thrust_i4 = 0.0
                mean_max_thrust_i4 = 0.0
                thrust_i4_mean     = 0.0
                max2mean_thrust_i4 = 0.0
                min2mean_thrust_i4 = 0.0
                amp_thrust_i4      = 0.0
                mins_ind_comp_thrust_i4 = np.zeros(np.shape(maxs_ind_comp_thrust_i1),dtype=int)
                maxs_ind_comp_thrust_i4 = np.zeros(np.shape(maxs_ind_comp_thrust_i1),dtype=int)
            [_,_,_,_,_,_,
             mean_min_thrust_n1,mean_max_thrust_n1,thrust_n1_mean,
             max2mean_thrust_n1,min2mean_thrust_n1,amp_thrust_n1,
             mins_ind_comp_thrust_n1,maxs_ind_comp_thrust_n1]                             = max_min_mean_vals(time,time[nsteps-last_steps::],thrust_neu[nsteps-last_steps::,0],order)
            if num_neu_spe == 3:
                [_,_,_,_,_,_,
                 mean_min_thrust_n2,mean_max_thrust_n2,thrust_n2_mean,
                 max2mean_thrust_n2,min2mean_thrust_n2,amp_thrust_n2,
                 mins_ind_comp_thrust_n2,maxs_ind_comp_thrust_n2]                         = max_min_mean_vals(time,time[nsteps-last_steps::],thrust_neu[nsteps-last_steps::,1],order)
                [_,_,_,_,_,_,
                 mean_min_thrust_n3,mean_max_thrust_n3,thrust_n3_mean,
                 max2mean_thrust_n3,min2mean_thrust_n1,amp_thrust_n3,
                 mins_ind_comp_thrust_n3,maxs_ind_comp_thrust_n3]                         = max_min_mean_vals(time,time[nsteps-last_steps::],thrust_neu[nsteps-last_steps::,2],order)
                
            else:
                mean_min_thrust_n2 = 0.0
                mean_max_thrust_n2 = 0.0
                thrust_n2_mean     = 0.0
                max2mean_thrust_n2 = 0.0
                min2mean_thrust_n2 = 0.0
                amp_thrust_n2      = 0.0
                mins_ind_comp_thrust_n2 = np.zeros(np.shape(maxs_ind_comp_thrust_n1),dtype=int)
                maxs_ind_comp_thrust_n2 = np.zeros(np.shape(maxs_ind_comp_thrust_n1),dtype=int)
                mean_min_thrust_n3 = 0.0
                mean_max_thrust_n3 = 0.0
                thrust_n3_mean     = 0.0
                max2mean_thrust_n3 = 0.0
                min2mean_thrust_n3 = 0.0
                amp_thrust_n3      = 0.0
                mins_ind_comp_thrust_n3 = np.zeros(np.shape(maxs_ind_comp_thrust_n1),dtype=int)
                maxs_ind_comp_thrust_n3 = np.zeros(np.shape(maxs_ind_comp_thrust_n1),dtype=int)
                
            [_,_,_,_,_,_,
             mean_min_thrust_e,mean_max_thrust_e,thrust_e_mean,
             max2mean_thrust_e,min2mean_thrust_e,amp_thrust_e,
             mins_ind_comp_thrust_e,maxs_ind_comp_thrust_e]                             = max_min_mean_vals(time,time[nsteps-last_steps::],thrust_e[nsteps-last_steps::],order)
            [_,_,_,_,_,_,
             mean_min_Te_mean_dom,mean_max_Te_mean_dom,Te_mean_dom_mean,
             max2mean_Te_mean_dom,min2mean_Te_mean_dom,amp_Te_mean_dom,
             mins_ind_comp_Te_mean_dom,maxs_ind_comp_Te_mean_dom]                       = max_min_mean_vals(time,time[nsteps-last_steps::],Te_mean_dom[nsteps-last_steps::],order)
            [_,_,_,_,_,_,
             mean_min_Id,mean_max_Id,Id_mean,
             max2mean_Id,min2mean_Id,amp_Id,
             mins_ind_comp_Id,maxs_ind_comp_Id]                                         = max_min_mean_vals(time,time[nsteps-last_steps::],Id[nsteps-last_steps::],order)
            [_,_,_,_,_,_,
             mean_min_Id_inst,mean_max_Id_inst,Id_inst_mean,
             max2mean_Id_inst,min2mean_Id_inst,amp_Id_inst,
             mins_ind_comp_Id_inst,maxs_ind_comp_Id_inst]                               = max_min_mean_vals(time,time[nsteps-last_steps::],Id_inst[nsteps-last_steps::],order)
            
            if n_cond_wall > 0:
                for i in range(0,n_cond_wall):
                    [_,_,_,_,_,_,
                     mean_min_Icond,mean_max_Icond,Icond_mean,
                     max2mean_Icond,min2mean_Icond,amp_Icond,
                     mins_ind_comp_Icond,maxs_ind_comp_Icond]                           = max_min_mean_vals(time,time[nsteps-last_steps::],Icond[nsteps-last_steps::,i],order)
                    if np.any(Vcond != 0):
                        if Vcond[1,0] != Vcond[2,0]:
                            [_,_,_,_,_,_,
                             mean_min_Vcond,mean_max_Vcond,Vcond_mean,
                             max2mean_Vcond,min2mean_Vcond,amp_Vcond,
                             mins_ind_comp_Vcond,maxs_ind_comp_Vcond]                   = max_min_mean_vals(time,time[nsteps-last_steps::],Vcond[nsteps-last_steps::,i],order)
                        else:
                            mean_min_Vcond      = 0
                            mean_max_Vcond      = 0
                            Vcond_mean          = 0
                            max2mean_Vcond      = 0
                            min2mean_Vcond      = 0
                            amp_Vcond           = 0
                            mins_ind_comp_Vcond = 0
                            maxs_ind_comp_Vcond = 0
            else:
                mean_min_Icond      = 0
                mean_max_Icond      = 0
                Icond_mean          = 0
                max2mean_Icond      = 0
                min2mean_Icond      = 0
                amp_Icond           = 0
                mins_ind_comp_Icond = 0
                maxs_ind_comp_Icond = 0
                
                mean_min_Vcond      = 0
                mean_max_Vcond      = 0
                Vcond_mean          = 0
                max2mean_Vcond      = 0
                min2mean_Vcond      = 0
                amp_Vcond           = 0
                mins_ind_comp_Vcond = 0
                maxs_ind_comp_Vcond = 0
            
            if np.any(Icath != 0):
                [_,_,_,_,_,_,
                 mean_min_Icath,mean_max_Icath,Icath_mean,
                 max2mean_Icath,min2mean_Icath,amp_Icath,
                 mins_ind_comp_Icath,maxs_ind_comp_Icath]                                 = max_min_mean_vals(time,time[nsteps-last_steps::],Icath[nsteps-last_steps::],order)
            
            else:
                mean_min_Icath      = 0
                mean_max_Icath      = 0
                Icath_mean          = 0
                max2mean_Icath      = 0
                min2mean_Icath      = 0
                amp_Icath           = 0
                mins_ind_comp_Icath = 0
                maxs_ind_comp_Icath = 0
            
            [_,_,_,_,_,_,
             mean_min_I_beam,mean_max_I_beam,I_beam_mean,
             max2mean_I_beam,min2mean_I_beam,amp_I_beam,
             mins_ind_comp_I_beam,maxs_ind_comp_I_beam]                                 = max_min_mean_vals(time,time[nsteps-last_steps::],I_beam[nsteps-last_steps::],order)
            [_,_,_,_,_,_,
             mean_min_Pd,mean_max_Pd,Pd_mean,
             max2mean_Pd,min2mean_Pd,amp_Pd,
             mins_ind_comp_Pd,maxs_ind_comp_Pd]                                         = max_min_mean_vals(time,time[nsteps-last_steps::],Pd[nsteps-last_steps::],order)
            [_,_,_,_,_,_,
             mean_min_P_mat,mean_max_P_mat,P_mat_mean,
             max2mean_P_mat,min2mean_P_mat,amp_P_mat,
             mins_ind_comp_P_mat,maxs_ind_comp_P_mat]                                   = max_min_mean_vals(time,time[nsteps-last_steps::],P_mat[nsteps-last_steps::],order)
            [_,_,_,_,_,_,
             mean_min_P_inj,mean_max_P_inj,P_inj_mean,
             max2mean_P_inj,min2mean_P_inj,amp_P_inj,
             mins_ind_comp_P_inj,maxs_ind_comp_P_inj]                                   = max_min_mean_vals(time,time[nsteps-last_steps::],P_inj[nsteps-last_steps::],order)
            [_,_,_,_,_,_,
             mean_min_P_inf,mean_max_P_inf,P_inf_mean,
             max2mean_P_inf,min2mean_P_inf,amp_P_inf,
             mins_ind_comp_P_inf,maxs_ind_comp_P_inf]                                   = max_min_mean_vals(time,time[nsteps-last_steps::],P_inf[nsteps-last_steps::],order)
            [_,_,_,_,_,_,
             mean_min_P_ion,mean_max_P_ion,P_ion_mean,
             max2mean_P_ion,min2mean_P_ion,amp_P_ion,
             mins_ind_comp_P_ion,maxs_ind_comp_P_ion]                                   = max_min_mean_vals(time,time[nsteps-last_steps::],P_ion[nsteps-last_steps::],order)
            [_,_,_,_,_,_,
             mean_min_P_ex,mean_max_P_ex,P_ex_mean,
             max2mean_P_ex,min2mean_P_ex,amp_P_ex,
             mins_ind_comp_P_ex,maxs_ind_comp_P_ex]                                     = max_min_mean_vals(time,time[nsteps-last_steps::],P_ex[nsteps-last_steps::],order)
            [_,_,_,_,_,_,
             mean_min_P_inj_hs,mean_max_P_inj_hs,P_inj_hs_mean,
             max2mean_P_inj_hs,min2mean_P_inj_hs,amp_P_inj_hs,
             mins_ind_comp_P_inj_hs,maxs_ind_comp_P_inj_hs]                             = max_min_mean_vals(time,time[nsteps-last_steps::],P_inj_hs[nsteps-last_steps::],order)
            [_,_,_,_,_,_,
             mean_min_P_mat_hs,mean_max_P_mat_hs,P_mat_hs_mean,
             max2mean_P_mat_hs,min2mean_P_mat_hs,amp_P_mat_hs,
             mins_ind_comp_P_mat_hs,maxs_ind_comp_P_mat_hs]                             = max_min_mean_vals(time,time[nsteps-last_steps::],P_mat_hs[nsteps-last_steps::],order)
            [_,_,_,_,_,_,
             mean_min_P_use_tot_i,mean_max_P_use_tot_i,P_use_tot_i_mean,
             max2mean_P_use_tot_i,min2mean_P_use_tot_i,amp_P_use_tot_i,
             mins_ind_comp_P_use_tot_i,maxs_ind_comp_P_use_tot_i]                       = max_min_mean_vals(time,time[nsteps-last_steps::],P_use_tot_i[nsteps-last_steps::],order)
            [_,_,_,_,_,_,
             mean_min_P_use_tot_n,mean_max_P_use_tot_n,P_use_tot_n_mean,
             max2mean_P_use_tot_n,min2mean_P_use_tot_n,amp_P_use_tot_n,
             mins_ind_comp_P_use_tot_n,maxs_ind_comp_P_use_tot_n]                       = max_min_mean_vals(time,time[nsteps-last_steps::],P_use_tot_n[nsteps-last_steps::],order)
            [_,_,_,_,_,_,
             mean_min_P_use_tot,mean_max_P_use_tot,P_use_tot_mean,
             max2mean_P_use_tot,min2mean_P_use_tot,amp_P_use_tot,
             mins_ind_comp_P_use_tot,maxs_ind_comp_P_use_tot]                           = max_min_mean_vals(time,time[nsteps-last_steps::],P_use_tot[nsteps-last_steps::],order)
            [_,_,_,_,_,_,
             mean_min_P_use_z_i,mean_max_P_use_z_i,P_use_z_i_mean,
             max2mean_P_use_z_i,min2mean_P_use_z_i,amp_P_use_z_i,
             mins_ind_comp_P_use_z_i,maxs_ind_comp_P_use_z_i]                           = max_min_mean_vals(time,time[nsteps-last_steps::],P_use_z_i[nsteps-last_steps::],order)
            [_,_,_,_,_,_,
             mean_min_P_use_z_n,mean_max_P_use_z_n,P_use_z_n_mean,
             max2mean_P_use_z_n,min2mean_P_use_z_n,amp_P_use_z_n,
             mins_ind_comp_P_use_z_n,maxs_ind_comp_P_use_z_n]                           = max_min_mean_vals(time,time[nsteps-last_steps::],P_use_z_n[nsteps-last_steps::],order)
            [_,_,_,_,_,_,
             mean_min_P_use_z_e,mean_max_P_use_z_e,P_use_z_e_mean,
             max2mean_P_use_z_e,min2mean_P_use_z_e,amp_P_use_z_e,
             mins_ind_comp_P_use_z_e,maxs_ind_comp_P_use_z_e]                           = max_min_mean_vals(time,time[nsteps-last_steps::],P_use_z_e[nsteps-last_steps::],order)
            [_,_,_,_,_,_,
             mean_min_P_use_z,mean_max_P_use_z,P_use_z_mean,
             max2mean_P_use_z,min2mean_P_use_z,amp_P_use_z,
             mins_ind_comp_P_use_z,maxs_ind_comp_P_use_z]                               = max_min_mean_vals(time,time[nsteps-last_steps::],P_use_z[nsteps-last_steps::],order)
            
            if cath_type == 2:
                # NOTE: for cath_type = 1 (wall cathode) we have:
                # nu_cath = 0
                # P_cath  = power inputed from the wall cathode (needs to be obtained)
                [_,_,_,_,_,_,
                 mean_min_P_cath,mean_max_P_cath,P_cath_mean,
                 max2mean_P_cath,min2mean_P_cath,amp_P_cath,
                 mins_ind_comp_P_cath,maxs_ind_comp_P_cath]                                 = max_min_mean_vals(time,time[nsteps-last_steps::],P_cath[nsteps-last_steps::],order)
                [_,_,_,_,_,_,
                 mean_min_nu_cath,mean_max_nu_cath,nu_cath_mean,
                 max2mean_nu_cath,min2mean_nu_cath,amp_nu_cath,
                 mins_ind_comp_nu_cath,maxs_ind_comp_nu_cath]                               = max_min_mean_vals(time,time[nsteps-last_steps::],nu_cath[nsteps-last_steps::],order)
            elif cath_type == 1:
                [_,_,_,_,_,_,
                 mean_min_P_cath,mean_max_P_cath,P_cath_mean,
                 max2mean_P_cath,min2mean_P_cath,amp_P_cath,
                 mins_ind_comp_P_cath,maxs_ind_comp_P_cath]                                 = max_min_mean_vals(time,time[nsteps-last_steps::],P_cath[nsteps-last_steps::],order)
                mean_min_nu_cath      = 0
                mean_max_nu_cath      = 0
                nu_cath_mean          = 0
                max2mean_nu_cath      = 0
                min2mean_nu_cath      = 0
                amp_nu_cath           = 0
                mins_ind_comp_nu_cath = 0
                maxs_ind_comp_nu_cath = 0
            
            [_,_,_,_,_,_,
             mean_min_I_tw_tot,mean_max_I_tw_tot,I_tw_tot_mean,
             max2mean_I_tw_tot,min2mean_I_tw_tot,amp_I_tw_tot,
             mins_ind_comp_I_tw_tot,maxs_ind_comp_I_tw_tot]                             = max_min_mean_vals(time,time[nsteps-last_steps::],I_tw_tot[nsteps-last_steps::],order)
            [_,_,_,_,_,_,
             mean_min_mflow_twinf_i1,mean_max_mflow_twinf_i1,mflow_twinf_i1_mean,
             max2mean_mflow_twinf_i1,min2mean_mflow_twinf_i1,amp_mflow_twinf_i1,
             mins_ind_comp_mflow_twinf_i1,maxs_ind_comp_mflow_twinf_i1]                 = max_min_mean_vals(time,time[nsteps-last_steps::],mflow_twinf_i1[nsteps-last_steps::],order)
            if num_ion_spe == 2:
                [_,_,_,_,_,_,
                 mean_min_mflow_twinf_i2,mean_max_mflow_twinf_i2,mflow_twinf_i2_mean,
                 max2mean_mflow_twinf_i2,min2mean_mflow_twinf_i2,amp_mflow_twinf_i2,
                 mins_ind_comp_mflow_twinf_i2,maxs_ind_comp_mflow_twinf_i2]                 = max_min_mean_vals(time,time[nsteps-last_steps::],mflow_twinf_i2[nsteps-last_steps::],order)
                mean_min_mflow_twinf_i3 = 0.0
                mean_max_mflow_twinf_i3 = 0.0
                mflow_twinf_i3_mean     = 0.0
                max2mean_mflow_twinf_i3 = 0.0
                min2mean_mflow_twinf_i3 = 0.0
                amp_mflow_twinf_i3      = 0.0
                mins_ind_comp_mflow_twinf_i3 = np.zeros(np.shape(maxs_ind_comp_mflow_twinf_i1),dtype=int)
                maxs_ind_comp_mflow_twinf_i3 = np.zeros(np.shape(maxs_ind_comp_mflow_twinf_i1),dtype=int)
                mean_min_mflow_twinf_i4 = 0.0
                mean_max_mflow_twinf_i4 = 0.0
                mflow_twinf_i4_mean     = 0.0
                max2mean_mflow_twinf_i4 = 0.0
                min2mean_mflow_twinf_i4 = 0.0
                amp_mflow_twinf_i4      = 0.0
                mins_ind_comp_mflow_twinf_i4 = np.zeros(np.shape(maxs_ind_comp_mflow_twinf_i1),dtype=int)
                maxs_ind_comp_mflow_twinf_i4 = np.zeros(np.shape(maxs_ind_comp_mflow_twinf_i1),dtype=int)
            elif num_ion_spe == 4:
                [_,_,_,_,_,_,
                 mean_min_mflow_twinf_i2,mean_max_mflow_twinf_i2,mflow_twinf_i2_mean,
                 max2mean_mflow_twinf_i2,min2mean_mflow_twinf_i2,amp_mflow_twinf_i2,
                 mins_ind_comp_mflow_twinf_i2,maxs_ind_comp_mflow_twinf_i2]                 = max_min_mean_vals(time,time[nsteps-last_steps::],mflow_twinf_i2[nsteps-last_steps::],order)
                [_,_,_,_,_,_,
                 mean_min_mflow_twinf_i3,mean_max_mflow_twinf_i3,mflow_twinf_i3_mean,
                 max2mean_mflow_twinf_i3,min2mean_mflow_twinf_i3,amp_mflow_twinf_i3,
                 mins_ind_comp_mflow_twinf_i3,maxs_ind_comp_mflow_twinf_i3]                 = max_min_mean_vals(time,time[nsteps-last_steps::],mflow_twinf_i3[nsteps-last_steps::],order)
                [_,_,_,_,_,_,
                 mean_min_mflow_twinf_i4,mean_max_mflow_twinf_i4,mflow_twinf_i4_mean,
                 max2mean_mflow_twinf_i4,min2mean_mflow_twinf_i4,amp_mflow_twinf_i4,
                 mins_ind_comp_mflow_twinf_i4,maxs_ind_comp_mflow_twinf_i4]                 = max_min_mean_vals(time,time[nsteps-last_steps::],mflow_twinf_i4[nsteps-last_steps::],order)
                
            else:
                mean_min_mflow_twinf_i2 = 0.0
                mean_max_mflow_twinf_i2 = 0.0
                mflow_twinf_i2_mean     = 0.0
                max2mean_mflow_twinf_i2 = 0.0
                min2mean_mflow_twinf_i2 = 0.0
                amp_mflow_twinf_i2      = 0.0
                mins_ind_comp_mflow_twinf_i2 = np.zeros(np.shape(maxs_ind_comp_mflow_twinf_i1),dtype=int)
                maxs_ind_comp_mflow_twinf_i2 = np.zeros(np.shape(maxs_ind_comp_mflow_twinf_i1),dtype=int)
                mean_min_mflow_twinf_i3 = 0.0
                mean_max_mflow_twinf_i3 = 0.0
                mflow_twinf_i3_mean     = 0.0
                max2mean_mflow_twinf_i3 = 0.0
                min2mean_mflow_twinf_i3 = 0.0
                amp_mflow_twinf_i3      = 0.0
                mins_ind_comp_mflow_twinf_i3 = np.zeros(np.shape(maxs_ind_comp_mflow_twinf_i1),dtype=int)
                maxs_ind_comp_mflow_twinf_i3 = np.zeros(np.shape(maxs_ind_comp_mflow_twinf_i1),dtype=int)
                mean_min_mflow_twinf_i4 = 0.0
                mean_max_mflow_twinf_i4 = 0.0
                mflow_twinf_i4_mean     = 0.0
                max2mean_mflow_twinf_i4 = 0.0
                min2mean_mflow_twinf_i4 = 0.0
                amp_mflow_twinf_i4      = 0.0
                mins_ind_comp_mflow_twinf_i4 = np.zeros(np.shape(maxs_ind_comp_mflow_twinf_i1),dtype=int)
                maxs_ind_comp_mflow_twinf_i4 = np.zeros(np.shape(maxs_ind_comp_mflow_twinf_i1),dtype=int)
            [_,_,_,_,_,_,
             mean_min_mflow_twinf_n1,mean_max_mflow_twinf_n1,mflow_twinf_n1_mean,
             max2mean_mflow_twinf_n1,min2mean_mflow_twinf_n1,amp_mflow_twinf_n1,
             mins_ind_comp_mflow_twinf_n1,maxs_ind_comp_mflow_twinf_n1]                 = max_min_mean_vals(time,time[nsteps-last_steps::],mflow_twinf_n1[nsteps-last_steps::],order)
            if num_neu_spe == 3:
                [_,_,_,_,_,_,
                 mean_min_mflow_twinf_n2,mean_max_mflow_twinf_n2,mflow_twinf_n2_mean,
                 max2mean_mflow_twinf_n2,min2mean_mflow_twinf_n2,amp_mflow_twinf_n2,
                 mins_ind_comp_mflow_twinf_n2,maxs_ind_comp_mflow_twinf_n2]                 = max_min_mean_vals(time,time[nsteps-last_steps::],mflow_twinf_n2[nsteps-last_steps::],order)
                [_,_,_,_,_,_,
                 mean_min_mflow_twinf_n3,mean_max_mflow_twinf_n3,mflow_twinf_n3_mean,
                 max2mean_mflow_twinf_n3,min2mean_mflow_twinf_n3,amp_mflow_twinf_n3,
                 mins_ind_comp_mflow_twinf_n3,maxs_ind_comp_mflow_twinf_n3]                 = max_min_mean_vals(time,time[nsteps-last_steps::],mflow_twinf_n3[nsteps-last_steps::],order)
            else:
                mean_min_mflow_twinf_n2 = 0.0
                mean_max_mflow_twinf_n2 = 0.0
                mflow_twinf_n2_mean     = 0.0
                max2mean_mflow_twinf_n2 = 0.0
                min2mean_mflow_twinf_n2 = 0.0
                amp_mflow_twinf_n2      = 0.0
                mins_ind_comp_mflow_twinf_n2 = np.zeros(np.shape(maxs_ind_comp_mflow_twinf_n1),dtype=int)
                maxs_ind_comp_mflow_twinf_n2 = np.zeros(np.shape(maxs_ind_comp_mflow_twinf_n1),dtype=int)
                mean_min_mflow_twinf_n3 = 0.0
                mean_max_mflow_twinf_n3 = 0.0
                mflow_twinf_n3_mean     = 0.0
                max2mean_mflow_twinf_n3 = 0.0
                min2mean_mflow_twinf_n3 = 0.0
                amp_mflow_twinf_n3      = 0.0
                mins_ind_comp_mflow_twinf_n3 = np.zeros(np.shape(maxs_ind_comp_mflow_twinf_n1),dtype=int)
                maxs_ind_comp_mflow_twinf_n3 = np.zeros(np.shape(maxs_ind_comp_mflow_twinf_n1),dtype=int)
            
            [_,_,_,_,_,_,
             mean_min_mflow_inj_n1,mean_max_mflow_inj_n1,mflow_inj_n1_mean,
             max2mean_mflow_inj_n1,min2mean_mflow_inj_n1,amp_mflow_inj_n1,
             mins_ind_comp_mflow_inj_n1,maxs_ind_comp_mflow_inj_n1]                     = max_min_mean_vals(time,time[nsteps-last_steps::],mflow_inj_n1[nsteps-last_steps::],order)
            [_,_,_,_,_,_,
             mean_min_mflow_twa_i1,mean_max_mflow_twa_i1,mflow_twa_i1_mean,
             max2mean_mflow_twa_i1,min2mean_mflow_twa_i1,amp_mflow_twa_i1,
             mins_ind_comp_mflow_twa_i1,maxs_ind_comp_mflow_twa_i1]                     = max_min_mean_vals(time,time[nsteps-last_steps::],mflow_twa_i1[nsteps-last_steps::],order)
            [_,_,_,_,_,_,
             mean_min_mflow_twmat_i1,mean_max_mflow_twmat_i1,mflow_twmat_i1_mean,
             max2mean_mflow_twmat_i1,min2mean_mflow_twmat_i1,amp_mflow_twmat_i1,
             mins_ind_comp_mflow_twmat_i1,maxs_ind_comp_mflow_twmat_i1]                 = max_min_mean_vals(time,time[nsteps-last_steps::],mflow_twmat_i1[nsteps-last_steps::],order)

            if cath_type == 1 and np.any(mflow_twcat_i1) != 0:
                [_,_,_,_,_,_,
                 mean_min_mflow_twcat_i1,mean_max_mflow_twcat_i1,mflow_twcat_i1_mean,
                 max2mean_mflow_twcat_i1,min2mean_mflow_twcat_i1,amp_mflow_twcat_i1,
                 mins_ind_comp_mflow_twcat_i1,maxs_ind_comp_mflow_twcat_i1]             = max_min_mean_vals(time,time[nsteps-last_steps::],mflow_twcat_i1[nsteps-last_steps::],order)
            else:
                 mean_min_mflow_twcat_i1 = 0.0
                 mean_max_mflow_twcat_i1 = 0.0
                 mflow_twcat_i1_mean     = 0.0
                 max2mean_mflow_twcat_i1 = 0.0
                 min2mean_mflow_twcat_i1 = 0.0
                 amp_mflow_twcat_i1      = 0.0
                 mins_ind_comp_mflow_twcat_i1 = 0.0
                 maxs_ind_comp_mflow_twcat_i1 = 0.0
                
            if num_ion_spe == 2:
                [_,_,_,_,_,_,
                 mean_min_mflow_twa_i2,mean_max_mflow_twa_i2,mflow_twa_i2_mean,
                 max2mean_mflow_twa_i2,min2mean_mflow_twa_i2,amp_mflow_twa_i2,
                 mins_ind_comp_mflow_twa_i2,maxs_ind_comp_mflow_twa_i2]                 = max_min_mean_vals(time,time[nsteps-last_steps::],mflow_twa_i2[nsteps-last_steps::],order)
                [_,_,_,_,_,_,
                 mean_min_mflow_twmat_i2,mean_max_mflow_twmat_i2,mflow_twmat_i2_mean,
                 max2mean_mflow_twmat_i2,min2mean_mflow_twmat_i2,amp_mflow_twmat_i2,
                 mins_ind_comp_mflow_twmat_i2,maxs_ind_comp_mflow_twmat_i2]             = max_min_mean_vals(time,time[nsteps-last_steps::],mflow_twmat_i2[nsteps-last_steps::],order)
                if cath_type == 1 and np.any(mflow_twcat_i2) != 0:
                    [_,_,_,_,_,_,
                     mean_min_mflow_twcat_i2,mean_max_mflow_twcat_i2,mflow_twcat_i2_mean,
                     max2mean_mflow_twcat_i2,min2mean_mflow_twcat_i2,amp_mflow_twcat_i2,
                     mins_ind_comp_mflow_twcat_i2,maxs_ind_comp_mflow_twcat_i2]         = max_min_mean_vals(time,time[nsteps-last_steps::],mflow_twcat_i2[nsteps-last_steps::],order)
                else:
                    mean_min_mflow_twcat_i2 = 0.0
                    mean_max_mflow_twcat_i2 = 0.0
                    mflow_twcat_i2_mean     = 0.0
                    max2mean_mflow_twcat_i2 = 0.0
                    min2mean_mflow_twcat_i2 = 0.0
                    amp_mflow_twcat_i2      = 0.0
                    mins_ind_comp_mflow_twcat_i2 = 0.0
                    maxs_ind_comp_mflow_twcat_i2 = 0.0
                
                mean_min_mflow_twa_i3 = 0.0
                mean_max_mflow_twa_i3 = 0.0
                mflow_twa_i3_mean     = 0.0
                max2mean_mflow_twa_i3 = 0.0
                min2mean_mflow_twa_i3 = 0.0
                amp_mflow_twa_i3      = 0.0
                mins_ind_comp_mflow_twa_i3 = np.zeros(np.shape(maxs_ind_comp_mflow_twa_i1),dtype=int)
                maxs_ind_comp_mflow_twa_i3 = np.zeros(np.shape(maxs_ind_comp_mflow_twa_i1),dtype=int)
                mean_min_mflow_twmat_i3 = 0.0
                mean_max_mflow_twmat_i3 = 0.0
                mflow_twmat_i3_mean     = 0.0
                max2mean_mflow_twmat_i3 = 0.0
                min2mean_mflow_twmat_i3 = 0.0
                amp_mflow_twmat_i3      = 0.0
                mins_ind_comp_mflow_twmat_i3 = np.zeros(np.shape(maxs_ind_comp_mflow_twmat_i1),dtype=int)
                maxs_ind_comp_mflow_twmat_i3 = np.zeros(np.shape(maxs_ind_comp_mflow_twmat_i1),dtype=int)
                mean_min_mflow_twcat_i3 = 0.0
                mean_max_mflow_twcat_i3 = 0.0
                mflow_twcat_i3_mean     = 0.0
                max2mean_mflow_twcat_i3 = 0.0
                min2mean_mflow_twcat_i3 = 0.0
                amp_mflow_twcat_i3      = 0.0
                mins_ind_comp_mflow_twcat_i3 = np.zeros(np.shape(maxs_ind_comp_mflow_twcat_i1),dtype=int)
                maxs_ind_comp_mflow_twcat_i3 = np.zeros(np.shape(maxs_ind_comp_mflow_twcat_i1),dtype=int)
                mean_min_mflow_twa_i4 = 0.0
                mean_max_mflow_twa_i4 = 0.0
                mflow_twa_i4_mean     = 0.0
                max2mean_mflow_twa_i4 = 0.0
                min2mean_mflow_twa_i4 = 0.0
                amp_mflow_twa_i4      = 0.0
                mins_ind_comp_mflow_twa_i4 = np.zeros(np.shape(maxs_ind_comp_mflow_twa_i1),dtype=int)
                maxs_ind_comp_mflow_twa_i4 = np.zeros(np.shape(maxs_ind_comp_mflow_twa_i1),dtype=int)
                mean_min_mflow_twmat_i4 = 0.0
                mean_max_mflow_twmat_i4 = 0.0
                mflow_twmat_i4_mean     = 0.0
                max2mean_mflow_twmat_i4 = 0.0
                min2mean_mflow_twmat_i4 = 0.0
                amp_mflow_twmat_i4      = 0.0
                mins_ind_comp_mflow_twmat_i4 = np.zeros(np.shape(maxs_ind_comp_mflow_twmat_i1),dtype=int)
                maxs_ind_comp_mflow_twmat_i4 = np.zeros(np.shape(maxs_ind_comp_mflow_twmat_i1),dtype=int)
                mean_min_mflow_twcat_i4 = 0.0
                mean_max_mflow_twcat_i4 = 0.0
                mflow_twcat_i4_mean     = 0.0
                max2mean_mflow_twcat_i4 = 0.0
                min2mean_mflow_twcat_i4 = 0.0
                amp_mflow_twcat_i4      = 0.0
                mins_ind_comp_mflow_twcat_i4 = np.zeros(np.shape(maxs_ind_comp_mflow_twcat_i1),dtype=int)
                maxs_ind_comp_mflow_twcat_i4 = np.zeros(np.shape(maxs_ind_comp_mflow_twcat_i1),dtype=int)

                    
            elif num_ion_spe == 4:
                [_,_,_,_,_,_,
                 mean_min_mflow_twa_i2,mean_max_mflow_twa_i2,mflow_twa_i2_mean,
                 max2mean_mflow_twa_i2,min2mean_mflow_twa_i2,amp_mflow_twa_i2,
                 mins_ind_comp_mflow_twa_i2,maxs_ind_comp_mflow_twa_i2]                 = max_min_mean_vals(time,time[nsteps-last_steps::],mflow_twa_i2[nsteps-last_steps::],order)
                [_,_,_,_,_,_,
                 mean_min_mflow_twmat_i2,mean_max_mflow_twmat_i2,mflow_twmat_i2_mean,
                 max2mean_mflow_twmat_i2,min2mean_mflow_twmat_i2,amp_mflow_twmat_i2,
                 mins_ind_comp_mflow_twmat_i2,maxs_ind_comp_mflow_twmat_i2]             = max_min_mean_vals(time,time[nsteps-last_steps::],mflow_twmat_i2[nsteps-last_steps::],order)
                if cath_type == 1 and np.any(mflow_twcat_i2) != 0:
                    [_,_,_,_,_,_,
                     mean_min_mflow_twcat_i2,mean_max_mflow_twcat_i2,mflow_twcat_i2_mean,
                     max2mean_mflow_twcat_i2,min2mean_mflow_twcat_i2,amp_mflow_twcat_i2,
                     mins_ind_comp_mflow_twcat_i2,maxs_ind_comp_mflow_twcat_i2]         = max_min_mean_vals(time,time[nsteps-last_steps::],mflow_twcat_i2[nsteps-last_steps::],order)
                else:
                    mean_min_mflow_twcat_i2 = 0.0
                    mean_max_mflow_twcat_i2 = 0.0
                    mflow_twcat_i2_mean     = 0.0
                    max2mean_mflow_twcat_i2 = 0.0
                    min2mean_mflow_twcat_i2 = 0.0
                    amp_mflow_twcat_i2      = 0.0
                    mins_ind_comp_mflow_twcat_i2 = 0.0
                    maxs_ind_comp_mflow_twcat_i2 = 0.0
                    
                [_,_,_,_,_,_,
                 mean_min_mflow_twa_i3,mean_max_mflow_twa_i3,mflow_twa_i3_mean,
                 max2mean_mflow_twa_i3,min2mean_mflow_twa_i3,amp_mflow_twa_i3,
                 mins_ind_comp_mflow_twa_i3,maxs_ind_comp_mflow_twa_i3]                 = max_min_mean_vals(time,time[nsteps-last_steps::],mflow_twa_i3[nsteps-last_steps::],order)
                [_,_,_,_,_,_,
                 mean_min_mflow_twmat_i3,mean_max_mflow_twmat_i3,mflow_twmat_i3_mean,
                 max2mean_mflow_twmat_i3,min2mean_mflow_twmat_i3,amp_mflow_twmat_i3,
                 mins_ind_comp_mflow_twmat_i3,maxs_ind_comp_mflow_twmat_i3]             = max_min_mean_vals(time,time[nsteps-last_steps::],mflow_twmat_i3[nsteps-last_steps::],order)
                if cath_type == 1 and np.any(mflow_twcat_i3) != 0:
                    [_,_,_,_,_,_,
                     mean_min_mflow_twcat_i3,mean_max_mflow_twcat_i3,mflow_twcat_i3_mean,
                     max2mean_mflow_twcat_i3,min2mean_mflow_twcat_i3,amp_mflow_twcat_i3,
                     mins_ind_comp_mflow_twcat_i3,maxs_ind_comp_mflow_twcat_i3]             = max_min_mean_vals(time,time[nsteps-last_steps::],mflow_twcat_i3[nsteps-last_steps::],order)
                else:
                    mean_min_mflow_twcat_i3 = 0.0
                    mean_max_mflow_twcat_i3 = 0.0
                    mflow_twcat_i3_mean     = 0.0
                    max2mean_mflow_twcat_i3 = 0.0
                    min2mean_mflow_twcat_i3 = 0.0
                    amp_mflow_twcat_i3      = 0.0
                    mins_ind_comp_mflow_twcat_i3 = 0.0
                    maxs_ind_comp_mflow_twcat_i3 = 0.0
                    
                [_,_,_,_,_,_,
                 mean_min_mflow_twa_i4,mean_max_mflow_twa_i4,mflow_twa_i4_mean,
                 max2mean_mflow_twa_i4,min2mean_mflow_twa_i4,amp_mflow_twa_i4,
                 mins_ind_comp_mflow_twa_i4,maxs_ind_comp_mflow_twa_i4]                 = max_min_mean_vals(time,time[nsteps-last_steps::],mflow_twa_i4[nsteps-last_steps::],order)
                [_,_,_,_,_,_,
                 mean_min_mflow_twmat_i4,mean_max_mflow_twmat_i4,mflow_twmat_i4_mean,
                 max2mean_mflow_twmat_i4,min2mean_mflow_twmat_i4,amp_mflow_twmat_i4,
                 mins_ind_comp_mflow_twmat_i4,maxs_ind_comp_mflow_twmat_i4]             = max_min_mean_vals(time,time[nsteps-last_steps::],mflow_twmat_i4[nsteps-last_steps::],order)
                if cath_type == 1 and np.any(mflow_twcat_i4) != 0:
                    [_,_,_,_,_,_,
                     mean_min_mflow_twcat_i4,mean_max_mflow_twcat_i4,mflow_twcat_i4_mean,
                     max2mean_mflow_twcat_i4,min2mean_mflow_twcat_i4,amp_mflow_twcat_i4,
                     mins_ind_comp_mflow_twcat_i4,maxs_ind_comp_mflow_twcat_i4]             = max_min_mean_vals(time,time[nsteps-last_steps::],mflow_twcat_i4[nsteps-last_steps::],order)
                else:
                    mean_min_mflow_twcat_i4 = 0.0
                    mean_max_mflow_twcat_i4 = 0.0
                    mflow_twcat_i4_mean     = 0.0
                    max2mean_mflow_twcat_i4 = 0.0
                    min2mean_mflow_twcat_i4 = 0.0
                    amp_mflow_twcat_i4      = 0.0
                    mins_ind_comp_mflow_twcat_i4 = 0.0
                    maxs_ind_comp_mflow_twcat_i4 = 0.0
                
            else:
                mean_min_mflow_twa_i2 = 0.0
                mean_max_mflow_twa_i2 = 0.0
                mflow_twa_i2_mean     = 0.0
                max2mean_mflow_twa_i2 = 0.0
                min2mean_mflow_twa_i2 = 0.0
                amp_mflow_twa_i2      = 0.0
                mins_ind_comp_mflow_twa_i2 = np.zeros(np.shape(maxs_ind_comp_mflow_twa_i1),dtype=int)
                maxs_ind_comp_mflow_twa_i2 = np.zeros(np.shape(maxs_ind_comp_mflow_twa_i1),dtype=int)
                mean_min_mflow_twmat_i2 = 0.0
                mean_max_mflow_twmat_i2 = 0.0
                mflow_twmat_i2_mean     = 0.0
                max2mean_mflow_twmat_i2 = 0.0
                min2mean_mflow_twmat_i2 = 0.0
                amp_mflow_twmat_i2      = 0.0
                mins_ind_comp_mflow_twmat_i2 = np.zeros(np.shape(maxs_ind_comp_mflow_twmat_i1),dtype=int)
                maxs_ind_comp_mflow_twmat_i2 = np.zeros(np.shape(maxs_ind_comp_mflow_twmat_i1),dtype=int)
                mean_min_mflow_twcat_i2 = 0.0
                mean_max_mflow_twcat_i2 = 0.0
                mflow_twcat_i2_mean     = 0.0
                max2mean_mflow_twcat_i2 = 0.0
                min2mean_mflow_twcat_i2 = 0.0
                amp_mflow_twcat_i2      = 0.0
                mins_ind_comp_mflow_twcat_i2 = np.zeros(np.shape(maxs_ind_comp_mflow_twcat_i1),dtype=int)
                maxs_ind_comp_mflow_twcat_i2 = np.zeros(np.shape(maxs_ind_comp_mflow_twcat_i1),dtype=int)
                mean_min_mflow_twa_i3 = 0.0
                mean_max_mflow_twa_i3 = 0.0
                mflow_twa_i3_mean     = 0.0
                max2mean_mflow_twa_i3 = 0.0
                min2mean_mflow_twa_i3 = 0.0
                amp_mflow_twa_i3      = 0.0
                mins_ind_comp_mflow_twa_i3 = np.zeros(np.shape(maxs_ind_comp_mflow_twa_i1),dtype=int)
                maxs_ind_comp_mflow_twa_i3 = np.zeros(np.shape(maxs_ind_comp_mflow_twa_i1),dtype=int)
                mean_min_mflow_twmat_i3 = 0.0
                mean_max_mflow_twmat_i3 = 0.0
                mflow_twmat_i3_mean     = 0.0
                max2mean_mflow_twmat_i3 = 0.0
                min2mean_mflow_twmat_i3 = 0.0
                amp_mflow_twmat_i3      = 0.0
                mins_ind_comp_mflow_twmat_i3 = np.zeros(np.shape(maxs_ind_comp_mflow_twmat_i1),dtype=int)
                maxs_ind_comp_mflow_twmat_i3 = np.zeros(np.shape(maxs_ind_comp_mflow_twmat_i1),dtype=int)
                mean_min_mflow_twcat_i3 = 0.0
                mean_max_mflow_twcat_i3 = 0.0
                mflow_twcat_i3_mean     = 0.0
                max2mean_mflow_twcat_i3 = 0.0
                min2mean_mflow_twcat_i3 = 0.0
                amp_mflow_twcat_i3      = 0.0
                mins_ind_comp_mflow_twcat_i3 = np.zeros(np.shape(maxs_ind_comp_mflow_twcat_i1),dtype=int)
                maxs_ind_comp_mflow_twcat_i3 = np.zeros(np.shape(maxs_ind_comp_mflow_twcat_i1),dtype=int)
                mean_min_mflow_twa_i4 = 0.0
                mean_max_mflow_twa_i4 = 0.0
                mflow_twa_i4_mean     = 0.0
                max2mean_mflow_twa_i4 = 0.0
                min2mean_mflow_twa_i4 = 0.0
                amp_mflow_twa_i4      = 0.0
                mins_ind_comp_mflow_twa_i4 = np.zeros(np.shape(maxs_ind_comp_mflow_twa_i1),dtype=int)
                maxs_ind_comp_mflow_twa_i4 = np.zeros(np.shape(maxs_ind_comp_mflow_twa_i1),dtype=int)
                mean_min_mflow_twmat_i4 = 0.0
                mean_max_mflow_twmat_i4 = 0.0
                mflow_twmat_i4_mean     = 0.0
                max2mean_mflow_twmat_i4 = 0.0
                min2mean_mflow_twmat_i4 = 0.0
                amp_mflow_twmat_i4      = 0.0
                mins_ind_comp_mflow_twmat_i4 = np.zeros(np.shape(maxs_ind_comp_mflow_twmat_i1),dtype=int)
                maxs_ind_comp_mflow_twmat_i4 = np.zeros(np.shape(maxs_ind_comp_mflow_twmat_i1),dtype=int)
                mean_min_mflow_twcat_i4 = 0.0
                mean_max_mflow_twcat_i4 = 0.0
                mflow_twcat_i4_mean     = 0.0
                max2mean_mflow_twcat_i4 = 0.0
                min2mean_mflow_twcat_i4 = 0.0
                amp_mflow_twcat_i4      = 0.0
                mins_ind_comp_mflow_twcat_i4 = np.zeros(np.shape(maxs_ind_comp_mflow_twcat_i1),dtype=int)
                maxs_ind_comp_mflow_twcat_i4 = np.zeros(np.shape(maxs_ind_comp_mflow_twcat_i1),dtype=int)
                
                
            [_,_,_,_,_,_,
             mean_min_mflow_twa_n1,mean_max_mflow_twa_n1,mflow_twa_n1_mean,
             max2mean_mflow_twa_n1,min2mean_mflow_twa_n1,amp_mflow_twa_n1,
             mins_ind_comp_mflow_twa_n1,maxs_ind_comp_mflow_twa_n1]                     = max_min_mean_vals(time,time[nsteps-last_steps::],mflow_twa_n1[nsteps-last_steps::],order)
            if num_neu_spe == 3:
                [_,_,_,_,_,_,
                 mean_min_mflow_twa_n2,mean_max_mflow_twa_n2,mflow_twa_n2_mean,
                 max2mean_mflow_twa_n2,min2mean_mflow_twa_n2,amp_mflow_twa_n2,
                 mins_ind_comp_mflow_twa_n2,maxs_ind_comp_mflow_twa_n2]                     = max_min_mean_vals(time,time[nsteps-last_steps::],mflow_twa_n2[nsteps-last_steps::],order)
                [_,_,_,_,_,_,
                 mean_min_mflow_twa_n3,mean_max_mflow_twa_n3,mflow_twa_n3_mean,
                 max2mean_mflow_twa_n3,min2mean_mflow_twa_n3,amp_mflow_twa_n3,
                 mins_ind_comp_mflow_twa_n3,maxs_ind_comp_mflow_twa_n3]                     = max_min_mean_vals(time,time[nsteps-last_steps::],mflow_twa_n3[nsteps-last_steps::],order)
            else:
                mean_min_mflow_twa_n2 = 0.0
                mean_max_mflow_twa_n2 = 0.0
                mflow_twa_n2_mean     = 0.0
                max2mean_mflow_twa_n2 = 0.0
                min2mean_mflow_twa_n2 = 0.0
                amp_mflow_twa_n2      = 0.0
                mins_ind_comp_mflow_twa_n2 = np.zeros(np.shape(maxs_ind_comp_mflow_twa_n1),dtype=int)
                maxs_ind_comp_mflow_twa_n2 = np.zeros(np.shape(maxs_ind_comp_mflow_twa_n1),dtype=int)
                mean_min_mflow_twa_n3 = 0.0
                mean_max_mflow_twa_n3 = 0.0
                mflow_twa_n3_mean     = 0.0
                max2mean_mflow_twa_n3 = 0.0
                min2mean_mflow_twa_n3 = 0.0
                amp_mflow_twa_n3      = 0.0
                mins_ind_comp_mflow_twa_n3 = np.zeros(np.shape(maxs_ind_comp_mflow_twa_n1),dtype=int)
                maxs_ind_comp_mflow_twa_n3 = np.zeros(np.shape(maxs_ind_comp_mflow_twa_n1),dtype=int)
                    
            
            [_,_,_,_,_,_,
             mean_min_err_mbal_n1,mean_max_err_mbal_n1,err_mbal_n1_mean,
             max2mean_err_mbal_n1,min2mean_err_mbal_n1,amp_err_mbal_n1,
             mins_ind_comp_err_mbal_n1,maxs_ind_comp_err_mbal_n1]                     = max_min_mean_vals(time,time[nsteps-last_steps::],err_mbal_n1[nsteps-last_steps::],order)
            if num_neu_spe == 3:
                [_,_,_,_,_,_,
                 mean_min_err_mbal_n2,mean_max_err_mbal_n2,err_mbal_n2_mean,
                 max2mean_err_mbal_n2,min2mean_err_mbal_n2,amp_err_mbal_n2,
                 mins_ind_comp_err_mbal_n2,maxs_ind_comp_err_mbal_n2]                     = max_min_mean_vals(time,time[nsteps-last_steps::],err_mbal_n2[nsteps-last_steps::],order)
                [_,_,_,_,_,_,
                 mean_min_err_mbal_n3,mean_max_err_mbal_n3,err_mbal_n3_mean,
                 max2mean_err_mbal_n3,min2mean_err_mbal_n3,amp_err_mbal_n3,
                 mins_ind_comp_err_mbal_n3,maxs_ind_comp_err_mbal_n3]                     = max_min_mean_vals(time,time[nsteps-last_steps::],err_mbal_n3[nsteps-last_steps::],order)
            else:
                mean_min_err_mbal_n2 = 0.0
                mean_max_err_mbal_n2 = 0.0
                err_mbal_n2_mean     = 0.0
                max2mean_err_mbal_n2 = 0.0
                min2mean_err_mbal_n2 = 0.0
                amp_err_mbal_n2      = 0.0
                mins_ind_comp_err_mbal_n2 = np.zeros(np.shape(mins_ind_comp_err_mbal_n1),dtype=int)
                maxs_ind_comp_err_mbal_n2 = np.zeros(np.shape(maxs_ind_comp_err_mbal_n1),dtype=int)
                mean_min_err_mbal_n3 = 0.0
                mean_max_err_mbal_n3 = 0.0
                err_mbal_n3_mean     = 0.0
                max2mean_err_mbal_n3 = 0.0
                min2mean_err_mbal_n3 = 0.0
                amp_err_mbal_n3      = 0.0
                mins_ind_comp_err_mbal_n3 = np.zeros(np.shape(mins_ind_comp_err_mbal_n1),dtype=int)
                maxs_ind_comp_err_mbal_n3 = np.zeros(np.shape(maxs_ind_comp_err_mbal_n1),dtype=int)
            
            [_,_,_,_,_,_,
             mean_min_err_mbal_i1,mean_max_err_mbal_i1,err_mbal_i1_mean,
             max2mean_err_mbal_i1,min2mean_err_mbal_i1,amp_err_mbal_i1,
             mins_ind_comp_err_mbal_i1,maxs_ind_comp_err_mbal_i1]                     = max_min_mean_vals(time,time[nsteps-last_steps::],err_mbal_i1[nsteps-last_steps::],order)
            if num_ion_spe == 2:
                [_,_,_,_,_,_,
                 mean_min_err_mbal_i2,mean_max_err_mbal_i2,err_mbal_i2_mean,
                 max2mean_err_mbal_i2,min2mean_err_mbal_i2,amp_err_mbal_i2,
                 mins_ind_comp_err_mbal_i2,maxs_ind_comp_err_mbal_i2]                     = max_min_mean_vals(time,time[nsteps-last_steps::],err_mbal_i2[nsteps-last_steps::],order)
                mean_min_err_mbal_i3 = 0.0
                mean_max_err_mbal_i3 = 0.0
                err_mbal_i3_mean     = 0.0
                max2mean_err_mbal_i3 = 0.0
                min2mean_err_mbal_i3 = 0.0
                amp_err_mbal_i3      = 0.0
                mins_ind_comp_err_mbal_i3 = np.zeros(np.shape(mins_ind_comp_err_mbal_i1),dtype=int)
                maxs_ind_comp_err_mbal_i3 = np.zeros(np.shape(maxs_ind_comp_err_mbal_i1),dtype=int)
                mean_min_err_mbal_i4 = 0.0
                mean_max_err_mbal_i4 = 0.0
                err_mbal_i4_mean     = 0.0
                max2mean_err_mbal_i4 = 0.0
                min2mean_err_mbal_i4 = 0.0
                amp_err_mbal_i4      = 0.0
                mins_ind_comp_err_mbal_i4 = np.zeros(np.shape(mins_ind_comp_err_mbal_i1),dtype=int)
                maxs_ind_comp_err_mbal_i4 = np.zeros(np.shape(maxs_ind_comp_err_mbal_i1),dtype=int)
            elif num_ion_spe == 4:
                [_,_,_,_,_,_,
                 mean_min_err_mbal_i2,mean_max_err_mbal_i2,err_mbal_i2_mean,
                 max2mean_err_mbal_i2,min2mean_err_mbal_i2,amp_err_mbal_i2,
                 mins_ind_comp_err_mbal_i2,maxs_ind_comp_err_mbal_i2]                     = max_min_mean_vals(time,time[nsteps-last_steps::],err_mbal_i2[nsteps-last_steps::],order)
                [_,_,_,_,_,_,
                 mean_min_err_mbal_i3,mean_max_err_mbal_i3,err_mbal_i3_mean,
                 max2mean_err_mbal_i3,min2mean_err_mbal_i3,amp_err_mbal_i3,
                 mins_ind_comp_err_mbal_i3,maxs_ind_comp_err_mbal_i3]                     = max_min_mean_vals(time,time[nsteps-last_steps::],err_mbal_i3[nsteps-last_steps::],order)
                [_,_,_,_,_,_,
                 mean_min_err_mbal_i4,mean_max_err_mbal_i4,err_mbal_i4_mean,
                 max2mean_err_mbal_i4,min2mean_err_mbal_i4,amp_err_mbal_i4,
                 mins_ind_comp_err_mbal_i4,maxs_ind_comp_err_mbal_i4]                     = max_min_mean_vals(time,time[nsteps-last_steps::],err_mbal_i4[nsteps-last_steps::],order)
            else:
                mean_min_err_mbal_i2 = 0.0
                mean_max_err_mbal_i2 = 0.0
                err_mbal_i2_mean     = 0.0
                max2mean_err_mbal_i2 = 0.0
                min2mean_err_mbal_i2 = 0.0
                amp_err_mbal_i2      = 0.0
                mins_ind_comp_err_mbal_i2 = np.zeros(np.shape(mins_ind_comp_err_mbal_i1),dtype=int)
                maxs_ind_comp_err_mbal_i2 = np.zeros(np.shape(maxs_ind_comp_err_mbal_i1),dtype=int)
                mean_min_err_mbal_i3 = 0.0
                mean_max_err_mbal_i3 = 0.0
                err_mbal_i3_mean     = 0.0
                max2mean_err_mbal_i3 = 0.0
                min2mean_err_mbal_i3 = 0.0
                amp_err_mbal_i3      = 0.0
                mins_ind_comp_err_mbal_i3 = np.zeros(np.shape(mins_ind_comp_err_mbal_i1),dtype=int)
                maxs_ind_comp_err_mbal_i3 = np.zeros(np.shape(maxs_ind_comp_err_mbal_i1),dtype=int)
                mean_min_err_mbal_i4 = 0.0
                mean_max_err_mbal_i4 = 0.0
                err_mbal_i4_mean     = 0.0
                max2mean_err_mbal_i4 = 0.0
                min2mean_err_mbal_i4 = 0.0
                amp_err_mbal_i4      = 0.0
                mins_ind_comp_err_mbal_i4 = np.zeros(np.shape(mins_ind_comp_err_mbal_i1),dtype=int)
                maxs_ind_comp_err_mbal_i4 = np.zeros(np.shape(maxs_ind_comp_err_mbal_i1),dtype=int)
            [_,_,_,_,_,_,
             mean_min_err_mbal_tot,mean_max_err_mbal_tot,err_mbal_tot_mean,
             max2mean_err_mbal_tot,min2mean_err_mbal_tot,amp_err_mbal_tot,
             mins_ind_comp_err_mbal_tot,maxs_ind_comp_err_mbal_tot]                     = max_min_mean_vals(time,time[nsteps-last_steps::],err_mbal_tot[nsteps-last_steps::],order)
            [_,_,_,_,_,_,
             mean_min_Pe_Dwall,mean_max_Pe_Dwall,Pe_Dwall_mean,
             max2mean_Pe_Dwall,min2mean_Pe_Dwall,amp_Pe_Dwall,
             mins_ind_comp_Pe_Dwall,maxs_ind_comp_Pe_Dwall]                             = max_min_mean_vals(time,time[nsteps-last_steps::],Pe_Dwall[nsteps-last_steps::],order)
            [_,_,_,_,_,_,
             mean_min_Pe_Awall,mean_max_Pe_Awall,Pe_Awall_mean,
             max2mean_Pe_Awall,min2mean_Pe_Awall,amp_Pe_Awall,
             mins_ind_comp_Pe_Awall,maxs_ind_comp_Pe_Awall]                             = max_min_mean_vals(time,time[nsteps-last_steps::],Pe_Awall[nsteps-last_steps::],order)
            if cath_type == 1:
                [_,_,_,_,_,_,
                 mean_min_Pe_Cwall,mean_max_Pe_Cwall,Pe_Cwall_mean,
                 max2mean_Pe_Cwall,min2mean_Pe_Cwall,amp_Pe_Cwall,
                 mins_ind_comp_Pe_Cwall,maxs_ind_comp_Pe_Cwall]                         = max_min_mean_vals(time,time[nsteps-last_steps::],Pe_Cwall[nsteps-last_steps::],order)
            elif cath_type == 2:
                mean_min_Pe_Cwall = 0.0
                mean_max_Pe_Cwall = 0.0
                Pe_Cwall_mean     = 0.0
                max2mean_Pe_Cwall = 0.0
                min2mean_Pe_Cwall = 0.0
                amp_Pe_Cwall      = 0.0
                mins_ind_comp_Pe_Cwall = 0.0
                maxs_ind_comp_Pe_Cwall = 0.0  
            
            [_,_,_,_,_,_,
             mean_min_Pe_FLwall,mean_max_Pe_FLwall,Pe_FLwall_mean,
             max2mean_Pe_FLwall,min2mean_Pe_FLwall,amp_Pe_FLwall,
             mins_ind_comp_Pe_FLwall,maxs_ind_comp_Pe_FLwall]                           = max_min_mean_vals(time,time[nsteps-last_steps::],Pe_FLwall[nsteps-last_steps::],order)
            [_,_,_,_,_,_,
             mean_min_Pi_Dwall,mean_max_Pi_Dwall,Pi_Dwall_mean,
             max2mean_Pi_Dwall,min2mean_Pi_Dwall,amp_Pi_Dwall,
             mins_ind_comp_Pi_Dwall,maxs_ind_comp_Pi_Dwall]                             = max_min_mean_vals(time,time[nsteps-last_steps::],Pi_Dwall[nsteps-last_steps::],order)
            [_,_,_,_,_,_,
             mean_min_Pi_Awall,mean_max_Pi_Awall,Pi_Awall_mean,
             max2mean_Pi_Awall,min2mean_Pi_Awall,amp_Pi_Awall,
             mins_ind_comp_Pi_Awall,maxs_ind_comp_Pi_Awall]                             = max_min_mean_vals(time,time[nsteps-last_steps::],Pi_Awall[nsteps-last_steps::],order)
            if cath_type == 1 and np.any(Pi_Cwall) != 0:
                [_,_,_,_,_,_,
                 mean_min_Pi_Cwall,mean_max_Pi_Cwall,Pi_Cwall_mean,
                 max2mean_Pi_Cwall,min2mean_Pi_Cwall,amp_Pi_Cwall,
                 mins_ind_comp_Pi_Cwall,maxs_ind_comp_Pi_Cwall]                         = max_min_mean_vals(time,time[nsteps-last_steps::],Pi_Cwall[nsteps-last_steps::],order)
            else:
                mean_min_Pi_Cwall = 0.0
                mean_max_Pi_Cwall = 0.0
                Pi_Cwall_mean     = 0.0
                max2mean_Pi_Cwall = 0.0
                min2mean_Pi_Cwall = 0.0
                amp_Pi_Cwall      = 0.0
                mins_ind_comp_Pi_Cwall = 0.0
                maxs_ind_comp_Pi_Cwall = 0.0  
            [_,_,_,_,_,_,
             mean_min_Pi_FLwall,mean_max_Pi_FLwall,Pi_FLwall_mean,
             max2mean_Pi_FLwall,min2mean_Pi_FLwall,amp_Pi_FLwall,
             mins_ind_comp_Pi_FLwall,maxs_ind_comp_Pi_FLwall]                           = max_min_mean_vals(time,time[nsteps-last_steps::],Pi_FLwall[nsteps-last_steps::],order)
            [_,_,_,_,_,_,
             mean_min_Pn_Dwall,mean_max_Pn_Dwall,Pn_Dwall_mean,
             max2mean_Pn_Dwall,min2mean_Pn_Dwall,amp_Pn_Dwall,
             mins_ind_comp_Pn_Dwall,maxs_ind_comp_Pn_Dwall]                             = max_min_mean_vals(time,time[nsteps-last_steps::],Pn_Dwall[nsteps-last_steps::],order)
            [_,_,_,_,_,_,
             mean_min_Pn_Awall,mean_max_Pn_Awall,Pn_Awall_mean,
             max2mean_Pn_Awall,min2mean_Pn_Awall,amp_Pn_Awall,
             mins_ind_comp_Pn_Awall,maxs_ind_comp_Pn_Awall]                             = max_min_mean_vals(time,time[nsteps-last_steps::],Pn_Awall[nsteps-last_steps::],order)
            if cath_type == 1 and np.any(Pn_Cwall) != 0:
                [_,_,_,_,_,_,
                 mean_min_Pn_Cwall,mean_max_Pn_Cwall,Pn_Cwall_mean,
                 max2mean_Pn_Cwall,min2mean_Pn_Cwall,amp_Pn_Cwall,
                 mins_ind_comp_Pn_Cwall,maxs_ind_comp_Pn_Cwall]                         = max_min_mean_vals(time,time[nsteps-last_steps::],Pn_Cwall[nsteps-last_steps::],order)
            else:
                mean_min_Pn_Cwall = 0.0
                mean_max_Pn_Cwall = 0.0
                Pn_Cwall_mean     = 0.0
                max2mean_Pn_Cwall = 0.0
                min2mean_Pn_Cwall = 0.0
                amp_Pn_Cwall      = 0.0
                mins_ind_comp_Pn_Cwall = 0.0
                maxs_ind_comp_Pn_Cwall = 0.0
            [_,_,_,_,_,_,
             mean_min_Pn_FLwall,mean_max_Pn_FLwall,Pn_FLwall_mean,
             max2mean_Pn_FLwall,min2mean_Pn_FLwall,amp_Pn_FLwall,
             mins_ind_comp_Pn_FLwall,maxs_ind_comp_Pn_FLwall]                           = max_min_mean_vals(time,time[nsteps-last_steps::],Pn_FLwall[nsteps-last_steps::],order)
            [_,_,_,_,_,_,
             mean_min_P_Dwall,mean_max_P_Dwall,P_Dwall_mean,
             max2mean_P_Dwall,min2mean_P_Dwall,amp_P_Dwall,
             mins_ind_comp_P_Dwall,maxs_ind_comp_P_Dwall]                               = max_min_mean_vals(time,time[nsteps-last_steps::],P_Dwall[nsteps-last_steps::],order)
            [_,_,_,_,_,_,
             mean_min_P_Awall,mean_max_P_Awall,P_Awall_mean,
             max2mean_P_Awall,min2mean_P_Awall,amp_P_Awall,
             mins_ind_comp_P_Awall,maxs_ind_comp_P_Awall]                               = max_min_mean_vals(time,time[nsteps-last_steps::],P_Awall[nsteps-last_steps::],order)
            [_,_,_,_,_,_,
             mean_min_P_FLwall,mean_max_P_FLwall,P_FLwall_mean,
             max2mean_P_FLwall,min2mean_P_FLwall,amp_P_FLwall,
             mins_ind_comp_P_FLwall,maxs_ind_comp_P_FLwall]                             = max_min_mean_vals(time,time[nsteps-last_steps::],P_FLwall[nsteps-last_steps::],order)
            [_,_,_,_,_,_,
             mean_min_Pionex,mean_max_Pionex,Pionex_mean,
             max2mean_Pionex,min2mean_Pionex,amp_Pionex,
             mins_ind_comp_Pionex,maxs_ind_comp_Pionex]                                 = max_min_mean_vals(time,time[nsteps-last_steps::],Pionex[nsteps-last_steps::],order)
            [_,_,_,_,_,_,
             mean_min_Pnothrust_walls,mean_max_Pnothrust_walls,Pnothrust_walls_mean,
             max2mean_Pnothrust_walls,min2mean_Pnothrust_walls,amp_Pnothrust_walls,
             mins_ind_comp_Pnothrust_walls,maxs_ind_comp_Pnothrust_walls]               = max_min_mean_vals(time,time[nsteps-last_steps::],Pnothrust_walls[nsteps-last_steps::],order)         
            [_,_,_,_,_,_,
             mean_min_Pnothrust,mean_max_Pnothrust,Pnothrust_mean,
             max2mean_Pnothrust,min2mean_Pnothrust,amp_Pnothrust,
             mins_ind_comp_Pnothrust,maxs_ind_comp_Pnothrust]                           = max_min_mean_vals(time,time[nsteps-last_steps::],Pnothrust[nsteps-last_steps::],order) 
            [_,_,_,_,_,_,
             mean_min_Pthrust,mean_max_Pthrust,Pthrust_mean,
             max2mean_Pthrust,min2mean_Pthrust,amp_Pthrust,
             mins_ind_comp_Pthrust,maxs_ind_comp_Pthrust]                               = max_min_mean_vals(time,time[nsteps-last_steps::],Pthrust[nsteps-last_steps::],order) 
            [_,_,_,_,_,_,
             mean_min_Ploss,mean_max_Ploss,Ploss_mean,
             max2mean_Ploss,min2mean_Ploss,amp_Ploss,
             mins_ind_comp_Ploss,maxs_ind_comp_Ploss]                                   = max_min_mean_vals(time,time[nsteps-last_steps::],Ploss[nsteps-last_steps::],order)          
            [_,_,_,_,_,_,
             mean_min_Pfield_e,mean_max_Pfield_e,Pfield_e_mean,
             max2mean_Pfield_e,min2mean_Pfield_e,amp_Pfield_e,
             mins_ind_comp_Pfield_e,maxs_ind_comp_Pfield_e]                             = max_min_mean_vals(time,time[nsteps-last_steps::],Pfield_e[nsteps-last_steps::],order)      
            if np.any(Pturb != 0):
                [_,_,_,_,_,_,
                 mean_min_Pturb,mean_max_Pturb,Pturb_mean,
                 max2mean_Pturb,min2mean_Pturb,amp_Pturb,
                 mins_ind_comp_Pturb,maxs_ind_comp_Pturb]                                   = max_min_mean_vals(time,time[nsteps-last_steps::],Pturb[nsteps-last_steps::],order)    
            else:
                mean_min_Pturb      = 0.0 
                mean_max_Pturb      = 0.0 
                Pturb_mean          = 0.0 
                max2mean_Pturb      = 0.0 
                min2mean_Pturb      = 0.0
                amp_Pturb           = 0.0  
                mins_ind_comp_Pturb = 0.0
                maxs_ind_comp_Pturb = 0.0
            [_,_,_,_,_,_,
             mean_min_Psource,mean_max_Psource,Psource_mean,
             max2mean_Psource,min2mean_Psource,amp_Psource,
             mins_ind_comp_Psource,maxs_ind_comp_Psource]                               = max_min_mean_vals(time,time[nsteps-last_steps::],Psource[nsteps-last_steps::],order)    
            
#            if np.any(phi_inf != 0):
            if np.any(np.diff(phi_inf != 0)):
                [_,_,_,_,_,_,
                 mean_min_phi_inf,mean_max_phi_inf,phi_inf_mean,
                 max2mean_phi_inf,min2mean_phi_inf,amp_phi_inf,
                 mins_ind_comp_phi_inf,maxs_ind_comp_phi_inf]                               = max_min_mean_vals(time,time[nsteps-last_steps::],phi_inf[nsteps-last_steps::],order)    
            else:
                mean_min_phi_inf      = 0.0 
                mean_max_phi_inf      = 0.0 
#                phi_inf_mean          = 0.0 
                phi_inf_mean          = phi_inf[-1]
                max2mean_phi_inf      = 0.0 
                min2mean_phi_inf      = 0.0
                amp_phi_inf           = 0.0  
                mins_ind_comp_phi_inf = 0.0
                maxs_ind_comp_phi_inf = 0.0
            
            if np.any(I_inf != 0):
                [_,_,_,_,_,_,
                 mean_min_I_inf,mean_max_I_inf,I_inf_mean,
                 max2mean_I_inf,min2mean_I_inf,amp_I_inf,
                 mins_ind_comp_I_inf,maxs_ind_comp_I_inf]                               = max_min_mean_vals(time,time[nsteps-last_steps::],I_inf[nsteps-last_steps::],order)    
            else:
                mean_min_I_inf      = 0.0 
                mean_max_I_inf      = 0.0 
                I_inf_mean          = 0.0 
                max2mean_I_inf      = 0.0 
                min2mean_I_inf      = 0.0
                amp_I_inf           = 0.0  
                mins_ind_comp_I_inf = 0.0
                maxs_ind_comp_I_inf = 0.0
            
            [_,_,_,_,_,_,
             mean_min_phi_FL_lat,mean_max_phi_FL_lat,phi_FL_lat_mean,
             max2mean_phi_FL_lat,min2mean_phi_FL_lat,amp_phi_FL_lat,
             mins_ind_comp_phi_FL_lat,maxs_ind_comp_phi_FL_lat]                         = max_min_mean_vals(time,time[nsteps-last_steps::],phi_FL_lat[nsteps-last_steps::],order)    
            [_,_,_,_,_,_,
             mean_min_phi_FL_ver,mean_max_phi_FL_ver,phi_FL_ver_mean,
             max2mean_phi_FL_ver,min2mean_phi_FL_ver,amp_phi_FL_ver,
             mins_ind_comp_phi_FL_ver,maxs_ind_comp_phi_FL_ver]                         = max_min_mean_vals(time,time[nsteps-last_steps::],phi_FL_ver[nsteps-last_steps::],order)    
            [_,_,_,_,_,_,
             mean_min_phi_FL,mean_max_phi_FL,phi_FL_mean,
             max2mean_phi_FL,min2mean_phi_FL,amp_phi_FL,
             mins_ind_comp_phi_FL,maxs_ind_comp_phi_FL]                                 = max_min_mean_vals(time,time[nsteps-last_steps::],phi_FL[nsteps-last_steps::],order)    
            [_,_,_,_,_,_,
             mean_min_phi_FL_lat_int,mean_max_phi_FL_lat_int,phi_FL_lat_int_mean,
             max2mean_phi_FL_lat_int,min2mean_phi_FL_lat_int,amp_phi_FL_lat_int,
             mins_ind_comp_phi_FL_lat_int,maxs_ind_comp_phi_FL_lat_int]                 = max_min_mean_vals(time,time[nsteps-last_steps::],phi_FL_lat_int[nsteps-last_steps::],order)    
            [_,_,_,_,_,_,
             mean_min_phi_FL_ver_int,mean_max_phi_FL_ver_int,phi_FL_ver_int_mean,
             max2mean_phi_FL_ver_int,min2mean_phi_FL_ver_int,amp_phi_FL_ver_int,
             mins_ind_comp_phi_FL_ver_int,maxs_ind_comp_phi_FL_ver_int]                 = max_min_mean_vals(time,time[nsteps-last_steps::],phi_FL_ver_int[nsteps-last_steps::],order)    
            [_,_,_,_,_,_,
             mean_min_phi_FL_int,mean_max_phi_FL_int,phi_FL_int_mean,
             max2mean_phi_FL_int,min2mean_phi_FL_int,amp_phi_FL_int,
             mins_ind_comp_phi_FL_int,maxs_ind_comp_phi_FL_int]                         = max_min_mean_vals(time,time[nsteps-last_steps::],phi_FL_int[nsteps-last_steps::],order)    
            [_,_,_,_,_,_,
             mean_min_phi_FL_plat,mean_max_phi_FL_plat,phi_FL_plat_mean,
             max2mean_phi_FL_plat,min2mean_phi_FL_plat,amp_phi_FL_plat,
             mins_ind_comp_phi_FL_plat,maxs_ind_comp_phi_FL_plat]                         = max_min_mean_vals(time,time[nsteps-last_steps::],phi[i_plot_lat,j_plot_lat,nsteps-last_steps::],order)    
            [_,_,_,_,_,_,
             mean_min_phi_FL_pver,mean_max_phi_FL_pver,phi_FL_pver_mean,
             max2mean_phi_FL_pver,min2mean_phi_FL_pver,amp_phi_FL_pver,
             mins_ind_comp_phi_FL_pver,maxs_ind_comp_phi_FL_pver]                         = max_min_mean_vals(time,time[nsteps-last_steps::],phi[i_plot_ver,j_plot_ver,nsteps-last_steps::],order)    
            [_,_,_,_,_,_,
             mean_min_Te_FL_lat,mean_max_Te_FL_lat,Te_FL_lat_mean,
             max2mean_Te_FL_lat,min2mean_Te_FL_lat,amp_Te_FL_lat,
             mins_ind_comp_Te_FL_lat,maxs_ind_comp_Te_FL_lat]                           = max_min_mean_vals(time,time[nsteps-last_steps::],Te_FL_lat[nsteps-last_steps::],order)    
            [_,_,_,_,_,_,
             mean_min_Te_FL_ver,mean_max_Te_FL_ver,Te_FL_ver_mean,
             max2mean_Te_FL_ver,min2mean_Te_FL_ver,amp_Te_FL_ver,
             mins_ind_comp_Te_FL_ver,maxs_ind_comp_Te_FL_ver]                           = max_min_mean_vals(time,time[nsteps-last_steps::],Te_FL_ver[nsteps-last_steps::],order)    
            [_,_,_,_,_,_,
             mean_min_Te_FL,mean_max_Te_FL,Te_FL_mean,
             max2mean_Te_FL,min2mean_Te_FL,amp_Te_FL,
             mins_ind_comp_Te_FL,maxs_ind_comp_Te_FL]                                   = max_min_mean_vals(time,time[nsteps-last_steps::],Te_FL[nsteps-last_steps::],order)    
            [_,_,_,_,_,_,
             mean_min_Te_FL_lat_int,mean_max_Te_FL_lat_int,Te_FL_lat_int_mean,
             max2mean_Te_FL_lat_int,min2mean_Te_FL_lat_int,amp_Te_FL_lat_int,
             mins_ind_comp_Te_FL_lat_int,maxs_ind_comp_Te_FL_lat_int]                   = max_min_mean_vals(time,time[nsteps-last_steps::],Te_FL_lat_int[nsteps-last_steps::],order)    
            [_,_,_,_,_,_,
             mean_min_Te_FL_ver_int,mean_max_Te_FL_ver_int,Te_FL_ver_int_mean,
             max2mean_Te_FL_ver_int,min2mean_Te_FL_ver_int,amp_Te_FL_ver_int,
             mins_ind_comp_Te_FL_ver_int,maxs_ind_comp_Te_FL_ver_int]                   = max_min_mean_vals(time,time[nsteps-last_steps::],Te_FL_ver_int[nsteps-last_steps::],order)    
            [_,_,_,_,_,_,
             mean_min_Te_FL_int,mean_max_Te_FL_int,Te_FL_int_mean,
             max2mean_Te_FL_int,min2mean_Te_FL_int,amp_Te_FL_int,
             mins_ind_comp_Te_FL_int,maxs_ind_comp_Te_FL_int]                           = max_min_mean_vals(time,time[nsteps-last_steps::],Te_FL_int[nsteps-last_steps::],order)    
            [_,_,_,_,_,_,
             mean_min_Te_FL_plat,mean_max_Te_FL_plat,Te_FL_plat_mean,
             max2mean_Te_FL_plat,min2mean_Te_FL_plat,amp_Te_FL_plat,
             mins_ind_comp_Te_FL_plat,maxs_ind_comp_Te_FL_plat]                         = max_min_mean_vals(time,time[nsteps-last_steps::],Te[i_plot_lat,j_plot_lat,nsteps-last_steps::],order)    
            [_,_,_,_,_,_,
             mean_min_Te_FL_pver,mean_max_Te_FL_pver,Te_FL_pver_mean,
             max2mean_Te_FL_pver,min2mean_Te_FL_pver,amp_Te_FL_pver,
             mins_ind_comp_Te_FL_pver,maxs_ind_comp_Te_FL_pver]                         = max_min_mean_vals(time,time[nsteps-last_steps::],Te[i_plot_ver,j_plot_ver,nsteps-last_steps::],order)    
            [_,_,_,_,_,_,
             mean_min_ne_FL_lat,mean_max_ne_FL_lat,ne_FL_lat_mean,
             max2mean_ne_FL_lat,min2mean_ne_FL_lat,amp_ne_FL_lat,
             mins_ind_comp_ne_FL_lat,maxs_ind_comp_ne_FL_lat]                           = max_min_mean_vals(time,time[nsteps-last_steps::],ne_FL_lat[nsteps-last_steps::],order)
            [_,_,_,_,_,_,
             mean_min_ne_FL_ver,mean_max_ne_FL_ver,ne_FL_ver_mean,
             max2mean_ne_FL_ver,min2mean_ne_FL_ver,amp_ne_FL_ver,
             mins_ind_comp_ne_FL_ver,maxs_ind_comp_ne_FL_ver]                           = max_min_mean_vals(time,time[nsteps-last_steps::],ne_FL_ver[nsteps-last_steps::],order)    
            [_,_,_,_,_,_,
             mean_min_ne_FL,mean_max_ne_FL,ne_FL_mean,
             max2mean_ne_FL,min2mean_ne_FL,amp_ne_FL,
             mins_ind_comp_ne_FL,maxs_ind_comp_ne_FL]                                   = max_min_mean_vals(time,time[nsteps-last_steps::],ne_FL[nsteps-last_steps::],order)    
            [_,_,_,_,_,_,
             mean_min_ne_FL_lat_int,mean_max_ne_FL_lat_int,ne_FL_lat_int_mean,
             max2mean_ne_FL_lat_int,min2mean_ne_FL_lat_int,amp_ne_FL_lat_int,
             mins_ind_comp_ne_FL_lat_int,maxs_ind_comp_ne_FL_lat_int]                   = max_min_mean_vals(time,time[nsteps-last_steps::],ne_FL_lat_int[nsteps-last_steps::],order)    
            [_,_,_,_,_,_,
             mean_min_ne_FL_ver_int,mean_max_ne_FL_ver_int,ne_FL_ver_int_mean,
             max2mean_ne_FL_ver_int,min2mean_ne_FL_ver_int,amp_ne_FL_ver_int,
             mins_ind_comp_ne_FL_ver_int,maxs_ind_comp_ne_FL_ver_int]                   = max_min_mean_vals(time,time[nsteps-last_steps::],ne_FL_ver_int[nsteps-last_steps::],order)    
            [_,_,_,_,_,_,
             mean_min_ne_FL_int,mean_max_ne_FL_int,ne_FL_int_mean,
             max2mean_ne_FL_int,min2mean_ne_FL_int,amp_ne_FL_int,
             mins_ind_comp_ne_FL_int,maxs_ind_comp_ne_FL_int]                           = max_min_mean_vals(time,time[nsteps-last_steps::],ne_FL_int[nsteps-last_steps::],order)    
            [_,_,_,_,_,_,
             mean_min_ne_FL_plat,mean_max_ne_FL_plat,ne_FL_plat_mean,
             max2mean_ne_FL_plat,min2mean_ne_FL_plat,amp_ne_FL_plat,
             mins_ind_comp_ne_FL_plat,maxs_ind_comp_ne_FL_plat]                         = max_min_mean_vals(time,time[nsteps-last_steps::],ne[i_plot_lat,j_plot_lat,nsteps-last_steps::],order)    
            [_,_,_,_,_,_,
             mean_min_ne_FL_pver,mean_max_ne_FL_pver,ne_FL_pver_mean,
             max2mean_ne_FL_pver,min2mean_ne_FL_pver,amp_ne_FL_pver,
             mins_ind_comp_ne_FL_pver,maxs_ind_comp_ne_FL_pver]                         = max_min_mean_vals(time,time[nsteps-last_steps::],ne[i_plot_ver,j_plot_ver,nsteps-last_steps::],order)    
            [_,_,_,_,_,_,
             mean_min_pe_FL_lat,mean_max_pe_FL_lat,pe_FL_lat_mean,
             max2mean_pe_FL_lat,min2mean_pe_FL_lat,amp_pe_FL_lat,
             mins_ind_comp_pe_FL_lat,maxs_ind_comp_pe_FL_lat]                           = max_min_mean_vals(time,time[nsteps-last_steps::],pe_FL_lat[nsteps-last_steps::],order)    
            [_,_,_,_,_,_,
             mean_min_pe_FL_ver,mean_max_pe_FL_ver,pe_FL_ver_mean,
             max2mean_pe_FL_ver,min2mean_pe_FL_ver,amp_pe_FL_ver,
             mins_ind_comp_pe_FL_ver,maxs_ind_comp_pe_FL_ver]                           = max_min_mean_vals(time,time[nsteps-last_steps::],pe_FL_ver[nsteps-last_steps::],order)    
            [_,_,_,_,_,_,
             mean_min_pe_FL,mean_max_pe_FL,pe_FL_mean,
             max2mean_pe_FL,min2mean_pe_FL,amp_pe_FL,
             mins_ind_comp_pe_FL,maxs_ind_comp_pe_FL]                                   = max_min_mean_vals(time,time[nsteps-last_steps::],pe_FL[nsteps-last_steps::],order)    
            [_,_,_,_,_,_,
             mean_min_pe_FL_lat_int,mean_max_pe_FL_lat_int,pe_FL_lat_int_mean,
             max2mean_pe_FL_lat_int,min2mean_pe_FL_lat_int,amp_pe_FL_lat_int,
             mins_ind_comp_pe_FL_lat_int,maxs_ind_comp_pe_FL_lat_int]                   = max_min_mean_vals(time,time[nsteps-last_steps::],pe_FL_lat_int[nsteps-last_steps::],order)    
            [_,_,_,_,_,_,
             mean_min_pe_FL_ver_int,mean_max_pe_FL_ver_int,pe_FL_ver_int_mean,
             max2mean_pe_FL_ver_int,min2mean_pe_FL_ver_int,amp_pe_FL_ver_int,
             mins_ind_comp_pe_FL_ver_int,maxs_ind_comp_pe_FL_ver_int]                   = max_min_mean_vals(time,time[nsteps-last_steps::],pe_FL_ver_int[nsteps-last_steps::],order)    
            [_,_,_,_,_,_,
             mean_min_pe_FL_int,mean_max_pe_FL_int,pe_FL_int_mean,
             max2mean_pe_FL_int,min2mean_pe_FL_int,amp_pe_FL_int,
             mins_ind_comp_pe_FL_int,maxs_ind_comp_pe_FL_int]                           = max_min_mean_vals(time,time[nsteps-last_steps::],pe_FL_int[nsteps-last_steps::],order)    
            [_,_,_,_,_,_,
             mean_min_pe_FL_plat,mean_max_pe_FL_plat,pe_FL_plat_mean,
             max2mean_pe_FL_plat,min2mean_pe_FL_plat,amp_pe_FL_plat,
             mins_ind_comp_pe_FL_plat,maxs_ind_comp_pe_FL_plat]                         = max_min_mean_vals(time,time[nsteps-last_steps::],pe[i_plot_lat,j_plot_lat,nsteps-last_steps::],order)    
            [_,_,_,_,_,_,
             mean_min_pe_FL_pver,mean_max_pe_FL_pver,pe_FL_pver_mean,
             max2mean_pe_FL_pver,min2mean_pe_FL_pver,amp_pe_FL_pver,
             mins_ind_comp_pe_FL_pver,maxs_ind_comp_pe_FL_pver]                         = max_min_mean_vals(time,time[nsteps-last_steps::],pe[i_plot_ver,j_plot_ver,nsteps-last_steps::],order)    
        
            [_,_,_,_,_,_,
             mean_min_Hall_par_eff_FL_lat_int,mean_max_Hall_par_eff_FL_lat_int,Hall_par_eff_FL_lat_int_mean,
             max2mean_Hall_par_eff_FL_lat_int,min2mean_Hall_par_eff_FL_lat_int,amp_Hall_par_eff_FL_lat_int,
             mins_ind_comp_Hall_par_eff_FL_lat_int,maxs_ind_comp_Hall_par_eff_FL_lat_int]                   = max_min_mean_vals(time,time[nsteps-last_steps::],Hall_par_eff_FL_lat_int[nsteps-last_steps::],order)    
            [_,_,_,_,_,_,
             mean_min_Hall_par_eff_FL_ver_int,mean_max_Hall_par_eff_FL_ver_int,Hall_par_eff_FL_ver_int_mean,
             max2mean_Hall_par_eff_FL_ver_int,min2mean_Hall_par_eff_FL_ver_int,amp_Hall_par_eff_FL_ver_int,
             mins_ind_comp_Hall_par_eff_FL_ver_int,maxs_ind_comp_Hall_par_eff_FL_ver_int]                   = max_min_mean_vals(time,time[nsteps-last_steps::],Hall_par_eff_FL_ver_int[nsteps-last_steps::],order)    
            [_,_,_,_,_,_,
             mean_min_Hall_par_eff_FL_int,mean_max_Hall_par_eff_FL_int,Hall_par_eff_FL_int_mean,
             max2mean_Hall_par_eff_FL_int,min2mean_Hall_par_eff_FL_int,amp_Hall_par_eff_FL_int,
             mins_ind_comp_Hall_par_eff_FL_int,maxs_ind_comp_Hall_par_eff_FL_int]                           = max_min_mean_vals(time,time[nsteps-last_steps::],Hall_par_eff_FL_int[nsteps-last_steps::],order)    
            
            [_,_,_,_,_,_,
             mean_min_Hall_par_FL_lat_int,mean_max_Hall_par_FL_lat_int,Hall_par_FL_lat_int_mean,
             max2mean_Hall_par_FL_lat_int,min2mean_Hall_par_FL_lat_int,amp_Hall_par_FL_lat_int,
             mins_ind_comp_Hall_par_FL_lat_int,maxs_ind_comp_Hall_par_FL_lat_int]                   = max_min_mean_vals(time,time[nsteps-last_steps::],Hall_par_FL_lat_int[nsteps-last_steps::],order)    
            [_,_,_,_,_,_,
             mean_min_Hall_par_FL_ver_int,mean_max_Hall_par_FL_ver_int,Hall_par_FL_ver_int_mean,
             max2mean_Hall_par_FL_ver_int,min2mean_Hall_par_FL_ver_int,amp_Hall_par_FL_ver_int,
             mins_ind_comp_Hall_par_FL_ver_int,maxs_ind_comp_Hall_par_FL_ver_int]                   = max_min_mean_vals(time,time[nsteps-last_steps::],Hall_par_FL_ver_int[nsteps-last_steps::],order)    
            [_,_,_,_,_,_,
             mean_min_Hall_par_FL_int,mean_max_Hall_par_FL_int,Hall_par_FL_int_mean,
             max2mean_Hall_par_FL_int,min2mean_Hall_par_FL_int,amp_Hall_par_FL_int,
             mins_ind_comp_Hall_par_FL_int,maxs_ind_comp_Hall_par_FL_int]                           = max_min_mean_vals(time,time[nsteps-last_steps::],Hall_par_FL_int[nsteps-last_steps::],order)    
            
            [_,_,_,_,_,_,
             mean_min_inst_ratio_DphiTe_FL_lat,mean_max_inst_ratio_DphiTe_FL_lat,inst_ratio_DphiTe_FL_lat_mean,
             max2mean_inst_ratio_DphiTe_FL_lat,min2mean_inst_ratio_DphiTe_FL_lat,amp_inst_ratio_DphiTe_FL_lat,
             mins_ind_comp_inst_ratio_DphiTe_FL_lat,maxs_ind_comp_inst_ratio_DphiTe_FL_lat]                           = max_min_mean_vals(time,time[nsteps-last_steps::],inst_ratio_DphiTe_FL_lat[nsteps-last_steps::],order)    
            [_,_,_,_,_,_,
             mean_min_inst_ratio_DphiTe_FL_ver,mean_max_inst_ratio_DphiTe_FL_ver,inst_ratio_DphiTe_FL_ver_mean,
             max2mean_inst_ratio_DphiTe_FL_ver,min2mean_inst_ratio_DphiTe_FL_ver,amp_inst_ratio_DphiTe_FL_ver,
             mins_ind_comp_inst_ratio_DphiTe_FL_ver,maxs_ind_comp_inst_ratio_DphiTe_FL_ver]                           = max_min_mean_vals(time,time[nsteps-last_steps::],inst_ratio_DphiTe_FL_ver[nsteps-last_steps::],order)    
            [_,_,_,_,_,_,
             mean_min_inst_ratio_DphiTe_FL,mean_max_inst_ratio_DphiTe_FL,inst_ratio_DphiTe_FL_mean,
             max2mean_inst_ratio_DphiTe_FL,min2mean_inst_ratio_DphiTe_FL,amp_inst_ratio_DphiTe_FL,
             mins_ind_comp_inst_ratio_DphiTe_FL,maxs_ind_comp_inst_ratio_DphiTe_FL]                                   = max_min_mean_vals(time,time[nsteps-last_steps::],inst_ratio_DphiTe_FL[nsteps-last_steps::],order)    
            
            [_,_,_,_,_,_,
             mean_min_inst_ratio_DphiTe_FL_lat_int,mean_max_inst_ratio_DphiTe_FL_lat_int,inst_ratio_DphiTe_FL_lat_int_mean,
             max2mean_inst_ratio_DphiTe_FL_lat_int,min2mean_inst_ratio_DphiTe_FL_lat_int,amp_inst_ratio_DphiTe_FL_lat_int,
             mins_ind_comp_inst_ratio_DphiTe_FL_lat_int,maxs_ind_comp_inst_ratio_DphiTe_FL_lat_int]                           = max_min_mean_vals(time,time[nsteps-last_steps::],inst_ratio_DphiTe_FL_lat_int[nsteps-last_steps::],order)    
            [_,_,_,_,_,_,
             mean_min_inst_ratio_DphiTe_FL_ver_int,mean_max_inst_ratio_DphiTe_FL_ver_int,inst_ratio_DphiTe_FL_ver_int_mean,
             max2mean_inst_ratio_DphiTe_FL_ver_int,min2mean_inst_ratio_DphiTe_FL_ver_int,amp_inst_ratio_DphiTe_FL_ver_int,
             mins_ind_comp_inst_ratio_DphiTe_FL_ver_int,maxs_ind_comp_inst_ratio_DphiTe_FL_ver_int]                           = max_min_mean_vals(time,time[nsteps-last_steps::],inst_ratio_DphiTe_FL_ver_int[nsteps-last_steps::],order)    
            [_,_,_,_,_,_,
             mean_min_inst_ratio_DphiTe_FL_int,mean_max_inst_ratio_DphiTe_FL_int,inst_ratio_DphiTe_FL_int_mean,
             max2mean_inst_ratio_DphiTe_FL_int,min2mean_inst_ratio_DphiTe_FL_int,amp_inst_ratio_DphiTe_FL_int,
             mins_ind_comp_inst_ratio_DphiTe_FL_int,maxs_ind_comp_inst_ratio_DphiTe_FL_int]                                   = max_min_mean_vals(time,time[nsteps-last_steps::],inst_ratio_DphiTe_FL_int[nsteps-last_steps::],order)    
            
            
            [_,_,_,_,_,_,
             mean_min_dphi_sh_b_FL_lat_int,mean_max_dphi_sh_b_FL_lat_int,dphi_sh_b_FL_lat_int_mean,
             max2mean_dphi_sh_b_FL_lat_int,min2mean_dphi_sh_b_FL_lat_int,amp_dphi_sh_b_FL_lat_int,
             mins_ind_comp_dphi_sh_b_FL_lat_int,maxs_ind_comp_dphi_sh_b_FL_lat_int]                      = max_min_mean_vals(time,time[nsteps-last_steps::],dphi_sh_b_FL_lat_int[nsteps-last_steps::],order)
            [_,_,_,_,_,_,
             mean_min_dphi_sh_b_FL_ver_int,mean_max_dphi_sh_b_FL_ver_int,dphi_sh_b_FL_ver_int_mean,
             max2mean_dphi_sh_b_FL_ver_int,min2mean_dphi_sh_b_FL_ver_int,amp_dphi_sh_b_FL_ver_int,
             mins_ind_comp_dphi_sh_b_FL_ver_int,maxs_ind_comp_dphi_sh_b_FL_ver_int]                      = max_min_mean_vals(time,time[nsteps-last_steps::],dphi_sh_b_FL_ver_int[nsteps-last_steps::],order)
            [_,_,_,_,_,_,
             mean_min_dphi_sh_b_FL_int,mean_max_dphi_sh_b_FL_int,dphi_sh_b_FL_int_mean,
             max2mean_dphi_sh_b_FL_int,min2mean_dphi_sh_b_FL_int,amp_dphi_sh_b_FL_int,
             mins_ind_comp_dphi_sh_b_FL_int,maxs_ind_comp_dphi_sh_b_FL_int]                              = max_min_mean_vals(time,time[nsteps-last_steps::],dphi_sh_b_FL_int[nsteps-last_steps::],order)
            
            [_,_,_,_,_,_,
             mean_min_dphi_sh_b_Te_FL_lat_int,mean_max_dphi_sh_b_Te_FL_lat_int,dphi_sh_b_Te_FL_lat_int_mean,
             max2mean_dphi_sh_b_Te_FL_lat_int,min2mean_dphi_sh_b_Te_FL_lat_int,amp_dphi_sh_b_Te_FL_lat_int,
             mins_ind_comp_dphi_sh_b_Te_FL_lat_int,maxs_ind_comp_dphi_sh_b_Te_FL_lat_int]                      = max_min_mean_vals(time,time[nsteps-last_steps::],dphi_sh_b_Te_FL_lat_int[nsteps-last_steps::],order)
            [_,_,_,_,_,_,
             mean_min_dphi_sh_b_Te_FL_ver_int,mean_max_dphi_sh_b_Te_FL_ver_int,dphi_sh_b_Te_FL_ver_int_mean,
             max2mean_dphi_sh_b_Te_FL_ver_int,min2mean_dphi_sh_b_Te_FL_ver_int,amp_dphi_sh_b_Te_FL_ver_int,
             mins_ind_comp_dphi_sh_b_Te_FL_ver_int,maxs_ind_comp_dphi_sh_b_Te_FL_ver_int]                      = max_min_mean_vals(time,time[nsteps-last_steps::],dphi_sh_b_Te_FL_ver_int[nsteps-last_steps::],order)
            [_,_,_,_,_,_,
             mean_min_dphi_sh_b_Te_FL_int,mean_max_dphi_sh_b_Te_FL_int,dphi_sh_b_Te_FL_int_mean,
             max2mean_dphi_sh_b_Te_FL_int,min2mean_dphi_sh_b_FL_int,amp_dphi_sh_b_Te_FL_int,
             mins_ind_comp_dphi_sh_b_Te_FL_int,maxs_ind_comp_dphi_sh_b_Te_FL_int]                      = max_min_mean_vals(time,time[nsteps-last_steps::],dphi_sh_b_Te_FL_int[nsteps-last_steps::],order)
            
            [_,_,_,_,_,_,
             mean_min_imp_ene_e_b_FL_lat_int,mean_max_imp_ene_e_b_FL_lat_int,imp_ene_e_b_FL_lat_int_mean,
             max2mean_imp_ene_e_b_FL_lat_int,min2mean_imp_ene_e_b_FL_lat_int,amp_imp_ene_e_b_FL_lat_int,
             mins_ind_comp_imp_ene_e_b_FL_lat_int,maxs_ind_comp_imp_ene_e_b_FL_lat_int]                      = max_min_mean_vals(time,time[nsteps-last_steps::],imp_ene_e_b_FL_lat_int[nsteps-last_steps::],order)
            [_,_,_,_,_,_,
             mean_min_imp_ene_e_b_FL_ver_int,mean_max_imp_ene_e_b_FL_ver_int,imp_ene_e_b_FL_ver_int_mean,
             max2mean_imp_ene_e_b_FL_ver_int,min2mean_imp_ene_e_b_FL_ver_int,amp_imp_ene_e_b_FL_ver_int,
             mins_ind_comp_imp_ene_e_b_FL_ver_int,maxs_ind_comp_imp_ene_e_b_FL_ver_int]                      = max_min_mean_vals(time,time[nsteps-last_steps::],imp_ene_e_b_FL_ver_int[nsteps-last_steps::],order)
            [_,_,_,_,_,_,
             mean_min_imp_ene_e_b_FL_int,mean_max_imp_ene_e_b_FL_int,imp_ene_e_b_FL_int_mean,
             max2mean_imp_ene_e_b_FL_int,min2mean_imp_ene_e_b_FL_int,amp_imp_ene_e_b_FL_int,
             mins_ind_comp_imp_ene_e_b_FL_int,maxs_ind_comp_imp_ene_e_b_FL_int]                              = max_min_mean_vals(time,time[nsteps-last_steps::],imp_ene_e_b_FL_int[nsteps-last_steps::],order)
            
            [_,_,_,_,_,_,
             mean_min_imp_ene_e_b_Te_FL_lat_int,mean_max_imp_ene_e_b_Te_FL_lat_int,imp_ene_e_b_Te_FL_lat_int_mean,
             max2mean_imp_ene_e_b_Te_FL_lat_int,min2mean_imp_ene_e_b_Te_FL_lat_int,amp_imp_ene_e_b_Te_FL_lat_int,
             mins_ind_comp_imp_ene_e_b_Te_FL_lat_int,maxs_ind_comp_imp_ene_e_b_Te_FL_lat_int]                      = max_min_mean_vals(time,time[nsteps-last_steps::],imp_ene_e_b_Te_FL_lat_int[nsteps-last_steps::],order)
            [_,_,_,_,_,_,
             mean_min_imp_ene_e_b_Te_FL_ver_int,mean_max_imp_ene_e_b_Te_FL_ver_int,imp_ene_e_b_Te_FL_ver_int_mean,
             max2mean_imp_ene_e_b_Te_FL_ver_int,min2mean_imp_ene_e_b_Te_FL_ver_int,amp_imp_ene_e_b_Te_FL_ver_int,
             mins_ind_comp_imp_ene_e_b_Te_FL_ver_int,maxs_ind_comp_imp_ene_e_b_Te_FL_ver_int]                      = max_min_mean_vals(time,time[nsteps-last_steps::],imp_ene_e_b_Te_FL_ver_int[nsteps-last_steps::],order)
            [_,_,_,_,_,_,
             mean_min_imp_ene_e_b_Te_FL_int,mean_max_imp_ene_e_b_Te_FL_int,imp_ene_e_b_Te_FL_int_mean,
             max2mean_imp_ene_e_b_Te_FL_int,min2mean_imp_ene_e_b_Te_FL_int,amp_imp_ene_e_b_Te_FL_int,
             mins_ind_comp_imp_ene_e_b_Te_FL_int,maxs_ind_comp_imp_ene_e_b_Te_FL_int]                              = max_min_mean_vals(time,time[nsteps-last_steps::],imp_ene_e_b_Te_FL_int[nsteps-last_steps::],order)
            
            
            [_,_,_,_,_,_,
             mean_min_imp_ene_e_wall_FL_lat_int,mean_max_imp_ene_e_wall_FL_lat_int,imp_ene_e_wall_FL_lat_int_mean,
             max2mean_imp_ene_e_wall_FL_lat_int,min2mean_imp_ene_e_wall_FL_lat_int,amp_imp_ene_e_wall_FL_lat_int,
             mins_ind_comp_imp_ene_e_wall_FL_lat_int,maxs_ind_comp_imp_ene_e_wall_FL_lat_int]                      = max_min_mean_vals(time,time[nsteps-last_steps::],imp_ene_e_wall_FL_lat_int[nsteps-last_steps::],order)
            [_,_,_,_,_,_,
             mean_min_imp_ene_e_wall_FL_ver_int,mean_max_imp_ene_e_wall_FL_ver_int,imp_ene_e_wall_FL_ver_int_mean,
             max2mean_imp_ene_e_wall_FL_ver_int,min2mean_imp_ene_e_wall_FL_ver_int,amp_imp_ene_e_wall_FL_ver_int,
             mins_ind_comp_imp_ene_e_wall_FL_ver_int,maxs_ind_comp_imp_ene_e_wall_FL_ver_int]                      = max_min_mean_vals(time,time[nsteps-last_steps::],imp_ene_e_wall_FL_ver_int[nsteps-last_steps::],order)
            [_,_,_,_,_,_,
             mean_min_imp_ene_e_wall_FL_int,mean_max_imp_ene_e_wall_FL_int,imp_ene_e_wall_FL_int_mean,
             max2mean_imp_ene_e_wall_FL_int,min2mean_imp_ene_e_wall_FL_int,amp_imp_ene_e_wall_FL_int,
             mins_ind_comp_imp_ene_e_wall_FL_int,maxs_ind_comp_imp_ene_e_wall_FL_int]                              = max_min_mean_vals(time,time[nsteps-last_steps::],imp_ene_e_wall_FL_int[nsteps-last_steps::],order)
            
            [_,_,_,_,_,_,
             mean_min_imp_ene_e_wall_Te_FL_lat_int,mean_max_imp_ene_e_wall_Te_FL_lat_int,imp_ene_e_wall_Te_FL_lat_int_mean,
             max2mean_imp_ene_e_wall_Te_FL_lat_int,min2mean_imp_ene_e_wall_Te_FL_lat_int,amp_imp_ene_e_wall_Te_FL_lat_int,
             mins_ind_comp_imp_ene_e_wall_Te_FL_lat_int,maxs_ind_comp_imp_ene_e_wall_Te_FL_lat_int]                      = max_min_mean_vals(time,time[nsteps-last_steps::],imp_ene_e_wall_Te_FL_lat_int[nsteps-last_steps::],order)
            [_,_,_,_,_,_,
             mean_min_imp_ene_e_wall_Te_FL_ver_int,mean_max_imp_ene_e_wall_Te_FL_ver_int,imp_ene_e_wall_Te_FL_ver_int_mean,
             max2mean_imp_ene_e_wall_Te_FL_ver_int,min2mean_imp_ene_e_wall_Te_FL_ver_int,amp_imp_ene_e_wall_Te_FL_ver_int,
             mins_ind_comp_imp_ene_e_wall_Te_FL_ver_int,maxs_ind_comp_imp_ene_e_wall_Te_FL_ver_int]                      = max_min_mean_vals(time,time[nsteps-last_steps::],imp_ene_e_wall_Te_FL_ver_int[nsteps-last_steps::],order)
            [_,_,_,_,_,_,
             mean_min_imp_ene_e_wall_Te_FL_int,mean_max_imp_ene_e_wall_Te_FL_int,imp_ene_e_wall_Te_FL_int_mean,
             max2mean_imp_ene_e_wall_Te_FL_int,min2mean_imp_ene_e_wall_Te_FL_int,amp_imp_ene_e_wall_Te_FL_int,
             mins_ind_comp_imp_ene_e_wall_Te_FL_int,maxs_ind_comp_imp_ene_e_wall_Te_FL_int]                              = max_min_mean_vals(time,time[nsteps-last_steps::],imp_ene_e_wall_Te_FL_int[nsteps-last_steps::],order)
            
            [_,_,_,_,_,_,
             mean_min_Ti_FL_lat_int,mean_max_Ti_FL_lat_int,Ti_FL_lat_int_mean,
             max2mean_Ti_FL_lat_int,min2mean_Ti_FL_lat_int,amp_Ti_FL_lat_int,
             mins_ind_comp_Ti_FL_lat_int,maxs_ind_comp_Ti_FL_lat_int]                   = max_min_mean_vals(time,time[nsteps-last_steps::],Ti_FL_lat_int[nsteps-last_steps::],order)    
            [_,_,_,_,_,_,
             mean_min_Ti_FL_ver_int,mean_max_Ti_FL_ver_int,Ti_FL_ver_int_mean,
             max2mean_Ti_FL_ver_int,min2mean_Ti_FL_ver_int,amp_Ti_FL_ver_int,
             mins_ind_comp_Ti_FL_ver_int,maxs_ind_comp_Ti_FL_ver_int]                   = max_min_mean_vals(time,time[nsteps-last_steps::],Ti_FL_ver_int[nsteps-last_steps::],order)    
            [_,_,_,_,_,_,
             mean_min_Ti_FL_int,mean_max_Ti_FL_int,Ti_FL_int_mean,
             max2mean_Ti_FL_int,min2mean_Ti_FL_int,amp_Ti_FL_int,
             mins_ind_comp_Ti_FL_int,maxs_ind_comp_Ti_FL_int]                           = max_min_mean_vals(time,time[nsteps-last_steps::],Ti_FL_int[nsteps-last_steps::],order)    
            [_,_,_,_,_,_,
             mean_min_Ti_FL_plat,mean_max_Ti_FL_plat,Ti_FL_plat_mean,
             max2mean_Ti_FL_plat,min2mean_Ti_FL_plat,amp_Ti_FL_plat,
             mins_ind_comp_Ti_FL_plat,maxs_ind_comp_Ti_FL_plat]                         = max_min_mean_vals(time,time[nsteps-last_steps::],Ti[i_plot_lat,j_plot_lat,nsteps-last_steps::],order)    
            [_,_,_,_,_,_,
             mean_min_Ti_FL_pver,mean_max_Ti_FL_pver,Ti_FL_pver_mean,
             max2mean_Ti_FL_pver,min2mean_Ti_FL_pver,amp_Ti_FL_pver,
             mins_ind_comp_Ti_FL_pver,maxs_ind_comp_Ti_FL_pver]                         = max_min_mean_vals(time,time[nsteps-last_steps::],Ti[i_plot_ver,j_plot_ver,nsteps-last_steps::],order)
            
            [_,_,_,_,_,_,
             mean_min_Vcoupling,mean_max_Vcoupling,Vcoupling_mean,
             max2mean_Vcoupling,min2mean_Vcoupling,amp_Vcoupling,  
             mins_ind_comp_Vcoupling,maxs_ind_comp_Vcoupling]                           = max_min_mean_vals(time,time[nsteps-last_steps::],Vcoupling[nsteps-last_steps::],order)    
            
            [_,_,_,_,_,_,
             mean_min_Vcoupling_axis,mean_max_Vcoupling_axis,Vcoupling_axis_mean,
             max2mean_Vcoupling_axis,min2mean_Vcoupling_axis,amp_Vcoupling_axis,
             mins_ind_comp_Vcoupling_axis,maxs_ind_comp_Vcoupling_axis]                 = max_min_mean_vals(time,time[nsteps-last_steps::],Vcoupling_axis[nsteps-last_steps::],order)    
            
        
            [_,_,_,_,_,_,
             mean_min_Vcoupling_interp,mean_max_Vcoupling_interp,Vcoupling_interp_mean,
             max2mean_Vcoupling_interp,min2mean_Vcoupling_interp,amp_Vcoupling_interp,
             mins_ind_comp_Vcoupling_interp,maxs_ind_comp_Vcoupling_interp]             = max_min_mean_vals(time,time[nsteps-last_steps::],Vcoupling_interp[nsteps-last_steps::],order)
        
         
        # ---- Obtain the mean values of total quantities as the sum of those of ions, electrons and neutrals to avoid small mismatches
        thrust_mean    = thrust_i1_mean + thrust_i2_mean + thrust_i3_mean + thrust_i4_mean + thrust_n1_mean + thrust_n2_mean + thrust_n3_mean + thrust_e_mean
        P_use_tot_mean = P_use_tot_i_mean + P_use_tot_n_mean + Pe_FLwall_mean
        P_use_z_mean   = P_use_z_i_mean + P_use_z_n_mean + P_use_z_e_mean
        P_FLwall_mean  = Pi_FLwall_mean + Pn_FLwall_mean + Pe_FLwall_mean
        P_Dwall_mean   = Pi_Dwall_mean + Pn_Dwall_mean + Pe_Dwall_mean
        P_Awall_mean   = Pi_Awall_mean + Pn_Awall_mean + Pe_Awall_mean
        if cath_type == 1:
            P_cath_mean = Pi_Cwall_mean + Pn_Cwall_mean + Pe_Cwall_mean

        Pionex_mean  = P_ion_mean + P_ex_mean        
        if P_cath_mean < 0:
            # In this case cathode power is source power, not loss power to walls
            Pwalls_mean  = P_Dwall_mean + P_Awall_mean + P_FLwall_mean
            Psource_mean = Pd_mean + np.abs(P_cath_mean)
        else:
            # In this case cathode power is loss power, not source power
            Pwalls_mean  = P_Dwall_mean + P_Awall_mean + P_FLwall_mean + P_cath_mean
            Psource_mean = Pd_mean
        
        Ploss_mean   = Pwalls_mean + Pionex_mean
        if Pturb_mean < 0:
            # In this case turbulent power is a loss power, not a source power
            Ploss_mean = Ploss_mean + np.abs(Pturb_mean)            
        else:
            # In this case turbulent power is a source power, not a loss power
            Psource_mean = Psource_mean + Pturb_mean
            
        balP_mean    = Psource_mean - Ploss_mean
        
        # NOTE (17/05/2025):
        # In Psource instead of adding P_cath, which considers the net power 
        # at the cathode including ions and neutrals, we should add to Pd only
        # Pe_Cwall_mean (in absolute value) and Pn_Cwall_mean (in absolute value)
        # if it is negative, because only in this case it is a power injected 
        # into the domain. On the other hand, Pi_Cwall_mean should be added to
        # Pwalls_mean, since it is a power deposited at the cathode wall by the
        # ions collected there from the plasma.
        # Since cathode powers are low, these changes should have minimal impact
        # on performance figures.

        # Comment lines above, and the definition below of I_beam_mean and I_tw_tot_mean to return to approach before 19/07/2023 (for paper GDML)
        I_iD        = (e/mass)*(mflow_twmat_i1_mean) + (2.0*e/mass)*(mflow_twmat_i2_mean) + (e/mass)*(mflow_twmat_i3_mean) + (2.0*e/mass)*(mflow_twmat_i4_mean)
        I_iA        = (e/mass)*(mflow_twa_i1_mean)   + (2.0*e/mass)*(mflow_twa_i2_mean)   + (e/mass)*(mflow_twa_i3_mean)   + (2.0*e/mass)*(mflow_twa_i4_mean)
        I_iC        = (e/mass)*(mflow_twcat_i1_mean) + (2.0*e/mass)*(mflow_twcat_i2_mean) + (e/mass)*(mflow_twcat_i3_mean) + (2.0*e/mass)*(mflow_twcat_i4_mean)
        I_beam_mean = (e/mass)*(mflow_twinf_i1_mean) + (2.0*e/mass)*(mflow_twinf_i2_mean) + (e/mass)*(mflow_twinf_i3_mean) + (2.0*e/mass)*(mflow_twinf_i4_mean)
        I_tw_tot_mean = I_iD+I_iA+I_iC+I_beam_mean
        mflow_twinf_itot_mean = mflow_twinf_i1_mean + mflow_twinf_i2_mean + mflow_twinf_i3_mean + mflow_twinf_i4_mean
        mflow_twa_tot_mean    = mflow_twa_i1_mean + mflow_twa_i2_mean + mflow_twa_i3_mean + mflow_twa_i4_mean + mflow_twa_n1_mean + mflow_twa_n2_mean + mflow_twa_n3_mean
        m_A_mean              = mflow_inj_n1_mean - mflow_twa_tot_mean # Do not consider this value, since it does not account for cathode neutral injection
        # -------------------------------------------------------------------------
        
        # Obtain time-averaged dphi/Te at free loss
        ratio_DphiTe_FL_lat_mean     = (phi_FL_lat_mean - phi_inf_mean)/Te_FL_lat_mean
        ratio_DphiTe_FL_ver_mean     = (phi_FL_ver_mean - phi_inf_mean)/Te_FL_ver_mean
        ratio_DphiTe_FL_mean         = (phi_FL_mean - phi_inf_mean)/Te_FL_mean
        ratio_DphiTe_FL_lat_int_mean = (phi_FL_lat_int_mean - phi_inf_mean)/Te_FL_lat_int_mean
        ratio_DphiTe_FL_ver_int_mean = (phi_FL_ver_int_mean - phi_inf_mean)/Te_FL_ver_int_mean
        ratio_DphiTe_FL_int_mean     = (phi_FL_int_mean - phi_inf_mean)/Te_FL_int_mean
        ratio_DphiTe_FL_plat_mean    = (phi_FL_plat_mean-phi_inf_mean)/Te_FL_plat_mean
        ratio_DphiTe_FL_pver_mean    = (phi_FL_pver_mean-phi_inf_mean)/Te_FL_pver_mean
        # Obtain time-averaged effective Hall parameters at free loss
        Hall_effect_FL_lat_int_mean  = np.sqrt(Hall_par_eff_FL_lat_int_mean*Hall_par_FL_lat_int_mean)
        Hall_effect_FL_ver_int_mean  = np.sqrt(Hall_par_eff_FL_ver_int_mean*Hall_par_FL_ver_int_mean)
        Hall_effect_FL_int_mean      = np.sqrt(Hall_par_eff_FL_int_mean*Hall_par_FL_int_mean)
        
        
        # Obtain time-averaged performances from time-averaged Id, Ibeam, thrust and ion fluxes
        eta_u_avg             = mflow_twinf_itot_mean/m_A
        eta_u_avg_2           = mflow_twinf_itot_mean/m_A_mean
        eta_u_avg_3           = mflow_twinf_itot_mean/mflow_inj_n1_mean
        eta_prod_avg          = I_beam_mean/I_tw_tot_mean
        eta_cur_avg           = I_beam_mean/Id_mean 
        eta_ch_avg            = (e/mass)*mflow_twinf_itot_mean/I_beam_mean     
        # eta_div_avg           = P_use_z_i_mean/P_use_tot_i_mean
        # Using Pd
        eta_div_avg           = P_use_z_mean/P_use_tot_mean
        eta_thr_avg           = thrust_mean**2/(2*m_A*Pd_mean)
        eta_ene_avg           = P_use_tot_mean/Pd_mean
        eta_disp_avg          = thrust_mean**2/(2*m_A*P_use_z_mean)
        # Using total input power (Psource)
        eta_thr_avg_source    = thrust_mean**2/(2*m_A*Psource_mean)
        eta_ene_avg_source    = P_use_tot_mean/Psource_mean
        # Compute eta_div and eta_disp considering only heavy species contributions downstream. This is equivalent to considering that
        # electrons have completely expanded (i.e. Te = 0)
        # eta_ene should remain constant when increasing the plume, since along the expansion, electrons give their energy to ions,
        # so that the total plasma power at crossing the FL boundary is the same
        # With the eta_div and eta_disp values computed only with heavy species, and considering the same eta_ene, we can obtain a 
        # new eta_thr, and from it a new F corresponding to that of a plume with completely expanded electrons
        eta_div_avg_hs        = (P_use_z_i_mean+P_use_z_n_mean)/(P_use_tot_i_mean + P_use_tot_n_mean)
        eta_disp_avg_hs       = (thrust_mean-thrust_e_mean)**2/(2*m_A*(P_use_z_i_mean+P_use_z_n_mean))
        eta_thr_avg_hs        = eta_ene_avg*eta_div_avg_hs*eta_disp_avg_hs
        eta_thr_avg_hs_source = eta_ene_avg_source*eta_div_avg_hs*eta_disp_avg_hs
        F_avg_hs              = np.sqrt(eta_thr_avg_hs*2*m_A*Pd_mean)
        F_avg_hs_source       = np.sqrt(eta_thr_avg_hs_source*2*m_A*Psource_mean)
        
        # Obtain the dispersion efficiency using the ion mass flow: eta_disp_prime = eta_disp/eta_u
        # Compute also the one due only to heavy species (complete expansion of electrons)
        eta_disp_prime_avg    = eta_disp_avg/eta_u_avg
        eta_disp_prime_avg_hs = eta_disp_avg_hs/eta_u_avg
        
        # Compute eta_vol and corresponding effective voltage with eta_ene defined with Pd and Psource
        eta_vol_avg        = eta_ene_avg/eta_cur_avg
        Veff_avg           = eta_vol_avg*Pd_mean/Id_mean
        eta_vol_avg_source = eta_ene_avg_source/eta_cur_avg
        Veff_avg_source    = eta_vol_avg_source*Pd_mean/Id_mean
        Veff_avg_source2   = eta_vol_avg_source*Psource_mean/Id_mean
        
        # Compute the average Z number for ions
#        Zion_avg = (mflow_twinf_i1_mean + 2.0*mflow_twinf_i2_mean + mflow_twinf_i3_mean + 2.0*mflow_twinf_i4_mean)/mflow_twinf_itot_mean
        Zion_avg = 1.0/eta_ch_avg
        
        # Compute the average energy per ion and the equivalent average energy per singly charged ion
        ene_ion1_FLwall_avg = Pi_FLwall_mean/I_beam_mean
        ene_ion_FLwall_avg = Zion_avg*ene_ion1_FLwall_avg
        # Compute the axial average energy per ion and the equivalent axial average energy per singly charged ion
        enez_ion1_FLwall_avg = P_use_z_i_mean/I_beam_mean
        enez_ion_FLwall_avg = Zion_avg*enez_ion1_FLwall_avg
        # Since neutral contribution is typically negligible in eta_div_avg_hs, we find that approximately:
        # enez_ion1_FLwall_avg = eta_div_avg_hs*ene_ion1_FLwall_avg
        # enez_ion_FLwall_avg = eta_div_avg_hs*ene_ion_FLwall_avg
        
        # Values of average ion energies above are different from effective voltages obtained above with eta_ene,
        # since eta_ene includes contributions of electrons and neutrals (the latter typically negligible). We obtain 
        # values for eta_ene and eta_vol considering only heavy species contributions to obtain
        # an effective voltage closer to the values of the average ion energies
        eta_ene_avg_hs        = (P_use_tot_i_mean + P_use_tot_n_mean)/Pd_mean
        eta_ene_avg_hs_source = (P_use_tot_i_mean + P_use_tot_n_mean)/Psource_mean
        eta_vol_avg_hs        = eta_ene_avg_hs/eta_cur_avg
        eta_vol_avg_hs_source = eta_ene_avg_hs_source/eta_cur_avg
        Veff_avg_hs           = eta_vol_avg_hs*Pd_mean/Id_mean
        Veff_avg_hs_source    = eta_vol_avg_hs_source*Pd_mean/Id_mean
        Veff_avg_hs_source2   = eta_vol_avg_hs_source*Psource_mean/Id_mean
        
        # Recompute values of eta_thr and F considering only heavy species in all 
        # partial efficiencies (i.e. using also eta_ene defined with heavy species contributions only)
        eta_thr_avg_hs2        = eta_ene_avg_hs*eta_div_avg_hs*eta_disp_avg_hs
        eta_thr_avg_hs_source2 = eta_ene_avg_hs_source*eta_div_avg_hs*eta_disp_avg_hs
        F_avg_hs2              = np.sqrt(eta_thr_avg_hs2*2*m_A*Pd_mean)
        F_avg_hs_source2       = np.sqrt(eta_thr_avg_hs_source2*2*m_A*Psource_mean)
        
        
        Isp_s_avg             = thrust_mean/(g0*m_A_mean)
        Isp_ms_avg            = thrust_mean/(m_A_mean)
        Isp_s_avg_mA          = thrust_mean/(g0*m_A)
        Isp_ms_avg_mA         = thrust_mean/(m_A)

        err_balP_avg          = np.abs(Psource_mean - Ploss_mean)/Psource_mean
        err_balP_Pthrust_avg  = np.abs(Psource_mean -  (Pnothrust_mean + Pthrust_mean))/Psource_mean
        ctr_balPthrust_Pd_avg              = (Psource_mean)/(Psource_mean + Pthrust_mean + Pnothrust_mean)
        ctr_balPthrust_Pthrust_avg         = (Pthrust_mean)/(Psource_mean + Pthrust_mean + Pnothrust_mean)
        ctr_balPthrust_Pnothrust_avg       = (Pnothrust_mean)/(Psource_mean + Pthrust_mean + Pnothrust_mean)
        ctr_balPthrust_Pnothrust_walls_avg = (Pnothrust_walls_mean)/(Psource_mean + Pthrust_mean + Pnothrust_mean)
        ctr_balPthrust_Pionex_avg          = (Pionex_mean)/(Psource_mean + Pthrust_mean + Pnothrust_mean)
        ctr_balPthrust_total_avg           = ctr_balPthrust_Pd_avg + ctr_balPthrust_Pthrust_avg + ctr_balPthrust_Pnothrust_avg
#        err_balP_avg          = np.abs(Pd_mean - Ploss_mean)/Pd_mean
#        err_balP_Pthrust_avg  = np.abs(Pd_mean -  (Pnothrust_mean + Pthrust_mean))/Pd_mean
#        ctr_balPthrust_Pd_avg              = (Pd_mean)/(Pd_mean + Pthrust_mean + Pnothrust_mean)
#        ctr_balPthrust_Pthrust_avg         = (Pthrust_mean)/(Pd_mean + Pthrust_mean + Pnothrust_mean)
#        ctr_balPthrust_Pnothrust_avg       = (Pnothrust_mean)/(Pd_mean + Pthrust_mean + Pnothrust_mean)
#        ctr_balPthrust_Pnothrust_walls_avg = (Pnothrust_walls_mean)/(Pd_mean + Pthrust_mean + Pnothrust_mean)
#        ctr_balPthrust_Pionex_avg          = (Pionex_mean)/(Pd_mean + Pthrust_mean + Pnothrust_mean)
#        ctr_balPthrust_total_avg           = ctr_balPthrust_Pd_avg + ctr_balPthrust_Pthrust_avg + ctr_balPthrust_Pnothrust_avg
        
	
	# Electron energy balance
        if cath_type == 2:
            # In this case cathode power is always positive (source power), and it only corresponds to electrons
            if Pturb_mean < 0:
                err_Ebal_e    = np.abs(Pfield_e_mean + P_cath_mean + Pturb_mean - (Pionex_mean+Pe_Dwall_mean+Pe_Awall_mean+Pe_FLwall_mean))/(Pfield_e_mean + P_cath_mean)
            else:
                err_Ebal_e    = np.abs(Pfield_e_mean + P_cath_mean + Pturb_mean - (Pionex_mean+Pe_Dwall_mean+Pe_Awall_mean+Pe_FLwall_mean))/(Pfield_e_mean + P_cath_mean + Pturb_mean)
            dEdt_e        = Pfield_e_mean + P_cath_mean + Pturb_mean - (Pionex_mean+Pe_Dwall_mean+Pe_Awall_mean+Pe_FLwall_mean)
            ctr_Pfield_e  = Pfield_e_mean/(Pfield_e_mean + P_cath_mean + np.abs(Pturb_mean) + Pionex_mean + Pe_Dwall_mean + Pe_Awall_mean + Pe_FLwall_mean + np.abs(dEdt_e))
            ctr_P_cath    = P_cath_mean/(Pfield_e_mean + P_cath_mean + np.abs(Pturb_mean) + Pionex_mean + Pe_Dwall_mean + Pe_Awall_mean + Pe_FLwall_mean + np.abs(dEdt_e))
            ctr_Pe_Dwall  = Pe_Dwall_mean/(Pfield_e_mean + P_cath_mean + np.abs(Pturb_mean) + Pionex_mean + Pe_Dwall_mean + Pe_Awall_mean + Pe_FLwall_mean + np.abs(dEdt_e))
            ctr_Pe_Awall  = Pe_Awall_mean/(Pfield_e_mean + P_cath_mean + np.abs(Pturb_mean) + Pionex_mean + Pe_Dwall_mean + Pe_Awall_mean + Pe_FLwall_mean + np.abs(dEdt_e))
            ctr_Pe_FLwall = Pe_FLwall_mean/(Pfield_e_mean + P_cath_mean + np.abs(Pturb_mean) + Pionex_mean + Pe_Dwall_mean + Pe_Awall_mean + Pe_FLwall_mean + np.abs(dEdt_e))
            ctr_Pionex    = Pionex_mean/(Pfield_e_mean + P_cath_mean + np.abs(Pturb_mean) + Pionex_mean + Pe_Dwall_mean + Pe_Awall_mean + Pe_FLwall_mean + np.abs(dEdt_e))
            ctr_Pturb     = np.abs(Pturb_mean)/(Pfield_e_mean + P_cath_mean + np.abs(Pturb_mean) + Pionex_mean + Pe_Dwall_mean + Pe_Awall_mean + Pe_FLwall_mean + np.abs(dEdt_e))
            ctr_dEdt_e    = np.abs(dEdt_e)/(Pfield_e_mean + P_cath_mean + np.abs(Pturb_mean) + Pionex_mean + Pe_Dwall_mean + Pe_Awall_mean + Pe_FLwall_mean + np.abs(dEdt_e))
            Ebal_RHS      = Pfield_e_mean + P_cath_mean + Pturb_mean - Pionex_mean
            Ebal_LHS      = dEdt_e + Pe_Dwall_mean + Pe_Awall_mean + Pe_FLwall_mean
            err_Ebal_RHS_LHS = np.abs(Ebal_LHS-Ebal_RHS)/np.abs(Ebal_RHS)
        elif cath_type == 1:
            # In this case cathode power can be either positive or negative (expected negative, but it can be positive due to gradient reconstruction 
            # errors when we set the electron temperature as boundary condition at the cathode faces)
            if Pturb_mean < 0:
                if Pe_Cwall_mean < 0:
                    err_Ebal_e    = np.abs(Pfield_e_mean + np.abs(Pe_Cwall_mean) + Pturb_mean - (Pionex_mean+Pe_Dwall_mean+Pe_Awall_mean+Pe_FLwall_mean))/(Pfield_e_mean + np.abs(Pe_Cwall_mean))
                else:
                    err_Ebal_e    = np.abs(Pfield_e_mean + Pturb_mean - (Pionex_mean+Pe_Dwall_mean+Pe_Awall_mean+Pe_FLwall_mean+Pe_Cwall_mean))/Pfield_e_mean
            else:
                if Pe_Cwall_mean < 0:
                    err_Ebal_e    = np.abs(Pfield_e_mean + np.abs(Pe_Cwall_mean) + Pturb_mean - (Pionex_mean+Pe_Dwall_mean+Pe_Awall_mean+Pe_FLwall_mean))/(Pfield_e_mean + np.abs(Pe_Cwall_mean) + Pturb_mean)
                else:
                    err_Ebal_e    = np.abs(Pfield_e_mean + Pturb_mean - (Pionex_mean+Pe_Dwall_mean+Pe_Awall_mean+Pe_FLwall_mean+Pe_Cwall_mean))/(Pfield_e_mean + Pturb_mean)
                    
            dEdt_e        = Pfield_e_mean + Pturb_mean - (Pionex_mean+Pe_Dwall_mean+Pe_Awall_mean+Pe_FLwall_mean+Pe_Cwall_mean)
            ctr_Pfield_e  = Pfield_e_mean/(Pfield_e_mean + np.abs(Pe_Cwall_mean) + np.abs(Pturb_mean) + Pionex_mean + Pe_Dwall_mean + Pe_Awall_mean + Pe_FLwall_mean + np.abs(dEdt_e))
            ctr_P_cath    = np.abs(Pe_Cwall_mean)/(Pfield_e_mean + np.abs(Pe_Cwall_mean) + np.abs(Pturb_mean) + Pionex_mean + Pe_Dwall_mean + Pe_Awall_mean + Pe_FLwall_mean + np.abs(dEdt_e))
            ctr_Pe_Dwall  = Pe_Dwall_mean/(Pfield_e_mean + np.abs(Pe_Cwall_mean) + np.abs(Pturb_mean) + Pionex_mean + Pe_Dwall_mean + Pe_Awall_mean + Pe_FLwall_mean + np.abs(dEdt_e))
            ctr_Pe_Awall  = Pe_Awall_mean/(Pfield_e_mean + np.abs(Pe_Cwall_mean) + np.abs(Pturb_mean) + Pionex_mean + Pe_Dwall_mean + Pe_Awall_mean + Pe_FLwall_mean + np.abs(dEdt_e))
            ctr_Pe_FLwall = Pe_FLwall_mean/(Pfield_e_mean + np.abs(Pe_Cwall_mean) + np.abs(Pturb_mean) + Pionex_mean + Pe_Dwall_mean + Pe_Awall_mean + Pe_FLwall_mean + np.abs(dEdt_e))
            ctr_Pionex    = Pionex_mean/(Pfield_e_mean + np.abs(Pe_Cwall_mean) + np.abs(Pturb_mean) + Pionex_mean + Pe_Dwall_mean + Pe_Awall_mean + Pe_FLwall_mean + np.abs(dEdt_e))
            ctr_Pturb     = np.abs(Pturb_mean)/(Pfield_e_mean + np.abs(Pe_Cwall_mean) + np.abs(Pturb_mean) + Pionex_mean + Pe_Dwall_mean + Pe_Awall_mean + Pe_FLwall_mean + np.abs(dEdt_e))
            ctr_dEdt_e    = np.abs(dEdt_e)/(Pfield_e_mean + np.abs(Pe_Cwall_mean) + np.abs(Pturb_mean) + Pionex_mean + Pe_Dwall_mean + Pe_Awall_mean + Pe_FLwall_mean + np.abs(dEdt_e))
            Ebal_RHS      = Pfield_e_mean + np.abs(Pe_Cwall_mean) + Pturb_mean - Pionex_mean
            Ebal_LHS      = dEdt_e + Pe_Dwall_mean + Pe_Awall_mean + Pe_FLwall_mean
            err_Ebal_RHS_LHS = np.abs(Ebal_LHS-Ebal_RHS)/np.abs(Ebal_RHS)

#        err_Ebal_e    = np.abs(Pfield_e_mean + P_cath_mean - (Pionex_mean+Pe_Dwall_mean+Pe_Awall_mean+Pe_FLwall_mean))/(Pionex_mean+Pe_Dwall_mean+Pe_Awall_mean+Pe_FLwall_mean)
#        ctr_Pfield_e  = Pfield_e_mean/(Pfield_e_mean + P_cath_mean + Pionex_mean + Pe_Dwall_mean + Pe_Awall_mean + Pe_FLwall_mean)
#        ctr_P_cath    = P_cath_mean/(Pfield_e_mean + P_cath_mean + Pionex_mean + Pe_Dwall_mean + Pe_Awall_mean + Pe_FLwall_mean)
#        ctr_Pe_Dwall  = Pe_Dwall_mean/(Pfield_e_mean + P_cath_mean + Pionex_mean + Pe_Dwall_mean + Pe_Awall_mean + Pe_FLwall_mean)
#        ctr_Pe_Awall  = Pe_Awall_mean/(Pfield_e_mean + P_cath_mean + Pionex_mean + Pe_Dwall_mean + Pe_Awall_mean + Pe_FLwall_mean)
#        ctr_Pe_FLwall = Pe_FLwall_mean/(Pfield_e_mean + P_cath_mean + Pionex_mean + Pe_Dwall_mean + Pe_Awall_mean + Pe_FLwall_mean)
#        ctr_Pionex    = Pionex_mean/(Pfield_e_mean + P_cath_mean + Pionex_mean + Pe_Dwall_mean + Pe_Awall_mean + Pe_FLwall_mean)
            
#        plt.figure("dEdt_time")  
#        dEdt_e_time = Pfield_e + np.abs(Pe_Cwall) - (Pionex+Pe_Dwall+Pe_Awall+Pe_FLwall) Pturb
#        plt.plot(time,dEdt_e_time)
        
        # Current balance error in case we have a conducting wall
        if n_cond_wall > 0:
            # Current balance error
            err_I = np.abs(Id + Icond[:,0] - Icath)/np.abs(Icath)
            err_I[err_I == np.Inf] = np.NaN
#            err_I = np.zeros(np.shape(Id))
        else:
            err_I = np.zeros(np.shape(Id))
            
        # Current balance error in case we have GDML at given infinite potential
        if np.any(I_inf != 0):
            err_I_inf = np.abs(Id + I_inf - Icath)/np.abs(Icath)
            err_I_inf[err_I_inf == np.Inf] = np.NaN
        else:
            err_I_inf = np.zeros(np.shape(Id))

            
        # Obtain neutrals mean residence time (using average magnitudes)
        nn1[np.where(nodes_flag == 0)]   = np.nan
        fn1_z[np.where(nodes_flag == 0)] = np.nan
        if make_mean == 1 and mean_type == 0:
            nn1_mean   = np.nanmean(nn1[:,:,nsteps-last_steps::],axis=2)
            fn1_z_mean = np.nanmean(fn1_z[:,:,nsteps-last_steps::],axis=2)
        elif make_mean == 1 and mean_type == 1:
            nn1_mean   = np.nanmean(nn1[:,:,step_i:step_f+1],axis=2)
            fn1_z_mean = np.nanmean(fn1_z[:,:,step_i:step_f+1],axis=2)
        elif make_mean == 1 and mean_type == 2:
            # Obtain the print-out steps corresponding to the fast print-out
            # steps for averaging the neutral density and axial flux. Use the
            # steps obtained for the variable avg_dens_mp_neus
            print_out_mins_ind_avg_dens_mp_neus_real =  mins_ind_comp_avg_dens_mp_neus/50.0
            print_out_mins_ind_avg_dens_mp_neus      = print_out_mins_ind_avg_dens_mp_neus_real.astype(int)
            nn1_mean   = np.nanmean(nn1[:,:,print_out_mins_ind_avg_dens_mp_neus[0]:print_out_mins_ind_avg_dens_mp_neus[-1]+1],axis=2)
            fn1_z_mean = np.nanmean(fn1_z[:,:,print_out_mins_ind_avg_dens_mp_neus[0]:print_out_mins_ind_avg_dens_mp_neus[-1]+1],axis=2)
        if make_mean == 1:
            un1_z_mean = np.divide(fn1_z_mean,nn1_mean)
            eta_min   = int(eta_min)
            eta_max   = int(eta_max)
            xi_bottom = int(xi_bottom)
            xi_top    = int(xi_top)
            res_time1 = 0.0
            res_freq1 = 0.0
            res_time2 = 0.0
            res_freq2 = 0.0
            if xi_bottom != 0:
                # Approach 1: integrate uz radially first
                un1_z_Ir = np.zeros(xi_bottom+1,dtype='float')
                for j in range(0,xi_bottom+1):
                    for i in range(eta_min,eta_max):
                        dr = rs[i+1,j] - rs[i,j]
                        un1_z_Ir[j] = un1_z_Ir[j] + 0.5*(un1_z_mean[i,j] + un1_z_mean[i+1,j])*dr
                un1_z_Ir = un1_z_Ir/(rs[eta_max,0]-rs[eta_min,0])
                res_time1 = 0.0
                for j in range(0,xi_bottom):
                    dz = zs[eta_min,j+1] - zs[eta_min,j]
                    res_time1 = res_time1 + 0.5*(1/un1_z_Ir[j+1] + 1/un1_z_Ir[j])*dz
                res_freq1 = 1.0/res_time1
            
                # Approach 2: integrate uz in the whole chamber
                un1_z_Irz = 0.0
                for j in range(0,xi_bottom):
                    dz = zs[eta_min,j+1] - zs[eta_min,j]
                    un1_z_Irz = un1_z_Irz + 0.5*(un1_z_Ir[j+1] + un1_z_Ir[j])*dz
                un1_z_Irz = un1_z_Irz/(zs[eta_min,xi_bottom]-zs[eta_min,0])
                res_time2 = (zs[eta_min,xi_bottom]-zs[eta_min,0])/un1_z_Irz
                res_freq2 = 1.0/res_time2
        

     
        ###########################################################################
        print("Plotting...")
        ############################ GENERATING PLOTS #############################
        print("Last step ID    (-)  = %3d" %np.where(eta_u > 0)[0][-1])
        if make_mean == 1 and print_mean_vars == 1:
            print("Mean mi1              (kg)           = %15.8e" %mass_mp_ions1_mean)            
            print("Mean mi2              (kg)           = %15.8e" %mass_mp_ions2_mean)   
            print("Mean mitot            (kg)           = %15.8e" %tot_mass_mp_ions_mean)   
            print("Mean mn               (kg)           = %15.8e" %tot_mass_mp_neus_mean)  
            print("Mean dens_e           (1/m3)         = %15.8e" %avg_dens_mp_ions_mean)
            print("Mean dens_n           (1/m3)         = %15.8e" %avg_dens_mp_neus_mean)
            print("Mean mflow ion inf    (kg/s)         = %15.8e" %mflow_twinf_itot_mean)
            print("mA (input)            (kg/s)         = %15.8e" %m_A)
            print("mA_mean               (kg/s)         = %15.8e" %m_A_mean)
            print("Mean mflow_inj_n      (kg/s)         = %15.8e" %mflow_inj_n1_mean)
            print("Mean mflow_twa (n+i)  (kg/s)         = %15.8e" %mflow_twa_tot_mean)
            print("Mean err_mbal_n1      (-)            = %15.8e" %err_mbal_n1_mean)     
            print("Mean err_mbal_n2      (-)            = %15.8e" %err_mbal_n2_mean)        
            print("Mean err_mbal_n3      (-)            = %15.8e" %err_mbal_n3_mean)        
            print("Mean err_mbal_i1      (-)            = %15.8e" %err_mbal_i1_mean)  
            print("Mean err_mbal_i2      (-)            = %15.8e" %err_mbal_i2_mean) 
            print("Mean err_mbal_i3      (-)            = %15.8e" %err_mbal_i3_mean)  
            print("Mean err_mbal_i4      (-)            = %15.8e" %err_mbal_i4_mean) 
            print("Mean err_mbal_tot     (-)            = %15.8e" %err_mbal_tot_mean) 
            print("Mean Isp              (s)            = %15.8e" %Isp_s_mean)
            print("Mean Isp              (m/s)          = %15.8e" %Isp_ms_mean)
            print("Mean eta_u (input mA) (-)            = %15.8e" %eta_u_mean)   
            print("Mean eta_u_bis(mflows)(-)            = %15.8e" %eta_u_bis_mean)  
            print("Mean eta_prod         (-)            = %15.8e" %eta_prod_mean)   
            print("Mean eta_cur          (-)            = %15.8e" %eta_cur_mean)  
            print("Mean eta_div          (-)            = %15.8e" %eta_div_mean)  
            print("Mean eta_thr          (-)            = %15.8e" %eta_thr_mean)  
            print("Mean thrust           (N)            = %15.8e" %thrust_mean) 
            print("Mean thrust (m+pres)  (N)            = %15.8e" %(thrust_m_mean+thrust_pres_mean)) 
            print("Mean err thrust       (-)            = %15.8e" %(abs(thrust_mean-(thrust_m_mean+thrust_pres_mean))/thrust_mean)) 
            print("Mean thrust_m         (N)            = %15.8e" %thrust_m_mean) 
            print("Mean thrust_pres      (N)            = %15.8e" %thrust_pres_mean) 
            print("Mean thrust ion       (N)            = %15.8e" %(thrust_i1_mean+thrust_i2_mean+thrust_i3_mean+thrust_i4_mean)) 
            print("Mean thrust neu       (N)            = %15.8e" %(thrust_n1_mean+thrust_n2_mean+thrust_n3_mean)) 
            print("Mean thrust e         (N)            = %15.8e" %thrust_e_mean) 
            print("Mean thrust i1        (N)            = %15.8e" %thrust_i1_mean) 
            print("Mean thrust i2        (N)            = %15.8e" %thrust_i2_mean) 
            print("Mean thrust i3        (N)            = %15.8e" %thrust_i3_mean) 
            print("Mean thrust i4        (N)            = %15.8e" %thrust_i4_mean) 
            print("Mean thrust n1        (N)            = %15.8e" %thrust_n1_mean) 
            print("Mean thrust n2        (N)            = %15.8e" %thrust_n2_mean) 
            print("Mean thrust n3        (N)            = %15.8e" %thrust_n3_mean) 
            print("Mean thrust_m/thrust    (-)          = %15.8e" %(thrust_m_mean/thrust_mean)) 
            print("Mean thrust_pres/thrust (-)          = %15.8e" %(thrust_pres_mean/thrust_mean)) 
            print("Mean thrust_ion/thrust  (-)          = %15.8e" %((thrust_i1_mean+thrust_i2_mean+thrust_i3_mean+thrust_i4_mean)/thrust_mean)) 
            print("Mean thrust_neu/thrust  (-)          = %15.8e" %((thrust_n1_mean+thrust_n2_mean+thrust_n3_mean)/thrust_mean)) 
            print("Mean thrust_e/thrust    (-)          = %15.8e" %(thrust_e_mean/thrust_mean)) 
            print("Mean Pd               (W)            = %15.8e" %Pd_mean) 
            print("Mean P_mat            (W)            = %15.8e" %P_mat_mean) 
            print("Mean P_mat_hs         (W)            = %15.8e" %P_mat_hs_mean)
            print("Mean P_inj            (W)            = %15.8e" %P_inj_mean) 
            print("Mean P_inj_hs         (W)            = %15.8e" %P_inj_hs_mean) 
            print("Mean P_inf            (W)            = %15.8e" %P_inf_mean) 
            print("Mean P_use_tot        (W)            = %15.8e" %P_use_tot_mean) 
            print("Mean P_use_z          (W)            = %15.8e" %P_use_z_mean)
            print("Mean P_use_tot_i      (W)            = %15.8e" %P_use_tot_i_mean) 
            print("Mean P_use_tot_n      (W)            = %15.8e" %P_use_tot_n_mean) 
            print("Mean P_use_tot_e      (W)            = %15.8e" %Pe_FLwall_mean) 
            print("Mean P_use_z_i        (W)            = %15.8e" %P_use_z_i_mean)
            print("Mean P_use_z_n        (W)            = %15.8e" %P_use_z_n_mean)
            print("Mean P_use_z_e        (W)            = %15.8e" %P_use_z_e_mean)
            print("Mean P_ion            (W)            = %15.8e" %P_ion_mean) 
            print("Mean P_ex             (W)            = %15.8e" %P_ex_mean)
            print("Mean P_cath           (W)            = %15.8e" %P_cath_mean)
            print("Mean Pturb            (W)            = %15.8e" %Pturb_mean)
            print("Mean nu_cath          (Hz)           = %15.8e" %nu_cath_mean)
            print("Mean Id               (A)            = %15.8e" %Id_mean) 
            print("Mean Id inst          (A)            = %15.8e" %Id_inst_mean) 
            print("Mean I_beam           (A)            = %15.8e" %I_beam_mean) 
            print("Mean I_prod (I_tw_tot) (A)           = %15.8e" %I_tw_tot_mean)
            print("Mean I_wi (I_tw_tot-I_beam) (A)      = %15.8e" %(I_tw_tot_mean-I_beam_mean))
            print("Mean res_time1        (s)            = %15.8e" %res_time1)
            print("Mean res_time2        (s)            = %15.8e" %res_time2)
            print("Mean res_freq1        (Hz)           = %15.8e" %res_freq1)
            print("Mean res_freq2        (Hz)           = %15.8e" %res_freq2)
            print("Max. Te_mean_dom FFT freq (Hz)       = %15.8e" %max_freq_Te_mean_dom)
            print("Max. Id FFT freq      (Hz)           = %15.8e" %max_freq_Id)
            print("Max. Id inst FFT freq (Hz)           = %15.8e" %max_freq_Id_inst)
            print("Max. I_beam FFT freq  (Hz)           = %15.8e" %max_freq_I_beam)
            print("Max. dens_e FFT freq  (Hz)           = %15.8e" %max_freq_avg_dens_mp_ions)
            print("Max. dens_n FFT freq  (Hz)           = %15.8e" %max_freq_avg_dens_mp_neus)
            print("Max. nu_cath FFT freq (Hz)           = %15.8e" %max_freq_nu_cath)
            print("Max. P_cath FFT freq  (Hz)           = %15.8e" %max_freq_P_cath)
            print("Phase shift Id-Te_mean_dom  (deg)    = %15.8e" %phase_shift_IdTe_mean_dom_deg)
            print("Phase shift Id-Ibeam  (deg)          = %15.8e" %phase_shift_IdIbeam_deg)
            print("Phase shift avg_dens neus-ions (deg) = %15.8e" %phase_shift_avg_dens_mp_neusions_deg)
            print("Phase shift ctr_mbal_tot (deg)       = %15.8e" %phase_shift_ctr_mbal_tot_deg)
            print("##### Time-average eff. #####")
            print("Avg Isp (input mA)    (s)            = %15.8e" %Isp_s_avg_mA)
            print("Avg Isp (input mA)    (ms)           = %15.8e" %Isp_ms_avg_mA)
            print("Avg Isp (mean mA)     (s)            = %15.8e" %Isp_s_avg)
            print("Avg Isp (mean mA)     (m/s)          = %15.8e" %Isp_ms_avg)
            print("Avg eta_u (input mA)  (-)            = %15.8e" %eta_u_avg)   
            print("Avg eta_u (mean mA)   (-)            = %15.8e" %eta_u_avg_2)
            print("Avg eta_u (mflow_inj) (-)            = %15.8e" %eta_u_avg_3) 
            print("Avg eta_prod          (-)            = %15.8e" %eta_prod_avg)   
            print("Avg eta_cur           (-)            = %15.8e" %eta_cur_avg) 
            print("Avg eta_ene           (-)            = %15.8e" %eta_ene_avg) 
            print("Avg eta_disp          (-)            = %15.8e" %eta_disp_avg) 
            print("Avg eta_div           (-)            = %15.8e" %eta_div_avg) 
            print("Avg eta_thr           (-)            = %15.8e" %eta_thr_avg) 
            print("#### Total power balance ####")
            print("Mean Psource          (W)            = %15.8e" %Psource_mean)
            print("Mean Ploss            (W)            = %15.8e" %Ploss_mean) 
#            print("Mean Ploss            (W)            = %15.8e" %(P_Dwall_mean + P_Awall_mean + P_FLwall_mean + P_ion_mean + P_ex_mean)) 
#            print("Mean err Pbal         (-)            = %15.8e" %(np.abs(Pd_mean - (P_Dwall_mean + P_Awall_mean + P_FLwall_mean + P_ion_mean + P_ex_mean))/Pd_mean)) 
            print("err_balP_avg          (-)            = %15.8e" %err_balP_avg) 
            print("err_balP_Pthrust_avg  (-)            = %15.8e" %err_balP_Pthrust_avg)   
            print("Mean Pd               (W)            = %15.8e" %Pd_mean) 
            print("Mean P_cath           (W)            = %15.8e" %P_cath_mean)
            print("Mean Pturb            (W)            = %15.8e" %Pturb_mean) 
            print("Mean Pwalls           (W)            = %15.8e" %(P_Dwall_mean + P_Awall_mean + P_FLwall_mean)) 
            print("Mean P_ion_ex         (W)            = %15.8e" %(P_ion_mean + P_ex_mean)) 
            print("Mean Pnothrust        (W)            = %15.8e" %Pnothrust_mean)
            print("Mean Pnothrust_walls  (W)            = %15.8e" %Pnothrust_walls_mean)
            print("Mean Pthrust          (W)            = %15.8e" %Pthrust_mean)
            print("Puse tot (i+n)        (W)            = %15.8e" %(P_use_tot_i_mean + P_use_tot_n_mean))
            print("Puse axial (i+n)      (W)            = %15.8e" %(P_use_z_i_mean + P_use_z_n_mean))
            print("P_Dwall e             (W)            = %15.8e" %(Pe_Dwall_mean))
            print("P_Dwall hs            (W)            = %15.8e" %(Pi_Dwall_mean + Pn_Dwall_mean))
            print("P_Awall e             (W)            = %15.8e" %(Pe_Awall_mean))
            print("P_Awall hs            (W)            = %15.8e" %(Pi_Awall_mean + Pn_Awall_mean))
            print("P_Cwall e             (W)            = %15.8e" %(Pe_Cwall_mean))
            print("P_Cwall hs            (W)            = %15.8e" %(Pi_Cwall_mean + Pn_Cwall_mean))
            print("P_FLwall e            (W)            = %15.8e" %(Pe_FLwall_mean))
            # print("P_FLwall e            (W)            = %15.8e" %(P_inf_mean - (Pi_FLwall_mean + Pn_FLwall_mean)))
            print("P_FLwall hs           (W)            = %15.8e" %(Pi_FLwall_mean + Pn_FLwall_mean))
            print("Pthrust_mean/Pd_mean  (-)            = %15.8e" %(Pthrust_mean/Pd_mean))
            print("ctr_balPthrust_Pd_avg              (-) = %15.8e" %ctr_balPthrust_Pd_avg)
            print("ctr_balPthrust_Pthrust_avg         (-) = %15.8e" %ctr_balPthrust_Pthrust_avg)
            print("ctr_balPthrust_Pnothrust_avg       (-) = %15.8e" %ctr_balPthrust_Pnothrust_avg)
            print("ctr_balPthrust_Pnothrust_walls_avg (-) = %15.8e" %ctr_balPthrust_Pnothrust_walls_avg)
            print("ctr_balPthrust_Pionex_avg          (-) = %15.8e" %ctr_balPthrust_Pionex_avg)
            print("ctr_balPthrust_total_avg           (-) = %15.8e" %ctr_balPthrust_total_avg)
            print("##### Signals max,min,ratios,amp #####")
            print("mean_min_ne        (1/m3) = %15.8e" %mean_min_avg_dens_mp_ions)
            print("mean_max_ne        (1/m3) = %15.8e" %mean_max_avg_dens_mp_ions)
            print("ne_mean            (1/m3) = %15.8e" %avg_dens_mp_ions_mean)
            print("max2mean_ne           (-) = %15.8e" %max2mean_avg_dens_mp_ions)
            print("min2mean_ne           (-) = %15.8e" %min2mean_avg_dens_mp_ions)
            print("amp_ne                (-) = %15.8e" %amp_avg_dens_mp_ions)
            print("mean_min_nn        (1/m3) = %15.8e" %mean_min_avg_dens_mp_neus)
            print("mean_max_nn        (1/m3) = %15.8e" %mean_max_avg_dens_mp_neus)
            print("nn_mean            (1/m3) = %15.8e" %avg_dens_mp_neus_mean)
            print("max2mean_nn           (-) = %15.8e" %max2mean_avg_dens_mp_neus)
            print("min2mean_nn           (-) = %15.8e" %min2mean_avg_dens_mp_neus)
            print("amp_nn                (-) = %15.8e" %amp_avg_dens_mp_neus)
            print("mean_min_Te_mean_dom (eV) = %15.8e" %mean_min_Te_mean_dom)
            print("mean_max_Te_mean_dom (eV) = %15.8e" %mean_max_Te_mean_dom)
            print("Te_mean_dom_mean     (eV) = %15.8e" %Te_mean_dom_mean)
            print("max2mean_Te_mean_dom  (-) = %15.8e" %max2mean_Te_mean_dom)
            print("min2mean_Te_mean_dom  (-) = %15.8e" %min2mean_Te_mean_dom)
            print("amp_Te_mean_dom       (-) = %15.8e" %amp_Te_mean_dom)
            print("mean_min_Id           (A) = %15.8e" %mean_min_Id)
            print("mean_max_Id           (A) = %15.8e" %mean_max_Id)
            print("Id_mean               (A) = %15.8e" %Id_mean)
            print("max2mean_Id           (-) = %15.8e" %max2mean_Id)
            print("min2mean_Id           (-) = %15.8e" %min2mean_Id)
            print("amp_Id                (-) = %15.8e" %amp_Id)
            print("mean_min_I_beam       (A) = %15.8e" %mean_min_I_beam)
            print("mean_max_I_beam       (A) = %15.8e" %mean_max_I_beam)
            print("I_beam_mean           (A) = %15.8e" %I_beam_mean)
            print("max2mean_I_beam       (-) = %15.8e" %max2mean_I_beam)
            print("min2mean_I_beam       (-) = %15.8e" %min2mean_I_beam)
            print("amp_I_beam            (-) = %15.8e" %amp_I_beam)

            print("##### Electron energy balance #####")
            print("err_Ebal_RHS_LHS      (-)            = %15.8e" %(err_Ebal_RHS_LHS)) 
            print("Ebal_RHS              (W)            = %15.8e" %(Ebal_RHS)) 
            print("Ebal_LHS              (W)            = %15.8e" %(Ebal_LHS)) 
            print("err_Ebal_e            (-)            = %15.8e" %(err_Ebal_e)) 
            if cath_type == 2:
                if Pturb_mean < 0:
                    print("Psources (f+c)        (W)            = %15.8e" %(Pfield_e_mean+P_cath_mean)) 
                    print("Psinks (i+w+t)        (W)            = %15.8e" %(Pionex_mean+Pe_Dwall_mean+Pe_Awall_mean+Pe_FLwall_mean+np.abs(Pturb_mean))) 
                else:
                    print("Psources (f+c+t)      (W)            = %15.8e" %(Pfield_e_mean+P_cath_mean+Pturb_mean)) 
                    print("Psinks (i+w)          (W)            = %15.8e" %(Pionex_mean+Pe_Dwall_mean+Pe_Awall_mean+Pe_FLwall_mean)) 
            elif cath_type == 1:
                if Pturb_mean < 0:
                    if Pe_Cwall_mean < 0:
                        print("Psources (f+c)        (W)            = %15.8e" %(Pfield_e_mean+np.abs(Pe_Cwall_mean))) 
                        print("Psinks (i+w+t)        (W)            = %15.8e" %(Pionex_mean+Pe_Dwall_mean+Pe_Awall_mean+Pe_FLwall_mean+np.abs(Pturb_mean))) 
                    else:
                        print("Psources (f)          (W)            = %15.8e" %(Pfield_e_mean)) 
                        print("Psinks (i+w+c+t)      (W)            = %15.8e" %(Pionex_mean+Pe_Dwall_mean+Pe_Awall_mean+Pe_FLwall_mean+Pe_Cwall_mean+np.abs(Pturb_mean)))
                else:
                    if Pe_Cwall_mean < 0:
                        print("Psources (f+c+t)      (W)            = %15.8e" %(Pfield_e_mean+np.abs(Pe_Cwall_mean)+Pturb_mean)) 
                        print("Psinks (i+w)          (W)            = %15.8e" %(Pionex_mean+Pe_Dwall_mean+Pe_Awall_mean+Pe_FLwall_mean)) 
                    else:
                        print("Psources (f+t)        (W)            = %15.8e" %(Pfield_e_mean+Pturb_mean)) 
                        print("Psinks (i+w+c)        (W)            = %15.8e" %(Pionex_mean+Pe_Dwall_mean+Pe_Awall_mean+Pe_FLwall_mean+Pe_Cwall_mean)) 
            print("dEdt_e                (W)            = %15.8e" %(dEdt_e)) 
            print("Pfield_e              (W)            = %15.8e" %(Pfield_e_mean)) 
            if cath_type == 2:
                print("P_cath                (W)            = %15.8e" %(P_cath_mean))
            elif cath_type == 1:
                print("P_cath                (W)            = %15.8e" %(np.abs(Pe_Cwall_mean)))
            print("Pturb                 (W)            = %15.8e" %(Pturb_mean)) 
            print("P_Dwall e             (W)            = %15.8e" %(Pe_Dwall_mean))
            print("P_Awall e             (W)            = %15.8e" %(Pe_Awall_mean))
            print("P_Cwall e             (W)            = %15.8e" %(Pe_Cwall_mean))
            print("P_FLwall e            (W)            = %15.8e" %(Pe_FLwall_mean))
            print("P_ionex               (W)            = %15.8e" %(Pionex_mean)) 
            print("ctr_Pfield_e          (-)            = %15.8e" %(ctr_Pfield_e)) 
            print("ctr_P_cath            (-)            = %15.8e" %(ctr_P_cath)) 
            print("ctr_Pe_Dwall          (-)            = %15.8e" %(ctr_Pe_Dwall)) 
            print("ctr_Pe_Awall          (-)            = %15.8e" %(ctr_Pe_Awall)) 
            print("ctr_Pe_FLwall         (-)            = %15.8e" %(ctr_Pe_FLwall)) 
            print("ctr_Pionex            (-)            = %15.8e" %(ctr_Pionex)) 
            print("ctr_Pturb             (-)            = %15.8e" %(ctr_Pturb)) 
            print("ctr_dEdt_e            (-)            = %15.8e" %(ctr_dEdt_e)) 
            print("sum_ctr               (-)            = %15.8e" %(ctr_Pfield_e+ctr_P_cath+ctr_Pe_Dwall+ctr_Pe_Awall+ctr_Pe_FLwall+ctr_Pionex+ctr_Pturb+ctr_dEdt_e))             
            print("##### Summary of performances #####")
            print("Id_mean               (A) = %15.8e" %Id_mean)
            print("Min Id                (A) = %15.8e" %mean_min_Id)
            print("Max Id                (A) = %15.8e" %mean_max_Id)
            print("max2mean_Id           (-) = %15.8e" %max2mean_Id)
            print("min2mean_Id           (-) = %15.8e" %min2mean_Id)
            print("amp_Id                (-) = %15.8e" %amp_Id)
            print("Max. Id FFT freq      (Hz)= %15.8e" %max_freq_Id)
            for pindex in range(0, num_firstmax_print):
                print(str(pindex+2)+" Max. Id FFT freq    (Hz)= %15.8e" %maxs_freq_Id[pindex+1])
            print("Mean Pd               (W) = %15.8e" %Pd_mean)
            print("Min Pd                (W) = %15.8e" %mean_min_Pd)
            print("Max Pd                (W) = %15.8e" %mean_max_Pd)
            print("Mean Psource          (W) = %15.8e" %Psource_mean)
            print("Min Psource           (W) = %15.8e" %mean_min_Psource)
            print("Max Psource           (W) = %15.8e" %mean_max_Psource)
            print("Avg Isp (input mA)    (s) = %15.8e" %Isp_s_avg_mA)
            print("Min Isp               (s) = %15.8e" %(mean_min_thrust/(m_A*g0)))
            print("Max Isp               (s) = %15.8e" %(mean_max_thrust/(m_A*g0)))
            print("Avg eta_u (input mA)  (-) = %15.8e" %eta_u_avg)
            print("Avg eta_prod          (-) = %15.8e" %eta_prod_avg) 
            print("Avg eta_ch            (-) = %15.8e" %eta_ch_avg) 
            print("Avg Zion              (-) = %15.8e" %Zion_avg) 
            print("Avg eta_cur           (-) = %15.8e" %eta_cur_avg) 
            print("Avg eta_vol           (-) = %15.8e" %eta_vol_avg) 
            print("Avg eta_vol_source    (-) = %15.8e" %eta_vol_avg_source) 
            print("Avg eta_vol_hs        (-) = %15.8e" %eta_vol_avg_hs) 
            print("Avg eta_vol_hs_source (-) = %15.8e" %eta_vol_avg_hs_source) 
            print("Avg eta_ene           (-) = %15.8e" %eta_ene_avg) 
            print("Avg eta_ene_source    (-) = %15.8e" %eta_ene_avg_source) 
            print("Avg eta_ene_hs        (-) = %15.8e" %eta_ene_avg_hs) 
            print("Avg eta_ene_hs_source (-) = %15.8e" %eta_ene_avg_hs_source) 
            print("Avg eta_disp          (-) = %15.8e" %eta_disp_avg) 
            print("Avg eta_disp_prime    (-) = %15.8e" %eta_disp_prime_avg) 
            print("Avg eta_div           (-) = %15.8e" %eta_div_avg) 
            print("Avg eta_thr           (-) = %15.8e" %eta_thr_avg) 
            print("Avg eta_thr_source    (-) = %15.8e" %eta_thr_avg_source)      
            print("Avg eta_div_hs        (-) = %15.8e" %eta_div_avg_hs) 
            print("Avg eta_disp_hs       (-) = %15.8e" %eta_disp_avg_hs) 
            print("Avg eta_disp_prime_hs (-) = %15.8e" %eta_disp_prime_avg_hs) 
            print("Avg eta_thr_hs        (-) = %15.8e" %eta_thr_avg_hs)
            print("Avg eta_thr_hs_source (-) = %15.8e" %eta_thr_avg_hs_source)
            print("Mean thrust hs        (mN)= %15.8e" %(F_avg_hs*1e3)) 
            print("Mean thrust hs source (mN)= %15.8e" %(F_avg_hs_source*1e3)) 
            print("Avg eta_thr_hs2       (-) = %15.8e" %eta_thr_avg_hs2)
            print("Avg eta_thr_hs_source2(-) = %15.8e" %eta_thr_avg_hs_source2)
            print("Mean thrust hs2       (mN)= %15.8e" %(F_avg_hs2*1e3)) 
            print("Mean thrust hs source2(mN)= %15.8e" %(F_avg_hs_source2*1e3)) 
            print("Pthrust/Pd            (-) = %15.8e" %(Pthrust_mean/Pd_mean))
            print("Pthrust/Psource       (-) = %15.8e" %(Pthrust_mean/Psource_mean))
            print("Mean thrust           (mN)= %15.8e" %(thrust_mean*1e3)) 
            print("Min thrust            (mN)= %15.8e" %(mean_min_thrust*1e3)) 
            print("Max thrust            (mN)= %15.8e" %(mean_max_thrust*1e3)) 
            print("Veff_avg              (V) = %15.8e" %Veff_avg) 
            print("Veff_avg_source       (V) = %15.8e" %Veff_avg_source) 
            print("Veff_avg_source2      (V) = %15.8e" %Veff_avg_source2) 
            print("Veff_avg_hs           (V) = %15.8e" %Veff_avg_hs) 
            print("Veff_avg_hs_source    (V) = %15.8e" %Veff_avg_hs_source) 
            print("Veff_avg_hs_source2   (V) = %15.8e" %Veff_avg_hs_source2) 
            print("ene_ion1_FLwall_avg   (eV)= %15.8e" %ene_ion1_FLwall_avg) 
            print("ene_ion_FLwall_avg    (eV)= %15.8e" %ene_ion_FLwall_avg) 
            print("enez_ion1_FLwall_avg  (eV)= %15.8e" %enez_ion1_FLwall_avg) 
            print("enez_ion_FLwall_avg   (eV)= %15.8e" %enez_ion_FLwall_avg) 
            print("Vcoupling             (V) = %15.8e" %Vcoupling_mean) 
            print("Vcoupling_axis        (V) = %15.8e" %Vcoupling_axis_mean) 
            print("Vcoupling_interp      (V) = %15.8e" %Vcoupling_interp_mean) 
            print("Icath_mean            (A) = %15.8e" %Icath_mean)
            print("Icond_mean            (A) = %15.8e" %Icond_mean)
            print("Vcond_mean            (V) = %15.8e" %Vcond_mean)
            print("I_iD/I_tw_tot         (-) = %15.8e" %(I_iD/I_tw_tot_mean))
            print("I_iA/I_tw_tot         (-) = %15.8e" %(I_iA/I_tw_tot_mean))
            print("I_iC/I_tw_tot         (-) = %15.8e" %(I_iC/I_tw_tot_mean))
            print("I_iinf/I_tw_tot       (-) = %15.8e" %(I_beam_mean/I_tw_tot_mean))
            print("sum(I)/I_tw_tot       (-) = %15.8e" %((I_iD+I_iA+I_iC+I_beam_mean)/I_tw_tot_mean))
            print("P_ion_ex/P_source     (-) = %15.8e" %((P_ion_mean + P_ex_mean)/Psource_mean)) 
            print("P_D/P_source          (-) = %15.8e" %(P_Dwall_mean/Psource_mean)) 
            print("P_A/P_source          (-) = %15.8e" %(P_Awall_mean/Psource_mean))
            print("P_FL/P_source         (-) = %15.8e" %(P_FLwall_mean/Psource_mean)) 
            print("Pturb/P_source        (-) = %15.8e" %(np.abs(Pturb_mean)/Psource_mean)) 
            print("P_C/P_source          (-) = %15.8e" %(P_cath_mean/Psource_mean)) 
            if P_cath_mean < 0:
                print("sum(P)/P_source       (-) = %15.8e" %((P_ion_mean+P_ex_mean+P_Dwall_mean+P_Awall_mean+P_FLwall_mean+np.abs(Pturb_mean))/Psource_mean))
            else:
                print("sum(P)/P_source       (-) = %15.8e" %((P_ion_mean+P_ex_mean+P_Dwall_mean+P_Awall_mean+P_FLwall_mean+P_cath_mean+np.abs(Pturb_mean))/Psource_mean))
            print("##### Variables at FL #####")
            print("dphi_sh_b/Te int      (-) = %15.8e" %dphi_sh_b_Te_FL_int_mean)
            print("inst Dphi/Te          (-) = %15.8e" %inst_ratio_DphiTe_FL_mean)
            print("inst Dphi/Te int      (-) = %15.8e" %inst_ratio_DphiTe_FL_int_mean)
            print("Dphi/Te               (-) = %15.8e" %ratio_DphiTe_FL_mean)
            print("Dphi/Te int           (-) = %15.8e" %ratio_DphiTe_FL_int_mean)
            print("dphi_sh_b/Te ver int  (-) = %15.8e" %dphi_sh_b_Te_FL_ver_int_mean)
            print("inst Dphi/Te ver      (-) = %15.8e" %inst_ratio_DphiTe_FL_ver_mean)
            print("inst Dphi/Te ver int  (-) = %15.8e" %inst_ratio_DphiTe_FL_ver_int_mean)
            print("Dphi/Te ver           (-) = %15.8e" %ratio_DphiTe_FL_ver_mean)
            print("Dphi/Te ver int       (-) = %15.8e" %ratio_DphiTe_FL_ver_int_mean)
            print("Dphi/Te pver          (-) = %15.8e" %ratio_DphiTe_FL_pver_mean)
            print("dphi_sh_b/Te ver lat  (-) = %15.8e" %dphi_sh_b_Te_FL_lat_int_mean)
            print("inst Dphi/Te lat      (-) = %15.8e" %inst_ratio_DphiTe_FL_lat_mean)
            print("inst Dphi/Te lat int  (-) = %15.8e" %inst_ratio_DphiTe_FL_lat_int_mean)
            print("Dphi/Te lat           (-) = %15.8e" %ratio_DphiTe_FL_lat_mean)
            print("Dphi/Te lat int       (-) = %15.8e" %ratio_DphiTe_FL_lat_int_mean)
            print("Dphi/Te plat          (-) = %15.8e" %ratio_DphiTe_FL_plat_mean)
            print("Te                    (eV)= %15.8e" %Te_FL_mean)
            print("Te int                (eV)= %15.8e" %Te_FL_int_mean)
            print("Te ver                (eV)= %15.8e" %Te_FL_ver_mean)
            print("Te ver int            (eV)= %15.8e" %Te_FL_ver_int_mean)
            print("Te pver (i,j)=(%d,%d) (eV)= %15.8e" %(i_plot_ver,j_plot_ver,Te_FL_pver_mean))
            print("Te lat                (eV)= %15.8e" %Te_FL_lat_mean)
            print("Te lat int            (eV)= %15.8e" %Te_FL_lat_int_mean)
            print("Te plat (i,j)=(%d,%d) (eV)= %15.8e" %(i_plot_lat,j_plot_lat,Te_FL_plat_mean))
            print("phi                   (V) = %15.8e" %phi_FL_mean)
            print("phi int               (V) = %15.8e" %phi_FL_int_mean)
            print("phi ver               (V) = %15.8e" %phi_FL_ver_mean)
            print("phi ver int           (V) = %15.8e" %phi_FL_ver_int_mean)
            print("phi pver (i,j)=(%d,%d)(V) = %15.8e" %(i_plot_ver,j_plot_ver,phi_FL_pver_mean))
            print("phi lat               (V) = %15.8e" %phi_FL_lat_mean)
            print("phi lat int           (V) = %15.8e" %phi_FL_lat_int_mean)
            print("phi plat (i,j)=(%d,%d)(V) = %15.8e" %(i_plot_lat,j_plot_lat,phi_FL_plat_mean))
            print("phi_inf               (V) = %15.8e" %phi_inf_mean)
            print("I_inf                 (A) = %15.8e" %I_inf_mean)
            print("Hall eff int          (-) = %15.8e" %Hall_par_eff_FL_int_mean)
            print("Hall eff ver int      (-) = %15.8e" %Hall_par_eff_FL_ver_int_mean)
            print("Hall eff lat int      (-) = %15.8e" %Hall_par_eff_FL_lat_int_mean)
            print("Hall int              (-) = %15.8e" %Hall_par_FL_int_mean)
            print("Hall ver int          (-) = %15.8e" %Hall_par_FL_ver_int_mean)
            print("Hall lat int          (-) = %15.8e" %Hall_par_FL_lat_int_mean)
            print("Hall effect int       (-) = %15.8e" %Hall_effect_FL_int_mean)
            print("Hall effect ver int   (-) = %15.8e" %Hall_effect_FL_ver_int_mean)
            print("Hall effect lat int   (-) = %15.8e" %Hall_effect_FL_lat_int_mean)
            print("ne                    (m-3) = %15.8e" %ne_FL_mean)
            print("ne int                (m-3) = %15.8e" %ne_FL_int_mean)
            print("ne ver                (m-3) = %15.8e" %ne_FL_ver_mean)
            print("ne ver int            (m-3) = %15.8e" %ne_FL_ver_int_mean)
            print("ne pver (i,j)=(%d,%d) (m-3) = %15.8e" %(i_plot_ver,j_plot_ver,ne_FL_pver_mean))
            print("ne lat                (m-3) = %15.8e" %ne_FL_lat_mean)
            print("ne lat int            (m-3) = %15.8e" %ne_FL_lat_int_mean)
            print("ne plat (i,j)=(%d,%d) (m-3) = %15.8e" %(i_plot_lat,j_plot_lat,ne_FL_plat_mean))
            print("pe                    (Pa)  = %15.8e" %pe_FL_mean)
            print("pe int                (Pa)  = %15.8e" %pe_FL_int_mean)
            print("pe ver                (Pa)  = %15.8e" %pe_FL_ver_mean)
            print("pe ver int            (Pa)  = %15.8e" %pe_FL_ver_int_mean)
            print("pe pver (i,j)=(%d,%d) (Pa)  = %15.8e" %(i_plot_ver,j_plot_ver,pe_FL_pver_mean))
            print("pe lat                (Pa)  = %15.8e" %pe_FL_lat_mean)
            print("pe lat int            (Pa)  = %15.8e" %pe_FL_lat_int_mean)
            print("pe plat (i,j)=(%d,%d) (Pa)  = %15.8e" %(i_plot_lat,j_plot_lat,pe_FL_plat_mean))
            print("dphi_sh_b int             (V) = %15.8e" %dphi_sh_b_FL_int_mean)
            print("dphi_sh_b ver int         (V) = %15.8e" %dphi_sh_b_FL_ver_int_mean)
            print("dphi_sh_b lat int         (V) = %15.8e" %dphi_sh_b_FL_lat_int_mean)
            print("imp_ene_e_b int          (eV) = %15.8e" %imp_ene_e_b_FL_int_mean)
            print("imp_ene_e_b ver int      (eV) = %15.8e" %imp_ene_e_b_FL_ver_int_mean)
            print("imp_ene_e_b lat int      (eV) = %15.8e" %imp_ene_e_b_FL_lat_int_mean)
            print("imp_ene_e_b/Te int        (-) = %15.8e" %imp_ene_e_b_Te_FL_int_mean)
            print("imp_ene_e_b/Te ver int    (-) = %15.8e" %imp_ene_e_b_Te_FL_ver_int_mean)
            print("imp_ene_e_b/Te lat int    (-) = %15.8e" %imp_ene_e_b_Te_FL_lat_int_mean)
            print("imp_ene_e_wall int       (eV) = %15.8e" %imp_ene_e_wall_FL_int_mean)
            print("imp_ene_e_wall ver int   (eV) = %15.8e" %imp_ene_e_wall_FL_ver_int_mean)
            print("imp_ene_e_wall lat int   (eV) = %15.8e" %imp_ene_e_wall_FL_lat_int_mean)
            print("imp_ene_e_wall/Te int     (-) = %15.8e" %imp_ene_e_wall_Te_FL_int_mean)
            print("imp_ene_e_wall/Te ver int (-) = %15.8e" %imp_ene_e_wall_Te_FL_ver_int_mean)
            print("imp_ene_e_wall/Te lat int (-) = %15.8e" %imp_ene_e_wall_Te_FL_lat_int_mean)
            print("Ti int                (eV)= %15.8e" %Ti_FL_int_mean)
            print("Ti ver int            (eV)= %15.8e" %Ti_FL_ver_int_mean)
            print("Ti pver (i,j)=(%d,%d) (eV)= %15.8e" %(i_plot_ver,j_plot_ver,Ti_FL_pver_mean))
            print("Ti lat int            (eV)= %15.8e" %Ti_FL_lat_int_mean)
            print("Ti plat (i,j)=(%d,%d) (eV)= %15.8e" %(i_plot_lat,j_plot_lat,Ti_FL_plat_mean))
            print("Ti/Te int                (eV)= %15.8e" %(Ti_FL_int_mean/Te_FL_int_mean))
            print("Ti/Te ver int            (eV)= %15.8e" %(Ti_FL_ver_int_mean/Te_FL_ver_int_mean))
            print("Ti/Te pver (i,j)=(%d,%d) (eV)= %15.8e" %(i_plot_ver,j_plot_ver,Ti_FL_pver_mean/Te_FL_pver_mean))
            print("Ti/Te lat int            (eV)= %15.8e" %(Ti_FL_lat_int_mean/Te_FL_lat_int_mean))
            print("Ti/Te plat (i,j)=(%d,%d) (eV)= %15.8e" %(i_plot_lat,j_plot_lat,Ti_FL_plat_mean/Te_FL_plat_mean))
            
            
            if exp_data_time_plots == 1:
                print("##### Experimental data #####")
                print("Id_mean               (A) = %15.8e" %exp_Id_mean)
                print("Min Id                (A) = %15.8e" %mean_min_exp_Id)
                print("Max Id                (A) = %15.8e" %mean_max_exp_Id)
                print("max2mean_Id           (-) = %15.8e" %max2mean_exp_Id)
                print("min2mean_Id           (-) = %15.8e" %min2mean_exp_Id)
                print("amp_Id                (-) = %15.8e" %amp_exp_Id)
                print("Max. Id FFT freq      (Hz)= %15.8e" %max_freq_exp_Id)
                for pindex in range(0, num_firstmax_print):
                    print(str(pindex+2)+" Max. Id FFT freq    (Hz)= %15.8e" %maxs_freq_exp_Id[pindex+1])
                print("Pd_mean               (W) = %15.8e" %exp_Pd_mean)
                print("Min Pd                (W) = %15.8e" %mean_min_exp_Pd)
                print("Max Pd                (W) = %15.8e" %mean_max_exp_Pd)
                
        
 
        # Time in ms
        time       = time*1e3
        time_fast  = time_fast*1e3
        steps      = steps*1e-3
        steps_fast = steps_fast*1e-3
        prntsteps_ID = np.linspace(0,nsteps-1,nsteps)
        tot_mass_mp_ions   = tot_mass_mp_ions*1e11
        tot_mass_mp_neus   = tot_mass_mp_neus*1e11
        tot_mass_exit_ions = tot_mass_exit_ions*1e11
        tot_mass_exit_neus = tot_mass_exit_neus*1e11
        mass_mp_ions       = mass_mp_ions*1e11
        mass_mp_neus       = mass_mp_neus*1e11
        tot_num_mp_ions    = tot_num_mp_ions*1e-6
        tot_num_mp_neus    = tot_num_mp_neus*1e-6
        num_mp_ions        = num_mp_ions*1e-6
        num_mp_neus        = num_mp_neus*1e-6
        thrust             = thrust*1e3
        thrust_ion         = thrust_ion*1e3
        thrust_neu         = thrust_neu*1e3
        mbal_n1            = mbal_n1*1E6
        dMdt_n1            = dMdt_n1*1E6
        mbal_i1            = mbal_i1*1E6
        dMdt_i1            = dMdt_i1*1E6
        mbal_i2            = mbal_i2*1E6
        dMdt_i2            = dMdt_i2*1E6
        
        
        if plot_mass == 1:
            # Plot the time evolution of the ions 1 mass
            plt.figure(r'mi1(t)')
            if time2steps_axis == 1:
                plt.plot(steps_fast, mass_mp_ions[:,0], linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time_fast, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            else:
                plt.plot(time_fast, mass_mp_ions[:,0], linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time_fast, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            # Plot the time evolution of the ions 2 mass
            plt.figure(r'mi2(t)')
            if time2steps_axis == 1:
                plt.plot(steps_fast, mass_mp_ions[:,1], linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time_fast, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            else:   
                plt.plot(time_fast, mass_mp_ions[:,1], linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time_fast, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            # Plot the time evolution of the ion total mass
            plt.figure(r'mitot(t)')
            if time2steps_axis == 1:
                plt.plot(steps_fast, tot_mass_mp_ions, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time_fast, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])            
            else:
                plt.plot(time_fast, tot_mass_mp_ions, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time_fast, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])            
            # Plot the time evolution of the neutral mass
            plt.figure(r'mn(t)')
            if time2steps_axis == 1:
                plt.plot(steps_fast, tot_mass_mp_neus, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time_fast, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            else:     
                plt.plot(time_fast, tot_mass_mp_neus, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time_fast, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
        if plot_dens == 1:
            # Plot the time evolution of the average plasma density in the domain
            plt.figure(r'dens_e(t)')
            if time2steps_axis == 1:
                plt.semilogy(steps_fast, avg_dens_mp_ions, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_time_fast, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])            
            else:
#                plt.semilogy(time_fast, avg_dens_mp_ions, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_time_fast, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])      
                plt.semilogy(time_fast, avg_dens_mp_ions, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_time_fast, markersize=marker_size, marker=markers[k], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            # Plot the time evolution of the average neutral density in the domain
            plt.figure(r'dens_n(t)')
            if time2steps_axis == 1:
                plt.semilogy(steps_fast, avg_dens_mp_neus, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_time_fast, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])            
            else:
#                plt.semilogy(time_fast, avg_dens_mp_neus, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_time_fast, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])  
                plt.semilogy(time_fast, avg_dens_mp_neus, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_time_fast, markersize=marker_size, marker=markers[k], color=colors[ind], markeredgecolor = 'k', label=labels[k]) 
            # Plot the FFT plot for the average plasma density in the domain
            plt.figure(r'FFT dens_e(t)')
            #plt.semilogx(freq_avg_dens_mp_ions[1:], np.abs(fft_avg_dens_mp_ions[1:]), linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            # Plot the FFT plot for the average neutral density in the domain
            plt.figure(r'FFT dens_n(t)')     
            #plt.semilogx(freq_avg_dens_mp_neus[1:], np.abs(fft_avg_dens_mp_neus[1:]), linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            # Plot the time evolution of both the average plasma and neutral density in the domain
            plt.figure(r'dens_e_dens_n(t)')
            if time2steps_axis == 1:
                plt.semilogy(steps_fast, avg_dens_mp_ions, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time_fast, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])            
                plt.semilogy(steps_fast, avg_dens_mp_neus, linestyle='--', linewidth = line_width, markevery=marker_every_time_fast, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label="")            
            
            else:
                plt.semilogy(time_fast, avg_dens_mp_ions, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time_fast, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])            
                plt.semilogy(time_fast, avg_dens_mp_neus, linestyle='--', linewidth = line_width, markevery=marker_every_time_fast, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label="")            
#                for i in range(0,len(fast_prntstep_IDs)):
#                    plt.semilogy(time_fast[fast_prntstep_IDs[i]], avg_dens_mp_ions[fast_prntstep_IDs[i]], linestyle='-', linewidth = line_width, markevery=marker_every_time, markersize=marker_size_ID, marker=prntstep_IDs_markers[i], color=prntstep_IDs_colors[i], markeredgecolor = 'k', label="")            
#                    plt.text(fact_x[i]*time_fast[fast_prntstep_IDs[i]-plot_tol], fact_y[i]*avg_dens_mp_ions[fast_prntstep_IDs[i]-plot_tol],prntstep_IDs_text[i],fontsize = text_size,color=prntstep_IDs_colors[i],ha='center',va='center')     
#                    plt.semilogy(time_fast[fast_prntstep_IDs[i]], avg_dens_mp_neus[fast_prntstep_IDs[i]], linestyle='-', linewidth = line_width, markevery=marker_every_time, markersize=marker_size_ID, marker=prntstep_IDs_markers[i], color=prntstep_IDs_colors[i], markeredgecolor = 'k', label="")            
#                    plt.text(fact_x[i]*time_fast[fast_prntstep_IDs[i]-plot_tol], fact_y[i]*avg_dens_mp_neus[fast_prntstep_IDs[i]-plot_tol],prntstep_IDs_text[i],fontsize = text_size,color=prntstep_IDs_colors[i],ha='center',va='center')                         
#                    print(prntstep_IDs_text[i]+" time_fast = "+str(time_fast[fast_prntstep_IDs[i]])+", time = "+str(time[prntstep_IDs[i]]))
            # Plot the FFT plot for both the average plasma and neutral density in the domain
            plt.figure(r'FFT dens_e_dens_n(t)')   
            #plt.semilogx(freq_avg_dens_mp_ions[1:], np.abs(fft_avg_dens_mp_ions[1:]), linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            #plt.semilogx(freq_avg_dens_mp_neus[1:], np.abs(fft_avg_dens_mp_neus[1:]), linestyle='--', linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label="")
            # Plot the time evolution of both the average plasma and neutral density in the domain (normalized)
            plt.figure(r'norm_dens_e_dens_n(t)')  
            #if time2steps_axis == 1:
                #plt.semilogy(steps_fast, avg_dens_mp_ions/avg_dens_mp_ions_mean, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time_fast, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])            
                #plt.semilogy(steps_fast, avg_dens_mp_neus/avg_dens_mp_neus_mean, linestyle='--', linewidth = line_width, markevery=marker_every_time_fast, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label="")            
            
            #else:
                #plt.semilogy(time_fast, avg_dens_mp_ions/avg_dens_mp_ions_mean, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time_fast, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])            
                #plt.semilogy(time_fast, avg_dens_mp_neus/avg_dens_mp_neus_mean, linestyle='--', linewidth = line_width, markevery=marker_every_time_fast, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label="")            

        if plot_Nmp == 1:
            # Plot the time evolution of the ions 1 number of particles
            plt.figure(r'Nmpi1(t)')
            if time2steps_axis == 1:
                plt.plot(steps_fast, num_mp_ions[:,0], linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time_fast, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            else:
                plt.plot(time_fast, num_mp_ions[:,0], linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time_fast, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            # Plot the time evolution of the ions 2 number of particles
            plt.figure(r'Nmpi2(t)')
            if time2steps_axis == 1:
                plt.plot(steps_fast, num_mp_ions[:,1], linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time_fast, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            else:
                plt.plot(time_fast, num_mp_ions[:,1], linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time_fast, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            # Plot the time evolution of the total ion number of particles
            plt.figure(r'Nmpitot(t)')
            if time2steps_axis == 1:
                plt.plot(steps_fast, tot_num_mp_ions, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time_fast, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            else:
                plt.plot(time_fast, tot_num_mp_ions, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time_fast, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            # Plot the time evolution of the neutral number of particles
            plt.figure(r'Nmpn(t)')
            if time2steps_axis == 1:
                plt.plot(steps_fast, tot_num_mp_neus, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time_fast, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            else:
                plt.plot(time_fast, tot_num_mp_neus, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time_fast, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
        if plot_eff == 1:
            # Plot the time evolution of the utilization efficiency
            plt.figure(r'eta_u(t)')
            if time2steps_axis == 1 and prntstepsID_axis == 0:
                plt.semilogy(steps, eta_u, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            elif time2steps_axis == 1 and prntstepsID_axis == 1:    
                plt.semilogy(prntsteps_ID, eta_u, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            else:
                plt.semilogy(time, eta_u, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[k], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            # Plot the time evolution of the production efficiency
            plt.figure(r'eta_prod(t)')
            if time2steps_axis == 1 and prntstepsID_axis == 0:
                plt.semilogy(steps, eta_prod, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            elif time2steps_axis == 1 and prntstepsID_axis == 1:  
                plt.semilogy(prntsteps_ID, eta_prod, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            else:
                plt.semilogy(time, eta_prod, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            # Plot the time evolution of the current efficiency
            plt.figure(r'eta_cur(t)')
            if time2steps_axis == 1 and prntstepsID_axis == 0:
                plt.semilogy(steps, eta_cur, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            elif time2steps_axis == 1 and prntstepsID_axis == 1:  
                plt.semilogy(prntsteps_ID, eta_cur, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            else:
                plt.semilogy(time, eta_cur, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
#                plt.semilogy(time[nsteps-last_steps::], eta_cur_mean*np.ones(np.shape(time[nsteps-last_steps::])), linestyle=linestyles[ind3], linewidth = line_width-1, markevery=marker_every_time, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")              
            # Plot the time evolution of the divergence efficiency
            plt.figure(r'eta_div(t)')
            if time2steps_axis == 1 and prntstepsID_axis == 0:
                plt.semilogy(steps, eta_div, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            elif time2steps_axis == 1 and prntstepsID_axis == 1:  
                plt.semilogy(prntsteps_ID, eta_div, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            else:
                plt.semilogy(time, eta_div, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            # Plot the time evolution of the thrust efficiency
            plt.figure(r'eta_thr(t)')
            if time2steps_axis == 1 and prntstepsID_axis == 0:
                plt.semilogy(steps, eta_thr, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            elif time2steps_axis == 1 and prntstepsID_axis == 1:  
                plt.semilogy(prntsteps_ID, eta_thr, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            else:
                plt.semilogy(time, eta_thr, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[k], color=colors[ind], markeredgecolor = 'k', label=labels[k])
        if plot_thr == 1:
            # Plot the time evolution of the total thrust
            plt.figure(r'T(t)')
            if time2steps_axis == 1 and prntstepsID_axis == 0:
                plt.plot(steps, thrust, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            elif time2steps_axis == 1 and prntstepsID_axis == 1:  
                plt.plot(prntsteps_ID, thrust, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            else:
                plt.semilogy(time, thrust, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[k], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            
            # Plot the time evolution of the ions 1 thrust
            plt.figure(r'Ti1(t)')
            if time2steps_axis == 1 and prntstepsID_axis == 0:
                plt.plot(steps, thrust_ion[:,0], linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            elif time2steps_axis == 1 and prntstepsID_axis == 1:  
                plt.plot(prntsteps_ID, thrust_ion[:,0], linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            else:
                plt.plot(time, thrust_ion[:,0], linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            # Plot the time evolution of the ions 2 thrust
            plt.figure(r'Ti2(t)')
            if time2steps_axis == 1 and prntstepsID_axis == 0:
                plt.plot(steps, thrust_ion[:,1], linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            elif time2steps_axis == 1 and prntstepsID_axis == 1:  
                plt.plot(prntsteps_ID, thrust_ion[:,1], linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            else:
                plt.plot(time, thrust_ion[:,1], linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            # Plot the time evolution of the neutral thrust
            plt.figure(r'Tn(t)')
            if time2steps_axis == 1 and prntstepsID_axis == 0:
                plt.plot(steps, thrust_neu, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            elif time2steps_axis == 1 and prntstepsID_axis == 1:  
                plt.plot(prntsteps_ID, thrust_neu, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            else:
                plt.plot(time, thrust_neu, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
        if plot_Te == 1:
            # Plot the time evolution of the average Te in the domain
            plt.figure(r'Te(t)')
            if time2steps_axis == 1 and prntstepsID_axis == 0:
                plt.semilogy(steps, Te_mean_dom, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            elif time2steps_axis == 1 and prntstepsID_axis == 1:  
                plt.semilogy(prntsteps_ID, Te_mean_dom, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                for i in range(0,len(prntstep_IDs)):
                    plt.semilogy(prntstep_IDs[i], Te_mean_dom[prntstep_IDs[i]], linestyle='-', linewidth = line_width, markevery=marker_every_time, markersize=marker_size_ID, marker='s', color=colors[ind], markeredgecolor = 'k', label="")
            else:
                plt.semilogy(time, Te_mean_dom, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            # Plot the FFT plot for the average Te in the domain
            plt.figure(r'FFT Te(t)')
            plt.semilogx(freq_Te_mean_dom[1:], np.abs(fft_Te_mean_dom[1:]), linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_FFT, markersize=marker_size, marker=markers[k], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            # Plot the time evolution of both the normalized Id and Te_mean_dom            
            plt.figure(r'Te_Id(t)')
            if time2steps_axis == 1 and prntstepsID_axis == 0:
                plt.semilogy(steps, Te_mean_dom/Te_mean_dom_mean, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                plt.semilogy(steps, Id/Id_mean, linestyle='--', linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label="")    
                for i in range(0,len(prntstep_IDs)):                
#                    plt.text(steps[prntstep_IDs[i]-plot_tol], Id[prntstep_IDs[i]-plot_tol],prntstep_IDs_text[i],fontsize = text_size,color='k',ha='center',va='center',bbox=props)          
                    plt.text(steps[prntstep_IDs[i]-plot_tol], Te_mean_dom[prntstep_IDs[i]-plot_tol]/Te_mean_dom_mean,prntstep_IDs_text[i],fontsize = text_size,color='r',ha='center',va='center')             
            elif time2steps_axis == 1 and prntstepsID_axis == 1:  
                plt.semilogy(prntsteps_ID, Te_mean_dom/Te_mean_dom_mean, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                plt.semilogy(prntsteps_ID, Id/Id_mean, linestyle='--', linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label="")
                plt.text(time[prntstep_IDs[i]-plot_tol], Te_mean_dom[prntstep_IDs[i]-plot_tol]/Te_mean_dom_mean,prntstep_IDs_text[i],fontsize = text_size,color='k',ha='center',va='center',bbox=props)
                for i in range(0,len(prntstep_IDs)):
                    plt.semilogy(prntstep_IDs[i], Te_mean_dom[prntstep_IDs[i]]/Te_mean_dom_mean, linestyle='-', linewidth = line_width, markevery=marker_every_time, markersize=marker_size_ID, marker='s', color=colors[ind], markeredgecolor = 'k', label="")
                    plt.semilogy(prntstep_IDs[i], Id[prntstep_IDs[i]]/Id_mean, linestyle='-', linewidth = line_width, markevery=marker_every_time, markersize=marker_size_ID, marker='s', color=colors[ind], markeredgecolor = 'k', label="")
            else:
                plt.semilogy(time, Te_mean_dom/Te_mean_dom_mean, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                plt.semilogy(time, Id/Id_mean, linestyle='--', linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label="")  
                for i in range(0,len(prntstep_IDs)):
                    plt.semilogy(time[prntstep_IDs[i]], Te_mean_dom[prntstep_IDs[i]]/Te_mean_dom_mean, linestyle='-', linewidth = line_width, markevery=marker_every_time, markersize=marker_size_ID, marker=prntstep_IDs_markers[i], color=prntstep_IDs_colors[i], markeredgecolor = 'k', label="")            
#                    plt.text(time[prntstep_IDs[i]-plot_tol], Id[prntstep_IDs[i]-plot_tol],prntstep_IDs_text[i],fontsize = text_size,color='k',ha='center',va='center',bbox=props)
                    plt.text(fact_x[i]*time[prntstep_IDs[i]-plot_tol], fact_y[i]*Te_mean_dom[prntstep_IDs[i]-plot_tol]/Te_mean_dom_mean,prntstep_IDs_text[i],fontsize = text_size,color=prntstep_IDs_colors[i],ha='center',va='center')                
#                plt.semilogy(time, Id_mean*np.ones(np.shape(time)), linestyle=':', linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label="")            

        if plot_Id == 1:
            # Plot the time evolution of the discharge current
            plt.figure(r'Id(t)')
            if time2steps_axis == 1 and prntstepsID_axis == 0:
                plt.semilogy(steps, Id, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                plt.semilogy(steps, Id_mean*np.ones(np.shape(steps)), linestyle=linestyles[ind3], linewidth = line_width-0.5, markevery=marker_every_time, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")
                for i in range(0,len(prntstep_IDs)): 
                    plt.semilogy(steps[prntstep_IDs[i]], Id[prntstep_IDs[i]], linestyle='-', linewidth = line_width, markevery=marker_every_time, markersize=marker_size_ID, marker='s', color='r', markeredgecolor = 'k', label="")
#                    plt.text(steps[prntstep_IDs[i]-plot_tol], Id[prntstep_IDs[i]-plot_tol],prntstep_IDs_text[i],fontsize = text_size,color='k',ha='center',va='center',bbox=props)            
                    plt.text(steps[prntstep_IDs[i]-plot_tol], Id[prntstep_IDs[i]-plot_tol],prntstep_IDs_text[i],fontsize = text_size,color='r',ha='center',va='center')            
            elif time2steps_axis == 1 and prntstepsID_axis == 1:  
                plt.semilogy(prntsteps_ID, Id, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                plt.semilogy(prntsteps_ID, Id_mean*np.ones(np.shape(prntsteps_ID)), linestyle=linestyles[ind3], linewidth = line_width-0.5, markevery=marker_every_time, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")
                for i in range(0,len(prntstep_IDs)):
                    plt.semilogy(prntstep_IDs[i], Id[prntstep_IDs[i]], linestyle='-', linewidth = line_width, markevery=marker_every_time, markersize=marker_size_ID, marker='s', color='r', markeredgecolor = 'k', label="")
#                    plt.text(prntstep_IDs[i]+plot_tol, Id[prntstep_IDs[i]],prntstep_IDs_text[i],fontsize = text_size,color='k',ha='center',va='center',bbox=props)
                    plt.text(prntstep_IDs[i]+plot_tol, Id[prntstep_IDs[i]],prntstep_IDs_text[i],fontsize = text_size,color='r',ha='center',va='center')
            else:
                plt.semilogy(time[1::], Id[1::], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[k], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                # plt.plot(time[1::], Id[1::], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[k], color=colors[ind], markeredgecolor = 'k', label=labels[k])

#                if k == 0 or k == 1:
#                    plt.semilogy(time, Id, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[k], color=colors[ind], markeredgecolor = 'k', label=labels[k])
#                elif k == 2 or k == 3:
#                    plt.semilogy(time, Id, linestyle=linestyles[k], dashes=dashList[k], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[k], color=colors[ind], markeredgecolor = 'k', label=labels[k])

#                plt.semilogy(time, Id_mean*np.ones(np.shape(time)), linestyle=linestyles[ind3], linewidth = line_width-0.5, markevery=marker_every_time, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")              
#                plt.semilogy(time[nsteps-last_steps::], Id_mean*np.ones(np.shape(time[nsteps-last_steps::])), linestyle=linestyles[ind3], linewidth = line_width-0.5, markevery=marker_every_time, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")                              
                for i in range(0,len(prntstep_IDs)):
                    plt.semilogy(time[prntstep_IDs[i]], Id[prntstep_IDs[i]], linestyle='-', linewidth = line_width, markevery=marker_every_time, markersize=marker_size_ID, marker='s', color='r', markeredgecolor = 'k', label="")            
#                    plt.text(time[prntstep_IDs[i]-plot_tol], Id[prntstep_IDs[i]-plot_tol],prntstep_IDs_text[i],fontsize = text_size,color='k',ha='center',va='center',bbox=props)
                    plt.text(time[prntstep_IDs[i]-plot_tol], Id[prntstep_IDs[i]-plot_tol],prntstep_IDs_text[i],fontsize = text_size,color='r',ha='center',va='center')
                
            # Plot the time evolution of the instantaneous discharge current
            plt.figure(r'Id_inst(t)')
            if time2steps_axis == 1 and prntstepsID_axis == 0:
                plt.semilogy(steps, Id_inst, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            elif time2steps_axis == 1 and prntstepsID_axis == 1:  
                plt.semilogy(prntsteps_ID, Id_inst, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                for i in range(0,len(prntstep_IDs)):
                    plt.semilogy(prntstep_IDs[i], Id_inst[prntstep_IDs[i]], linestyle='-', linewidth = line_width, markevery=marker_every_time, markersize=marker_size_ID, marker='s', color=colors[ind], markeredgecolor = 'k', label="")
            else:
#                plt.semilogy(time, Id_inst, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
#                plt.semilogy(time[nsteps-last_steps::], Id_mean*np.ones(np.shape(time[nsteps-last_steps::])), linestyle=linestyles[ind3], linewidth = line_width-0.5, markevery=marker_every_time, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")                          

                plt.plot(time, Id_inst, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                plt.plot(time[nsteps-last_steps::], Id_mean*np.ones(np.shape(time[nsteps-last_steps::])), linestyle=linestyles[ind3], linewidth = line_width-0.5, markevery=marker_every_time, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")                          

            # Plot the FFT plot for the discharge current  
            if make_mean == 1:           
                plt.figure(r'FFT Id(t)')
#                plt.semilogx(freq_Id[1:], np.abs(fft_Id[1:]), linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                plt.semilogx(freq_Id[1:], np.abs(fft_Id[1:]), linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_FFT, markersize=marker_size, marker=markers[k], color=colors[ind], markeredgecolor = 'k', label=labels[k])
    
                # Plot the FFT plot for the instantaneous discharge current
                plt.figure(r'FFT Id_inst(t)')
                plt.semilogx(freq_Id_inst[1:], np.abs(fft_Id_inst[1:]), linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            # Plot the time evolution of the ion beam current
            plt.figure(r'I_beam(t)')
            if time2steps_axis == 1 and prntstepsID_axis == 0:
                plt.semilogy(steps, I_beam, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                plt.semilogy(steps, I_beam_mean*np.ones(np.shape(steps)), linestyle=linestyles[ind3], linewidth = line_width-0.5, markevery=marker_every_time, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")
            elif time2steps_axis == 1 and prntstepsID_axis == 1:  
                plt.semilogy(prntsteps_ID, I_beam, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                plt.semilogy(prntsteps_ID, I_beam_mean*np.ones(np.shape(prntsteps_ID)), linestyle=linestyles[ind3], linewidth = line_width-1, markevery=marker_every_time, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")
                for i in range(0,len(prntstep_IDs)):
                    plt.semilogy(prntstep_IDs[i], I_beam[prntstep_IDs[i]], linestyle='-', linewidth = line_width, markevery=marker_every_time, markersize=marker_size_ID, marker='s', color=colors[ind], markeredgecolor = 'k', label="")
            else:
                plt.semilogy(time[1::], I_beam[1::], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
#                plt.semilogy(time, I_beam_mean*np.ones(np.shape(time)), linestyle=linestyles[ind3], linewidth = line_width-0.5, markevery=marker_every_time, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")
                # plt.plot(time[1::], I_beam[1::], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if make_mean == 1:
                # Plot the FFT plot for the ion beam current            
                plt.figure(r'FFT I_beam(t)')
                plt.semilogx(freq_I_beam[1:], np.abs(fft_I_beam[1:]), linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            # Plot the time evolution of both the discharge and the beam current            
            plt.figure(r'Id_Ibeam(t)')
            if time2steps_axis == 1 and prntstepsID_axis == 0:
                plt.semilogy(steps, Id, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                plt.semilogy(steps, I_beam, linestyle='--', linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label="")    
                for i in range(0,len(prntstep_IDs)):                
#                    plt.text(steps[prntstep_IDs[i]-plot_tol], Id[prntstep_IDs[i]-plot_tol],prntstep_IDs_text[i],fontsize = text_size,color='k',ha='center',va='center',bbox=props)          
                    plt.text(steps[prntstep_IDs[i]-plot_tol], Id[prntstep_IDs[i]-plot_tol],prntstep_IDs_text[i],fontsize = text_size,color='r',ha='center',va='center')             
            elif time2steps_axis == 1 and prntstepsID_axis == 1:  
                plt.semilogy(prntsteps_ID, Id, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                plt.semilogy(prntsteps_ID, I_beam, linestyle='--', linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label="")
                plt.text(time[prntstep_IDs[i]-plot_tol], Id[prntstep_IDs[i]-plot_tol],prntstep_IDs_text[i],fontsize = text_size,color='k',ha='center',va='center',bbox=props)
                for i in range(0,len(prntstep_IDs)):
                    plt.semilogy(prntstep_IDs[i], Id[prntstep_IDs[i]], linestyle='-', linewidth = line_width, markevery=marker_every_time, markersize=marker_size_ID, marker='s', color=colors[ind], markeredgecolor = 'k', label="")
                    plt.semilogy(prntstep_IDs[i], I_beam[prntstep_IDs[i]], linestyle='-', linewidth = line_width, markevery=marker_every_time, markersize=marker_size_ID, marker='s', color=colors[ind], markeredgecolor = 'k', label="")
            else:
                plt.semilogy(time[1::], Id[1::], linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                plt.semilogy(time[1::], I_beam[1::], linestyle='--', linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label="")  
                for i in range(0,len(prntstep_IDs)):
                    plt.semilogy(time[prntstep_IDs[i]], Id[prntstep_IDs[i]], linestyle='-', linewidth = line_width, markevery=marker_every_time, markersize=marker_size_ID, marker=prntstep_IDs_markers[i], color=prntstep_IDs_colors[i], markeredgecolor = 'k', label="")            
#                    plt.text(time[prntstep_IDs[i]-plot_tol], Id[prntstep_IDs[i]-plot_tol],prntstep_IDs_text[i],fontsize = text_size,color='k',ha='center',va='center',bbox=props)
                    plt.text(fact_x[i]*time[prntstep_IDs[i]-plot_tol], fact_y[i]*Id[prntstep_IDs[i]-plot_tol],prntstep_IDs_text[i],fontsize = text_size,color=prntstep_IDs_colors[i],ha='center',va='center')                
                plt.semilogy(time, Id_mean*np.ones(np.shape(time)), linestyle=':', linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label="")            
            # Plot the FFT plot for both the discharge and the ion beam current
            plt.figure(r'FFT Id_Ibeam(t)')       
            plt.semilogx(freq_Id[1:], np.abs(fft_Id[1:]), linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.semilogx(freq_I_beam[1:], np.abs(fft_I_beam[1:]), linestyle='--', linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label="")        
            # Plot the time evolution of both the discharge and the beam current (normalized)            
            plt.figure(r'norm_Id_Ibeam(t)')     
            if time2steps_axis == 1 and prntstepsID_axis == 0:
                plt.semilogy(steps, Id/Id_mean, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                plt.semilogy(steps, I_beam/I_beam_mean, linestyle='--', linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label="")    
                for i in range(0,len(prntstep_IDs)):                
#                    plt.text(steps[prntstep_IDs[i]-plot_tol], Id[prntstep_IDs[i]-plot_tol],prntstep_IDs_text[i],fontsize = text_size,color='k',ha='center',va='center',bbox=props)          
                    plt.text(steps[prntstep_IDs[i]-plot_tol], Id[prntstep_IDs[i]-plot_tol]/Id_mean,prntstep_IDs_text[i],fontsize = text_size,color='r',ha='center',va='center')             
            elif time2steps_axis == 1 and prntstepsID_axis == 1:  
                plt.semilogy(prntsteps_ID, Id/Id_mean, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                plt.semilogy(prntsteps_ID, I_beam/I_beam_mean, linestyle='--', linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label="")
                plt.text(time[prntstep_IDs[i]-plot_tol], Id[prntstep_IDs[i]-plot_tol]/Id_mean,prntstep_IDs_text[i],fontsize = text_size,color='k',ha='center',va='center',bbox=props)
                for i in range(0,len(prntstep_IDs)):
                    plt.semilogy(prntstep_IDs[i], Id[prntstep_IDs[i]]/Id_mean, linestyle='-', linewidth = line_width, markevery=marker_every_time, markersize=marker_size_ID, marker='s', color=colors[ind], markeredgecolor = 'k', label="")
                    plt.semilogy(prntstep_IDs[i], I_beam[prntstep_IDs[i]]/I_beam_mean, linestyle='-', linewidth = line_width, markevery=marker_every_time, markersize=marker_size_ID, marker='s', color=colors[ind], markeredgecolor = 'k', label="")
            else:
                plt.semilogy(time, Id/Id_mean, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                plt.semilogy(time, I_beam/I_beam_mean, linestyle='--', linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label="")  
                for i in range(0,len(prntstep_IDs)):
                    plt.semilogy(time[prntstep_IDs[i]], Id[prntstep_IDs[i]], linestyle='-', linewidth = line_width, markevery=marker_every_time, markersize=marker_size_ID, marker=prntstep_IDs_markers[i], color=prntstep_IDs_colors[i], markeredgecolor = 'k', label="")            
#                    plt.text(time[prntstep_IDs[i]-plot_tol], Id[prntstep_IDs[i]-plot_tol],prntstep_IDs_text[i],fontsize = text_size,color='k',ha='center',va='center',bbox=props)
                    plt.text(fact_x[i]*time[prntstep_IDs[i]-plot_tol], fact_y[i]*Id[prntstep_IDs[i]-plot_tol]/Id_mean,prntstep_IDs_text[i],fontsize = text_size,color=prntstep_IDs_colors[i],ha='center',va='center')                
                plt.semilogy(time, Id_mean*np.ones(np.shape(time))/Id_mean, linestyle=':', linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label="")            
        
            # Plot the time evolution of the cathode current
            plt.figure(r'Icath(t)')
            if np.any(Icath != 0):
                if time2steps_axis == 1 and prntstepsID_axis == 0:
                    plt.semilogy(steps, Icath, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                    plt.semilogy(steps, Icath_mean*np.ones(np.shape(steps)), linestyle=linestyles[ind3], linewidth = line_width-0.5, markevery=marker_every_time, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")
                elif time2steps_axis == 1 and prntstepsID_axis == 1:  
                    plt.semilogy(prntsteps_ID, Icath, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                    plt.semilogy(prntsteps_ID, Icath_mean*np.ones(np.shape(prntsteps_ID)), linestyle=linestyles[ind3], linewidth = line_width-1, markevery=marker_every_time, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")
                    for i in range(0,len(prntstep_IDs)):
                        plt.semilogy(prntstep_IDs[i], Icath[prntstep_IDs[i]], linestyle='-', linewidth = line_width, markevery=marker_every_time, markersize=marker_size_ID, marker='s', color=colors[ind], markeredgecolor = 'k', label="")
                else:
                    plt.plot(time[1::], Icath[1::], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
#                    plt.semilogy(time, Icath, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
    #                plt.semilogy(time, Icath_mean*np.ones(np.shape(time)), linestyle=linestyles[ind3], linewidth = line_width-0.5, markevery=marker_every_time, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")
                if make_mean == 1:
                    # Plot the FFT plot for the cathode current            
                    plt.figure(r'FFT Icath(t)')
                    plt.semilogx(freq_Icath[1:], np.abs(fft_Icath[1:]), linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            
            # Plot the time evolution of the conducting wall current
            plt.figure(r'Icond(t)')
            if n_cond_wall > 0:
                if time2steps_axis == 1 and prntstepsID_axis == 0:
                    plt.semilogy(steps, Icond, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                    plt.semilogy(steps, Icond_mean*np.ones(np.shape(steps)), linestyle=linestyles[ind3], linewidth = line_width-0.5, markevery=marker_every_time, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")
                elif time2steps_axis == 1 and prntstepsID_axis == 1:  
                    plt.semilogy(prntsteps_ID, Icond, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                    plt.semilogy(prntsteps_ID, Icond_mean*np.ones(np.shape(prntsteps_ID)), linestyle=linestyles[ind3], linewidth = line_width-1, markevery=marker_every_time, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")
                    for i in range(0,len(prntstep_IDs)):
                        plt.semilogy(prntstep_IDs[i], Icond[prntstep_IDs[i]], linestyle='-', linewidth = line_width, markevery=marker_every_time, markersize=marker_size_ID, marker='s', color=colors[ind], markeredgecolor = 'k', label="")
                else:
                    plt.semilogy(time[1::], Icond[1::,0], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
    #                plt.semilogy(time, Icond_mean*np.ones(np.shape(time)), linestyle=linestyles[ind3], linewidth = line_width-0.5, markevery=marker_every_time, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")
                if make_mean == 1:
                    # Plot the FFT plot for the conducting wall current            
                    plt.figure(r'FFT Icond(t)')
                    plt.semilogx(freq_Icond[1:], np.abs(fft_Icond[1:]), linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            
            # Plot the time evolution of the error in currents of the external circuit
            plt.figure(r'err_I(t)')
            if np.any(err_I != 0):
                if time2steps_axis == 1 and prntstepsID_axis == 0:
                    plt.semilogy(steps, err_I, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                elif time2steps_axis == 1 and prntstepsID_axis == 1:  
                    plt.semilogy(prntsteps_ID, err_I, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                    for i in range(0,len(prntstep_IDs)):
                        plt.semilogy(prntstep_IDs[i], err_I[prntstep_IDs[i]], linestyle='-', linewidth = line_width, markevery=marker_every_time, markersize=marker_size_ID, marker='s', color=colors[ind], markeredgecolor = 'k', label="")
                else:
                    plt.semilogy(time, err_I, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])

            # Plot the time evolution of the conducting wall current
            plt.figure(r'Icond+Id(t)')
            if n_cond_wall > 0:
                if time2steps_axis == 1 and prntstepsID_axis == 0:
                    plt.semilogy(steps, Icond+Id, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                elif time2steps_axis == 1 and prntstepsID_axis == 1:  
                    plt.semilogy(prntsteps_ID, Icond+Id, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                    for i in range(0,len(prntstep_IDs)):
                        plt.semilogy(prntstep_IDs[i], Icond[prntstep_IDs[i]]+Id[prntstep_IDs[i]], linestyle='-', linewidth = line_width, markevery=marker_every_time, markersize=marker_size_ID, marker='s', color=colors[ind], markeredgecolor = 'k', label="")
                else:
                    plt.semilogy(time, Icond[:,0]+Id, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                    plt.semilogy(time, Icath, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind+1], markeredgecolor = 'k', label=labels[k])
   
            
        
        
        if plot_Vd == 1:
            # Plot the time evolution of the discharge voltage
            plt.figure(r'Vd(t)')
            if time2steps_axis == 1 and prntstepsID_axis == 0:
                plt.plot(steps, Vd, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            elif time2steps_axis == 1 and prntstepsID_axis == 1:  
                plt.plot(prntsteps_ID, Vd, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                for i in range(0,len(prntstep_IDs)):
                    plt.plot(prntstep_IDs[i], Vd[prntstep_IDs[i]], linestyle='-', linewidth = line_width, markevery=marker_every_time, markersize=marker_size_ID, marker='s', color=colors[ind], markeredgecolor = 'k', label="")
            else:
                plt.plot(time, Vd, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            
            # Plot the time evolution of the discharge voltage
            plt.figure(r'Vcond(t)')
            if np.any(Vcond != 0):
                if Vcond[1,0] != Vcond[2,0]:
                    if time2steps_axis == 1 and prntstepsID_axis == 0:
                        plt.plot(steps, Vcond, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                    elif time2steps_axis == 1 and prntstepsID_axis == 1:  
                        plt.plot(prntsteps_ID, Vcond, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                        for i in range(0,len(prntstep_IDs)):
                            plt.plot(prntstep_IDs[i], Vd[prntstep_IDs[i]], linestyle='-', linewidth = line_width, markevery=marker_every_time, markersize=marker_size_ID, marker='s', color=colors[ind], markeredgecolor = 'k', label="")
                    else:
                        plt.plot(time, Vcond, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                    # Plot the FFT plot for the discharge current  
                    if make_mean == 1:           
                        plt.figure(r'FFT Vcond(t)')
        #                plt.semilogx(freq_Vcond[1:], np.abs(fft_Vcond[1:]), linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                        plt.semilogx(freq_Vcond[1:], np.abs(fft_Vcond[1:]), linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_FFT, markersize=marker_size, marker=markers[k], color=colors[ind], markeredgecolor = 'k', label=labels[k])
        
        
        if plot_Pd == 1:
            # Plot the time evolution of the input power
            plt.figure(r'Pd(t)')
            if time2steps_axis == 1 and prntstepsID_axis == 0:
                plt.plot(steps, Pd*1e-3, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            elif time2steps_axis == 1 and prntstepsID_axis == 1:  
                plt.plot(prntsteps_ID, Pd*1e-3, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                for i in range(0,len(prntstep_IDs)):
                    plt.plot(prntstep_IDs[i], Pd[prntstep_IDs[i]], linestyle='-', linewidth = line_width, markevery=marker_every_time, markersize=marker_size_ID, marker='s', color=colors[ind], markeredgecolor = 'k', label="")
            else:
                plt.plot(time, Pd*1e-3, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            # Plot the time evolution of the power deposited to material (dielectric) walls
            plt.figure(r'P_mat(t)')
            if time2steps_axis == 1 and prntstepsID_axis == 0:
                plt.plot(steps, P_mat, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            elif time2steps_axis == 1 and prntstepsID_axis == 1:  
                plt.plot(prntsteps_ID, P_mat, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            else:
                plt.plot(time, P_mat, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            # Plot the time evolution of the power deposited to the injection (anode) wall
            plt.figure(r'P_inj(t)')
            if time2steps_axis == 1 and prntstepsID_axis == 0:
                plt.plot(steps, P_inj, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            elif time2steps_axis == 1 and prntstepsID_axis == 1:  
                plt.plot(prntsteps_ID, P_inj, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            else:
                plt.plot(time, P_inj, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            # Plot the time evolution of the power deposited to the free loss wall
            plt.figure(r'P_inf(t)')
            if time2steps_axis == 1 and prntstepsID_axis == 0:
                plt.plot(steps, P_inf, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            elif time2steps_axis == 1 and prntstepsID_axis == 1:  
                plt.plot(prntsteps_ID, P_inf, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            else:
                plt.plot(time, P_inf, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            # Plot the time evolution of the power spent in ionization
            plt.figure(r'P_ion(t)')
            if time2steps_axis == 1 and prntstepsID_axis == 0:
                plt.plot(steps, P_ion, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            elif time2steps_axis == 1 and prntstepsID_axis == 1:  
                plt.plot(prntsteps_ID, P_ion, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            else:
                plt.plot(time, P_ion, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            # Plot the time evolution of the power spent in excitation
            plt.figure(r'P_ex(t)')
            if time2steps_axis == 1 and prntstepsID_axis == 0:
                plt.plot(steps, P_ex, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            elif time2steps_axis == 1 and prntstepsID_axis == 1:  
                plt.plot(prntsteps_ID, P_ex, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            else:
                plt.plot(time, P_ex, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            # Plot the time evolution of the total ion and neutral power deposited to the free loss wall
            plt.figure(r'P_use_tot ion plus neu (t)')
            if time2steps_axis == 1 and prntstepsID_axis == 0:
                plt.plot(steps, P_use_tot, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            elif time2steps_axis == 1 and prntstepsID_axis == 1:  
                plt.plot(prntsteps_ID, P_use_tot, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            else:
                plt.plot(time, P_use_tot, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            # Plot the time evolution of the axial ion and neutral power deposited to the free loss wall
            plt.figure(r'P_use_z ion plus neu (t)')
            if time2steps_axis == 1 and prntstepsID_axis == 0:
                plt.plot(steps, P_use_z, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            elif time2steps_axis == 1 and prntstepsID_axis == 1:  
                plt.plot(prntsteps_ID, P_use_z, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            else:
                plt.plot(time, P_use_z, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            # Plot the time evolution of the power deposited to material (dielectric) walls by the heavy species
            plt.figure(r'P_mat_hs(t)')
            if time2steps_axis == 1 and prntstepsID_axis == 0:
                plt.plot(steps, P_mat_hs, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            elif time2steps_axis == 1 and prntstepsID_axis == 1:  
                plt.plot(prntsteps_ID, P_mat_hs, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            else:
                plt.plot(time, P_mat_hs, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            # Plot the time evolution of the power deposited to the injection (anode) wall by the heavy species
            plt.figure(r'P_inj_hs(t)')
            if time2steps_axis == 1 and prntstepsID_axis == 0:
                plt.plot(steps, P_inj_hs, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            elif time2steps_axis == 1 and prntstepsID_axis == 1:  
                plt.plot(prntsteps_ID, P_inj_hs, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            else:
                plt.plot(time, P_inj_hs, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            # Plot the time evolution of the power deposited to the injection (anode) wall faces by the electrons
            plt.figure(r'P_inj_faces_e(t)')        
        
        if plot_cath == 1:
            # Plot the time evolution of the cathode equivalent emission frequency
            plt.figure(r'nu_cat(t)')
            if time2steps_axis == 1 and prntstepsID_axis == 0:
                plt.semilogy(steps, nu_cath, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            elif time2steps_axis == 1 and prntstepsID_axis == 1:  
                plt.semilogy(prntsteps_ID, nu_cath, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            else:
                plt.semilogy(time, nu_cath, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            # Plot the time evolution of the cathode emission power
            plt.figure(r'P_cat(t)')
            if time2steps_axis == 1 and prntstepsID_axis == 0:
                plt.semilogy(steps, P_cath, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            elif time2steps_axis == 1 and prntstepsID_axis == 1:  
                plt.semilogy(prntsteps_ID, P_cath, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            else:
                plt.semilogy(time, P_cath, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            # Plot the FFT plot for the cathode equivalent emission frequency
            plt.figure(r'FFT nu_cat(t)')
            plt.semilogx(freq_nu_cath[1:], np.abs(fft_nu_cath[1:]), linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            # Plot the FFT plot for the cathode emission power
            plt.figure(r'FFT P_cat(t)')        
            plt.semilogx(freq_P_cath[1:], np.abs(fft_P_cath[1:]), linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
        
        if plot_mbal == 1:
            # Plot the time evolution of the neutrals 1 mass balance
            plt.figure("n1 mass bal")
            if time2steps_axis == 1 and prntstepsID_axis == 0:
                plt.plot(steps, mbal_n1, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k',label=labels[k])
                plt.plot(steps, dMdt_n1, linestyle='--', linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind+1], markeredgecolor = 'k',label=labels[k]+" dM/dt")
            elif time2steps_axis == 1 and prntstepsID_axis == 1:  
                plt.plot(prntsteps_ID, mbal_n1, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k',label=labels[k])
                plt.plot(prntsteps_ID, dMdt_n1, linestyle='--', linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind+1], markeredgecolor = 'k',label=labels[k]+" dM/dt")
            else:
                plt.plot(time, mbal_n1, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k',label=labels[k])
                plt.plot(time, dMdt_n1, linestyle='--', linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind+1], markeredgecolor = 'k',label=labels[k]+" dM/dt")
            # Plot the time evolution of the ions 1 mass balance
            plt.figure("i1 mass bal")
            if time2steps_axis == 1 and prntstepsID_axis == 0:
                plt.plot(steps, mbal_i1, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k',label=labels[k])
                plt.plot(steps, dMdt_i1, linestyle='--', linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind+1], markeredgecolor = 'k',label=labels[k]+" dM/dt")
            elif time2steps_axis == 1 and prntstepsID_axis == 1:  
                plt.plot(prntsteps_ID, mbal_i1, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k',label=labels[k])
                plt.plot(prntsteps_ID, dMdt_i1, linestyle='--', linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind+1], markeredgecolor = 'k',label=labels[k]+" dM/dt")
            else:
                plt.plot(time, mbal_i1, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k',label=labels[k])
                plt.plot(time, dMdt_i1, linestyle='--', linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind+1], markeredgecolor = 'k',label=labels[k]+" dM/dt")
            # Plot the time evolution of the ions 2 mass balance
            plt.figure("i2 mass bal")
            if time2steps_axis == 1 and prntstepsID_axis == 0:
                plt.plot(steps, mbal_i2, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k',label=labels[k])
                plt.plot(steps, dMdt_i2, linestyle='--', linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind+1], markeredgecolor = 'k',label=labels[k]+" dM/dt")
            elif time2steps_axis == 1 and prntstepsID_axis == 1:  
                plt.plot(prntsteps_ID, mbal_i2, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k',label=labels[k])
                plt.plot(prntsteps_ID, dMdt_i2, linestyle='--', linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind+1], markeredgecolor = 'k',label=labels[k]+" dM/dt")
            else:
                plt.plot(time, mbal_i2, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k',label=labels[k])
                plt.plot(time, dMdt_i2, linestyle='--', linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind+1], markeredgecolor = 'k',label=labels[k]+" dM/dt")
            # Plot the time evolution of the total mass balance
            plt.figure("Total mass bal")
            if time2steps_axis == 1 and prntstepsID_axis == 0:
                plt.plot(steps, mbal_n1 + mbal_i1 + mbal_i2, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k',label=labels[k])
                plt.plot(steps, dMdt_n1 + dMdt_i1 + dMdt_i2, linestyle='--', linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind+1], markeredgecolor = 'k',label=labels[k]+" dM/dt")
            elif time2steps_axis == 1 and prntstepsID_axis == 1:  
                plt.plot(prntsteps_ID, mbal_n1 + mbal_i1 + mbal_i2, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k',label=labels[k])
                plt.plot(prntsteps_ID, dMdt_n1 + dMdt_i1 + dMdt_i2, linestyle='--', linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind+1], markeredgecolor = 'k',label=labels[k]+" dM/dt")
            else:
                plt.plot(time, mbal_n1 + mbal_i1 + mbal_i2, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k',label=labels[k])
                plt.plot(time, dMdt_n1 + dMdt_i1 + dMdt_i2, linestyle='--', linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind+1], markeredgecolor = 'k',label=labels[k]+" dM/dt")
            # Plot the time evolution of the neutrals 1 mass balance error 
            plt.figure("err n1 mass bal")
            if time2steps_axis == 1 and prntstepsID_axis == 0:
                plt.semilogy(steps, err_mbal_n1, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k',label=labels[k])
            elif time2steps_axis == 1 and prntstepsID_axis == 1:  
                plt.semilogy(prntsteps_ID, err_mbal_n1, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k',label=labels[k])
            else:
                plt.semilogy(time, err_mbal_n1, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k',label=labels[k])
            # Plot the time evolution of the ions 1 mass balance error 
            plt.figure("err i1 mass bal")
            if time2steps_axis == 1 and prntstepsID_axis == 0:
                plt.semilogy(steps, err_mbal_i1, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k',label=labels[k])
            elif time2steps_axis == 1 and prntstepsID_axis == 1:  
                plt.semilogy(prntsteps_ID, err_mbal_i1, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k',label=labels[k])
            else:
                plt.semilogy(time, err_mbal_i1, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k',label=labels[k])
            # Plot the time evolution of the ions 2 mass balance error 
            plt.figure("err i2 mass bal")
            if time2steps_axis == 1 and prntstepsID_axis == 0:
                plt.semilogy(steps, err_mbal_i2, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k',label=labels[k])
            elif time2steps_axis == 1 and prntstepsID_axis == 1:  
                plt.semilogy(prntsteps_ID, err_mbal_i2, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k',label=labels[k])
            else:
                plt.semilogy(time, err_mbal_i2, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k',label=labels[k])
            # Plot the time evolution of the total mass balance error 
            plt.figure("err total mass bal")
            if time2steps_axis == 1 and prntstepsID_axis == 0:
                plt.semilogy(steps, err_mbal_tot, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k',label=labels[k])
            elif time2steps_axis == 1 and prntstepsID_axis == 1:  
                plt.semilogy(prntsteps_ID, err_mbal_tot, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k',label=labels[k])
            else:
                plt.semilogy(time, err_mbal_tot, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k',label=labels[k])
            
            if nsims == 1:
                # Plot the time evolution of the species and the total mass balance
                plt.figure("All mass bal")
                if time2steps_axis == 1 and prntstepsID_axis == 0:
                    plt.plot(steps, mbal_tot, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='k', markeredgecolor = 'k',label=r"Total")
                    plt.plot(steps, mbal_n1, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='r', markeredgecolor = 'k',label=r"$n1$")
                    plt.plot(steps, mbal_i1, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='g', markeredgecolor = 'k',label=r"$i1$")
                    plt.plot(steps, mbal_i2, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='b', markeredgecolor = 'k',label=r"$i2$")                    
                elif time2steps_axis == 1 and prntstepsID_axis == 1: 
                    plt.plot(prntsteps_ID, mbal_tot, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='k', markeredgecolor = 'k',label=r"Total")
                    plt.plot(prntsteps_ID, mbal_n1, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='r', markeredgecolor = 'k',label=r"$n1$")
                    plt.plot(prntsteps_ID, mbal_i1, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='g', markeredgecolor = 'k',label=r"$i1$")
                    plt.plot(prntsteps_ID, mbal_i2, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='b', markeredgecolor = 'k',label=r"$i2$")    
                else:
                    plt.plot(time, mbal_tot, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='k', markeredgecolor = 'k',label=r"Total")
                    plt.plot(time, mbal_n1, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='r', markeredgecolor = 'k',label=r"$n1$")
                    plt.plot(time, mbal_i1, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='g', markeredgecolor = 'k',label=r"$i1$")
                    plt.plot(time, mbal_i2, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='b', markeredgecolor = 'k',label=r"$i2$")    
                # Plot the time evolution of the species and the total mass balance errors
                plt.figure("All err mass bal")
                if time2steps_axis == 1 and prntstepsID_axis == 0:
                    plt.semilogy(steps, err_mbal_tot, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='k', markeredgecolor = 'k',label=r"\epsilon_{M}")
                    plt.semilogy(steps, err_mbal_n1, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='r', markeredgecolor = 'k',label=r"$\epsilon_{M,n1}$")
                    plt.semilogy(steps, err_mbal_i1, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='g', markeredgecolor = 'k',label=r"$\epsilon_{M,i1}$")
                    plt.semilogy(steps, err_mbal_i2, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='b', markeredgecolor = 'k',label=r"$\epsilon_{M,i2}$")                    
                elif time2steps_axis == 1 and prntstepsID_axis == 1: 
                    plt.semilogy(prntsteps_ID, err_mbal_tot, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='k', markeredgecolor = 'k',label=r"\epsilon_{M}")
                    plt.semilogy(prntsteps_ID, err_mbal_n1, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='r', markeredgecolor = 'k',label=r"$\epsilon_{M,n1}$")
                    plt.semilogy(prntsteps_ID, err_mbal_i1, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='g', markeredgecolor = 'k',label=r"$\epsilon_{M,i1}$")
                    plt.semilogy(prntsteps_ID, err_mbal_i2, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='b', markeredgecolor = 'k',label=r"$\epsilon_{M,i2}$")    
                else:
                    plt.semilogy(time, err_mbal_tot, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='k', markeredgecolor = 'k',label=r"\epsilon_{M}")
                    plt.semilogy(time, err_mbal_n1, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='r', markeredgecolor = 'k',label=r"$\epsilon_{M,n1}$")
                    plt.semilogy(time, err_mbal_i1, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='g', markeredgecolor = 'k',label=r"$\epsilon_{M,i1}$")
                    plt.semilogy(time, err_mbal_i2, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='b', markeredgecolor = 'k',label=r"$\epsilon_{M,i2}$") 
                # Plot the time evolution of the contributions to the total mass balance
                plt.figure("Contributions on total mass bal")
                if time2steps_axis == 1 and prntstepsID_axis == 0:
#                    plt.plot(steps, ctr_mflow_coll_tot, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='r', markeredgecolor = 'k',label=r"$\varepsilon_{M}^{coll}$")
                    plt.plot(steps, ctr_mflow_tw_tot, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='g', markeredgecolor = 'k',label=r"$\varepsilon_{M}^{tw}$")
                    plt.plot(steps, ctr_mflow_fw_tot, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='b', markeredgecolor = 'k',label=r"$\varepsilon_{M}^{fw}$")                    
                elif time2steps_axis == 1 and prntstepsID_axis == 1:  
#                    plt.plot(prntsteps_ID, ctr_mflow_coll_tot, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='r', markeredgecolor = 'k',label=r"$\varepsilon_{M}^{coll}$")
                    plt.plot(prntsteps_ID, ctr_mflow_tw_tot, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='g', markeredgecolor = 'k',label=r"$\varepsilon_{M}^{tw}$")
                    plt.plot(prntsteps_ID, ctr_mflow_fw_tot, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='b', markeredgecolor = 'k',label=r"$\varepsilon_{M}^{fw}$") 
                else:
#                    plt.plot(time, ctr_mflow_coll_tot, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='r', markeredgecolor = 'k',label=r"$\varepsilon_{M}^{coll}$")
                    plt.plot(time, ctr_mflow_tw_tot, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='g', markeredgecolor = 'k',label=r"$\varepsilon_{M}^{tw}$")
                    plt.plot(time, ctr_mflow_fw_tot, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='b', markeredgecolor = 'k',label=r"$\varepsilon_{M}^{fw}$")                    
                # Plot the time evolution of the contributions to the n1 mass balance
                plt.figure("Contributions on n1 mass bal")
                if time2steps_axis == 1 and prntstepsID_axis == 0:
                    plt.plot(steps, ctr_mflow_coll_n1, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='r', markeredgecolor = 'k',label=r"$\varepsilon_{M,n1}^{coll}$")
                    plt.plot(steps, ctr_mflow_tw_n1, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='g', markeredgecolor = 'k',label=r"$\varepsilon_{M,n1}^{tw}$")
                    plt.plot(steps, ctr_mflow_fw_n1, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='b', markeredgecolor = 'k',label=r"$\varepsilon_{M,n1}^{fw}$")                    
                elif time2steps_axis == 1 and prntstepsID_axis == 1:  
                    plt.plot(prntsteps_ID, ctr_mflow_coll_n1, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='r', markeredgecolor = 'k',label=r"$\varepsilon_{M,n1}^{coll}$")
                    plt.plot(prntsteps_ID, ctr_mflow_tw_n1, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='g', markeredgecolor = 'k',label=r"$\varepsilon_{M,n1}^{tw}$")
                    plt.plot(prntsteps_ID, ctr_mflow_fw_n1, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='b', markeredgecolor = 'k',label=r"$\varepsilon_{M,n1}^{fw}$") 
                else:
                    plt.plot(time, ctr_mflow_coll_n1, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='r', markeredgecolor = 'k',label=r"$\varepsilon_{M,n1}^{coll}$")
                    plt.plot(time, ctr_mflow_tw_n1, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='g', markeredgecolor = 'k',label=r"$\varepsilon_{M,n1}^{tw}$")
                    plt.plot(time, ctr_mflow_fw_n1, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='b', markeredgecolor = 'k',label=r"$\varepsilon_{M,n1}^{fw}$")                    
                # Plot the time evolution of the contributions to the i1 mass balance
                plt.figure("Contributions on i1 mass bal")
                if time2steps_axis == 1 and prntstepsID_axis == 0:
                    plt.plot(steps, ctr_mflow_coll_i1, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='r', markeredgecolor = 'k',label=r"$\varepsilon_{M,i1}^{coll}$")
                    plt.plot(steps, ctr_mflow_tw_i1, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='g', markeredgecolor = 'k',label=r"$\varepsilon_{M,i1}^{tw}$")
#                    plt.plot(steps, ctr_mflow_fw_i1, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k',label=r"$\varepsilon_{M,i1}^{fw}$")                    
                elif time2steps_axis == 1 and prntstepsID_axis == 1:  
                    plt.plot(prntsteps_ID, ctr_mflow_coll_i1, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='r', markeredgecolor = 'k',label=r"$\varepsilon_{M,i1}^{coll}$")
                    plt.plot(prntsteps_ID, ctr_mflow_tw_i1, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='g', markeredgecolor = 'k',label=r"$\varepsilon_{M,i1}^{tw}$")
#                    plt.plot(prntsteps_ID, ctr_mflow_fw_i1, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='b', markeredgecolor = 'k',label=r"$\varepsilon_{M,i1}^{fw}$") 
                else:
                    plt.plot(time, ctr_mflow_coll_i1, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='r', markeredgecolor = 'k',label=r"$\varepsilon_{M,i1}^{coll}$")
                    plt.plot(time, ctr_mflow_tw_i1, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='g', markeredgecolor = 'k',label=r"$\varepsilon_{M,i1}^{tw}$")
#                    plt.plot(time, ctr_mflow_fw_i1, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='b', markeredgecolor = 'k',label=r"$\varepsilon_{M,i1}^{fw}$")                    
                # Plot the time evolution of the contributions to the i2 mass balance
                plt.figure("Contributions on i2 mass bal")
                if time2steps_axis == 1 and prntstepsID_axis == 0:
                    plt.plot(steps, ctr_mflow_coll_i2, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='r', markeredgecolor = 'k',label=r"$\varepsilon_{M,i2}^{coll}$")
                    plt.plot(steps, ctr_mflow_tw_i2, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='g', markeredgecolor = 'k',label=r"$\varepsilon_{M,i2}^{tw}$")
#                    plt.plot(steps, ctr_mflow_fw_i2, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='b', markeredgecolor = 'k',label=r"$\varepsilon_{M,i2}^{fw}$")                    
                elif time2steps_axis == 1 and prntstepsID_axis == 1:  
                    plt.plot(prntsteps_ID, ctr_mflow_coll_i2, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='r', markeredgecolor = 'k',label=r"$\varepsilon_{M,i2}^{coll}$")
                    plt.plot(prntsteps_ID, ctr_mflow_tw_i2, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='g', markeredgecolor = 'k',label=r"$\varepsilon_{M,i2}^{tw}$")
#                    plt.plot(prntsteps_ID, ctr_mflow_fw_i2, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='b', markeredgecolor = 'k',label=r"$\varepsilon_{M,i2}^{fw}$") 
                else:
                    plt.plot(time, ctr_mflow_coll_i2, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='r', markeredgecolor = 'k',label=r"$\varepsilon_{M,i2}^{coll}$")
                    plt.plot(time, ctr_mflow_tw_i2, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='g', markeredgecolor = 'k',label=r"$\varepsilon_{M,i2}^{tw}$")
#                    plt.plot(time, ctr_mflow_fw_i2, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='b', markeredgecolor = 'k',label=r"$\varepsilon_{M,i2}^{fw}$")                    
        if plot_Pbal == 1:
            # Plot the time evolution of the total energy balance
            fact = 1E-3 
            plt.figure("P balance")
            if time2steps_axis == 1 and prntstepsID_axis == 0:
                plt.plot(steps[plot_Pbal_inistep::], balP[plot_Pbal_inistep::]*fact, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='k', markeredgecolor = 'k',label=r"Balance")
                plt.plot(steps[plot_Pbal_inistep::], Pd[plot_Pbal_inistep::]*fact, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='b', markeredgecolor = 'k',label=r"$P_d$")
                plt.plot(steps[plot_Pbal_inistep::], -Pthrust[plot_Pbal_inistep::]*fact, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='g', markeredgecolor = 'k',label=r"$P_{use}$")                    
                plt.plot(steps[plot_Pbal_inistep::], -Pnothrust[plot_Pbal_inistep::]*fact, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='r', markeredgecolor = 'k',label=r"$P_{loss}$")
                plt.plot(steps[plot_Pbal_inistep::], -Pnothrust_walls[plot_Pbal_inistep::]*fact, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=brown, markeredgecolor = 'k',label=r"$P_{walls}$") 
                plt.plot(steps[plot_Pbal_inistep::], -Pionex[plot_Pbal_inistep::]*fact, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=orange, markeredgecolor = 'k',label=r"$P_{ion,ex}$")                                
#                plt.plot(steps, -(Pionex+Pnothrust_walls)*fact, linestyle='--', linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='k', markeredgecolor = 'k',label=r"$P_{walls}+P_{ion,ex}$")                                
            elif time2steps_axis == 1 and prntstepsID_axis == 1:  
                plt.plot(prntsteps_ID[plot_Pbal_inistep::], balP[plot_Pbal_inistep::]*fact, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='k', markeredgecolor = 'k',label=r"Balance")
                plt.plot(prntsteps_ID[plot_Pbal_inistep::], Pd[plot_Pbal_inistep::]*fact, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='b', markeredgecolor = 'k',label=r"$P_d$")
                plt.plot(prntsteps_ID[plot_Pbal_inistep::], -Pthrust[plot_Pbal_inistep::]*fact, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='g', markeredgecolor = 'k',label=r"$P_{use}$")                    
                plt.plot(prntsteps_ID[plot_Pbal_inistep::], -Pnothrust[plot_Pbal_inistep::]*fact, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='r', markeredgecolor = 'k',label=r"$P_{loss}$")
                plt.plot(prntsteps_ID[plot_Pbal_inistep::], -Pnothrust_walls[plot_Pbal_inistep::]*fact, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=brown, markeredgecolor = 'k',label=r"$P_{walls}$") 
                plt.plot(prntsteps_ID[plot_Pbal_inistep::], -Pionex[plot_Pbal_inistep::]*fact, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=orange, markeredgecolor = 'k',label=r"$P_{ion,ex}$")                                
#                plt.plot(prntsteps_ID, -(Pionex+Pnothrust_walls)*fact, linestyle='--', linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='k', markeredgecolor = 'k',label=r"$P_{walls}+P_{ion,ex}$")                                 
            else:
                plt.plot(time[plot_Pbal_inistep::], balP[plot_Pbal_inistep::]*fact, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='k', markeredgecolor = 'k',label=r"Balance")
                plt.plot(time[plot_Pbal_inistep::], Pd[plot_Pbal_inistep::]*fact, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='b', markeredgecolor = 'k',label=r"$P_d$")
                plt.plot(time[plot_Pbal_inistep::], -Pthrust[plot_Pbal_inistep::]*fact, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='g', markeredgecolor = 'k',label=r"$P_{use}$")                    
                plt.plot(time[plot_Pbal_inistep::], -Pnothrust[plot_Pbal_inistep::]*fact, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='r', markeredgecolor = 'k',label=r"$P_{loss}$")
                plt.plot(time[plot_Pbal_inistep::], -Pnothrust_walls[plot_Pbal_inistep::]*fact, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=brown, markeredgecolor = 'k',label=r"$P_{walls}$") 
                plt.plot(time[plot_Pbal_inistep::], -Pionex[plot_Pbal_inistep::]*fact, linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=orange, markeredgecolor = 'k',label=r"$P_{ion,ex}$")                                
#                plt.plot(time, -(Pionex+Pnothrust_walls)*fact, linestyle='--', linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='k', markeredgecolor = 'k',label=r"$P_{walls}+P_{ion,ex}$")                                
            # Plot the time evolution of the total energy balance error
            plt.figure("P balance error")
            if time2steps_axis == 1 and prntstepsID_axis == 0:
                plt.semilogy(steps[plot_Pbal_inistep::], err_balP_Pthrust[plot_Pbal_inistep::], linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='r', markeredgecolor = 'k',label=labels[k])
            elif time2steps_axis == 1 and prntstepsID_axis == 1:  
                plt.semilogy(prntsteps_ID[plot_Pbal_inistep::], err_balP_Pthrust[plot_Pbal_inistep::], linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='r', markeredgecolor = 'k',label=labels[k])
            else:
                plt.semilogy(time[plot_Pbal_inistep::], err_balP_Pthrust[plot_Pbal_inistep::], linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='r', markeredgecolor = 'k',label=labels[k]) 
            # Plot the time evolution of the contributions to the total energy balance
            plt.figure("Contributions on P balance")
            if time2steps_axis == 1 and prntstepsID_axis == 0:
                plt.plot(steps[plot_Pbal_inistep::], ctr_balPthrust_Pd[plot_Pbal_inistep::], linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='b', markeredgecolor = 'k',label=r"$\varepsilon_{E}^{P_d}$")
                plt.plot(steps[plot_Pbal_inistep::], ctr_balPthrust_Pthrust[plot_Pbal_inistep::], linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='g', markeredgecolor = 'k',label=r"$\varepsilon_{E}^{P_{use}}$")                    
                plt.plot(steps[plot_Pbal_inistep::], ctr_balPthrust_Pnothrust[plot_Pbal_inistep::], linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='r', markeredgecolor = 'k',label=r"$\varepsilon_{E}^{P_{loss}}$")
                plt.plot(steps[plot_Pbal_inistep::], ctr_balPthrust_Pnothrust_walls[plot_Pbal_inistep::], linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=brown, markeredgecolor = 'k',label=r"$\varepsilon_{E}^{P_{walls}}$") 
                plt.plot(steps[plot_Pbal_inistep::], ctr_balPthrust_Pnothrust_ionex[plot_Pbal_inistep::], linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=orange, markeredgecolor = 'k',label=r"$\varepsilon_{E}^{P_{ion,ex}}$")                                
            elif time2steps_axis == 1 and prntstepsID_axis == 1:  
                plt.plot(prntsteps_ID[plot_Pbal_inistep::], ctr_balPthrust_Pd[plot_Pbal_inistep::], linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='b', markeredgecolor = 'k',label=r"$\varepsilon_{E}^{P_d}$")
                plt.plot(prntsteps_ID[plot_Pbal_inistep::], ctr_balPthrust_Pthrust[plot_Pbal_inistep::], linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='g', markeredgecolor = 'k',label=r"$\varepsilon_{E}^{P_{use}}$")                    
                plt.plot(prntsteps_ID[plot_Pbal_inistep::], ctr_balPthrust_Pnothrust[plot_Pbal_inistep::], linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='r', markeredgecolor = 'k',label=r"$\varepsilon_{E}^{P_{loss}}$")
                plt.plot(prntsteps_ID[plot_Pbal_inistep::], ctr_balPthrust_Pnothrust_walls[plot_Pbal_inistep::], linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=brown, markeredgecolor = 'k',label=r"$\varepsilon_{E}^{P_{walls}}$") 
                plt.plot(prntsteps_ID[plot_Pbal_inistep::], ctr_balPthrust_Pnothrust_ionex[plot_Pbal_inistep::], linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=orange, markeredgecolor = 'k',label=r"$\varepsilon_{E}^{P_{ion,ex}}$")                                
            else:
                plt.plot(time[plot_Pbal_inistep::], ctr_balPthrust_Pd[plot_Pbal_inistep::], linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='b', markeredgecolor = 'k',label=r"$\varepsilon_{E}^{P_d}$")
                plt.plot(time[plot_Pbal_inistep::], ctr_balPthrust_Pthrust[plot_Pbal_inistep::], linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='g', markeredgecolor = 'k',label=r"$\varepsilon_{E}^{P_{use}}$")                    
                plt.plot(time[plot_Pbal_inistep::], ctr_balPthrust_Pnothrust[plot_Pbal_inistep::], linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color='r', markeredgecolor = 'k',label=r"$\varepsilon_{E}^{P_{loss}}$")
                plt.plot(time[plot_Pbal_inistep::], ctr_balPthrust_Pnothrust_walls[plot_Pbal_inistep::], linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=brown, markeredgecolor = 'k',label=r"$\varepsilon_{E}^{P_{walls}}$") 
                plt.plot(time[plot_Pbal_inistep::], ctr_balPthrust_Pnothrust_ionex[plot_Pbal_inistep::], linestyle=linestyles[ind3], linewidth=line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=orange, markeredgecolor = 'k',label=r"$\varepsilon_{E}^{P_{ion,ex}}$")                                
        if plot_FLvars == 1:
            find = 5
            # Plot the time evolution of the phi infinity at free loss
            plt.figure("phi_inf FL")
            if np.any(phi_inf != 0):
                if time2steps_axis == 1 and prntstepsID_axis == 0:
                    plt.semilogy(steps[find::], phi_inf[find::], linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                elif time2steps_axis == 1 and prntstepsID_axis == 1:  
                    plt.semilogy(prntsteps_ID[find::], phi_inf[find::], linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                    for i in range(0,len(prntstep_IDs)):
                        plt.semilogy(prntstep_IDs[i], phi_inf[prntstep_IDs[i]], linestyle='-', linewidth = line_width, markevery=marker_every_time, markersize=marker_size_ID, marker='s', color=colors[ind], markeredgecolor = 'k', label="")
                else:
                    plt.plot(time[find::], phi_inf[find::], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[k], color=colors[ind], markeredgecolor = 'k', label=labels[k])

            
                # Plot the FFT plot for the phi infinity at free loss
                if make_mean == 1: 
                    if np.any(np.diff(phi_inf) != 0):
                        plt.figure(r'FFT phi_inf')
                        plt.semilogx(freq_phi_inf[1:], np.abs(fft_phi_inf[1:]), linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_FFT, markersize=marker_size, marker=markers[k], color=colors[ind], markeredgecolor = 'k', label=labels[k])

            
            # Plot the time evolution of the I infinity at free loss
            plt.figure("I_inf FL")
            if np.any(I_inf != 0):
                if time2steps_axis == 1 and prntstepsID_axis == 0:
                    plt.semilogy(steps[find::], I_inf[find::], linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                elif time2steps_axis == 1 and prntstepsID_axis == 1:  
                    plt.semilogy(prntsteps_ID[find::], I_inf[find::], linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                    for i in range(0,len(prntstep_IDs)):
                        plt.semilogy(prntstep_IDs[i], I_inf[prntstep_IDs[i]], linestyle='-', linewidth = line_width, markevery=marker_every_time, markersize=marker_size_ID, marker='s', color=colors[ind], markeredgecolor = 'k', label="")
                else:
                    plt.plot(time[find::], I_inf[find::], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[k], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                    
                # Plot the FFT plot for the I infinity at free loss
                if make_mean == 1:         
                    plt.figure(r'FFT I_inf')
                    plt.semilogx(freq_I_inf[1:], np.abs(fft_I_inf[1:]), linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_FFT, markersize=marker_size, marker=markers[k], color=colors[ind], markeredgecolor = 'k', label=labels[k])

            
            # Plot the time evolution of the sum of Id and I infinity at free loss
            plt.figure("I_inf+Id FL")
            if np.any(I_inf != 0):
                if time2steps_axis == 1 and prntstepsID_axis == 0:
                    plt.semilogy(steps[find::], I_inf[find::]+Id[find::], linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                elif time2steps_axis == 1 and prntstepsID_axis == 1:  
                    plt.semilogy(prntsteps_ID[find::], I_inf[find::]+Id[find::], linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                    for i in range(0,len(prntstep_IDs)):
                        plt.semilogy(prntstep_IDs[i], I_inf[prntstep_IDs[i]]+Id[prntstep_IDs[i]], linestyle='-', linewidth = line_width, markevery=marker_every_time, markersize=marker_size_ID, marker='s', color=colors[ind], markeredgecolor = 'k', label="")
                else:
                    plt.plot(time[find::], I_inf[find::]+Id[find::], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[k], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                
            # Plot the time evolution of the current balance error
            plt.figure(r'err_I_inf FL')
            if np.any(err_I_inf != 0):
                if time2steps_axis == 1 and prntstepsID_axis == 0:
                    plt.semilogy(steps[find::], err_I_inf[find::], linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                elif time2steps_axis == 1 and prntstepsID_axis == 1:  
                    plt.semilogy(prntsteps_ID[find::], err_I_inf[find::], linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                    for i in range(0,len(prntstep_IDs)):
                        plt.semilogy(prntstep_IDs[i], err_I_inf[prntstep_IDs[i]], linestyle='-', linewidth = line_width, markevery=marker_every_time, markersize=marker_size_ID, marker='s', color=colors[ind], markeredgecolor = 'k', label="")
                else:
                    plt.semilogy(time[find::], err_I_inf[find::], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])


            # Plot the time evolution of the electron temperatures at free loss
            plt.figure("Te FL")
#            plt.plot(time[find::], Te_FL[find::], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label=labels[k]+" mean")
            plt.plot(time[find::], Te_FL_int[find::], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label=labels[k]+" int")
            # Plot the time evolution of the electron temperatures at vertical  free loss
            plt.figure("Te FL ver")
#            plt.plot(time[find::], Te_FL_ver[find::], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label=labels[k]+" mean")
#            plt.plot(time[find::], Te_FL_ver_int[find::], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker="s", color=colors[ind], markeredgecolor = 'k', label=labels[k]+" int")
            plt.plot(time[find::], Te[i_plot_ver,j_plot_ver,find::], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label=labels[k]+" ("+str(i_plot_lat)+","+str(j_plot_lat)+")")
            # Plot the time evolution of the electron temperatures at lateral free loss
            plt.figure("Te FL lat")
#            plt.plot(time[find::], Te_FL_lat[find::], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label=labels[k]+" mean")
#            plt.plot(time[find::], Te_FL_lat_int[find::], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker="s", color=colors[ind], markeredgecolor = 'k', label=labels[k]+" int")
            plt.plot(time[find::], Te[i_plot_lat,j_plot_lat,find::],linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label=labels[k]+" ("+str(i_plot_lat)+","+str(j_plot_lat)+")")
            
            if make_mean == 1:
                # Plot the FFT plot for the electron temperatures at vertical free loss
                plt.figure(r'FFT Te FL ver')
                plt.semilogx(freq_Te_FL_pver[1:], np.abs(fft_Te_FL_pver[1:]), linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_FFT, markersize=marker_size, marker=markers[k], color=colors[ind], markeredgecolor = 'k', label=labels[k])

            
            # Plot the time evolution of the electric potential at free loss
            plt.figure("phi FL")
#            plt.plot(time[find::], phi_FL[find::], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label=labels[k]+" mean")
            plt.plot(time[find::], phi_FL_int[find::], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label=labels[k]+" int")
            # Plot the time evolution of the electric potential at vertical free loss
            plt.figure("phi FL ver")
#            plt.plot(time[find::], phi_FL_ver[find::], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label=labels[k]+" mean")
#            plt.plot(time[find::], phi_FL_ver_int[find::], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker="s", color=colors[ind], markeredgecolor = 'k', label=labels[k]+" int")
            plt.plot(time[find::], phi[i_plot_ver,j_plot_ver,find::], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label=labels[k]+" ("+str(i_plot_lat)+","+str(j_plot_lat)+")")
            # Plot the time evolution of the electric potential at lateral free loss
            plt.figure("phi FL lat")
#            plt.plot(time[find::], phi_FL_lat[find::], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label=labels[k]+" mean")
#            plt.plot(time[find::], phi_FL_lat_int[find::], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker="s", color=colors[ind], markeredgecolor = 'k', label=labels[k]+" int")
            plt.plot(time[find::], phi[i_plot_lat,j_plot_lat,find::], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label=labels[k]+" ("+str(i_plot_lat)+","+str(j_plot_lat)+")")
            
            if make_mean == 1:
                # Plot the FFT plot for the electric potential at vertical free loss
                plt.figure(r'FFT phi FL ver')
                plt.semilogx(freq_phi_FL_pver[1:], np.abs(fft_phi_FL_pver[1:]), linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_FFT, markersize=marker_size, marker=markers[k], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            
            
            
            # Plot the time evolution of the dphi/Te at free loss
            plt.figure("dphi/Te FL")
            if np.any(phi_inf != 0):
    #            plt.plot(time[find::], ratio_DphiTe_FL[find::], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label=labels[k]+" mean")
                plt.plot(time[find::], ratio_DphiTe_FL_int[find::], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label=labels[k]+" int")
            # Plot the time evolution of the electric potential at vertical free loss
            plt.figure("dphi/Te FL ver")
            if np.any(phi_inf != 0):
    #            plt.plot(time[find::], ratio_DphiTe_FL_ver[find::], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label=labels[k]+" mean")
    #            plt.plot(time[find::], ratio_DphiTe_FL_ver_int[find::], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker="s", color=colors[ind], markeredgecolor = 'k', label=labels[k]+" int")
                plt.plot(time[find::], (phi[i_plot_ver,j_plot_ver,find::]-phi_inf[find::])/Te[i_plot_ver,j_plot_ver,find::], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label=labels[k]+" ("+str(i_plot_lat)+","+str(j_plot_lat)+")")
            # Plot the time evolution of the electric potential at lateral free loss
            plt.figure("dphi/Te FL lat")
            if np.any(phi_inf != 0):
    #            plt.plot(time[find::], ratio_DphiTe_FL_lat[find::], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label=labels[k]+" mean")
    #            plt.plot(time[find::], ratio_DphiTe_FL_lat_int[find::], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker="s", color=colors[ind], markeredgecolor = 'k', label=labels[k]+" int")
                plt.plot(time[find::], (phi[i_plot_lat,j_plot_lat,find::]-phi_inf[find::])/Te[i_plot_lat,j_plot_lat,find::], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label=labels[k]+" ("+str(i_plot_lat)+","+str(j_plot_lat)+")")
            
            if np.any(phi_inf != 0):
                if make_mean == 1:
                    # Plot the FFT plot for the dphi/Te at vertical free loss
                    plt.figure(r'FFT dphi/Te FL ver')
                    plt.semilogx(freq_DphiTe_FL_pver[1:], np.abs(fft_DphiTe_FL_pver[1:]), linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_FFT, markersize=marker_size, marker=markers[k], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            
        
        if generate_thesis_figures == 1:
            if Nke_effects == 1:
                # Time in microseconds and frequencies in kHz
#                time = time*1e3
    #            freq_Id = freq_Id*1e-4
                
                ax1.semilogy(time, Id, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label=labels[k])
                ax2.semilogx(freq_Id[1:], np.abs(fft_Id[1:]), linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label=labels[k])

        
        ind = ind + 1
        if ind > 8:
            ind = 0
            ind2 = ind2 + 1
            if ind2 > 6:
                ind = 0
                ind2 = 0
                ind3 = ind3 + 1
     
               
    if exp_data_time_plots == 1:
        exp_time = exp_time*1e3
        last_ind_exp = np.where(exp_time <= time[-1])[0][-1]
        plt.figure(r'Id_exp(t)')
        ax = plt.gca()
        #ax.set_ylim(2e1,3e1)
        plt.semilogy(exp_time[0:last_ind_exp+1], exp_Id[0:last_ind_exp+1], linestyle='-', linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker='D', color=orange, markeredgecolor = 'k', label=r'Exp. Data')
        #plt.plot(exp_time[0:last_ind_exp+1], exp_Id[0:last_ind_exp+1], linestyle='-', linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker='D', color=orange, markeredgecolor = 'k', label=r'Exp. Data')
        plt.xlabel(r"$t$ (ms)",fontsize = font_size)
        if time2steps_axis == 1 and prntstepsID_axis == 0:
            plt.xlabel(r"$N_{steps}$ ($10^{3}$ -)",fontsize = font_size)
        elif time2steps_axis == 1 and prntstepsID_axis == 1:
            plt.xlabel(r"$N_{prnt,steps}$ (-)",fontsize = font_size)
        plt.title(r"$I_d$ exp. data",fontsize = font_size,y=1.02)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        if save_flag == 1:
            plt.figure(r'Id_exp(t)')
            plt.savefig(path_out+"Id_exp_t"+figs_format,bbox_inches='tight') 
            plt.close()

    if plot_mass == 1:
        plt.figure(r'mi1(t)')
        plt.legend(fontsize = font_size_legend,loc=1,ncol=2)
        plt.figure(r'mi2(t)')
        plt.legend(fontsize = font_size_legend,loc=1,ncol=2)
        plt.figure(r'mitot(t)')
        plt.legend(fontsize = font_size_legend,loc=1,ncol=2)
        plt.figure(r'mn(t)')
        plt.legend(fontsize = font_size_legend,loc=1,ncol=2)
    if plot_dens == 1:
        plt.figure(r'dens_e(t)')
        ax = plt.gca()
        ax.set_ylim(10**15,10**19)
        plt.legend(fontsize = font_size_legend,loc=4,ncol=2)
        plt.figure(r'dens_n(t)')
        ax = plt.gca()
        ax.set_ylim(10**17,10**19)
        plt.legend(fontsize = font_size_legend,loc=1,ncol=2)
        plt.figure(r'FFT dens_e(t)')
        plt.legend(fontsize = font_size_legend,loc=1,ncol=1)
        ax = plt.gca()
        ax.set_xlim(10**3,10**6)
#        ax.grid(which='both',axis='x',linestyle=':',linewidth=line_width_grid,color='k')
        plt.figure(r'FFT dens_n(t)')
        plt.legend(fontsize = font_size_legend,loc=1,ncol=1)
        ax = plt.gca()
        ax.set_xlim(10**3,10**6)
#        ax.grid(which='both',axis='x',linestyle=':',linewidth=line_width_grid,color='k')
        plt.figure(r'dens_e_dens_n(t)')
        ax = plt.gca()
        ax.set_ylim(10**15,10**19)
#        ax.set_xlim(0.0,0.9)
        ylims = ax.get_ylim()
        fact_x = np.array([0.97,1.02,1.02,1.02])
        marker_size_ID = 6
        for i in range(0,len(fast_prntstep_IDs)):
            plt.semilogy(time_fast[fast_prntstep_IDs[i]]*np.ones(2), np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every_time, markersize=marker_size_ID, marker="", color=prntstep_IDs_colors[i], markeredgecolor = 'k', label="")            
            plt.semilogy(time_fast[fast_prntstep_IDs[i]], avg_dens_mp_ions[fast_prntstep_IDs[i]], linestyle='-', linewidth = line_width, markevery=marker_every_time, markersize=marker_size_ID, marker=prntstep_IDs_markers[i], color=prntstep_IDs_colors[i], markeredgecolor = 'k', label="")            
            plt.semilogy(time_fast[fast_prntstep_IDs[i]], avg_dens_mp_neus[fast_prntstep_IDs[i]], linestyle='-', linewidth = line_width, markevery=marker_every_time, markersize=marker_size_ID, marker=prntstep_IDs_markers[i], color=prntstep_IDs_colors[i], markeredgecolor = 'k', label="")            
            plt.text(fact_x[i]*time_fast[fast_prntstep_IDs[i]-plot_tol], 1.5*ylims[0],prntstep_IDs_text[i],fontsize = text_size,color=prntstep_IDs_colors[i],ha='center',va='center')     
            print(prntstep_IDs_text[i]+" time_fast = "+str(time_fast[fast_prntstep_IDs[i]])+", time = "+str(time[prntstep_IDs[i]]))
        plt.legend(fontsize = font_size_legend,loc=1,ncol=2)
        plt.figure(r'FFT dens_e_dens_n(t)')
        plt.legend(fontsize = font_size_legend,loc=1,ncol=1)
        ax = plt.gca()
        ax.set_xlim(10**3,10**6)
        ax.grid(which='both',axis='x',linestyle=':',linewidth=line_width_grid,color='k')
        plt.figure(r'norm_dens_e_dens_n(t)')  
        plt.legend(fontsize = font_size_legend,loc=1,ncol=2)
    if plot_Nmp == 1:
        plt.figure(r'Nmpi1(t)')
        plt.legend(fontsize = font_size_legend,loc=3,ncol=2)
        plt.figure(r'Nmpi2(t)')
        plt.legend(fontsize = font_size_legend,loc=3,ncol=2)
        plt.figure(r'Nmpitot(t)')
        plt.legend(fontsize = font_size_legend,loc=3,ncol=2)
        plt.figure(r'Nmpn(t)')
        plt.legend(fontsize = font_size_legend,loc=3,ncol=2)
    if plot_eff == 1:
        plt.figure(r'eta_u(t)')
        plt.legend(fontsize = font_size_legend,loc=3,ncol=2)
        ax = plt.gca()
        ax.set_ylim(1E-2,1E1)
        plt.figure(r'eta_prod(t)')
        plt.legend(fontsize = font_size_legend,loc=2,ncol=2)
        ax = plt.gca()
        ax.set_ylim(1E-2,1E0)
        plt.figure(r'eta_cur(t)')
        plt.legend(fontsize = font_size_legend,loc=2,ncol=2)
        ax = plt.gca()
        ax.set_ylim(1E-1,1E1)
        plt.figure(r'eta_div(t)')
        plt.legend(fontsize = font_size_legend,loc=2,ncol=2)
        plt.figure(r'eta_thr(t)')
        plt.legend(fontsize = font_size_legend,loc=3,ncol=2)
    if plot_thr == 1:
        plt.figure(r'T(t)')
        ax = plt.gca()
        ax.set_ylim(1E-4,1E4)
        plt.legend(fontsize = font_size_legend,loc=4,ncol=2)    
        plt.figure(r'Ti1(t)')
        plt.legend(fontsize = font_size_legend,loc=3,ncol=2)
        plt.figure(r'Ti2(t)')
        plt.legend(fontsize = font_size_legend,loc=3,ncol=2)
        plt.figure(r'Tn(t)')
        plt.legend(fontsize = font_size_legend,loc=3,ncol=2)
    if plot_Te == 1:
        plt.figure(r'Te(t)')
        plt.legend(fontsize = font_size_legend,loc=2,ncol=1) 
        plt.figure(r'FFT Te(t)')
        plt.legend(fontsize = font_size_legend,loc=2,ncol=1)     
        plt.figure(r'Te_Id(t)')
        plt.legend(fontsize = font_size_legend,loc=2,ncol=1)  
    if plot_Id == 1:
        plt.figure(r'Id(t)')
        if exp_data_time_plots == 1:
            #plt.semilogy(exp_time[0:last_ind_exp+1], exp_Id[0:last_ind_exp+1], linestyle='-', linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker='D', color=orange, markeredgecolor = 'k', label=r'Exp. Data')
            #plt.semilogy(exp_time[0:last_ind_exp+1], exp_Id[0:last_ind_exp+1], linestyle='-', linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker='', color=orange, markeredgecolor = 'k', label=r'Exp. Data')
            plt.plot(exp_time[0:last_ind_exp+1], exp_Id[0:last_ind_exp+1], linestyle='-', linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker='', color=orange, markeredgecolor = 'k', label=r'Exp. Data')
#        plt.legend(fontsize = font_size_legend-2,loc=3,ncol=2) 
#        plt.legend(fontsize = font_size_legend-2,loc=2,ncol=2) 
#        plt.legend(fontsize = font_size_legend-2,loc=4,ncol=2) 
#        plt.legend(fontsize = font_size_legend,loc=3,ncol=2)
        ax = plt.gca()
#        ax.set_ylim(1E0,1E2)
#        ax.set_ylim(1E-2,1E2)
        #ax.set_ylim(1E-1,1E2)
#        ax.set_ylim(5E0,1E2)
#        ax.set_ylim(0,25)
#        ax.set_ylim(0,20)
#        ax.set_ylim(0,5)
#        ax.set_ylim(0,35)
#        ax.set_ylim(0,40)
#        ax.set_xlim(0.3,0.8)
        plt.figure(r'Id_inst(t)')
        plt.legend(fontsize = font_size_legend,loc=1,ncol=1)
        ax = plt.gca()
#        ax.set_ylim(1E-2,1E2)
#        ax.set_ylim(0,25)
        plt.figure(r'FFT Id(t)')
        ax = plt.gca()
        ax.set_xlim(3E2,8E5)
        if exp_data_time_plots == 1:
            #plt.semilogx(freq_exp_Id[1:], np.abs(fft_exp_Id[1:]), linestyle='-', linewidth = line_width, markevery=marker_every_FFT, markersize=marker_size, marker='D', color=orange, markeredgecolor = 'k', label=r'Exp. Data')
            plt.semilogx(freq_exp_Id[1:], np.abs(fft_exp_Id[1:]), linestyle='-', linewidth = line_width, markevery=marker_every_FFT, markersize=marker_size, marker='', color=orange, markeredgecolor = 'k', label=r'Exp. Data')
#            plt.semilogx(maxs_freq_Id[6], np.abs(maxs_fft_Id[6]), linestyle=linestyles[k], linewidth = line_width, markevery=marker_every_FFT, markersize=marker_size+5, marker='*', color='b', markeredgecolor = 'b', label='')

#        plt.legend(fontsize = font_size_legend,loc=2,ncol=1)
        ax = plt.gca()
#        ax.grid(which='both',axis='x',linestyle=':',linewidth=line_width_grid,color='k')
        plt.figure(r'FFT Id_inst(t)')
        plt.legend(fontsize = font_size_legend,loc=2,ncol=1)
        ax = plt.gca()
        ax.grid(which='both',axis='x',linestyle=':',linewidth=line_width_grid,color='k')
        plt.figure(r'I_beam(t)')
        plt.legend(fontsize = font_size_legend,loc=3,ncol=1)
        ax = plt.gca()
#        ax.set_ylim(1E-2,1E2)
        plt.figure(r'FFT I_beam(t)')
        plt.legend(fontsize = font_size_legend,loc=1,ncol=1)
        ax = plt.gca()
        ax.grid(which='both',axis='x',linestyle=':',linewidth=line_width_grid,color='k')
        plt.figure(r'Id_Ibeam(t)')
        plt.legend(fontsize = font_size_legend,loc=3,ncol=1)
        ax = plt.gca()
        ax.set_ylim(1E-2,1E2)
        plt.figure(r'FFT Id_Ibeam(t)') 
        plt.legend(fontsize = font_size_legend,loc=1,ncol=1)
        ax = plt.gca()
        ax.grid(which='both',axis='x',linestyle=':',linewidth=line_width_grid,color='k')  
        plt.figure(r'norm_Id_Ibeam(t)')  
        plt.legend(fontsize = font_size_legend,loc=3,ncol=2)
        ax = plt.gca()
        
        plt.figure(r'Icath(t)')
#        plt.legend(fontsize = font_size_legend,loc=1,ncol=1)
        ax = plt.gca()
#        ax.set_ylim(0,20)
        
        plt.figure(r'FFT Icath(t)')
#        plt.legend(fontsize = font_size_legend,loc=1,ncol=1)
        
        plt.figure(r'Icond(t)')
        plt.legend(fontsize = font_size_legend,loc=1,ncol=1)
        
        plt.figure(r'FFT Icond(t)')
        plt.legend(fontsize = font_size_legend,loc=1,ncol=1)
        
        plt.figure(r'err_I(t)')
        plt.legend(fontsize = font_size_legend,loc=1,ncol=1)
        
        plt.figure(r'Icond+Id(t)')
        plt.legend(fontsize = font_size_legend,loc=1,ncol=1)
        
        
        
    if plot_Vd == 1:
        plt.figure(r'Vd(t)')
        if exp_data_time_plots == 1:
            #plt.plot(exp_time[0:last_ind_exp+1], exp_Vd[0:last_ind_exp+1], linestyle='-', linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker='D', color=orange, markeredgecolor = 'k', label=r'Exp. Data')
            plt.plot(exp_time[0:last_ind_exp+1], exp_Vd[0:last_ind_exp+1], linestyle='-', linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker='', color=orange, markeredgecolor = 'k', label=r'Exp. Data')
        plt.legend(fontsize = font_size_legend,loc=4,ncol=1)
        
        plt.figure(r'Vcond(t)')
        plt.legend(fontsize = font_size_legend,loc=4,ncol=1)
        
        plt.figure(r'FFT Vcond(t)')
        plt.legend(fontsize = font_size_legend,loc=4,ncol=1)
        
    if plot_Pd == 1:
        plt.figure(r'Pd(t)')
        if exp_data_time_plots == 1:
            #plt.plot(exp_time[0:last_ind_exp+1], exp_Vd[0:last_ind_exp+1], linestyle='-', linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker='D', color=orange, markeredgecolor = 'k', label=r'Exp. Data')
            #plt.plot(exp_time[0:last_ind_exp+1], exp_Id[0:last_ind_exp+1]*exp_Vd[0:last_ind_exp+1]*1e-3, linestyle='-', linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker='', color=orange, markeredgecolor = 'k', label=r'Exp. Data')
            plt.semilogy(exp_time[0:last_ind_exp+1], exp_Id[0:last_ind_exp+1]*exp_Vd[0:last_ind_exp+1]*1e-3, linestyle='-', linewidth = line_width, markevery=marker_every_time, markersize=marker_size, marker='', color=orange, markeredgecolor = 'k', label=r'Exp. Data')
        plt.legend(fontsize = font_size_legend,loc=1,ncol=1)
        plt.figure(r'P_mat(t)')
        plt.legend(fontsize = font_size_legend,loc=1,ncol=2)
        plt.figure(r'P_inj(t)')
        plt.legend(fontsize = font_size_legend,loc=1,ncol=2)
        plt.figure(r'P_inf(t)')
        plt.legend(fontsize = font_size_legend,loc=1,ncol=2)
        plt.figure(r'P_ion(t)')
        plt.legend(fontsize = font_size_legend,loc=1,ncol=2)
        plt.figure(r'P_ex(t)')
        plt.legend(fontsize = font_size_legend,loc=1,ncol=2)
        plt.figure(r'P_use_tot ion plus neu (t)')
        plt.legend(fontsize = font_size_legend,loc=1,ncol=2)
        plt.figure(r'P_use_z ion plus neu (t)')
        plt.legend(fontsize = font_size_legend,loc=1,ncol=2)
        plt.figure(r'P_mat_hs(t)')
        plt.legend(fontsize = font_size_legend,loc=1,ncol=2)
        plt.figure(r'P_inj_hs(t)')
        plt.legend(fontsize = font_size_legend,loc=1,ncol=2)    
    if plot_cath == 1:
        plt.figure(r'nu_cat(t)')
        plt.legend(fontsize = font_size_legend,loc=2,ncol=1)    
        plt.figure(r'P_cat(t)')
        plt.legend(fontsize = font_size_legend,loc=2,ncol=1) 
        plt.figure(r'FFT nu_cat(t)')
        plt.legend(fontsize = font_size_legend,loc=2,ncol=1) 
        plt.figure(r'FFT P_cat(t)') 
        plt.legend(fontsize = font_size_legend,loc=2,ncol=1) 
        
    if plot_mbal == 1:
        plt.figure("n1 mass bal")
#        plt.legend(fontsize = font_size_legend,loc=1,ncol=2)
        plt.figure("i1 mass bal")
#        plt.legend(fontsize = font_size_legend,loc=1,ncol=2)
        plt.figure("i2 mass bal")
#        plt.legend(fontsize = font_size_legend,loc=1,ncol=2)
        plt.figure("Total mass bal")
#        plt.legend(fontsize = font_size_legend,loc=1,ncol=2)
        plt.figure("err n1 mass bal")
        plt.legend(fontsize = font_size_legend,loc=1,ncol=2)
        plt.figure("err i1 mass bal")
        plt.legend(fontsize = font_size_legend,loc=1,ncol=2)
        plt.figure("err i2 mass bal")
        plt.legend(fontsize = font_size_legend,loc=1,ncol=2)
        plt.figure("err total mass bal")
        plt.legend(fontsize = font_size_legend,loc=1,ncol=2)
        if nsims == 1:
            plt.figure("All mass bal")
            plt.legend(fontsize = font_size_legend,loc=1,ncol=2)
            plt.figure("All err mass bal")
            plt.legend(fontsize = font_size_legend,loc=1,ncol=2)
            ax = plt.gca()
            ax.set_ylim(1E-9,1E-1)
            plt.figure("Contributions on total mass bal")
            plt.legend(fontsize = font_size_legend,loc=1,ncol=2)
            plt.figure("Contributions on n1 mass bal")
            plt.legend(fontsize = font_size_legend,loc=1,ncol=2)
            plt.figure("Contributions on i1 mass bal")
            plt.legend(fontsize = font_size_legend,loc=1,ncol=2)
            plt.figure("Contributions on i2 mass bal")
            plt.legend(fontsize = font_size_legend,loc=1,ncol=2)
    if plot_Pbal == 1:
        plt.figure("P balance")
        ax = plt.gca()
        ylims = ax.set_ylim()
        fact_x = np.array([0.98,1.02,1.02,1.02])
        for i in range(0,len(prntstep_IDs)):
            plt.plot(time[prntstep_IDs[i]]*np.ones(2), np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every_time, markersize=marker_size_ID, marker="", color=prntstep_IDs_colors[i], markeredgecolor = 'k', label="")            
            plt.text(fact_x[i]*time[prntstep_IDs[i]-plot_tol], 0.9*ylims[0],prntstep_IDs_text[i],fontsize = text_size,color=prntstep_IDs_colors[i],ha='center',va='center')     
        plt.legend(fontsize = font_size_legend,loc=1,ncol=2)        
        plt.figure("P balance error")
#        plt.legend(fontsize = font_size_legend,loc=1,ncol=2)
        # Plot the time evolution of the contributions to the total energy balance
        plt.figure("Contributions on P balance")
        plt.legend(fontsize = font_size_legend,loc=1,ncol=3)        
        
    if plot_FLvars == 1:
        plt.figure("phi_inf FL")
#        plt.legend(fontsize = font_size_legend,loc=1,ncol=3)  
        plt.figure(r'FFT phi_inf')
#        plt.legend(fontsize = font_size_legend,loc=1,ncol=3) 
        plt.figure("I_inf FL")
#        plt.legend(fontsize = font_size_legend,loc=1,ncol=3)  
        plt.figure(r'FFT I_inf')
#        plt.legend(fontsize = font_size_legend,loc=1,ncol=3) 
        plt.figure("I_inf+Id FL")
#        plt.legend(fontsize = font_size_legend,loc=1,ncol=3)  
        ax = plt.gca()
        ax.set_ylim(0,20)
        plt.figure(r'err_I_inf FL')
#        plt.legend(fontsize = font_size_legend,loc=1,ncol=3)         
        plt.figure("Te FL")
#        plt.legend(fontsize = font_size_legend,loc=1,ncol=3)   
        plt.figure("Te FL ver")
#        plt.legend(fontsize = font_size_legend,loc=1,ncol=3)   
        plt.figure("Te FL lat")    
#        plt.legend(fontsize = font_size_legend,loc=1,ncol=3)   
        plt.figure(r'FFT Te FL ver')
#        plt.legend(fontsize = font_size_legend,loc=1,ncol=3)   
        plt.figure("phi FL")
#        plt.legend(fontsize = font_size_legend,loc=1,ncol=3)   
        plt.figure("phi FL ver")
#        plt.legend(fontsize = font_size_legend,loc=1,ncol=3)   
        plt.figure("phi FL lat")    
#        plt.legend(fontsize = font_size_legend,loc=1,ncol=3)
        plt.figure(r'FFT phi FL ver')
#        plt.legend(fontsize = font_size_legend,loc=1,ncol=3)       
        plt.figure("dphi/Te FL")
#        plt.legend(fontsize = font_size_legend,loc=1,ncol=3)
        plt.figure("dphi/Te FL ver")
#        plt.legend(fontsize = font_size_legend,loc=1,ncol=3)
        plt.figure("dphi/Te FL lat")
#        plt.legend(fontsize = font_size_legend,loc=1,ncol=3)
        plt.figure(r'FFT dphi/Te FL ver')
#        plt.legend(fontsize = font_size_legend,loc=1,ncol=3)
        
    if generate_thesis_figures == 1:
        if Nke_effects == 1:
            ax1.legend(fontsize = font_size_legend,handletextpad=0.2,loc=3,ncol=3)
            ax2.grid(which='both',axis='x',linestyle=':',linewidth=line_width_grid,color='k')
            plt.tight_layout()
      

    
    if save_flag == 1:
        if plot_mass == 1:
            plt.figure(r'mi1(t)')
            plt.savefig(path_out+"mi1_t"+figs_format,bbox_inches='tight') 
            plt.close() 
            plt.figure(r'mi2(t)')
            plt.savefig(path_out+"mi2_t"+figs_format,bbox_inches='tight') 
            plt.close() 
            plt.figure(r'mitot(t)')
            plt.savefig(path_out+"mitot_t"+figs_format,bbox_inches='tight') 
            plt.close() 
            plt.figure(r'mn(t)')
            plt.savefig(path_out+"mn_t"+figs_format,bbox_inches='tight') 
            plt.close() 
        if plot_dens == 1:
            plt.figure(r'dens_e(t)')
            plt.savefig(path_out+"avg_dens_e_t"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure(r'dens_n(t)')
            plt.savefig(path_out+"avg_dens_n_t"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure(r'FFT dens_e(t)')
            plt.savefig(path_out+"FFT_avg_dens_e"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure(r'FFT dens_n(t)')
            plt.savefig(path_out+"FFT_avg_dens_n"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure(r'dens_e_dens_n(t)')
            plt.savefig(path_out+"avg_dens_e_dens_n_t"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure(r'FFT dens_e_dens_n(t)')
            plt.savefig(path_out+"FFT_avg_dens_e_dens_n"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure(r'norm_dens_e_dens_n(t)')  
            plt.savefig(path_out+"norm_avg_dens_e_dens_n_t"+figs_format,bbox_inches='tight') 
            plt.close()
        if plot_Nmp == 1:
            plt.figure(r'Nmpi1(t)')
            plt.savefig(path_out+"Nmpi1_t"+figs_format,bbox_inches='tight') 
            plt.close() 
            plt.figure(r'Nmpi2(t)')
            plt.savefig(path_out+"Nmpi2_t"+figs_format,bbox_inches='tight') 
            plt.close() 
            plt.figure(r'Nmpitot(t)')
            plt.savefig(path_out+"Nmpitot_t"+figs_format,bbox_inches='tight') 
            plt.close() 
            plt.figure(r'Nmpn(t)')
            plt.savefig(path_out+"Nmpn_t"+figs_format,bbox_inches='tight') 
            plt.close() 
        if plot_eff == 1:
            plt.figure(r'eta_u(t)')
            plt.savefig(path_out+"eta_u_t"+figs_format,bbox_inches='tight') 
            plt.close()   
            plt.figure(r'eta_prod(t)')
            plt.savefig(path_out+"eta_prod_t"+figs_format,bbox_inches='tight') 
            plt.close()  
            plt.figure(r'eta_cur(t)')
            plt.savefig(path_out+"eta_cur_t"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure(r'eta_div(t)')
            plt.savefig(path_out+"eta_div_t"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure(r'eta_thr(t)')
            plt.savefig(path_out+"eta_thr_t"+figs_format,bbox_inches='tight') 
            plt.close()
        if plot_thr == 1:
            plt.figure(r'T(t)')
            plt.savefig(path_out+"T_t"+figs_format,bbox_inches='tight') 
            plt.close()    
            plt.figure(r'Ti1(t)')
            plt.savefig(path_out+"Ti1_t"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure(r'Ti2(t)')
            plt.savefig(path_out+"Ti2_t"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure(r'Tn(t)')
            plt.savefig(path_out+"Tn_t"+figs_format,bbox_inches='tight') 
            plt.close()
        if plot_Te == 1:
            plt.figure(r'Te(t)')
            plt.savefig(path_out+"Te_mean_dom_t"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure(r'FFT Te(t)')
            plt.savefig(path_out+"FFT_Te_mean_dom"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure(r'Te_Id(t)')
            plt.savefig(path_out+"Te_dom_mean_Id_t"+figs_format,bbox_inches='tight') 
            plt.close()
        if plot_Id == 1:
            plt.figure(r'Id(t)')
            plt.savefig(path_out+"Id_t"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure(r'Id_inst(t)')
            plt.savefig(path_out+"Id_inst_t"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure(r'FFT Id(t)')
            plt.savefig(path_out+"FFT_Id"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure(r'FFT Id_inst(t)')
            plt.savefig(path_out+"FFT_Id_inst"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure(r'I_beam(t)')
            plt.savefig(path_out+"I_beam_t"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure(r'FFT I_beam(t)')
            plt.savefig(path_out+"FFT_I_beam"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure(r'Id_Ibeam(t)')
            plt.savefig(path_out+"Id_Ibeam_t"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure(r'FFT Id_Ibeam(t)') 
            plt.savefig(path_out+"FFT_Id_Ibeam"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure(r'norm_Id_Ibeam(t)') 
            plt.savefig(path_out+"norm_Id_Ibeam_t"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure(r'Icath(t)')
            plt.savefig(path_out+"Icath_t"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure(r'FFT Icath(t)')
            plt.savefig(path_out+"FFT_Icath"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure(r'Icond(t)')
            plt.savefig(path_out+"Icond_t"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure(r'FFT Icond(t)')
            plt.savefig(path_out+"FFT_Icond"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure(r'err_I(t)')
            plt.savefig(path_out+"errI_t"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure(r'Icond+Id(t)')
            plt.savefig(path_out+"Icond_Id_t"+figs_format,bbox_inches='tight') 
            plt.close()
            
        if plot_Vd == 1:
            plt.figure(r'Vd(t)')
            plt.savefig(path_out+"Vd_t"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure(r'Vcond(t)')
            plt.savefig(path_out+"Vcond_t"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure(r'FFT Vcond(t)')
            plt.savefig(path_out+"FFT_Vcond"+figs_format,bbox_inches='tight') 
            plt.close()
            
        if plot_Pd == 1:
            plt.figure(r'Pd(t)')
            plt.savefig(path_out+"Pd_t"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure(r'P_mat(t)')
            plt.savefig(path_out+"P_mat_t"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure(r'P_inj(t)')
            plt.savefig(path_out+"P_inj_t"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure(r'P_inf(t)')
            plt.savefig(path_out+"P_inf_t"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure(r'P_ion(t)')
            plt.savefig(path_out+"P_ion_t"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure(r'P_ex(t)')
            plt.savefig(path_out+"P_ex_t"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure(r'P_use_tot ion plus neu (t)')
            plt.savefig(path_out+"P_use_tot_t"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure(r'P_use_z ion plus neu (t)')
            plt.savefig(path_out+"P_use_z_t"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure(r'P_mat_hs(t)')
            plt.savefig(path_out+"P_mat_hs_t"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure(r'P_inj_hs(t)')
            plt.savefig(path_out+"P_inj_hs_t"+figs_format,bbox_inches='tight') 
            plt.close()
        if plot_cath == 1:
            plt.figure(r'nu_cat(t)')
            plt.savefig(path_out+"nu_cat_t"+figs_format,bbox_inches='tight') 
            plt.close()   
            plt.figure(r'P_cat(t)')
            plt.savefig(path_out+"P_cat_t"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure(r'FFT nu_cat(t)')
            plt.savefig(path_out+"FFT_nu_cat"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure(r'FFT P_cat(t)')
            plt.savefig(path_out+"FFT_P_cat"+figs_format,bbox_inches='tight') 
            plt.close()
        if plot_mbal == 1:
            plt.figure("n1 mass bal")
            plt.savefig(path_out+"n1_mass_bal_t"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure("i1 mass bal")
            plt.savefig(path_out+"i1_mass_bal_t"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure("i2 mass bal")
            plt.savefig(path_out+"i2_mass_bal_t"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure("Total mass bal")
            plt.savefig(path_out+"tot_mass_bal_t"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure("err n1 mass bal")
            plt.savefig(path_out+"n1_err_mass_bal_t"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure("err i1 mass bal")
            plt.savefig(path_out+"i1_err_mass_bal_t"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure("err i2 mass bal")
            plt.savefig(path_out+"i2_err_mass_bal_t"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure("err total mass bal")
            plt.savefig(path_out+"tot_err_mass_bal_t"+figs_format,bbox_inches='tight') 
            plt.close()
            if nsims == 1:
                plt.figure("All mass bal")
                plt.savefig(path_out+"all_mass_bal_t"+figs_format,bbox_inches='tight') 
                plt.close()
                plt.figure("All err mass bal")
                plt.savefig(path_out+"all_err_mass_bal_t"+figs_format,bbox_inches='tight') 
                plt.close()
                plt.figure("Contributions on total mass bal")
                plt.savefig(path_out+"contr_tot_mass_bal_t"+figs_format,bbox_inches='tight') 
                plt.close()
                plt.figure("Contributions on n1 mass bal")
                plt.savefig(path_out+"contr_n1_mass_bal_t"+figs_format,bbox_inches='tight') 
                plt.close()
                plt.figure("Contributions on i1 mass bal")
                plt.savefig(path_out+"contr_i1_mass_bal_t"+figs_format,bbox_inches='tight') 
                plt.close()
                plt.figure("Contributions on i2 mass bal")
                plt.savefig(path_out+"contr_i2_mass_bal_t"+figs_format,bbox_inches='tight') 
                plt.close()
        if plot_Pbal == 1:
            plt.figure("P balance")
            plt.savefig(path_out+"balP_t"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure("P balance error")
            plt.savefig(path_out+"err_balP_t"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure("Contributions on P balance")
            plt.savefig(path_out+"contr_balP_t"+figs_format,bbox_inches='tight') 
            plt.close()
        if plot_FLvars == 1:
            plt.figure("phi_inf FL")
            plt.savefig(path_out+"phi_inf_t"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure(r'FFT phi_inf')
            plt.savefig(path_out+"FFT_phi_inf"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure("I_inf FL")
            plt.savefig(path_out+"I_inf_t"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure(r'FFT I_inf')
            plt.savefig(path_out+"FFT_I_inf"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure("I_inf+Id FL")
            plt.savefig(path_out+"I_inf_Id_t"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure(r'err_I_inf FL')
            plt.savefig(path_out+"err_I_inf_t"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure("Te FL")
            plt.savefig(path_out+"Te_FL_t"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure("Te FL ver")
            plt.savefig(path_out+"Te_FL_ver_t"+figs_format,bbox_inches='tight') 
            plt.close() 
            plt.figure("Te FL lat")    
            plt.savefig(path_out+"Te_FL_lat_t"+figs_format,bbox_inches='tight') 
            plt.close() 
            plt.figure(r'FFT Te FL ver')
            plt.savefig(path_out+"FFT_Te_FL_ver"+figs_format,bbox_inches='tight') 
            plt.close() 
            plt.figure("phi FL")
            plt.savefig(path_out+"phi_FL_t"+figs_format,bbox_inches='tight') 
            plt.close() 
            plt.figure("phi FL ver")
            plt.savefig(path_out+"phi_FL_ver_t"+figs_format,bbox_inches='tight') 
            plt.close()   
            plt.figure("phi FL lat")    
            plt.savefig(path_out+"phi_FL_lat_t"+figs_format,bbox_inches='tight') 
            plt.close() 
            plt.figure(r'FFT phi FL ver')
            plt.savefig(path_out+"FFT_phi_FL_ver"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure("dphi/Te FL")
            plt.savefig(path_out+"dphiTe_FL_t"+figs_format,bbox_inches='tight') 
            plt.close() 
            plt.figure("dphi/Te FL ver")
            plt.savefig(path_out+"dphiTe_FL_ver_t"+figs_format,bbox_inches='tight') 
            plt.close() 
            plt.figure("dphi/Te FL lat")
            plt.savefig(path_out+"dphiTe_FL_lat_t"+figs_format,bbox_inches='tight') 
            plt.close() 
            plt.figure(r'FFT dphi/Te FL ver')
            plt.savefig(path_out+"FFT_dphiTe_FL_ver"+figs_format,bbox_inches='tight') 
            plt.close() 


        if generate_thesis_figures == 1:
            if Nke_effects == 1:
                fig1.savefig(path_out+"Id_Nke"+figs_format,bbox_inches='tight') 
                plt.close()  

    ###########################################################################    



if prof_plots == 1:
    print("######## prof_plots ########")
    
    marker_size  = 2.5
    marker_size_cath = 14
    cathode_marker = '*'
    cathode_color  = orange
    ref_color      = 'c'
    marker_every = 3
    marker_every = 1
#    font_size_legend    = font_size - 15
    # font_size_legend    = 15
    font_size_legend    = 8
    font_size_legend    = 10
    
    # Plot interpolated axial profiles in case PIC mesh plume part at rind has
    # increasing radius (tilted lateral part in the plume).
    # For now (11/12/2024) it is only implemented for some variables
    interp_zprof = 1
    
    
    # Radial index for axial profiles
#    rind = 21   # New picM for SPT100
#    rind = 32   # New picM for SPT100 (picrm)
#    rind = 17   # Safran T1,T2 cases
#    rind = 17   # VHT_US MP coarse mesh
#    rind = 20   # VHT_US MP fine mesh
#    rind = 15    # VHT_US MP fine mesh Np
#    rind = 36   # Safran T1,T2 cases (picrm)
#    rind = 19   # picM for SPT100 thesis
#    rind = 29    # HT5k rm6
#    rind = 15   # Safran PPSX00 Cheops LP
#    rind = 15    # VHT_US LP (TFM Alejandro)
    rind = 15    # PPSX00 testcase2

    # Axial coordinate for radial profiles in cm (closest zindex is obtained automatically)
    z_rprof = 10 # PPSX00 testcase2
    # z_rprof = 22 # VHET US MP
    z_rprof = 22.9 # VHET US MP (boundary of P2)
    # z_rprof = 18.61 # VHET US MP (P2G j=0 point axial position)
    # z_rprof = 22.301 # VHET US MP (P4G j=0 point axial position)
    z_rprof = 4.35 # VHET US MP (at z/Lc = 1.5 to see cathode near plume in cathode cases)
    z_rprof = 3.625 # VHET US MP (at z/Lc = 1.25 to see cathode near plume in cathode cases)
    
    z_rprof = 8.0 # Tatiana CHT
    
    # Decide log scale (1) or linear scale (0) in y-axis for rprof plots of currents
    # When plotting with log scale, negative currents (for example in z,r components) appear in absolute value
    log_curr_rprof = 0
    
    
    # Options for plotting angular profiles in plume (Faraday probe scans)
    # Decide log scale (1) or linear scale (0) in y-axis for scan plots of currents
    # When plotting with log scale, negative currents (for example in z,r components) appear in absolute value
    log_curr_scan = 1
    # Settings for scans from mid radius of the VHET US MP 
    z_offset    = -2.9  # Distance (cm) from anode to axial position of the axis of Faraday probe scan
    r_offset    = 6.56  # Offset radius (cm) of the axis of the Faraday probe scan
    rscan       = 6.56  # Radius (cm) of the Faraday probe scan 
    ang_min     = -90   # Minimum angle for the profile (deg)
    ang_max     = 90  # Maximum angle for the profile (deg)
    Npoints_ang = 200 # Number of points for the profile 
    # Settings for scans from axis at left bottom corner of the plume for the VHET US MP
    z_offset    = -2.9 # Distance (cm) from anode to axial position of the axis of Faraday probe scan
    r_offset    = 0.00 # Offset radius (cm) of the axis of the Faraday probe scan
    # rscan       = 20   # Radius (cm) of the Faraday probe scan 
    # rscan       = 8.7   # Radius (cm) of the Faraday probe scan 
    # rscan       = 18.85   # Radius (cm) of the Faraday probe scan 
    rscan       = 23.25   # Radius (cm) of the Faraday probe scan 
    ang_min     = -90    # Minimum angle for the profile (deg)
    ang_max     = 90   # Maximum angle for the profile (deg)
    Npoints_ang = 200  # Number of points for the profile 

    # Cathode plotting flag and cathode position in cm (for plot_zcath_012 = 2,3) for axial profiles
    plot_zcath_012 = 2                  # 0 - Deactivated
                                        # 1 - Plot z_cath (cathode z position from eFld mesh)
                                        # 2 - Plot zcat_pos indicated below (cross Cathode Bline with axial profile)
                                        # 3 - Plot zcat_pos_2 (additional cross Cathode Bline with axial profile)
    zcat_pos       = 5.9394542444501024 # z coordinate of crossing point of cathode C1, C2 and C3 Bline with rind = 19
#    zcat_pos_2     = 9.6917             # z coordinate of crossing point of cathode C5 (C4 thesis) Bline with rind=19
    # TOPO 2 ------------------------------------------------------------------
    plot_zcath_012 = 2
#    zcat_pos       = 15.55106875         # z coordinate of crossing point of cathode topo2 3298 and 3283 Bline with rind = 17
    zcat_pos       = 7.47248             # z coordinate of crossing point of cathode topo2 1200 Bline with rind = 17
#    zcat_pos       = 5.902074            # z coordinate of crossing point of cathode topo2 2853 Bline with rind = 17
    # TOPO 1 ------------------------------------------------------------------
    plot_zcath_012 = 2
#    zcat_pos       = 12.14428            # z coordinate of crossing point of cathode topo1 699 Bline with rind = 17
#    zcat_pos       = 7.3422075           # z coordinate of crossing point of cathode topo1 313 Bline with rind = 17   
#    zcat_pos       = 5.688635            # z coordinate of crossing point of cathode topo1 251 Bline with rind = 17 
#    # VHT_US LP (TFM Alejandro) -----------------------------------------------
#    zcat_pos = 6.25
#    # PPSX00 testcase1 (D4.1 LP) ----------------------------------------------
#    zcat_pos = 5.74805
#    # PPSX00 testcase2 em1 cathode face ID = 5803 -----------------------------
#    zcat_pos = 5.678125
#    # PPSX00 testcase2 em2 cathode face ID = 6613 -----------------------------
#    zcat_pos = 5.777875
#    # PPSX00 testcase2 em2 cathode face ID = 4656 -----------------------------
#    zcat_pos = 5.76525
    # VHT_US MP (IEPC2022) ----------------------------------------------------
    zcat_pos = 15.55
    zcat_pos = 15.71 # paper GDML
    zcat_pos_vec = np.array([15.71,15.66,15.74,15.66,zcat_pos,zcat_pos],dtype = float) # P1C1, P2C1, P3C1, P4C1: Cross with cath line
    zcat_pos_vec = np.array([15.66],dtype = float)
    zcat_pos_vec = np.array([15.66,16.24,15.66,16.24],dtype = float) # P2C1 and P2C3: For C3 use cross with the MS
    # zcat_pos_vec = np.array([15.74,16.24,15.74,16.24],dtype = float) # P3C1 and P3C3: For C3 use cross with the MS
    zcat_pos_vec = np.array([15.66,16.24,15.66,16.24],dtype = float) # P4C1 and P4C3: For C3 use cross with the MS
    zcat_pos_vec = np.array([15.7359,15.6048,15.92,15.6048],dtype = float)  # P3C1, P4C1, P4C1_fcat2533, P4C1_fcat2532_2533
    
    # Define a magnetic line in terms of elements or faces IDs
    Bline_type = 0 # 0 or 1 if magnetic line is defined with elements or faces IDs
    
    elems_cath_Bline    = range(407-1,483-1+2,2) # Elements along the cathode B line for cases C1, C2 and C3
    elems_cath_Bline_2  = range(875-1,951-1+2,2) # Elements along the cathode B line for case C5 (C4 thesis)
    elems_Bline         = range(330-1,406-1+2,2) # Elements along a B line
    # elems_cath_Bline    = list(range(994-1,926-1+2,-2)) + list([923-1,922-1,920-1,917-1,916-1,914-1,912-1,909-1,907-1,906-1,904-1]) # Elements along the cathode B line for HT5k rm6 cathode at volume 922 or face 1637
    elems_cath_Bline    = list(range(1968-1,1922-1+2,-2)) + list([1925-1]) + list(range(1922-1,1908-1+2,-2)) +list([1911-1]) + list(range(1908-1,1894-1+2,-2)) + list([1896-1,1895-1,1892-1,1890-1,1888-1,1886-1,1884-1,1882-1,1880-1,1971-1]) # Elements along the cathode B line for HT5k rm4 cathode at volume 1966 or face 3464
    ref_elem            = elems_Bline[int(len(elems_Bline)/2)]
#    ref_elem            = elems_Bline[0]
    ref_elem            = elems_cath_Bline[1]


    # elems_cath_Bline = list(range(519-1,519-1-30,-2))     # Elements along cathode B line for VHT_US P10 cases (no intersection with midline)
    # elems_cath_Bline = list(range(2393-1,2393-1-46,-1))   # Elements along cathode B line for VHT_US P20 cases
    # elems_cath_Bline = list(range(2222-1,2222-1-36,-2)) + list([2187-1]) + list(range(2184-1,2184-1-22,-2)) + list([2163-1])+list(range(2160-1,2160-1-38,-2))  # Elements along cathode B line for VHT_US P30 cases
    elems_cath_Bline = list(range(1579-1,1579-1-80,-2))   # Elements along cathode B line for VHT_US P40 cases
    # elems_cath_Bline = [591, 589, 587, 584, 583, 581, 579, 576, 575, 572, 570, 568,
    #                     566, 565, 562, 560, 558, 556, 555, 553, 551, 548, 546, 545]        # Elements along cathode B line for VHT_US case P2G_fcat905 (python indeces)
    # elems_cath_Bline = [1978, 1976, 1974, 1972, 1970, 1968, 1966, 1963, 1962, 1960,
    #                     1958, 1956, 1954, 1951, 1950, 1947, 1946, 1944, 1941, 1940, 1938]    # Elements along cathode B line for VHT_US case P2G_fcat3198 (python indeces)
    # elems_cath_Bline = [1289, 1287, 1285, 1283, 1281, 1279, 1277, 1275, 1272, 1270,
    #                     1269, 1267, 1265, 1263, 1261, 1259, 1257, 1254, 1253, 1251, 1248,
    #                     1247, 1245, 1242, 1241, 1238, 1236, 1235, 1233, 1231, 1228, 1226,
    #                     1225, 1222, 1220, 1219, 1217, 1215, 1212, 1211, 1209, 1207, 1204,
    #                     1202, 1201, 1199, 1197, 1195, 1192, 1191, 1188, 1187]              # Elements along cathode B line for VHT_US case P3G_fcat1962 (python indeces)
    # elems_cath_Bline = [4023, 4022, 4021, 4020, 4019, 4018, 4017, 4016, 4015, 4014,
    #                     4013, 4012, 4011, 4010, 4009, 4008, 4007, 4006, 4005, 4004, 4003,
    #                     4002, 4001, 4000, 3999, 3998, 3997, 3996, 3995, 3994, 3993, 3992,
    #                     3991, 3990, 3989, 3988, 3987, 3986, 3985, 3984, 3983, 3982, 3981,
    #                     3980, 3979, 3978, 3977, 3976, 3975, 3974, 3973, 3972, 3971]          # Elements along cathode B line for VHT_US case P4G_fcat7610 (python indeces)
    

    # Faces of cathode line for P2_fcat2543_2542 for GDML paper
    # faces_cath_Bline = list(range(2541-1,2631+3-1,3)) + list(range(2635-1,2638+3-1,3)) + list(range(2642-1,2676+1-1,1))
    # Faces of cathode line for P3_fcat6259_5993 for GDML paper
    faces_cath_Bline = list([6258-1]) + list(range(6260-1,6316+2-1,2)) + list(range(6317-1,6336+1-1,1))


    elems_cath_Bline   = []
    elems_cath_Bline_2 = []
    plot_Bline_cathBline = 1          # Only used for plots activated when plot_cath_Bline_prof = 1
    
    # Common reference potential PIC mesh node Python indeces
    phi_ref  = 0
    iphi_ref = 24
    jphi_ref = 28
    
    # Print out time steps
#    timestep = 'last'
    timestep = 300
  
    allsteps_flag   = 1
    read_inst_data  = 0
    read_part_lists = 0
    read_flag       = 1
    
    mean_vars       = 1
    mean_type       = 0
    # last_steps      = 600
    # last_steps      = 700
    # last_steps      = 1150
#    last_steps      = 500
    last_steps      = 1200
#    last_steps      = 100
#    last_steps      = 40
    step_i          = 1
    step_f          = 725
    plot_mean_vars  = 1

        
    # Flag to decide if interpolate from MFAM to a finer picM for plotting phi, Te and je components (Recommended = 1)
    interp_MFAM_picM_plot = 1
    
    plot_B_prof          = 1
    plot_fields_prof     = 1
    plot_dens_prof       = 1
    plot_temp_prof       = 1
    plot_vel_prof        = 0
    plot_curr_prof       = 1
    plot_nmp_prof        = 0
    plot_freq_prof       = 1
    plot_cath_Bline_prof = 0
    plot_err_interp_prof = 1
    plot_lambdaD_prof    = 1
    plot_Bline_prof      = 0
    
    # plot_B_prof          = 0
    # plot_fields_prof     = 1
    # plot_dens_prof       = 0
    # plot_temp_prof       = 0
    # plot_vel_prof        = 0
    # plot_curr_prof       = 0
    # plot_nmp_prof        = 0
    # plot_freq_prof       = 0
    # plot_cath_Bline_prof = 0
    # plot_err_interp_prof = 0
    # plot_lambdaD_prof    = 0
    # plot_Bline_prof      = 0
    
    # plot_B_prof          = 0
    # plot_fields_prof     = 0
    # plot_dens_prof       = 0
    # plot_temp_prof       = 0
    # plot_vel_prof        = 0
    # plot_curr_prof       = 0
    # plot_nmp_prof        = 0
    # plot_freq_prof       = 0
    # plot_cath_Bline_prof = 0
    # plot_err_interp_prof = 0
    # plot_lambdaD_prof    = 0
    # plot_Bline_prof      = 1
    
    
    # plot_fields_rprof    = 1
    # plot_dens_rprof      = 1
    # plot_temp_rprof      = 1
    # plot_curr_rprof      = 1
    # plot_freq_rprof      = 1
    
    plot_fields_rprof    = 0
    plot_dens_rprof      = 0
    plot_temp_rprof      = 0
    plot_curr_rprof      = 0
    plot_freq_rprof      = 0
    
    
    # Flag to activate/deactivate the plotting of angular profiles (Faraday probe scans)
    # plot_B_scan      = 1
    # plot_fields_scan = 1
    # plot_dens_scan   = 1
    # plot_temp_scan   = 1
    # plot_curr_scan   = 1
    # plot_freq_scan   = 1
    
    plot_B_scan      = 0
    plot_fields_scan = 0
    plot_dens_scan   = 0
    plot_temp_scan   = 0
    plot_curr_scan   = 0
    plot_freq_scan   = 0
    
    

    



    if timestep == 'last':
        timestep = -1  
    if allsteps_flag == 0:
        mean_vars = 0

    
    # Simulation names
    nsims = 4

    # Flag for old sims (1: old sim files, 0: new sim files)
    #oldpost_sim      = np.array([0,3,3,3,0,0,3,3,3,3,0,0,0,0],dtype = int)
    #oldsimparams_sim = np.array([6,7,7,7,6,6,7,7,7,7,6,6,5,0],dtype = int)  

#    oldpost_sim      = np.array([1,3,3,3,3,3,3,3,0,0,3,3,3,3,0,0,0,0],dtype = int)
#    oldsimparams_sim = np.array([0,7,7,7,7,7,7,7,6,6,7,7,7,7,6,6,5,0],dtype = int)   
    
#    oldpost_sim      = np.array([3,3,3,3,3,3,3,0,0,3,3,3,3,0,0,0,0],dtype = int)
#    oldsimparams_sim = np.array([7,8,8,8,7,7,7,6,6,7,7,7,7,6,6,5,0],dtype = int)  

    oldpost_sim      = np.array([1,3,3,3,3,3,3,0,0,3,3,3,3,0,0,0,0],dtype = int)
    oldsimparams_sim = np.array([0,10,8,8,7,7,7,6,6,7,7,7,7,6,6,5,0],dtype = int)         
    
    oldpost_sim      = np.array([3,3,3,3,3,3,3,0,0,3,3,3,3,0,0,0,0],dtype = int)
    oldsimparams_sim = np.array([12,12,12,8,7,7,7,6,6,7,7,7,7,6,6,5,0],dtype = int)   
    
#    oldpost_sim      = np.array([3,4,3,3,3,3,3,0,0,3,3,3,3,0,0,0,0],dtype = int)
#    oldsimparams_sim = np.array([12,13,12,8,7,7,7,6,6,7,7,7,7,6,6,5,0],dtype = int)   
    
    oldpost_sim      = np.array([4,4,4,4,4,3,3,3,0,0,3,3,3,3,0,0,0,0],dtype = int)
    oldsimparams_sim = np.array([13,13,13,13,13,7,7,7,6,6,7,7,7,7,6,6,5,0],dtype = int)   
    
#    oldpost_sim      = np.array([4,4,4,4,4,3,3,3,0,0,3,3,3,3,0,0,0,0],dtype = int)
#    oldsimparams_sim = np.array([13,14,13,13,13,7,7,7,6,6,7,7,7,7,6,6,5,0],dtype = int)  
    
#    oldpost_sim      = np.array([5,6,6,6,6,6,6,6,5,4,3,3,3,0,0,3,3,3,3,0,0,0,0],dtype = int)
#    oldsimparams_sim = np.array([15,17,17,17,17,17,17,17,15,13,7,7,7,6,6,7,7,7,7,6,6,5,0],dtype = int)  

    oldpost_sim      = np.array([6,6,6,6,6,6,6,6,0,0,3,3,3,3,0,0,0,0],dtype = int)
    oldsimparams_sim = np.array([21,21,21,21,21,21,7,7,6,6,7,7,7,7,6,6,5,0],dtype = int)  
    
    # For TFM Alejandro cases
#    oldpost_sim      = np.array([6,6,6,6,6,6,6,6,5,4,3,3,3,0,0,3,3,3,3,0,0,0,0],dtype = int)
#    oldsimparams_sim = np.array([18,19,17,17,17,17,17,17,15,13,7,7,7,6,6,7,7,7,7,6,6,5,0],dtype = int)  
    
    # For figures of CHEOPS T2N4 cases comparison for CHEOPS-LP meeting 06092021
#    oldpost_sim      = np.array([3,3,4,4,3,3,3,3,0,0,3,3,3,3,0,0,0,0],dtype = int)
#    oldsimparams_sim = np.array([7,8,13,13,8,7,7,7,6,6,7,7,7,7,6,6,5,0],dtype = int)      
#    oldpost_sim      = np.array([3,4,4,4,3,3,3,3,0,0,3,3,3,3,0,0,0,0],dtype = int)
#    oldsimparams_sim = np.array([7,13,13,13,8,7,7,7,6,6,7,7,7,7,6,6,5,0],dtype = int) 
    
    # For figures of CHEOPS T2N4 cases comparison for CHEOPS-LP meeting 10032022
#    oldpost_sim      = np.array([3,3,4,4,3,3,3,3,0,0,3,3,3,3,0,0,0,0],dtype = int)
#    oldsimparams_sim = np.array([7,8,13,13,8,7,7,7,6,6,7,7,7,7,6,6,5,0],dtype = int)      
#    oldpost_sim      = np.array([3,5,5,3,3,3,3,0,0,3,3,3,3,0,0,0,0],dtype = int)
#    oldsimparams_sim = np.array([8,15,15,8,7,7,7,6,6,7,7,7,7,6,6,5,0],dtype = int)  
    
    # HYPHEN_activities_report: anode treatment and thermalized potential CHEOPS T2N4 cases 
#    oldpost_sim      = np.array([3,4,4,4,3,3,3,3,0,0,3,3,3,3,0,0,0,0],dtype = int)
#    oldsimparams_sim = np.array([7,13,15,13,8,7,7,7,6,6,7,7,7,7,6,6,5,0],dtype = int) 
#    oldpost_sim      = np.array([3,4,4,4,3,3,3,3,0,0,3,3,3,3,0,0,0,0],dtype = int)
#    oldsimparams_sim = np.array([7,15,15,13,8,7,7,7,6,6,7,7,7,7,6,6,5,0],dtype = int) 

    
    sim_names = [
#                 "../../../sim/sims/HT20k_tm1.4_23tq25s01_V300_rm8_rm6_global_new",
#                 "../../../Ca_hyphen/sim/sims/HT5k_rm6_tm08_8te1tq25s01_V300_m14_change_inj",
#                "../../../Ca_hyphen/sim/sims/HT5k_tm08_9te1tq25s01_9f7cbb9_cath_inj",

#                "../../../Sr_hyphen/sim/sims/HT5k_rm6_tm08_10te1tq25s01_WCext_mdotC_Tcat",
#                "../../../sim/sims/HT5k_rm6_tm08_10te1tq25s01_WC3_mdotC_Tcat3",
            
#                "../../../sim/sims/SPT100_pm2em2_cat3328_tmtetq5_flqe45_tests",
#                "../../../sim/sims/SPT100_pm2em2_cat3328_tmtetq5_flqe45_tests",
    
#                "../../../H_sims/Rb/hyphen/sims/Topo1_n2_l100s100_cat313_tm515_te2_tq21",
#                "../../../Ca_hyphen/sim/sims/T1N1_pm1em1_cat313_tm515_te1_tq21_GDML",
            
#                "../../../Rb_sims_files/Topo2_n4_l200s200_cat1200_tm15_te1_tq125",
#                "../../../H_sims/Ca/hyphen/sims/T2N4_pm1em1_cat1200_tm15_te1_tq125_71d0dcb",
#                "../../../sim/sims/T2N4_pm1em1_cat1200_tm15_te1_tq125_NEW",
#                "../../../Sr_hyphen/sim/sims/T2N4_pm1em1_cat1200_tm15_te1_tq125_0438e2a",
#                "../../../Sr_hyphen/sim/sims/T2N4_pm1em1_cat1200_tm15_te1_tq125_0438e2a_Es65",
#                "../../../Sr_hyphen/sim/sims/T2N4_pm1em1_cat1200_tm15_te1_tq125_REF",
#                "../../../Sr_hyphen/sim/sims/T2N4_pm1em1_cat1200_tm15_te1_tq125_floating",
#                "../../../Sr_hyphen/sim/sims/T2N4_pm1em1_cat1200_tm15_te1_tq125_GDML",
#                "../../../Sr_hyphen/sim/sims/T2N4_pm1em1_WC1959_tm15_te1_tq125_GDML_mc0",
#                "../../../Sr_hyphen/sim/sims/T2N4_pm1em1_WC1959_tm15_te1_tq125_GDML",
#                "../../../Ca_hyphen/sim/sims/T2N4_pm1em1_WC1959_tm15_te1_tq125_GDML_mc0_Temin",
#                "../../../Ca_hyphen/sim/sims/T2N4_pm1em1_WC1959_tmte15_tq125_GDML_mc0_Temin",
#                "../../../Ca_hyphen/sim/sims/T2N4_pm1em1_WC1959_tm15_te1_tq125_GDML_phiinf",
#                "../../../Ca_hyphen/sim/sims/T2N4_pm1em1_WC1959_tm15_te1_tq125_GDML_phiinfplus",
#                "../../../Ca_hyphen/sim/sims/T2N4_pm1em1_WC1959_tm15_te1_tq125_GDML_phiinfminus",
#                "../../../Ca_hyphen/sim/sims/T2N4_pm1em1_WC1959_tm15_te1_tq125_GDML_mindens",
#                "../../../Ca_hyphen/sim/sims/T2N4_pm1em1_WC1959_tm15_te1_tq125_GDML_limje",
#                "../../../Ca_hyphen/sim/sims/T2N4_pm1em1_WC1959_tm15_te1_tq125_GDML_scham_alwn1",
#                "../../../Ca_hyphen/sim/sims/T2N4_pm1em1_WC1959_tm15_te1_tq125_GDML_tqine0",
#                "../../../sim/sims/T2N4_pm1em1_WC1959_tm15_te1_tq125_GDML_tests",
#                "../../../Ca_hyphen/sim/sims/T2N4_pm1em1_WC1959_tm15_te1_tq125_GDML_CSL",
    
#                "../../../Ca_hyphen/sim/sims/VHT_US_plume10_OP1",
#                "../../../Ca_hyphen/sim/sims/VHT_US_plume20_OP1",
#                "../../../Ca_hyphen/sim/sims/VHT_US_plume40_OP1",
                
#                "../../../Ca_hyphen/sim/sims/VHT_US_plume10_OP1",
#                "../../../sim/sims/VHT_US_plume10_OP1",
    
#                "../../../Ca_hyphen/sim/sims/VHT_US_plume10_OP1_mumps",
#                "../../../Ca_hyphen/sim/sims/VHT_US_p10_op1_G",

#                "../../../H_sims/Mg/hyphen/sims/IEPC_2022/Plume10_OP3_global_CEX_Np",
#                "../../../H_sims/Mg/hyphen/sims/IEPC_2022/Plume20_OP3_global_CEX_Np",
#                "../../../H_sims/Mg/hyphen/sims/IEPC_2022/Plume30_OP3_global_CEX_Np",
#                "../../../H_sims/Mg/hyphen/sims/IEPC_2022/Plume40_OP3_global_CEX_Np",
                
#                "../../../H_sims/Mg/hyphen/sims/IEPC_2022/Plume10_OP3_local_CEX_Np",
#                "../../../H_sims/Mg/hyphen/sims/IEPC_2022/Plume20_OP3_local_CEX_Np",
#                "../../../H_sims/Mg/hyphen/sims/IEPC_2022/Plume30_OP3_local_CEX_Np",
#                "../../../H_sims/Mg/hyphen/sims/IEPC_2022/Plume40_OP3_local_CEX_Np",
    
#                "../../../H_sims/Mg/hyphen/sims/IEPC_2022/Plume10_OP3_local_CEX_Np",
#                "../../../Mg_hyphen/sim/sims/Plume10_OP3_local_CEX_Np_new",

#                "../../../H_sims/Mg/hyphen/sims/IEPC_2022/Plume20_OP3_global_CEX_Np",
#                "../../../Mg_hyphen/sim/sims/Plume20_OP3_global_CEX_Np_new",

#                "../../../Mg_hyphen/sim/sims/Plume40_OP3_global_CEX_Np_new",
#                "../../../Mg_hyphen/sim/sims/Plume20_OP3_global_CEX_Np_new_efieldcomp1",
    
        
                    # "../../../sim/sims/CHT_sep_imp_injC_mfr8_new",
        
                   # "/media/adrian/easystore1/PC_UMA/repos/hyphen/sims_paper_GDML/P4G_fcat6266_2356_Fz",
                   # "../../../sim/sims/P4G_fcat6266_2356_Fz_Tcath_new",
                   # "../../../sim/sims/P4G_Fz_Tcath_new",
                    
                    # "../../../sim/sims/P1G_Tcath_new",
                    # "../../../sim/sims/P2G_Tcath_new",
                    # "../../../sim/sims/P3G_Tcath_new",
                    # "../../../sim/sims/P4G_Fz_Tcath_new",
                    # "../../../sim/sims/P4G_Fz_C1fcat2533_Tcath_new",
                    # "../../../sim/sims/P4G_Fz_C1fcat2532_2533_Tcath_new",
                    
                    # "../../../sim/sims/P4G_Fz_Tcath_new",
                    # "../../../sim/sims/P4G_fcat7610_Fz_Tcath_new",
                    # "../../../sim/sims/P4G_C1fcat3425_Fz_Tcath_new",
                    
                    "../../../sim/sims/P3G_Tcath_new",
                    "../../../sim/sims/P3G_Tcath_new_alineq_05",
                    "../../../sim/sims/P4G_Fz_Tcath_new",
                    "../../../sim/sims/P4G_Fz_Tcath_new_alineq_05",
                    
        
                    # "../../../sim/sims/P1L_Tcath_new",
                    # "../../../sim/sims/P2L_Tcath_new",
                    # "../../../sim/sims/P3L_Tcath_new",
                    # "../../../sim/sims/P4L_Fz_Tcath_new",
                    
                    # "../../../sim/sims/P4G_Fz",
                    # "../../../sim/sims/P4G_Fz_Tcath_new",
        
        
                    # "../../../sim/sims/P3G_Tcath",
                    # "../../../sim/sims/P3G_Tcath_new",
                    # "../../../sim/sims/P3G_Tcath_efieldcomp1",
                    
                    # "../../../sim/sims/P3G_fcat6259_5993",
                    # "../../../sim/sims/P3G_fcat6259_5993_efieldcomp1",
                    # "../../../sim/sims/P3G_fcat6259_5993_Tcath",
                    
                    # "../../../sim/sims/P3G",
                    # "../../../sim/sims/P3G_fcat1962",
                    # "../../../sim/sims/P3G_fcat6259_5993",
                   
                    # "../../../sim/sims/P4G_Fz_Tcath_new",
                    # "../../../sim/sims/P4G_fcat7610_Fz_Tcath_new",
                    # "../../../sim/sims/P4L_Fz_Tcath_new",
                    # "../../../sim/sims/P4L_fcat7610_Fz_Tcath_new",
                    
                    # "../../../sim/sims/P4G_Fz_Tcath_new",
                    # "../../../sim/sims/P4G_fcat6266_2356_Fz_Tcath_new",
                    # "../../../sim/sims/P4L_Fz_Tcath_new",
                    # "../../../sim/sims/P4L_fcat6266_2356_Fz_Tcath_new",
        
                    # "../../../sim/sims/P3G_Tcath_new",
                    # "../../../sim/sims/P3G_fcat1962_Tcath_new",
                    # "../../../sim/sims/P3L_Tcath_new",
                    # "../../../sim/sims/P3L_fcat1962_Tcath_new",
                    
                    # "../../../sim/sims/P3G_Tcath_new",
                    # "../../../sim/sims/P3G_fcat6259_5993_Tcath_new",
                    # "../../../sim/sims/P3L_Tcath_new",
                    # "../../../sim/sims/P3L_fcat6259_5993_Tcath_new",
                    
                    # "../../../sim/sims/P2G",
                    # "../../../sim/sims/P2G_fcat905",
                    # "../../../sim/sims/P2L",
                    # "../../../sim/sims/P2L_fcat905",
        
                    # "../../../sim/sims/P2G_Tcath_new",
                    # "../../../sim/sims/P2G_fcat3198_Tcath_new",
                    # "../../../sim/sims/P2L_Tcath_new",
                    # "../../../sim/sims/P2L_fcat3198_Tcath_new",
                    
                    # "../../../sim/sims/P2G_Tcath_new",
                    # "../../../sim/sims/P2G_fcat2543_2542_Tcath_new",
                    # "../../../sim/sims/P2L_Tcath_new",
                    # "../../../sim/sims/P2L_fcat2543_2542_Tcath_new",
        
                    # "../../../sim/sims/P1G",
                    # "../../../sim/sims/P2G",
                    # "../../../sim/sims/P3G",
                    # "../../../sim/sims/P4G",
        
                    #"../../../sim/sims/P1L",
                    #"../../../sim/sims/P2L",
                    #"../../../sim/sims/P3L",
                    #"../../../sim/sims/P4L",
                    
                    # Scan plots and rprofs plots for P1-P4 cases
                    # "../../../sim/sims/P2G_Tcath_new",
                    # "../../../sim/sims/P2L_Tcath_new",
                    # "../../../sim/sims/P3G_Tcath_new",
                    # "../../../sim/sims/P3L_Tcath_new",
                    # "../../../sim/sims/P4G_Fz_Tcath_new",
                    # "../../../sim/sims/P4L_Fz_Tcath_new",
                    
                    # Scan plots and rprofs plots for P2P3 cathode cases for P2_fcat905
                    # "../../../sim/sims/P2G_fcat905",
                    # "../../../sim/sims/P2L_fcat905",
                    # "../../../sim/sims/P3G_fcat1962",
                    # "../../../sim/sims/P3L_fcat1962",
                    # Scan plots and rprofs plots for P2P3 cathode cases for P2_fcat3198
                    # "../../../sim/sims/P2G_fcat3198",
                    # "../../../sim/sims/P2L_fcat3198",
                    # "../../../sim/sims/P3G_fcat1962",
                    # "../../../sim/sims/P3L_fcat1962",

                   #"../../../sim/sims/P3G",
                   #"../../../sim/sims/P3L",
        
                    # "../../../sim/sims/P2G",
                    # "../../../sim/sims/P2G_ionGDML",
                    # "../../../sim/sims/P2G_fcat905",
                    # "../../../sim/sims/P2G_fcat905_ionGDML",
        
                # "../../../sim/sims/P3G",
                ## "../../../sim/sims/P3G_fcat3608",
                ## "../../../sim/sims/P3G_fcat1003",
                # "../../../sim/sims/P3G_fcat1962",
                # "../../../sim/sims/P3G_fcat1962_alphat2",
                # "../../../sim/sims/P3G_fcat1962_alphat5",
                ## "../../../sim/sims/P3G_fcat1962_alphat10",
                # "../../../sim/sims/P3G_fcat1962_alphat5_sig03",
                # "../../../sim/sims/P3G_fcat1962_alphat5_freeqefact4",
                # "../../../sim/sims/P3G_fcat1962_alphat5_SEEfl",

                # "../../../sim/sims/P3G",
                # "../../../sim/sims/P3G_alphat2",
                # "../../../sim/sims/P3G_alphat1_2",
                # "../../../sim/sims/P3G_fcat1962",
                # "../../../sim/sims/P3G_fcat1962_alphat2",

    
                # "../../../sim/sims/Plume10_OP3_global_CEX_Np_new",
                # "../../../sim/sims/Plume10_OP3_global_CEX_Np_new_localPCtest",
                
#                "../../../Mg_hyphen/sim/sims/Plume10_OP3_global_CEX_Np_new",
#               "../../../Mg_hyphen/sim/sims/Plume20_OP3_global_CEX_Np_new",
#                "../../../Mg_hyphen/sim/sims/Plume30_OP3_global_CEX_Np_new",
#                "../../../Mg_hyphen/sim/sims/Plume40_OP3_global_CEX_Np_new",
#                "../../../Mg_hyphen/sim/sims/Plume40_OP3_global_CEX_Np_new_alineq_1",

#                "../../../Mg_hyphen/sim/sims/Plume40_OP3_global_CEX_Np_new",
#                "../../../Mg_hyphen/sim/sims/Plume40_OP3_global_CEX_Np_new_alineq_0",
#                "../../../Mg_hyphen/sim/sims/Plume40_OP3_global_CEX_Np_new_alineq_05",
#                "../../../Mg_hyphen/sim/sims/Plume40_OP3_global_CEX_Np_new_alineq_1",
#                "../../../Mg_hyphen/sim/sims/Plume40_OP3_global_CEX_Np_new_alineq_2",
#                "../../../Mg_hyphen/sim/sims/Plume40_OP3_global_CEX_Np_new_alineq_1_omega",
                
#                "../../../Mg_hyphen/sim/sims/Plume10_OP3_global_CEX_Np_new_efieldcomp1",
#                "../../../Mg_hyphen/sim/sims/Plume20_OP3_global_CEX_Np_new_efieldcomp1",
#                "../../../Mg_hyphen/sim/sims/Plume30_OP3_global_CEX_Np_new_efieldcomp1",
#                "../../../Mg_hyphen/sim/sims/Plume40_OP3_global_CEX_Np_new_efieldcomp1",

#                 "../../../Mg_hyphen/sim/sims/Plume10_OP3_local_CEX_Np_new",
#                 "../../../Mg_hyphen/sim/sims/Plume20_OP3_local_CEX_Np_new",
#                 "../../../Mg_hyphen/sim/sims/Plume30_OP3_local_CEX_Np_new",
#                 "../../../Mg_hyphen/sim/sims/Plume40_OP3_local_CEX_Np_new",
                 
#                 "../../../Mg_hyphen_alejandro/sim/sims/VLP_300_25",
#                 "../../../Mg_hyphen_alejandro/sim/sims/VLP_6L_CEX",
                 
#                 "../../../Mg_hyphen_borja/sim/sims/PPSX00_em1_OP2c_tmte08_2_tq1",

#                 "../../../Mg_hyphen_borja/sim/sims/PPSX00_em1_OP2c_tmte08_2_tq1_fcat5803_CEX",
#                 "../../../Mg_hyphen_borja/sim/sims/PPSX00_em1_OP2c_tmte08_2_tq1_fcat3360_CEX",
#                 "../../../Mg_hyphen_borja/sim/sims/PPSX00_em1_OP2c_tmte08_2_tq1_fcat3361_CEX",
#                 "../../../Mg_hyphen_borja/sim/sims/PPSX00_em1_OP2c_tmte08_2_tq1_fcat203_CEX",
#                 "../../../Mg_hyphen_borja/sim/sims/PPSX00_em1_OP2c_tmte08_2_tq1_fcat4058_CEX",
                 
#                 "../../../Mg_hyphen_borja/sim/sims/PPSX00_em2_OP2c_tmte08_2_tq1_fcat6113",
#                 "../../../Mg_hyphen_borja/sim/sims/PPSX00_em2_OP2c_tmte08_2_tq1_fcat6113_CEX",
                 
#                 "../../../Mg_hyphen_borja/sim/sims/PPSX00_em2_OP2c_tmte08_2_tq1_fcat6113_CEX",
#                 "../../../Mg_hyphen_borja/sim/sims/PPSX00_em3_OP2c_tmte08_2_tq1_fcat3384_CEX",
                 
#                 "../../../Mg_hyphen_borja/sim/sims/PPSX00_em2_OP2c_tmte08_2_tq1_fcat6113_CEX",
#                 "../../../Mg_hyphen_borja/sim/sims/PPSX00_em2_OP2c_tmte08_2_tq1_fcat6113_CEX_Kr",
#                 "../../../Mg_hyphen_borja/sim/sims/PPSX00_em2_OP2c_tmte08_2_tq1_fcat6113_CEX_Kr2",
                 
#                 "../../../Ca_hyphen/sim/sims/PPSX00_em2_OP2c_tmte08_2_tq1_fcat4656_CEX",
#                 "../../../Ca_hyphen/sim/sims/PPSX00_em2_OP2c_tmte08_2_tq1_fcat4656_CEX_Kr",

#                 "../../../Mg_hyphen_borja/sim/sims/PPSX00_em2_OP2h_tmte06_2_tq1_fcat4656_CEX",
#                 "../../../Mg_hyphen_borja/sim/sims/PPSX00_em2_OP2h_tmte06_2_tq1_fcat4656_CEX_Kr",
                 
#                 "../../../Ca_hyphen/sim/sims/PPSX00_em2_OP2c_tmte08_2_tq1_fcat4656_CEX",
#                 "../../../Ca_hyphen/sim/sims/PPSX00_em2_OP2f_tmte08_2_tq1_fcat4656_CEX",
#                 "../../../Mg_hyphen_borja/sim/sims/PPSX00_em2_OP2h_tmte06_2_tq1_fcat4656_CEX",
#                 "../../../Mg_hyphen_borja/sim/sims/PPSX00_em2_OP2h_tmte06_2_tq1_fcat4656_CEX_Kr",
                 
#                 "../../../Ca_hyphen/sim/sims/PPSX00_em2_OP2c_tmte08_2_tq1_fcat4656_CEX",
#                 "../../../Mg_hyphen_borja/sim/sims/PPSX00_em2_OP2a_tm2_2_te52_tq1_fcat4656_CEX",
#                 "../../../Mg_hyphen_borja/sim/sims/PPSX00_em2_OP2b_tm2_2_te3_tq1_fcat4656_CEX",

#                 "../../../Mg_hyphen_borja/sim/sims/PPSX00_em2_OP2g_tmte08_2_tq1_fcat4656_CEX",

#                 "../../../Mg_hyphen_borja/sim/sims/PPSX00_em2_OP2c_tmte08_2_tq1_fcat2774_CEX",
#                 "../../../Ca_hyphen/sim/sims/PPSX00_em2_OP2c_tmte08_2_tq1_fcat4656_CEX",
#                 "../../../Mg_hyphen_borja/sim/sims/PPSX00_em2_OP2c_tmte08_2_tq1_fcat5026_CEX",
#                 "../../../Mg_hyphen_borja/sim/sims/PPSX00_em2_OP2c_tmte08_2_tq1_fcat654_CEX",
#                 "../../../Ca_hyphen/sim/sims/PPSX00_em2_OP2c_tmte08_2_tq1_fcat1171_CEX",
                 
                
#                "../../../Ca_hyphen/sim/sims/LP_testcase1_VC1612_tmtetq2_GDML",
#                "../../../Ca_hyphen/sim/sims/LP_testcase1_VC1612_tmtetq1_GDML",
#                "../../../Ca_hyphen/sim/sims/LP_testcase1_VC950_tmtetq1_GDML",
#                "../../../Ca_hyphen/sim/sims/LP_testcase1_VC1348_tmtetq1_GDML",
#                "../../../Ca_hyphen/sim/sims/LP_testcase1_WC2219_tmtetq1_GDML",
                
                
            
                "../../../sim/sims/SPT100_pm2em2_cat3328_tmtetq5_flqe45_tqine0",
                "../../../sim/sims/SPT100_pm2em2_cat3328_tmtetq25_flqe45",
            
                "../../../sim/sims/SPT100_pm2em2_cat3328_tmtetq5_flqe45_tqine0",
                "../../../sim/sims/SPT100_pm2em2_cat3328_tmte5tq25_flqe45",
            
                "../../../sim/sims/SPT100_pm2em2_cat3328_tmtetq5_flqe45_1f4d17a",
                "../../../sim/sims/SPT100_pm2em2_cat3328_tmtetq5_flqe45_tqine0",
                "../../../sim/sims/SPT100_pm2em2_cat3328_tmte5tq0_flqe45",
            
                "../../../sim/sims/SPT100_pm2em2_cat3328_tmtetq5_flqe45_tqine0",
                "../../../sim/sims/SPT100_pm2em2_cat3328_tmtetq5_flqe45_colltermq1",
            
            
                "../../../sim/sims/SPT100_pm2em2_cat3328_tmtetq5_flqe45_1f4d17a",
                "../../../sim/sims/SPT100_pm2em2_cat3328_tmtetq5_flqe45_tqine0",
                
                "../../../sim/sims/SPT100_pm2em2_cat3328_tmtetq5_flqe45_tests",
#                "../../../sim/sims/SPT100_pm2em2_cat3328_tmtetq5_flqe45_40f7463",
                "../../../sim/sims/SPT100_pm2em2_cat3328_tmtetq5_flqe45_1f4d17a",
                
            
            
#            "../../../Sr_sims_files/SPT100_DMD_pm2em2_cat3328_tmtetq2_Vd300",
#            "../../../sim/sims/SPT100_pm2em2_cat3328_tmtetq5_flqe45_tests",
            
#            "../../../sim/sims/SPT100_pm2em2_cat3328_tmtetq5_flqe45_tests",
            "../../../sim/sims/SPT100_pm2em2_cat3328_tmtetq5_flqe45_tests",
            
            "../../../sim/sims/SPT100_pm2em2_cat3328_tmtetq5_flqe45_noi2",
            
#            "../../../sim/sims/SPT100_pm2em2_cat3328_tmtetq5_flqe45",
#            "../../../sim/sims/SPT100_pm2em2_cat3328_tmtetq5_flqe45_tests",
    
#                 "../../../sim/sims/SPT100_pm2em2_cat3328_tmtetq5_flqe45",
#                 "../../../sim/sims/SPT100_pm2em2_cat3328_tmtetq5_flqe45_Vd200",     
            
#                 "../../../sim/sims/SPT100_pm2em2_cat3328_tmtetq5_flqe45",
#                 "../../../sim/sims/SPT100_pm2em2_cat3328_tmtetq5_flqe45_mA2",
    
#                 "../../../sim/sims/SPT100_pm2em2_cat3328_tmtetq5_flqe45",
#                 "../../../sim/sims/SPT100_pm2em2_cat3328_tmtetq5_flqe45_sig1",
            
#                 "../../../sim/sims/SPT100_pm2em2_cat3328_tmtetq5_flqe45",
#                 "../../../sim/sims/SPT100_pm2em2_wcat6143_tmtetq5_flqe45",
#                 "../../../sim/sims/SPT100_pm2em2_wcat5958_tmtetq5_flqe45",
                 
            
#                 "../../../Rb_sims_files/SPT100_al0025_Ne5_C1",
#                 "../../../sim/sims/SPT100_pm2em1_cat481_PHIchanges",
            
#                 "../../../Rb_hyphen/sim/sims/SPT100_al0025_Ne5_C4",
#                 "../../../Sr_hyphen/sim/sims/SPT100_pm1em1_cat878_tmtetq25",
            
#                  "../../../Ca_sims_files/HT5k_pm3em4_cat1966_tmtetq25_sig03",
            
#                 "../../../Rb_sims_files/Topo1_n1_l100s100_cat313_tm515_te1_tq21",
#                 "../../../Sr_sims_files/T1N1_pm1em1_cat313_tm515_te1_tq21_71d0dcb",
                 
#                 "../../../Rb_sims_files/Topo1_n2_l100s100_cat313_tm615_te2_tq12",
#                 "../../../Sr_sims_files/T1N2_pm1em1_cat313_tm615_te2_tq12_71d0dcb_rel",
    
#                  "../../../Rb_sims_files/Topo2_n3_l200s200_cat1200_tm15_te1_tq125",
#                  "../../../Ca_sims_files/T2N3_pm1em1_cat1200_tm15_te1_tq125_71d0dcb",

                 ]
    
    topo_case = 0
    if topo_case == 1:
        PIC_mesh_file_name = ["PIC_mesh_topo1_refined4.hdf5",
                              "PIC_mesh_topo1_refined4.hdf5",
                              "PIC_mesh_topo1_refined4.hdf5",
                              "PIC_mesh_topo1_refined4.hdf5",
                              "PIC_mesh_topo1_refined4.hdf5",
                              "PIC_mesh_topo1_refined4.hdf5",
                              "PIC_mesh_topo1_refined4.hdf5",
                              "PIC_mesh_topo1_refined4.hdf5",
                             ]
    elif topo_case == 2:
        PIC_mesh_file_name = [
                              "PIC_mesh_topo2_refined4.hdf5",
                              "PIC_mesh_topo2_refined4.hdf5",
                              "PIC_mesh_topo2_refined4.hdf5",
                              "PIC_mesh_topo2_refined4.hdf5",
                              "PIC_mesh_topo2_refined4.hdf5",
                              "PIC_mesh_topo2_refined4.hdf5",
                              "PIC_mesh_topo2_refined4.hdf5"
                              ]
    elif topo_case == 3:
        PIC_mesh_file_name = [
#                              "aspire_picM_rm6.hdf5",
#                              "PIC_mesh_LP.hdf5",
                              "HT5k_PIC_mesh_rm3.hdf5",
                              "HT5k_PIC_mesh_rm3.hdf5",
                              "HT5k_PIC_mesh_rm3.hdf5",
                              "HT5k_PIC_mesh_rm3.hdf5",
                              "HT5k_PIC_mesh_rm3.hdf5",
                              "HT5k_PIC_mesh_rm3.hdf5",
                             ]
    elif topo_case == 0:    
        PIC_mesh_file_name = [
                              # "PIC_mesh_may1.hdf5",
                              "PIC_mesh.hdf5", # VHT_US
                              "PIC_mesh.hdf5",
                              "PIC_mesh.hdf5",
                              "PIC_mesh.hdf5",
                              "PIC_mesh.hdf5",
                              "PIC_mesh.hdf5",
                              "SPT100_picM_Reference1500points_rm2.hdf5",
                              "SPT100_picM_Reference1500points_rm2.hdf5",
                              "SPT100_picM_Reference1500points_rm2.hdf5",
                              "SPT100_picM_Reference1500points_rm2.hdf5",
                              "SPT100_picM_Reference1500points_rm2.hdf5",
                              "SPT100_picM.hdf5",
                              "SPT100_picM.hdf5",
                              "SPT100_picM.hdf5",
                              
#                              "SPT100_picM_Reference1500points.hdf5",
                              "SPT100_picM_Reference1500points_rm.hdf5",
                              "SPT100_picM_Reference1500points_rm.hdf5",
                              "SPT100_picM.hdf5",
                              "SPT100_picM.hdf5",
                              "SPT100_picM.hdf5",
                              ]


    PIC_mesh_plot_file_name = [
                               # "PIC_mesh_may1.hdf5",
                               "PIC_mesh_plot.hdf5",
                               "PIC_mesh_plot.hdf5",
                               "PIC_mesh_plot.hdf5",
                               "PIC_mesh_plot.hdf5",
                               "PIC_mesh_plot.hdf5",
                               "PIC_mesh_plot.hdf5",
                               ]
    

    labels = [
#               r"Local zero current",
#               r"Global DML",
    
#                r"$r_\mathrm{C0}$",
##                r"$r_\mathrm{C}/r_\mathrm{C0} = 1.2\%$",
##                r"$r_\mathrm{C}/r_\mathrm{C0} = 2.5\%$",
#                r"$r_\mathrm{C}/r_\mathrm{C0} = 5.5\%$",
##                r"$r_\mathrm{C}/r_\mathrm{C0} = 5.5\%$, $2\alpha_\mathrm{t2}$ ",
#                r"$r_\mathrm{C}/r_\mathrm{C0} = 5.5\%$, $5\alpha_\mathrm{t2}$ ",
##                r"$r_\mathrm{C}/r_\mathrm{C0} = 5.5\%$, $10\alpha_\mathrm{t2}$ ",
#                r"$r_\mathrm{C}/r_\mathrm{C0} = 5.5\%$, $5\alpha_\mathrm{t2}$, $\sigma_\mathrm{rp} = 0.3$",
#                r"$r_\mathrm{C}/r_\mathrm{C0} = 5.5\%$, $5\alpha_\mathrm{t2}$, $P''_\mathrm{ne \infty} = -4T_\mathrm{eP}j_\mathrm{neP}/e$",
#                r"$r_\mathrm{C}/r_\mathrm{C0} = 5.5\%$, $5\alpha_\mathrm{t2}$, SEE $(T_\mathrm{s},E_\mathrm{s0})= (0.2,25)$ eV",


               # r"$r_\mathrm{c0}$",
               # r"$r_\mathrm{c0}$, $2\alpha_\mathrm{t2}$",
               # r"$r_\mathrm{c0}$, $2\alpha_\mathrm{t1}$",
               # r"$r_\mathrm{c}/r_\mathrm{c0} = 5.5\%$",
               # r"$r_\mathrm{c}/r_\mathrm{c0} = 5.5\%$, $2\alpha_\mathrm{t2}$",
    
                   
                   # r"GP3C1",
                   # r"GP4C1",
                   # r"GP4C1$^\ast$",
                   # r"GP4C1$^{\ast\ast}$",
        
                   r"GP3C1",
                   r"GP3C1 $\alpha_\mathrm{ine} = 0.5\%$",
                   r"GP4C1",
                   r"GP4C1 $\alpha_\mathrm{ine} = 0.5\%$",
                   
                   # r"GP4C1",
                   # r"GP4C2",
                   # r"GP4C1$^\ast$",
        
                   # r"GP4C1",
                   # r"GP4C2",
                   # r"LP4C1",
                   # r"LP4C2",
                  
                   # r"GP4C1",
                   # r"GP4C3",
                   # r"LP4C1",
                   # r"LP4C3",
        
                  # r"GP3C1",
                  # r"GP3C2",
                  # r"LP3C1",
                  # r"LP3C2",
                  
                  # r"GP3C1",
                  # r"GP3C3",
                  # r"LP3C1",
                  # r"LP3C3",
                  
                  # r"GP2C1",
                  # r"GP2C2",
                  # r"LP2C1",
                  # r"LP2C2",
                  
                   # r"GP2C1",
                   # r"GP2C3",
                   # r"LP2C1",
                   # r"LP2C3",
        
                  # r"P3G1, $P''_{eC}$",
                  # r"P3G1, $T_{eC}$",
        
                   # r"P4G1, $P''_{eC}$",
                   # r"P4G1, $T_{eC}$",
                  
                  # r"P3G1, $T_{eC}$",
                  # r"P3G1, $T_{eC}$ new",
                 
                 # r"P3G3, $P''_{eC}$",
                 # r"P3G3, $P''_{eC}$ efieldcomp1",
                 
                 # r"P3G1, $T_{eC}$",
                 # r"P3G1, $T_{eC}$ efieldcomp1",
        
                 # r"GP1C1",
                 # r"GP2C1",
                 # r"GP3C1",
                 # r"GP4C1",
               # # r"P4Gc",
        
                # r"P2G",
                # r"P2G ionGDML",
                # r"P2GC",
                # r"P2GC ionGDML",

#               r"P4G",
#               r"P4Gc $\alpha_\mathrm{ine} = 0\%$",
#               r"P4Gc $\alpha_\mathrm{ine} = 0.5\%$",
#               r"P4Gc $\alpha_\mathrm{ine} = 1.0\%$",
#               r"P4Gc $\alpha_\mathrm{ine} = 2.0\%$",
#               r"P4Gc $\alpha_\mathrm{ine} = 1.0\%$, $\omega_\mathrm{ce}$",
               
                r"LP1C1",
                r"LP2C1",
                r"LP3C1",
                r"LP4C1",
        
                # r"P4G3 old",
                # r"P4G3 new",
                # r"P4G1 new",
                
                # Scan plots and rprofs plots for P1-P4 cases
                # r"GP2C1",
                # r"LP2C1",
                # r"GP3C1",
                # r"LP3C1",
                # r"GP4C1",
                # r"LP4C1",
                    
                # Scan plots and rprofs plots for P2P3 cathode cases
                # r"P2GC",
                # r"P2LC",
                # r"P3GC",
                # r"P3LC",

                # r"P3G",
                # r"P3L",
    
#               r"No CEX",
#               r"CEX",
               
#               r"$\dot{m} = 0$ mg/s",
#               r"$\dot{m} = 0.25$ mg/s",
#               r"VLP 300 35 VDF",
           
#               r"5803",
#               r"3360",
#               r"3361",
#               r"203",
#               r"4058",
 
#               r"Xe",
#               r"Kr",
    
#               r"OP1",
#               r"OP6",
#               r"OP7",

#               r"OP1",
#               r"OP2",
#               r"OP4",
#               r"OP5",

#               r"$r_\mathrm{C}/r_\mathrm{C0} = 0.9848$",
#               r"$r_\mathrm{C}/r_\mathrm{C0} = 1$",
#               r"$r_\mathrm{C}/r_\mathrm{C0} = 1.0175$",
#               r"$r_\mathrm{C}/r_\mathrm{C0} = 1.05433$",
#               r"$r_\mathrm{C}/r_\mathrm{C0} = 1.2024$",

#               r"$r_\mathrm{C}/r_\mathrm{C0} = 0.98$",
#               r"$r_\mathrm{C}/r_\mathrm{C0} = 1.00$",
#               r"$r_\mathrm{C}/r_\mathrm{C0} = 1.02$",
#               r"$r_\mathrm{C}/r_\mathrm{C0} = 1.05$",
#               r"$r_\mathrm{C}/r_\mathrm{C0} = 1.20$",



               r"",
               r"",
               r"",
               r"",
               r"",
               r"",
            
#               r"T2N4 before improvements",
#               r"T2N4 after improvements (031d443)",
#               r"T2N4 after improvements (0438e2a)",
               
               r"T2N4 before improvements",
               r"T2N4 after improvements (0438e2a)",
               r"T2N4 after improvements (0438e2a) bis",

            
               r"pm2em2 cat3328 tmtetq5 tqine0",
               r"pm2em2 cat3328 tmtetq4 tqine0",
            
               r"pm2em2 cat3328 tqine0",
               r"pm2em2 cat3328 tmte5tq25",
            
               r"pm2em2 cat3328 1f4d17a",
               r"pm2em2 cat3328 tqine0",
               r"pm2em2 cat3328 tmte5te0",
            
               r"pm2em2 cat3328 colltermq0",
               r"pm2em2 cat3328 colltermq1",
            
               r"pm2em2 cat3328 1f4d17a",
               r"pm2em2 cat3328 tqine0",
            
            
               r"pm2em2 cat3328",
#               r"pm2em2 cat3328 40f7463",
               r"pm2em2 cat3328 1f4d17a",
            
               r"pm2em2 cat3328 8ccc1d3 parallel",
               r"pm2em2 cat3328 031d443 parallel",
               r"pm2em2 cat3328 031d443 parallel 2",
               r"pm2em2 cat3328 031d443 parallel 3",
               r"pm2em2 cat3328 031d443 parallel 4",
            
               r"pm2em2 cat3328 8ccc1d3 parallel",
               r"pm2em2 cat3328 8ccc1d3 serial",
               r"pm2em2 cat3328 031d443 parallel",
               r"pm2em2 cat3328 031d443 serial",
            
#               r"pm2em2 cat3328 DMD ref tmtetq2",
#               r"pm2em2 cat3328 mod iter tmtetq5",
            
#               r"VC",
#               r"WC1",
#               r"WC2",
            
#               r"$V_d = 300$ V",
#               r"$V_d = 200$ V",
            
#               r"$\dot{m}_A = 5$ mg/s",
#               r"$\dot{m}_A = 2$ mg/s",
            
#               r"$\sigma_t = 0.3$",
#               r"$\sigma_t = 1.0$",
    
#               r"pm2em2 cat3328 mod iter noRLC",
#               r"pm2em2 cat3328 mod iter RLC",
    
#               r"pm2em2 cat3328 mod nonewiter",
#               r"pm2em2 cat3328 mod iterations",
    
#               r"pm2em2 cat3328 mod nonewiter",
#               r"pm2em2 cat3328 jemean nonewiter",
    
#               r"pm2em2 cat3328 RLC mod noiter",
#               r"pm2em2 cat3328 RLC mod iter",
    
               r"pm2em2 cat3328",
               r"pm2em2 cat3328 no i2",
    
               r"pm2em2 cat3328 hefunc1 fl 1",
#               r"pm2em2 cat3328 hefunc1 fl 1 condwall connect1",
               r"pm2em2 cat3328 hefunc1 fl 1 condwall connect0",
            
               r"pm2em2 cat3328 hefunc1 fl 1",
               r"pm2em2 cat3328 hefunc0 fl 2",
            
#               r"pm2em2 cat3328 PHIchanges",
#               r"pm2em1 cat481 PHIchanges",
            
#               r"SPT100 C4 thesis",
#               r"SPT100 C4 new",
            
#               r"T2N3",
#               r"T2N4",
               
               r"T2N4 orig",
               r"T2N4 71d0dcb (final report)",
               r"T2N4 NEW",
            
#               r"T2N4",
#               r"T2N4 CEX",
            
#              r"T2N3-REF Kr",
            
#              r"REF",
#              r"M1",
#              r"M2",
#              r"M3",
            
              r"REF",
              r"V1",
              r"V2",
              r"V3",
              
#              r"Old sheath",
#              r"New sheath",
              
              ]

    
    # Line colors
    colors = ['k','r','g','b','m','c','m','y',orange,brown]
#    colors = ['r','k','g','b','m','c','m','y',orange,brown]
#    colors = ['m','b','k','r','g','b','m','c','m','y',orange,brown] # P1G-P4G (comp with alejandro)
    # colors = ['m','k','b','r','g','c','m','c','m','y',orange,brown] # P1G-P4G, P1L-P4L (paper)
    # colors = ['k','b','r','m','g','c','m','c','m','y',orange,brown] # P1G-P4G, P1L-P4L (paper) cathode cases
    # colors = ['k','r','k','r','k','r',orange,brown]
    #colors = ['k','r','g','b','m','c',orange,brown]
    # Markers
    markers = ['s','o','v','^','<', '>','D','p','*']
    markers = ['','','','','','','','','']
#    markers = ['s','<','D','p']
    # Line style
    linestyles = ['-','--','-.',':','-','--','-.'] # P1G-P4G, P1L-P4L
    # linestyles = ['-','-.',':', ':','-','--','-.']
    linestyles = ['-','-','-','-','-','-','-']
#    linestyles = ['--','-','-.',':','-','--','-.'] # P1G-P4G, P1L-P4L
    # linestyles = ['-','-','--','--',':',':']
    # linestyles = ['-','--','-','--','-','--']

    
    # zmax for profiles (cm)
#    xmax = 18  # FOR CHEOPS-1 Topo1 Topo2 sims
#    xmax = 12 # FOR SPT sims
#    xmax = 17.67 # FOR HT5k
#    xmax = 7.5  # FOR cheops LP sims
#    xmax = 12.9  # FOR VHT_US MP sims plume 10
    # xmax = 22.9  # FOR VHT_US MP sims plume 20
    # xmax = 32.9  # FOR VHT_US MP sims plume 30
    xmax = 42.9  # FOR VHT_US MP sims plume 40
#    xmax = 15 # For VHT_US LP case 6L (TFM Alejandro)
#    xmax = 22.5 # For VHT_US LP case 9L (TFM Alejandro)
    
    # For radial profiles (cm)
    rmax = 30   # FOR VHT_US MP sims plume 20 (at boundary)
    # rmax = 28.3 # For P2G at j=0 point
    # rmax = 29.705 # For P4G at j=0 point
    rmax = 22.2 # For z/Lc = 1.5 at the cathode near plume 
    
    
    # Do not plot units in axes (comment if we want units in axes)
#    # SAFRAN CHEOPS 1: units in cm
#    L_c = 3.725
#    H_c = (0.074995-0.052475)*100
     # HT5k
#    L_c = 2.53
#    H_c = (0.0785-0.0565)*100
    # VHT_US MP
    L_c = 2.9
    H_c = 2.22
    # VHT_US LP (TFM Alejandro) and PPSX00 testcase1 LP D4.1
#    L_c = 2.5
#    H_c = 1.1
    # PPSX00 testcase2
#    L_c = 2.5
#    H_c = 1.5

    xmax = xmax/L_c
    rmax = rmax/H_c
    zcat_pos_vec = zcat_pos_vec/L_c
    
#    prof_xlabel = r"$z$ (cm)"
    prof_xlabel = r"$z/L_\mathrm{c}$"

#    rprof_xlabel = r"$r$ (cm)"
    rprof_xlabel = r"$r/H_\mathrm{c}$"
    
    scan_xlabel = r"$\theta$ (deg)"
    
    prof_xlabel_Bline = r"$s/H_\mathrm{c}$"
    

    # Axial profile plots
    if plot_B_prof == 1:
        plt.figure(r'B prof')
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.title(r"$B$ (G)",fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)     
#        plt.figure('Br prof')
#        plt.xlabel(prof_xlabel,fontsize = font_size)
#        plt.title(r"B_\mathrm{r}$ (G)",fontsize = font_size)
#        plt.xticks(fontsize = ticks_size) 
#        plt.yticks(fontsize = ticks_size)
#        plt.figure('Bz prof')
#        plt.xlabel(prof_xlabel,fontsize = font_size)
#        plt.title(r"$B_\mathrm{z}$ (G)", fontsize = font_size)
#        plt.xticks(fontsize = ticks_size) 
#        plt.yticks(fontsize = ticks_size)
        plt.figure(r'alpha prof')
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.title(r"$\alpha_\mathrm{t}$",fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)  
    if plot_fields_prof == 1:
        plt.figure(r'phi prof plume')
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.ylabel(r"$\phi$ (V)",fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure(r'phi prof')
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.title(r"$\phi$ (V)",fontsize = font_size)
#        plt.title(r"(e) $\phi$ (V)",fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure(r'E prof')
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.title(r"$|\boldsymbol{E}|$ (10$^{3}$ Vm$^{-1}$)",fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
#        plt.figure('Er prof')
#        plt.xlabel(r"$z$ (cm)",fontsize = font_size)
#        plt.title(r"(c) $\boldsymbol{E}_r$ (10$^{3}$ Vm$^{-1}$)",fontsize = font_size)
#        plt.xticks(fontsize = ticks_size) 
#        plt.yticks(fontsize = ticks_size)
        plt.figure('Ez prof plume')
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.title(r"$E_\mathrm{z}$ (10$^{3}$ Vm$^{-1}$)", fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('Ez prof')
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.title(r"$E_\mathrm{z}$ (10$^{3}$ Vm$^{-1}$)", fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        
    if plot_dens_prof == 1:
        plt.figure('n prof plume')
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.ylabel(r"$n_\mathrm{e}$ (m$^{-3}$)",fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('n prof')
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.title(r"$n_\mathrm{e}$ (m$^{-3}$)",fontsize = font_size)
#        plt.title(r"(g) $n_e$ (m$^{-3}$)",fontsize = font_size)
#        plt.title(r"(g) $n_e$ (m$^{-3}$)",fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ni1 prof')
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.title(r"$n_\mathrm{i1}$ (m$^{-3}$)", fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ni2 prof')
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.title(r"$n_\mathrm{i2}$ (m$^{-3}$)", fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ratio_ni1_ni2 prof')
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.title(r"$n_\mathrm{i2}/n_\mathrm{i1}$", fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ratio_ni1_ni3 prof')
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.title(r"$n_\mathrm{i3}/n_\mathrm{i1}$", fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ratio_ni1_ni4 prof')
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.title(r"$n_\mathrm{i4}/n_\mathrm{i1}$", fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ratio_ne_neCEX prof')
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.title(r"$n_\mathrm{e,CEX}/n_\mathrm{e}$", fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('nn prof')
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.title(r"$n_\mathrm{n}$ (m$^{-3}$)", fontsize = font_size)
#        plt.title(r"(h) $n_{n}$ (m$^{-3}$)", fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ratio_nn1_nn2 prof')
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.title(r"$n_\mathrm{n2}/n_\mathrm{n1}$", fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ratio_nn1_nn3 prof')
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.title(r"$n_\mathrm{n3}/n_\mathrm{n1}$", fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ratio_nn1_nnCEX prof')
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.title(r"$n_\mathrm{n,CEX}/n_\mathrm{n,slow}$", fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ratio_nn_nnCEX prof')
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.title(r"$n_\mathrm{n,CEX}/n_\mathrm{n}$", fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('all nis prof')
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.title(r"$n_\mathrm{i}$ (m$^{-3}$)",fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        
    if plot_temp_prof == 1:
        plt.figure('Te prof plume')
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.ylabel(r"$T_\mathrm{e}$ (eV)",fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('Te prof')
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.title(r"$T_\mathrm{e}$ (eV)", fontsize = font_size)
#        plt.title(r"(e) $T_{e}$ (eV)", fontsize = font_size)
#        plt.title(r"(f) $T_{e}$ (eV)", fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('Ti1 prof')
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.title(r"$T_\mathrm{i1}$ (eV)", fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('Ti2 prof')
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.title(r"$T_\mathrm{i2}$ (eV)", fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('Tn prof')
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.title(r"$T_\mathrm{n}$ (eV)", fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ratio_Ekin_Te prof')
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.title(r"$m_\mathrm{e}u_\mathrm{e}^2/2T_\mathrm{e}$", fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ratio_Ekin_Ti1 prof')
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.title(r"$E_\mathrm{kin,i1}/T_\mathrm{i1}$", fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ratio_Ekin_Ti2 prof')
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.title(r"$E_\mathrm{kin,i2}/T_\mathrm{i2}$", fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('pn prof')
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.title(r"$p_\mathrm{n}$ (mbar)", fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
    if plot_vel_prof == 1:
        plt.figure('Mi1 prof')
        plt.title(r"$M_{i1}$", fontsize = font_size)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('Mi2 prof')
        plt.title(r"$M_{i2}$", fontsize = font_size)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('Mi prof')
        plt.title(r"$M_{i}$", fontsize = font_size)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('Mzi1 prof')
        plt.title(r"$M_{z,i1}$", fontsize = font_size)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('Mzi2 prof')
        plt.title(r"$M_{z,i2}$", fontsize = font_size)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('Mzi prof')
        plt.title(r"$M_{zi}$", fontsize = font_size)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ui_r prof')
        plt.title(r"$u_{ri}$ (ms$^{-1}$)", fontsize = font_size)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ui_t prof')
        plt.title(r"$u_{\theta i}$ (ms$^{-1}$)", fontsize = font_size)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ui_z prof')
        plt.title(r"$u_{z i}$ (ms$^{-1}$)", fontsize = font_size)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ue_r prof')
        plt.title(r"$u_{re}$ (ms$^{-1}$)", fontsize = font_size)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ue_t prof')
        plt.title(r"(l) $u_{\theta e}$ (ms$^{-1}$)", fontsize = font_size)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ue_z prof')
        plt.title(r"$u_{z e}$ (ms$^{-1}$)", fontsize = font_size)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ue_perp prof')
        plt.title(r"$u_{\bot e}$ (ms$^{-1}$)", fontsize = font_size)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ue_para prof')
        plt.title(r"$u_{\parallel e}$ (ms$^{-1}$)", fontsize = font_size)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ratio ue_t_perp prof')
        plt.title(r"$u_{\theta e}/u_{\bot e}$", fontsize = font_size)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ratio ue_t_para prof')
        plt.title(r"$u_{\theta e}/u_{\parallel e}$", fontsize = font_size)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ratio ue_perp_para prof')
        plt.title(r"$u_{\bot}/u_{\parallel e}$", fontsize = font_size)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
    if plot_curr_prof == 1:
        plt.figure('je_r prof')
        plt.title(r"$-j_\mathrm{re}$ (Acm$^{-2}$)", fontsize = font_size)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('je_t prof')
        plt.title(r"$-j_\mathrm{\theta e}$ (Am$^{-2}$)", fontsize = font_size)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('je_z prof')
        plt.title(r"$-j_\mathrm{z e}$ (Acm$^{-2}$)", fontsize = font_size)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('je_z prof chamber')
        plt.title(r"$-j_\mathrm{z e}$ (Acm$^{-2}$)", fontsize = font_size)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('je_perp prof')
        plt.title(r"$-j_\mathrm{\bot e}$ (Acm$^{-2}$)", fontsize = font_size)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('je_para prof')
        plt.title(r"$-j_\mathrm{\parallel e}$ (Acm$^{-2}$)", fontsize = font_size)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ratio je_t_perp prof')
        plt.title(r"$j_\mathrm{\theta e}/j_\mathrm{\bot e}$", fontsize = font_size)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('Hall_je_perp prof')
        plt.title(r"$\chi j_\mathrm{\bot e}$ (Acm$^{-2}$)", fontsize = font_size)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('Ftheta prof')
        plt.title(r"$F_{\theta}$ (Nm$^{-3}$)", fontsize = font_size)
#        plt.title(r"$F_{\theta}/en_\mathrm{e}\eta_\mathrm{e}$ (Am$^{-2}$)", fontsize = font_size)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('je prof')
        plt.title(r"$|\boldsymbol{j}_\mathrm{e}|$ (Acm$^{-2}$)", fontsize = font_size)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ji prof')
        plt.title(r"$|\boldsymbol{j}_\mathrm{i}|$ (Acm$^{-2}$)", fontsize = font_size)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ji1/ji prof')
#        plt.title(r"(l) $|\boldsymbol{j}_{i1}|/|\boldsymbol{j}_{i}|$ (-)", fontsize = font_size)
        plt.title(r"$|\boldsymbol{j}_\mathrm{i1}|/(|\boldsymbol{j}_\mathrm{i1}|+|\boldsymbol{j}_\mathrm{i2}|)$", fontsize = font_size)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ji2/ji prof')
#        plt.title(r"(l) $|\boldsymbol{j}_{i2}|/|\boldsymbol{j}_{i}|$ (-)", fontsize = font_size)
        plt.title(r"$|\boldsymbol{j}_\mathrm{i2}|/(|\boldsymbol{j}_\mathrm{i1}|+|\boldsymbol{j}_\mathrm{i2}|)$", fontsize = font_size)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ji1_ji2_ji prof')
        plt.title(r"$|\boldsymbol{j}_\mathrm{i1}|$, $|\boldsymbol{j}_\mathrm{i2}|$, $|\boldsymbol{j}_\mathrm{i}|$ (Acm$^{-2}$)", fontsize = font_size)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('j prof')
        plt.title(r"$|\boldsymbol{j}|$ (Acm$^{-2}$)", fontsize = font_size)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ji_r prof')
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.title(r"$j_\mathrm{r i}$ (Acm$^{-2}$)", fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ji_z prof')
        plt.title(r"$j_\mathrm{z i}$ (Acm$^{-2}$)", fontsize = font_size)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('je zr prof')
        plt.title(r"$|\tilde{\boldsymbol{\jmath}}_\mathrm{e}|$ (Acm$^{-2}$)", fontsize = font_size)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ji zr prof')
        plt.title(r"$|\tilde{\boldsymbol{\jmath}}_\mathrm{i}|$ (Acm$^{-2}$)", fontsize = font_size)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('j zr prof')
        plt.title(r"$|\tilde{\boldsymbol{\jmath}}|$ (Acm$^{-2}$)", fontsize = font_size)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
    if plot_nmp_prof == 1:
        plt.figure('Nmpi1 prof')
        plt.title(r"$N_{mp,i1}$", fontsize = font_size)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('Nmpi2 prof')
        plt.title(r"$N_{mp,i2}$", fontsize = font_size)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('Nmpn1 prof')
        plt.title(r"$N_{mp,n}$", fontsize = font_size)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
    if plot_freq_prof == 1:
        plt.figure('Hall_par prof')
        plt.title(r"$\chi$", fontsize = font_size)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('Hall_par_eff prof')
        plt.title(r"$\chi_\mathrm{t}$", fontsize = font_size)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('Hall_par_effect prof')
        plt.title(r"$\sqrt{\chi\chi_\mathrm{t}}$", fontsize = font_size)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('nu_e_tot prof')
        plt.title(r"$\nu_\mathrm{e}$ (Hz)", fontsize = font_size)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('nu_e_tot_eff prof')
        plt.title(r"$\nu_\mathrm{eff} = \nu_\mathrm{e} + \nu_\mathrm{t}$ (Hz)", fontsize = font_size)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('nu_t prof')
        plt.title(r"$\nu_\mathrm{t}$ (Hz)", fontsize = font_size)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('nu_en prof')
        plt.title(r"$\nu_\mathrm{en}^\mathrm{el}$ (Hz)", fontsize = font_size)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('nu_ei1 prof')
        plt.title(r"$\nu_\mathrm{ei1}^\mathrm{el}$ (Hz)", fontsize = font_size)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('nu_ei2 prof')
        plt.title(r"$\nu_\mathrm{ei2}^\mathrm{el}$ (Hz)", fontsize = font_size)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('nu_i01 prof')
        plt.title(r"$\nu_\mathrm{ion01}$ (Hz)", fontsize = font_size)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('nu_i02 prof')
        plt.title(r"$\nu_\mathrm{ion02}$ (Hz)", fontsize = font_size)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('nu_i12 prof')
        plt.title(r"$\nu_\mathrm{ion12}$ (Hz)", fontsize = font_size)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('nu_ex prof')
        plt.title(r"$\nu_\mathrm{en}^\mathrm{ex}$ (Hz)", fontsize = font_size)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('nu_ei_el_tot prof')
        plt.title(r"$\nu_\mathrm{ei}^\mathrm{el} = \nu_\mathrm{ei1}^\mathrm{el} + \nu_\mathrm{ei2}^\mathrm{el}$ (Hz)", fontsize = font_size)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('nu_ion_tot prof')
        plt.title(r"$\nu_\mathrm{ion} = \nu_\mathrm{ion01} + \nu_\mathrm{ion02} + \nu_\mathrm{ion12}$ (Hz)", fontsize = font_size)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ratio_nu_en_nu_e_tot_eff prof')
        plt.title(r"$\nu_\mathrm{en}^\mathrm{el}/\nu_\mathrm{eff}$", fontsize = font_size)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ratio_nu_ion_tot_nu_e_tot_eff prof')
        plt.title(r"$\nu_\mathrm{ion}/\nu_\mathrm{eff}$", fontsize = font_size)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ratio_nu_ei_el_tot_nu_e_tot_eff prof')
        plt.title(r"$\nu_\mathrm{ei}^\mathrm{el}/\nu_\mathrm{eff}$", fontsize = font_size)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ratio_nu_ex_nu_e_tot_eff prof')
        plt.title(r"$\nu_\mathrm{en}^\mathrm{ex}/\nu_\mathrm{eff}$", fontsize = font_size)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ratio_nu_e_tot_nu_e_tot_eff prof')
        plt.title(r"$\nu_\mathrm{e}/\nu_\mathrm{eff}$", fontsize = font_size)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ratio_nu_t_nu_e_tot_eff prof')
        plt.title(r"$\nu_\mathrm{t}/\nu_\mathrm{eff}$", fontsize = font_size)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ratio_nu_e_tot_nu_t prof')
        plt.title(r"$\nu_\mathrm{e}/\nu_\mathrm{t}$", fontsize = font_size)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ratio_nu_ei_el_tot_nu_t prof')
        plt.title(r"$\nu_\mathrm{ei}/\nu_\mathrm{t}$", fontsize = font_size)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        
        
        plt.figure('ndot_e prof')
        plt.title(r"$S_\mathrm{e}/S_\mathrm{e,max}$", fontsize = font_size)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ndot_e prof chamber')
        plt.title(r"$S_\mathrm{e}/S_\mathrm{e,max}$", fontsize = font_size)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
    if plot_cath_Bline_prof == 1:
        plt.figure('nodim Boltzmann cathBline prof')
        plt.xlabel(r"$\sigma$ (Gm)",fontsize = font_size)
        plt.title(r"Bolzmann relation $e(\phi-\phi_0)/T_{e0} - \log(n_e/n_{e0})$ (-)", fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        ax = plt.gca()
        ax.set_xlim(1,11)
        xlims = ax.get_xlim()
        plt.plot(np.array([xlims[0],xlims[1]]),np.zeros(2), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        plt.figure('dim Boltzmann cathBline prof')
        plt.xlabel(r"$\sigma$ (Gm)",fontsize = font_size)
#        plt.title(r"(g) Bolzmann relation $e(\phi-\phi_0) - T_{e0}\log(n_e/n_{e0})$ (V)", fontsize = font_size)
        plt.title(r"Isothermal Boltzmann relation (V)", fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        ax = plt.gca()
        ax.set_xlim(1,11)
        ax.set_ylim(-0.1,6)
        xlims = ax.get_xlim()
        plt.plot(np.array([xlims[0],xlims[1]]),np.zeros(2), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        plt.figure('phi cathBline prof')
        plt.xlabel(r"$\sigma$ (Gm)",fontsize = font_size)
        plt.title(r"$\phi(\sigma)-\phi_0$ (V)", fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        ax = plt.gca()
        ax.set_xlim(1,11)
        xlims = ax.get_xlim()
        plt.plot(np.array([xlims[0],xlims[1]]),np.zeros(2), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        plt.figure('ne term cathBline prof')
        plt.xlabel(r"$\sigma$ (Gm)",fontsize = font_size)
        plt.title(r"$T_{e0}\log(n_e/n_{e0})$ (V)", fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ne rel cathBline prof')
        plt.xlabel(r"$\sigma$ (Gm)",fontsize = font_size)
        plt.title(r"$n_e/n_{e0}$ (-)", fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('Te rel cathBline prof')
        plt.xlabel(r"$\sigma$ (Gm)",fontsize = font_size)
        plt.title(r"$T_e/T_{e0}$ (-)", fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ne cathBline prof')
        plt.xlabel(r"$\sigma$ (Gm)",fontsize = font_size)
        plt.title(r"$n_e$ (m$^{-3}$)", fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('Te cathBline prof')
        plt.xlabel(r"$\sigma$ (Gm)",fontsize = font_size)
        plt.title(r"$T_e$ (eV)", fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        
#        plt.figure('nodim Boltzmann Bline prof')
#        plt.xlabel(r"$\sigma$ (Gm)",fontsize = font_size)
#        plt.title(r"(g) Bolzmann relation $e(\phi-\phi_0)/T_{e0} - \log(n_e/n_{e0})$ (-)", fontsize = font_size)
#        plt.xticks(fontsize = ticks_size) 
#        plt.yticks(fontsize = ticks_size)
#        ax = plt.gca()
#        ax.set_xlim(1,11)
#        xlims = ax.get_xlim()
#        plt.plot(np.array([xlims[0],xlims[1]]),np.zeros(2), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
#        plt.figure('dim Boltzmann Bline prof')
#        plt.xlabel(r"$\sigma$ (Gm)",fontsize = font_size)
##        plt.title(r"(g) Bolzmann relation $e(\phi-\phi_0) - T_{e0}\log(n_e/n_{e0})$ (V)", fontsize = font_size)
#        plt.title(r"(a) Isothermal Boltzmann relation (V)", fontsize = font_size)
#        plt.xticks(fontsize = ticks_size) 
#        plt.yticks(fontsize = ticks_size)
#        ax = plt.gca()
#        ax.set_xlim(1,11)
#        xlims = ax.get_xlim()
#        plt.plot(np.array([xlims[0],xlims[1]]),np.zeros(2), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
#        plt.figure('phi Bline prof')
#        plt.xlabel(r"$\sigma$ (Gm)",fontsize = font_size)
#        plt.title(r"(b) $(\phi(\lambda,\sigma)-\phi_0(\lambda))$ (V)", fontsize = font_size)
#        plt.xticks(fontsize = ticks_size) 
#        plt.yticks(fontsize = ticks_size)
#        ax = plt.gca()
#        ax.set_xlim(1,11)
#        xlims = ax.get_xlim()
#        plt.plot(np.array([xlims[0],xlims[1]]),np.zeros(2), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")        
#        plt.figure('ne term Bline prof')
#        plt.xlabel(r"$\sigma$ (Gm)",fontsize = font_size)
#        plt.title(r"(g) $T_{e0}\log(n_e/n_{e0})$ (V)", fontsize = font_size)
#        plt.xticks(fontsize = ticks_size) 
#        plt.yticks(fontsize = ticks_size)
#        plt.figure('ne rel Bline prof')
#        plt.xlabel(r"$\sigma$ (Gm)",fontsize = font_size)
#        plt.title(r"(g) $n_e/n_{e0}$ (-)", fontsize = font_size)
#        plt.xticks(fontsize = ticks_size) 
#        plt.yticks(fontsize = ticks_size)
#        plt.figure('Te rel Bline prof')
#        plt.xlabel(r"$\sigma$ (Gm)",fontsize = font_size)
#        plt.title(r"(g) $T_e/T_{e0}$ (-)", fontsize = font_size)
#        plt.xticks(fontsize = ticks_size) 
#        plt.yticks(fontsize = ticks_size)
#        plt.figure('ne Bline prof')
#        plt.xlabel(r"$\sigma$ (Gm)",fontsize = font_size)
#        plt.title(r"(c) $n_e$ (m$^{-3}$)", fontsize = font_size)
#        plt.xticks(fontsize = ticks_size) 
#        plt.yticks(fontsize = ticks_size)
#        plt.figure('Te Bline prof')
#        plt.xlabel(r"$\sigma$ (Gm)",fontsize = font_size)
#        plt.title(r"(d) $T_e$ (eV)", fontsize = font_size)
#        plt.xticks(fontsize = ticks_size) 
#        plt.yticks(fontsize = ticks_size)
        
    if plot_err_interp_prof == 1:
        plt.figure(r'err_interp_n prof')
        plt.title(r"$\epsilon_n$",fontsize = font_size,y=1.02)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
    if plot_lambdaD_prof == 1:
        plt.figure(r'lambdaD prof')
        plt.title(r"$\lambda_\mathrm{D}$ (mm)",fontsize = font_size,y=1.02)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
    if plot_Bline_prof == 1:
        plt.figure(r'B Bline prof')
        plt.title(r"$B$ (G)",fontsize = font_size,y=1.02)
        plt.xlabel(prof_xlabel_Bline,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)        
        plt.figure(r'alphat Bline prof')
        plt.title(r"$\alpha_\mathrm{t}$ (\%)",fontsize = font_size,y=1.02)
        plt.xlabel(prof_xlabel_Bline,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure(r'phi Bline prof')
        plt.title(r"$\phi$ (V)",fontsize = font_size,y=1.02)
        plt.xlabel(prof_xlabel_Bline,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure(r'ne Bline prof')
        plt.title(r"$n_\mathrm{e}$ (m$^{-3}$)",fontsize = font_size,y=1.02)
        plt.xlabel(prof_xlabel_Bline,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure(r'nn Bline prof')
        plt.title(r"$n_\mathrm{n}$ (m$^{-3}$)",fontsize = font_size,y=1.02)
        plt.xlabel(prof_xlabel_Bline,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure(r'Te Bline prof')
        plt.title(r"$T_\mathrm{e}$ (eV)",fontsize = font_size,y=1.02)
        plt.xlabel(prof_xlabel_Bline,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ratio_Ekin_Te Bline prof')
        plt.title(r"$m_\mathrm{e}u_\mathrm{e}^2/2T_\mathrm{e}$", fontsize = font_size)
        plt.xlabel(prof_xlabel_Bline,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('je_para Bline prof')
        plt.title(r"$-j_\mathrm{\parallel e}$ (Acm$^{-2}$)", fontsize = font_size)
        plt.xlabel(prof_xlabel_Bline,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('Hall_par Bline prof')
        plt.title(r"$\chi$", fontsize = font_size)
        plt.xlabel(prof_xlabel_Bline,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('Hall_par_eff Bline prof')
        plt.title(r"$\chi_\mathrm{t}$", fontsize = font_size)
        plt.xlabel(prof_xlabel_Bline,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('Hall_par_effect Bline prof')
        plt.title(r"$\sqrt{\chi\chi_\mathrm{t}}$", fontsize = font_size)
        plt.xlabel(prof_xlabel_Bline,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('felec_para Bline prof')
        plt.title(r"$en_\mathrm{e}\nabla_\parallel\phi$", fontsize = font_size)
        plt.xlabel(prof_xlabel_Bline,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
    
    # Radial profile plots
    if plot_fields_rprof == 1:
        plt.figure(r'phi rprof')
        plt.xlabel(rprof_xlabel,fontsize = font_size)
        plt.title(r"$\phi$ (V)",fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure(r'E rprof')
        plt.xlabel(rprof_xlabel,fontsize = font_size)
        plt.title(r"$|\boldsymbol{E}|$ (10$^{3}$ Vm$^{-1}$)",fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('Er rprof')
        plt.xlabel(rprof_xlabel,fontsize = font_size)
        plt.title(r"$E_\mathrm{r}$ (10$^{3}$ Vm$^{-1}$)",fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('Ez rprof')
        plt.xlabel(rprof_xlabel,fontsize = font_size)
        plt.title(r"$E_\mathrm{z}$ (10$^{3}$ Vm$^{-1}$)", fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
    if plot_dens_rprof == 1:
        plt.figure('n rprof')
        plt.xlabel(rprof_xlabel,fontsize = font_size)
        plt.title(r"$n_\mathrm{e}$ (m$^{-3}$)",fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ni1 rprof')
        plt.xlabel(rprof_xlabel,fontsize = font_size)
        plt.title(r"$n_\mathrm{i1}$ (m$^{-3}$)", fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ni2 rprof')
        plt.xlabel(rprof_xlabel,fontsize = font_size)
        plt.title(r"$n_\mathrm{i2}$ (m$^{-3}$)", fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ratio_ni1_ni2 rprof')
        plt.xlabel(rprof_xlabel,fontsize = font_size)
        plt.title(r"$n_\mathrm{i2}/n_\mathrm{i1}$", fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ratio_ni1_ni3 rprof')
        plt.xlabel(rprof_xlabel,fontsize = font_size)
        plt.title(r"$n_\mathrm{i3}/n_\mathrm{i1}$", fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ratio_ni1_ni4 rprof')
        plt.xlabel(rprof_xlabel,fontsize = font_size)
        plt.title(r"$n_\mathrm{i4}/n_\mathrm{i1}$", fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ratio_ne_neCEX rprof')
        plt.xlabel(rprof_xlabel,fontsize = font_size)
        plt.title(r"$n_\mathrm{e,CEX}/n_\mathrm{e}$", fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('nn rprof')
        plt.xlabel(rprof_xlabel,fontsize = font_size)
        plt.title(r"$n_\mathrm{n}$ (m$^{-3}$)", fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ratio_nn1_nn2 rprof')
        plt.xlabel(rprof_xlabel,fontsize = font_size)
        plt.title(r"$n_\mathrm{n2}/n_\mathrm{n1}$", fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ratio_nn1_nn3 rprof')
        plt.xlabel(rprof_xlabel,fontsize = font_size)
        plt.title(r"$n_\mathrm{n3}/n_\mathrm{n1}$", fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ratio_nn1_nnCEX rprof')
        plt.xlabel(rprof_xlabel,fontsize = font_size)
        plt.title(r"$n_\mathrm{n,CEX}/n_\mathrm{n,slow}$", fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ratio_nn_nnCEX rprof')
        plt.xlabel(rprof_xlabel,fontsize = font_size)
        plt.title(r"$n_\mathrm{n,CEX}/n_\mathrm{n}$", fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('all nis rprof')
        plt.xlabel(rprof_xlabel,fontsize = font_size)
        plt.title(r"$n_\mathrm{i}$ (m$^{-3}$)",fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
    if plot_temp_rprof == 1:
        plt.figure('Te rprof')
        plt.xlabel(rprof_xlabel,fontsize = font_size)
        plt.title(r"$T_\mathrm{e}$ (eV)", fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('Ti1 rprof')
        plt.xlabel(rprof_xlabel,fontsize = font_size)
        plt.title(r"$T_\mathrm{i1}$ (eV)", fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('Ti2 rprof')
        plt.xlabel(rprof_xlabel,fontsize = font_size)
        plt.title(r"$T_\mathrm{i2}$ (eV)", fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('Tn rprof')
        plt.xlabel(rprof_xlabel,fontsize = font_size)
        plt.title(r"$T_\mathrm{n}$ (eV)", fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ratio_Ekin_Te rprof')
        plt.xlabel(rprof_xlabel,fontsize = font_size)
        plt.title(r"$m_\mathrm{e}u_\mathrm{e}^2/2T_\mathrm{e}$", fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ratio_Ekin_Ti1 rprof')
        plt.xlabel(rprof_xlabel,fontsize = font_size)
        plt.title(r"$E_\mathrm{kin,i1}/T_\mathrm{i1}$", fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ratio_Ekin_Ti2 rprof')
        plt.xlabel(rprof_xlabel,fontsize = font_size)
        plt.title(r"$E_\mathrm{kin,i2}/T_\mathrm{i2}$", fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('pn rprof')
        plt.xlabel(rprof_xlabel,fontsize = font_size)
        plt.title(r"$p_\mathrm{n}$ (mbar)", fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)  
    if plot_curr_rprof == 1:
        plt.figure('je_r rprof')
        plt.title(r"$-j_\mathrm{re}$ (Acm$^{-2}$)", fontsize = font_size)
        plt.xlabel(rprof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('je_t rprof')
        plt.title(r"$-j_\mathrm{\theta e}$ (Acm$^{-2}$)", fontsize = font_size)
        plt.xlabel(rprof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('je_z rprof')
        plt.title(r"$-j_\mathrm{z e}$ (Acm$^{-2}$)", fontsize = font_size)
        plt.xlabel(rprof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('je_perp rprof')
        plt.title(r"$-j_{\bot e}$ (Acm$^{-2}$)", fontsize = font_size)
        plt.xlabel(rprof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('je_para rprof')
        plt.title(r"$-j_\mathrm{\parallel e}$ (Acm$^{-2}$)", fontsize = font_size)
        plt.xlabel(rprof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ratio je_t_perp rprof')
        plt.title(r"$j_\mathrm{\theta e}/j_\mathrm{\bot e}$", fontsize = font_size)
        plt.xlabel(rprof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('Hall_je_perp rprof')
        plt.title(r"$\chi j_\mathrm{\bot e}$ (Acm$^{-2}$)", fontsize = font_size)
        plt.xlabel(rprof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('Ftheta rprof')
#        plt.title(r"$F_{\theta}/en_\mathrm{e}\eta_\mathrm{e}$ (Am$^{-2}$)", fontsize = font_size)
        plt.title(r"$F_{\theta}$ (Nm$^{-3}$)", fontsize = font_size)
        plt.xlabel(rprof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('je rprof')
        # plt.title(r"$|\boldsymbol{j}_\mathrm{e}|$ (Acm$^{-2}$)", fontsize = font_size)
        plt.title(r"$j_\mathrm{e}$ (Acm$^{-2}$)", fontsize = font_size)
        plt.xlabel(rprof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ji rprof')
        # plt.title(r"$|\boldsymbol{j}_\mathrm{i}|$ (Acm$^{-2}$)", fontsize = font_size)
        plt.title(r"$j_\mathrm{i}$ (Acm$^{-2}$)", fontsize = font_size)
        plt.xlabel(rprof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ji1/ji rprof')
        plt.title(r"$|\boldsymbol{j}_\mathrm{i1}|/(|\boldsymbol{j}_\mathrm{i1}|+|\boldsymbol{j}_\mathrm{i2}|)$", fontsize = font_size)
        plt.xlabel(rprof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ji2/ji rprof')
        plt.title(r"$|\boldsymbol{j}_\mathrm{i2}|/(|\boldsymbol{j}_\mathrm{i1}|+|\boldsymbol{j}_\mathrm{i2}|)$", fontsize = font_size)
        plt.xlabel(rprof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ji1_ji2_ji rprof')
        plt.title(r"$|\boldsymbol{j}_\mathrm{i1}|$, $|\boldsymbol{j}_\mathrm{i2}|$, $|\boldsymbol{j}_\mathrm{i}|$ (Acm$^{-2}$)", fontsize = font_size)
        plt.xlabel(rprof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('j rprof')
        # plt.title(r"$|\boldsymbol{j}|$ (Acm$^{-2}$)", fontsize = font_size)
        plt.title(r"$j$ (Acm$^{-2}$)", fontsize = font_size)
        plt.xlabel(rprof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ji_r rprof')
        plt.xlabel(rprof_xlabel,fontsize = font_size)
        plt.title(r"$j_\mathrm{ri}$ (Acm$^{-2}$)", fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ji_z rprof')
        plt.title(r"$j_\mathrm{zi}$ (Acm$^{-2}$)", fontsize = font_size)
        plt.xlabel(rprof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('je zr rprof')
        # plt.title(r"$|\tilde{\boldsymbol{\jmath}}_\mathrm{e}|$ (Acm$^{-2}$)", fontsize = font_size)
        plt.title(r"$\tilde{\jmath}_\mathrm{e}$ (Acm$^{-2}$)", fontsize = font_size)
        plt.xlabel(rprof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ji zr rprof')
        # plt.title(r"$|\tilde{\boldsymbol{\jmath}}_\mathrm{i}|$ (Acm$^{-2}$)", fontsize = font_size)
        plt.title(r"$\tilde{\jmath}_\mathrm{i}$ (Acm$^{-2}$)", fontsize = font_size)
        plt.xlabel(rprof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('j zr rprof')
        # plt.title(r"$|\tilde{\boldsymbol{\jmath}}|$ (Acm$^{-2}$)", fontsize = font_size)
        plt.title(r"$\tilde{\jmath}$ (Acm$^{-2}$)", fontsize = font_size)
        plt.xlabel(rprof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('j_z rprof')
        # plt.title(r"$|\tilde{\boldsymbol{\jmath}}|$ (Acm$^{-2}$)", fontsize = font_size)
        plt.title(r"$j_\mathrm{z}$ (Acm$^{-2}$)", fontsize = font_size)
        plt.xlabel(rprof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('j_r rprof')
        # plt.title(r"$|\tilde{\boldsymbol{\jmath}}|$ (Acm$^{-2}$)", fontsize = font_size)
        plt.title(r"$j_\mathrm{r}$ (Acm$^{-2}$)", fontsize = font_size)
        plt.xlabel(rprof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
    if plot_freq_rprof == 1:
        plt.figure('Hall_par rprof')
        plt.title(r"$\chi$", fontsize = font_size)
        plt.xlabel(rprof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('Hall_par_eff rprof')
        plt.title(r"$\chi_\mathrm{t}$", fontsize = font_size)
        plt.xlabel(rprof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('Hall_par_effect rprof')
        plt.title(r"$\sqrt{\chi\chi_\mathrm{t}}$", fontsize = font_size)
        plt.xlabel(rprof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('nu_e_tot rprof')
        plt.title(r"$\nu_\mathrm{e}$ (Hz)", fontsize = font_size)
        plt.xlabel(rprof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('nu_e_tot_eff rprof')
        plt.title(r"$\nu_\mathrm{e} + \nu_\mathrm{t}$ (Hz)", fontsize = font_size)
        plt.xlabel(prof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('nu_en rprof')
        plt.title(r"$\nu_\mathrm{en}^\mathrm{el}$ (Hz)", fontsize = font_size)
        plt.xlabel(rprof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('nu_ei1 rprof')
        plt.title(r"$\nu_\mathrm{ei1}^\mathrm{el}$ (Hz)", fontsize = font_size)
        plt.xlabel(rprof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('nu_ei2 rprof')
        plt.title(r"$\nu_\mathrm{ei2}^\mathrm{el}$ (Hz)", fontsize = font_size)
        plt.xlabel(rprof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('nu_i01 rprof')
        plt.title(r"$\nu_\mathrm{en}^\mathrm{ion01}$ (Hz)", fontsize = font_size)
        plt.xlabel(rprof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('nu_i02 rprof')
        plt.title(r"$\nu_\mathrm{en}^\mathrm{ion02}$ (Hz)", fontsize = font_size)
        plt.xlabel(rprof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('nu_i12 rprof')
        plt.title(r"$\nu_\mathrm{ei1}^\mathrm{ion12}$ (Hz)", fontsize = font_size)
        plt.xlabel(rprof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('nu_ei_el_tot rprof')
        plt.title(r"$\nu_\mathrm{ei1}^\mathrm{el} + \nu_\mathrm{ei2}^\mathrm{el}$ (Hz)", fontsize = font_size)
        plt.xlabel(rprof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('nu_ion_tot rprof')
        plt.title(r"$\nu_\mathrm{en}^\mathrm{ion01} + \nu_\mathrm{en}^\mathrm{ion02} + \nu_\mathrm{ei1}^\mathrm{ion12}$ (Hz)", fontsize = font_size)
        plt.xlabel(rprof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ndot_e rprof')
        plt.title(r"$S_\mathrm{e}$ (m$^{-3}$s$^{-1}$)", fontsize = font_size)
        plt.xlabel(rprof_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        
    # Angular profiles (Faraday probe scans)    
    if plot_B_scan == 1:
        plt.figure(r'B scan')
        plt.xlabel(scan_xlabel,fontsize = font_size)
        plt.title(r"$B$ (G)",fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)     
    if plot_fields_scan == 1:
        plt.figure(r'phi scan')
        plt.xlabel(scan_xlabel,fontsize = font_size)
        plt.title(r"$\phi$ (V)",fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
    if plot_dens_scan == 1:
        plt.figure('n scan')
        plt.xlabel(scan_xlabel,fontsize = font_size)
        plt.title(r"$n_\mathrm{e}$ (m$^{-3}$)",fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('nn scan')
        plt.xlabel(scan_xlabel,fontsize = font_size)
        plt.title(r"$n_\mathrm{n}$ (m$^{-3}$)", fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
    if plot_temp_scan == 1:
        plt.figure('Te scan')
        plt.xlabel(scan_xlabel,fontsize = font_size)
        plt.title(r"$T_\mathrm{e}$ (eV)", fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ratio_Ekin_Te scan')
        plt.xlabel(scan_xlabel,fontsize = font_size)
        plt.title(r"$m_\mathrm{e}u_\mathrm{e}^2/2T_\mathrm{e}$", fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
    if plot_curr_scan == 1:
        plt.figure('je_t scan')
        #plt.title(r"$-j_\mathrm{\theta e}$ (Acm$^{-2}$)", fontsize = font_size)
        plt.ylabel(r"$-j_\mathrm{\theta e}$ (Acm$^{-2}$)", fontsize = font_size)
        plt.xlabel(scan_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('je_z scan')
        #plt.title(r"$-j_\mathrm{z e}$ (Acm$^{-2}$)", fontsize = font_size)
        plt.ylabel(r"$-j_\mathrm{z e}$ (Acm$^{-2}$)", fontsize = font_size)
        plt.xlabel(scan_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('je_r scan')
        #plt.title(r"$-j_\mathrm{r e}$ (Acm$^{-2}$)", fontsize = font_size)
        plt.ylabel(r"$-j_\mathrm{r e}$ (Acm$^{-2}$)", fontsize = font_size)
        plt.xlabel(scan_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('je_para scan')
        #plt.title(r"$-j_\mathrm{\parallel e}$ (Acm$^{-2}$)", fontsize = font_size)
        plt.ylabel(r"$-j_\mathrm{\parallel e}$ (Acm$^{-2}$)", fontsize = font_size)
        plt.xlabel(scan_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('je_perp scan')
        #plt.title(r"$-j_\mathrm{\bot e}$ (Acm$^{-2}$)", fontsize = font_size)
        plt.ylabel(r"$-j_\mathrm{\bot e}$ (Acm$^{-2}$)", fontsize = font_size)
        plt.xlabel(scan_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('je zr scan')
        #plt.title(r"$|\tilde{\boldsymbol{\jmath}}_\mathrm{e}|$ (Acm$^{-2}$)", fontsize = font_size)
        # plt.ylabel(r"$|\tilde{\boldsymbol{\jmath}}_\mathrm{e}|$ (Acm$^{-2}$)", fontsize = font_size)
        plt.ylabel(r"$\tilde{\jmath}_\mathrm{e}$ (Acm$^{-2}$)", fontsize = font_size)
        plt.xlabel(scan_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ji_z scan')
        #plt.title(r"$j_\mathrm{z i}$ (Acm$^{-2}$)", fontsize = font_size)
        plt.ylabel(r"$j_\mathrm{z i}$ (Acm$^{-2}$)", fontsize = font_size)
        plt.xlabel(scan_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ji_r scan')
        #plt.title(r"$j_\mathrm{r i}$ (Acm$^{-2}$)", fontsize = font_size)
        plt.ylabel(r"$j_\mathrm{r i}$ (Acm$^{-2}$)", fontsize = font_size)
        plt.xlabel(scan_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ji zr scan')
        #plt.title(r"$|\tilde{\boldsymbol{\jmath}}_\mathrm{i}|$ (Acm$^{-2}$)", fontsize = font_size)
        # plt.ylabel(r"$|\tilde{\boldsymbol{\jmath}}_\mathrm{i}|$ (Acm$^{-2}$)", fontsize = font_size)
        plt.ylabel(r"$\tilde{\jmath}_\mathrm{i}$ (Acm$^{-2}$)", fontsize = font_size)
        plt.xlabel(scan_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('j_z scan')
        #plt.title(r"$j_\mathrm{z}$ (Acm$^{-2}$)", fontsize = font_size)
        plt.ylabel(r"$j_\mathrm{z}$ (Acm$^{-2}$)", fontsize = font_size)
        plt.xlabel(scan_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('j_r scan')
        #plt.title(r"$j_\mathrm{r}$ (Acm$^{-2}$)", fontsize = font_size)
        plt.ylabel(r"$j_\mathrm{r}$ (Acm$^{-2}$)", fontsize = font_size)
        plt.xlabel(scan_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('j zr scan')
        #plt.title(r"$|\tilde{\boldsymbol{\jmath}}|$ (Acm$^{-2}$)", fontsize = font_size)
        # plt.ylabel(r"$|\tilde{\boldsymbol{\jmath}}|$ (Acm$^{-2}$)", fontsize = font_size)
        plt.ylabel(r"$\tilde{\jmath}$ (Acm$^{-2}$)", fontsize = font_size)
        plt.xlabel(scan_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('je scan')
        #plt.title(r"$|\boldsymbol{j}_\mathrm{e}|$ (Acm$^{-2}$)", fontsize = font_size)
        # plt.ylabel(r"$|\boldsymbol{j}_\mathrm{e}|$ (Acm$^{-2}$)", fontsize = font_size)
        plt.ylabel(r"$j_\mathrm{e}$ (Acm$^{-2}$)", fontsize = font_size)
        plt.xlabel(scan_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('ji scan')
        #plt.title(r"$|\boldsymbol{j}_\mathrm{i}|$ (Acm$^{-2}$)", fontsize = font_size)
        # plt.ylabel(r"$|\boldsymbol{j}_\mathrm{i}|$ (Acm$^{-2}$)", fontsize = font_size)
        plt.ylabel(r"$j_\mathrm{i}$ (Acm$^{-2}$)", fontsize = font_size)
        plt.xlabel(scan_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('j scan')
        #plt.title(r"$|\boldsymbol{j}|$ (Acm$^{-2}$)", fontsize = font_size)
        # plt.ylabel(r"$|\boldsymbol{j}|$ (Acm$^{-2}$)", fontsize = font_size)
        plt.ylabel(r"$j$ (Acm$^{-2}$)", fontsize = font_size)
        plt.xlabel(scan_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
    if plot_freq_scan == 1:
        plt.figure('Hall_par scan')
        plt.title(r"$\chi$", fontsize = font_size)
        plt.xlabel(scan_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('Hall_par_eff scan')
        plt.title(r"$\chi_\mathrm{t}$", fontsize = font_size)
        plt.xlabel(scan_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure('Hall_par_effect scan')
        plt.title(r"$\sqrt{\chi\chi_\mathrm{t}}$", fontsize = font_size)
        plt.xlabel(scan_xlabel,fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)




        
    ind  = 0
    ind2 = 0
    ind3 = 0
    for k in range(0,nsims):
        ind_ini_letter = sim_names[k].rfind('/') + 1
        print("##### CASE "+str(k+1)+": "+sim_names[k][ind_ini_letter::]+" #####")
        
        # if k==3:
        #     print("WARNING: last_steps modified for CASE = "+str(k+1))
        #     last_steps = 800
        
        print("##### oldsimparams_sim = "+str(oldsimparams_sim[k])+" #####")
        print("##### oldpost_sim      = "+str(oldpost_sim[k])+" #####")
        print("##### last_steps       = "+str(last_steps)+" #####")
        ######################## READ INPUT/OUTPUT FILES ##########################
        # Obtain paths to simulation files
        path_picM         = sim_names[k]+"/SET/inp/"+PIC_mesh_file_name[k]
        path_picM_plot    = sim_names[k]+"/SET/inp/"+PIC_mesh_plot_file_name[k]
        path_simstate_inp = sim_names[k]+"/CORE/inp/SimState.hdf5"
#        path_simstate_out = sim_names[k]+"/CORE/out/SimState.hdf5"
#        path_postdata_out = sim_names[k]+"/CORE/out/PostData.hdf5"
#        path_simparams_inp = sim_names[k]+"/CORE/inp/sim_params.inp"
        if k == 0:
            path_simstate_out = sim_names[k]+"/CORE/out/SimState.hdf5"
            path_postdata_out = sim_names[k]+"/CORE/out/PostData.hdf5"
            path_simparams_inp = sim_names[k]+"/CORE/inp/sim_params.inp"
#            path_simparams_inp = sim_names[k]+"/CORE/inp/sim_params_read.inp"
            # --------------
#            path_simstate_out = sim_names[k]+"/CORE/out/20000steps_removing_it_matching/SimState.hdf5"
#            path_postdata_out = sim_names[k]+"/CORE/out/20000steps_removing_it_matching/PostData.hdf5"
#            path_simparams_inp = sim_names[k]+"/CORE/inp/original_inputs/sim_params.inp"
            # --------------
#            path_simstate_out = sim_names[k]+"/CORE/out/60000steps_before_removing_it_matching_1it_max_Ca/SimState.hdf5"
#            path_postdata_out = sim_names[k]+"/CORE/out/60000steps_before_removing_it_matching_1it_max_Ca/PostData.hdf5"
#            path_simparams_inp = sim_names[k]+"/CORE/inp/original_inputs/sim_params.inp"
            # --------------
#            path_simstate_out = sim_names[k]+"/CORE/out/60000steps_after_changes_it_matching_modified_nonewiter/SimState.hdf5"
#            path_postdata_out = sim_names[k]+"/CORE/out/60000steps_after_changes_it_matching_modified_nonewiter/PostData.hdf5"
#            path_simparams_inp = sim_names[k]+"/CORE/inp/sim_params.inp"
            # --------------
#            path_simstate_out = sim_names[k]+"/CORE/out/60000steps_after_changes_it_matching_modified_iterations/SimState.hdf5"
#            path_postdata_out = sim_names[k]+"/CORE/out/60000steps_after_changes_it_matching_modified_iterations/PostData.hdf5"
##            path_simparams_inp = sim_names[k]+"/CORE/inp/sim_params.inp"
#            path_simparams_inp = sim_names[k]+"/CORE/inp/after_condwalls_nocond/sim_params.inp"
            # --------------
#            path_simstate_out = sim_names[k]+"/CORE/out/60000steps_after_changes_it_matching_RLC_modified_iterations/SimState.hdf5"
#            path_postdata_out = sim_names[k]+"/CORE/out/60000steps_after_changes_it_matching_RLC_modified_iterations/PostData.hdf5"
#            path_simparams_inp = sim_names[k]+"/CORE/inp/sim_params.inp"
            # --------------
#            path_simstate_out = sim_names[k]+"/CORE/out/60000steps_after_changes_it_matching_RLC_modified_nonewiter/SimState.hdf5"
#            path_postdata_out = sim_names[k]+"/CORE/out/60000steps_after_changes_it_matching_RLC_modified_nonewiter/PostData.hdf5"
#            path_simparams_inp = sim_names[k]+"/CORE/inp/sim_params.inp"
            
            
        elif k >= 1:
            path_simstate_out = sim_names[k]+"/CORE/out/SimState.hdf5"
            path_postdata_out = sim_names[k]+"/CORE/out/PostData.hdf5"
            path_simparams_inp = sim_names[k]+"/CORE/inp/sim_params.inp"
#            path_simparams_inp = sim_names[k]+"/CORE/inp/sim_params_read.inp"
            # --------------
#            path_simstate_out = sim_names[k]+"/CORE/out/60000steps_removing_it_matching_inipop/SimState.hdf5"
#            path_postdata_out = sim_names[k]+"/CORE/out/60000steps_removing_it_matching_inipop/PostData.hdf5"
#            path_simparams_inp = sim_names[k]+"/CORE/inp/inipop_inputs/sim_params.inp"
            # --------------
#            path_simstate_out = sim_names[k]+"/CORE/out/60000steps_after_changes_it_matching/SimState.hdf5"
#            path_postdata_out = sim_names[k]+"/CORE/out/60000steps_after_changes_it_matching/PostData.hdf5"
#            path_simparams_inp = sim_names[k]+"/CORE/inp/sim_params.inp"
            # --------------
#            path_simstate_out = sim_names[k]+"/CORE/out/60000steps_after_changes_it_matching_RLC/SimState.hdf5"
#            path_postdata_out = sim_names[k]+"/CORE/out/60000steps_after_changes_it_matching_RLC/PostData.hdf5"
#            path_simparams_inp = sim_names[k]+"/CORE/inp/sim_params.inp"
            # --------------
#            path_simstate_out = sim_names[k]+"/CORE/out/60000steps_before_removing_it_matching_RLC_1it_max_Ca/SimState.hdf5"
#            path_postdata_out = sim_names[k]+"/CORE/out/60000steps_before_removing_it_matching_RLC_1it_max_Ca/PostData.hdf5"
#            path_simparams_inp = sim_names[k]+"/CORE/inp/original_inputs/sim_params.inp"
            # --------------
#            path_simstate_out = sim_names[k]+"/CORE/out/60000steps_before_removing_it_matching_RLC_10it_max_Ca/SimState.hdf5"
#            path_postdata_out = sim_names[k]+"/CORE/out/60000steps_before_removing_it_matching_RLC_10it_max_Ca/PostData.hdf5"
#            path_simparams_inp = sim_names[k]+"/CORE/inp/original_inputs/sim_params.inp"
            # --------------
#            path_simstate_out = sim_names[k]+"/CORE/out/60000steps_before_removing_it_matching_RLC_10it_max_Ca_fixdummy8/SimState.hdf5"
#            path_postdata_out = sim_names[k]+"/CORE/out/60000steps_before_removing_it_matching_RLC_10it_max_Ca_fixdummy8/PostData.hdf5"
#            path_simparams_inp = sim_names[k]+"/CORE/inp/original_inputs/sim_params.inp"
            # --------------
#            path_simstate_out = sim_names[k]+"/CORE/out/60000steps_after_changes_it_matching_jemean_always_nonewiter/SimState.hdf5"
#            path_postdata_out = sim_names[k]+"/CORE/out/60000steps_after_changes_it_matching_jemean_always_nonewiter/PostData.hdf5"
#            path_simparams_inp = sim_names[k]+"/CORE/inp/sim_params.inp"
            # --------------
#            path_simstate_out = sim_names[k]+"/CORE/out/60000steps_after_changes_it_matching_modified_iterations/SimState.hdf5"
#            path_postdata_out = sim_names[k]+"/CORE/out/60000steps_after_changes_it_matching_modified_iterations/PostData.hdf5"
#            path_simparams_inp = sim_names[k]+"/CORE/inp/sim_params.inp"
            # --------------
#            path_simstate_out = sim_names[k]+"/CORE/out/60000steps_after_changes_it_matching_RLC_modified_iterations/SimState.hdf5"
#            path_postdata_out = sim_names[k]+"/CORE/out/60000steps_after_changes_it_matching_RLC_modified_iterations/PostData.hdf5"
#            path_simparams_inp = sim_names[k]+"/CORE/inp/sim_params.inp"
            # --------------
#            path_simstate_out = sim_names[k]+"/CORE/out/60000steps_after_changes_it_matching_RLC_jemean_always_iterations/SimState.hdf5"
#            path_postdata_out = sim_names[k]+"/CORE/out/60000steps_after_changes_it_matching_RLC_jemean_always_iterations/PostData.hdf5"
#            path_simparams_inp = sim_names[k]+"/CORE/inp/sim_params.inp"
            # --------------
#            path_simstate_out = sim_names[k]+"/CORE/out/60000steps_cond_wall_connect1_hefunc1_jefl1_70V_plume/SimState.hdf5"
#            path_postdata_out = sim_names[k]+"/CORE/out/60000steps_cond_wall_connect1_hefunc1_jefl1_70V_plume/PostData.hdf5"
#            path_simparams_inp = sim_names[k]+"/CORE/inp/sim_params.inp"
            # --------------
#            path_simstate_out = sim_names[k]+"/CORE/out/60000steps_phi_inf_hefunc0/SimState.hdf5"
#            path_postdata_out = sim_names[k]+"/CORE/out/60000steps_phi_inf_hefunc0/PostData.hdf5"
##            path_simparams_inp = sim_names[k]+"/CORE/inp/sim_params.inp"
#            path_simparams_inp = sim_names[k]+"/CORE/inp/after_condwalls_nocond/sim_params.inp"
        print("Reading results...")
        [num_ion_spe,num_neu_spe,Z_ion_spe,n_mp_cell_i,n_mp_cell_n,n_mp_cell_i_min,
           n_mp_cell_i_max,n_mp_cell_n_min,n_mp_cell_n_max,min_ion_plasma_density,
           m_A,spec_refl_prob,ene_bal,points,zs,rs,zscells,rscells,dims,
           nodes_flag,cells_flag,cells_vol,volume,vol,ind_maxr_c,ind_maxz_c,nr_c,nz_c,
           eta_max,eta_min,xi_top,xi_bottom,time,time_fast,steps,steps_fast,dt,dt_e,
           nsteps,nsteps_fast,nsteps_eFld,faces,nodes,elem_n,boundary_f,face_geom,elem_geom,
           versors_e,versors_f,n_faces,n_elems,n_faces_boundary,bIDfaces_Dwall,bIDfaces_Awall,
           bIDfaces_FLwall,IDfaces_Dwall,IDfaces_Awall,IDfaces_FLwall,zfaces_Dwall,
           rfaces_Dwall,Afaces_Dwall,zfaces_Awall,rfaces_Awall,Afaces_Awall,
           zfaces_FLwall,rfaces_FLwall,Afaces_FLwall,zfaces_Cwall,rfaces_Cwall,Afaces_Cwall,
           cath_elem,z_cath,r_cath,V_cath,mass,ssIons1,ssIons2,ssNeutrals1,ssNeutrals2,
           n_mp_i1_list,n_mp_i2_list,n_mp_n1_list,n_mp_n2_list,
           alpha_ano,alpha_ano_e,alpha_ano_q,alpha_ine,alpha_ine_q,
           alpha_ano_elems,alpha_ano_e_elems,alpha_ano_q_elems,alpha_ine_elems,
           alpha_ine_q_elems,alpha_ano_faces,alpha_ano_e_faces,alpha_ano_q_faces,
           alpha_ine_faces,alpha_ine_q_faces,
           phi,phi_elems,phi_faces,Ez,Er,Efield,Bz,Br,Bfield,Te,Te_elems,Te_faces,
           je_mag_elems,je_perp_elems,je_theta_elems,je_para_elems,je_z_elems,je_r_elems,
           je_mag_faces,je_perp_faces,je_theta_faces,je_para_faces,je_z_faces,je_r_faces,
           cs01,cs02,cs03,cs04,nn1,nn2,nn3,ni1,ni2,ni3,ni4,
           ne,ne_elems,ne_faces,fn1_x,fn1_y,fn1_z,fn2_x,fn2_y,fn2_z,fn3_x,fn3_y,fn3_z,
           fi1_x,fi1_y,fi1_z,fi2_x,fi2_y,fi2_z,fi3_x,fi3_y,fi3_z,fi4_x,fi4_y,fi4_z,
           un1_x,un1_y,un1_z,un2_x,un2_y,un2_z,un3_x,un3_y,un3_z,
           ui1_x,ui1_y,ui1_z,ui2_x,ui2_y,ui2_z,ui3_x,ui3_y,ui3_z,ui4_x,ui4_y,ui4_z,
           ji1_x,ji1_y,ji1_z,ji2_x,ji2_y,ji2_z,ji3_x,ji3_y,ji3_z,ji4_x,ji4_y,ji4_z,
           je_r,je_t,je_z,je_perp,je_para,ue_r,ue_t,ue_z,
           ue_perp,ue_para,uthetaExB,Tn1,Tn2,Tn3,Ti1,Ti2,Ti3,Ti4,
           n_mp_n1,n_mp_n2,n_mp_n3,n_mp_i1,n_mp_i2,n_mp_i3,n_mp_i4,
           avg_w_n1,avg_w_n2,avg_w_i1,avg_w_i2,neu_gen_weights1,neu_gen_weights2,
           ion_gen_weights1,ion_gen_weights2,surf_elems,n_imp_elems,imp_elems,
           imp_elems_kbc,imp_elems_MkQ1,imp_elems_Te,imp_elems_dphi_kbc,
           imp_elems_dphi_sh,imp_elems_nQ1,imp_elems_nQ2,imp_elems_ion_flux_in1,
           imp_elems_ion_flux_out1,imp_elems_ion_ene_flux_in1,
           imp_elems_ion_ene_flux_out1,imp_elems_ion_imp_ene1,
           imp_elems_ion_flux_in2,imp_elems_ion_flux_out2,
           imp_elems_ion_ene_flux_in2,imp_elems_ion_ene_flux_out2,
           imp_elems_ion_imp_ene2,imp_elems_neu_flux_in1,imp_elems_neu_flux_out1,
           imp_elems_neu_ene_flux_in1,imp_elems_neu_ene_flux_out1,
           imp_elems_neu_imp_ene1,imp_elems_neu_flux_in2,imp_elems_neu_flux_out2,
           imp_elems_neu_ene_flux_in2,imp_elems_neu_ene_flux_out2,
           imp_elems_neu_imp_ene2,tot_mass_mp_neus,tot_mass_mp_ions,tot_num_mp_neus,
           tot_num_mp_ions,tot_mass_exit_neus,tot_mass_exit_ions,mass_mp_neus,
           mass_mp_ions,num_mp_neus,num_mp_ions,avg_dens_mp_neus,avg_dens_mp_ions,
           eta_u,eta_prod,eta_thr,eta_div,eta_cur,thrust,thrust_ion,thrust_neu,thrust_e,
           thrust_m,thrust_pres,Id_inst,Id,Vd_inst,Vd,I_beam,I_tw_tot,Pd,Pd_inst,P_mat,
           P_inj,P_inf,P_ion,P_ex,P_use_tot_i,P_use_tot_n,P_use_tot,P_use_z_i,P_use_z_n,
           P_use_z_e,P_use_z,qe_wall,qe_wall_inst,Pe_faces_Dwall,Pe_faces_Awall,
           Pe_faces_FLwall,Pe_faces_Dwall_inst,Pe_faces_Awall_inst,Pe_faces_FLwall_inst,
           Pe_Dwall,Pe_Awall,Pe_FLwall,Pe_Dwall_inst,Pe_Awall_inst,Pe_FLwall_inst, 
           Pe_Cwall,Pe_Cwall_inst,
           Pi_Dwall,Pi_Awall,Pi_FLwall,Pi_FLwall_nonz,Pi_Cwall,Pn_Dwall,Pn_Awall,Pn_FLwall,
           Pn_FLwall_nonz,Pn_Cwall,P_Dwall,P_Awall,P_FLwall,Pwalls,Pionex,Ploss,Psource,Pthrust,
           Pnothrust,Pnothrust_walls,Pturb,balP,err_balP,ctr_Pd,ctr_Ploss,ctr_Pwalls,
           ctr_Pionex,ctr_P_DAwalls,ctr_P_FLwalls,ctr_P_FLwalls_in,ctr_P_FLwalls_i,
           ctr_P_FLwalls_n,ctr_P_FLwalls_e,balP_Pthrust,err_balP_Pthrust,
           ctr_balPthrust_Pd,ctr_balPthrust_Pnothrust,ctr_balPthrust_Pthrust,
           ctr_balPthrust_Pnothrust_walls,ctr_balPthrust_Pnothrust_ionex,
           err_def_balP,Isp_s,Isp_ms,
           dMdt_i1,dMdt_i2,dMdt_i3,dMdt_i4,dMdt_n1,dMdt_n2,dMdt_n3,dMdt_tot,
           mflow_coll_i1,mflow_coll_i2,mflow_coll_i3,mflow_coll_i4,mflow_coll_n1,
           mflow_coll_n2,mflow_coll_n3,mflow_fw_i1,mflow_fw_i2,mflow_fw_i3,
           mflow_fw_i4,mflow_fw_n1,mflow_fw_n2,mflow_fw_n3,mflow_tw_i1,mflow_tw_i2,
           mflow_tw_i3,mflow_tw_i4,mflow_tw_n1,mflow_tw_n2,mflow_tw_n3,
           mflow_ircmb_picS_n1,mflow_ircmb_picS_n2,mflow_ircmb_picS_n3,
           mflow_inj_i1,mflow_fwinf_i1,mflow_fwmat_i1,mflow_fwcat_i1,
           mflow_inj_i2,mflow_fwinf_i2,mflow_fwmat_i2,mflow_fwcat_i2,
           mflow_inj_i3,mflow_fwinf_i3,mflow_fwmat_i3,mflow_fwcat_i3,
           mflow_inj_i4,mflow_fwinf_i4,mflow_fwmat_i4,mflow_fwcat_i4,
           mflow_inj_n1,mflow_fwinf_n1,mflow_fwmat_n1,mflow_fwcat_n1,
           mflow_inj_n2,mflow_fwinf_n2,mflow_fwmat_n2,mflow_fwcat_n2,
           mflow_inj_n3,mflow_fwinf_n3,mflow_fwmat_n3,mflow_fwcat_n3,
           mflow_twa_i1,mflow_twinf_i1,mflow_twmat_i1,mflow_twcat_i1,
           mflow_twa_i2,mflow_twinf_i2,mflow_twmat_i2,mflow_twcat_i2,
           mflow_twa_i3,mflow_twinf_i3,mflow_twmat_i3,mflow_twcat_i3,
           mflow_twa_i4,mflow_twinf_i4,mflow_twmat_i4,mflow_twcat_i4,
           mflow_twa_n1,mflow_twinf_n1,mflow_twmat_n1,mflow_twcat_n1,
           mflow_twa_n2,mflow_twinf_n2,mflow_twmat_n2,mflow_twcat_n2,
           mflow_twa_n3,mflow_twinf_n3,mflow_twmat_n3,mflow_twcat_n3,
           mbal_n1,mbal_n2,mbal_n3,mbal_i1,mbal_i2,mbal_i3,mbal_i4,mbal_tot,
           err_mbal_n1,err_mbal_n2,err_mbal_n3,err_mbal_i1,err_mbal_i2,
           err_mbal_i3,err_mbal_i4,err_mbal_tot,ctr_mflow_coll_n1,
           ctr_mflow_fw_n1,ctr_mflow_tw_n1,ctr_mflow_coll_i1,ctr_mflow_fw_i1,
           ctr_mflow_tw_i1,ctr_mflow_coll_i2,ctr_mflow_fw_i2,ctr_mflow_tw_i2,
           ctr_mflow_coll_tot,ctr_mflow_fw_tot,ctr_mflow_tw_tot,
           dEdt_i1,dEdt_i2,dEdt_i3,dEdt_i4,dEdt_n1,dEdt_n2,dEdt_n3,
           eneflow_coll_i1,eneflow_coll_i2,eneflow_coll_i3,eneflow_coll_i4,
           eneflow_coll_n1,eneflow_coll_n2,eneflow_coll_n3,eneflow_fw_i1,
           eneflow_fw_i2,eneflow_fw_i3,eneflow_fw_i4,eneflow_fw_n1,eneflow_fw_n2,
           eneflow_fw_n3,eneflow_tw_i1,eneflow_tw_i2,eneflow_tw_i3,eneflow_tw_i4,
           eneflow_tw_n1,eneflow_tw_n2,eneflow_tw_n3,Pfield_i1,Pfield_i2,
           Pfield_i3,Pfield_i4,eneflow_inj_i1,eneflow_fwinf_i1,eneflow_fwmat_i1,
           eneflow_inj_i2,eneflow_fwinf_i2,eneflow_fwmat_i2,
           eneflow_inj_i3,eneflow_fwinf_i3,eneflow_fwmat_i3,
           eneflow_inj_i4,eneflow_fwinf_i4,eneflow_fwmat_i4,
           eneflow_inj_n1,eneflow_fwinf_n1,eneflow_fwmat_n1,
           eneflow_inj_n2,eneflow_fwinf_n2,eneflow_fwmat_n2,
           eneflow_inj_n3,eneflow_fwinf_n3,eneflow_fwmat_n3,
           eneflow_twa_i1,eneflow_twinf_i1,eneflow_twmat_i1,
           eneflow_twa_i2,eneflow_twinf_i2,eneflow_twmat_i2,
           eneflow_twa_i3,eneflow_twinf_i3,eneflow_twmat_i3,
           eneflow_twa_i4,eneflow_twinf_i4,eneflow_twmat_i4,
           eneflow_twa_n1,eneflow_twinf_n1,eneflow_twmat_n1,
           eneflow_twa_n2,eneflow_twinf_n2,eneflow_twmat_n2,
           eneflow_twa_n3,eneflow_twinf_n3,eneflow_twmat_n3,
           ndot_ion01_n1,ndot_ion02_n1,ndot_ion12_i1,ndot_ion01_n2,
           ndot_ion02_n2,ndot_ion01_n3,ndot_ion02_n3,ndot_ion12_i3,
           ndot_CEX01_i3,ndot_CEX02_i4,
           cath_type,ne_cath,Te_cath,
           nu_cath,ndot_cath,Q_cath,P_cath,V_cath_tot,ne_cath_avg,
           F_theta,Hall_par,Hall_par_eff,nu_e_tot,nu_e_tot_eff,nu_en,nu_ei1,
           nu_ei2,nu_i01,nu_i02,nu_i12,nu_ex,
           F_theta_elems,Hall_par_elems,Hall_par_eff_elems,nu_e_tot_elems,
           nu_e_tot_eff_elems,F_theta_faces,Hall_par_faces,Hall_par_eff_faces,
           nu_e_tot_faces,nu_e_tot_eff_faces,nu_en_elems,nu_ei1_elems,
           nu_ei2_elems,nu_i01_elems,nu_i02_elems,nu_i12_elems,nu_ex_elems,
           nu_en_faces,nu_ei1_faces,nu_ei2_faces,nu_i01_faces,nu_i02_faces,
           nu_i12_faces,nu_ex_faces, 
           felec_para_elems,felec_para_faces,felec_perp_elems,felec_perp_faces,
           felec_z_elems,felec_z_faces,felec_r_elems,felec_r_faces,
           Boltz,Boltz_dim,Pfield_e,Ebal_e,
           dphi_sh_b,dphi_sh_b_Te,imp_ene_e_b,imp_ene_e_b_Te,imp_ene_e_wall,
           imp_ene_e_wall_Te,ge_b,ge_b_acc,ge_sb_b,ge_sb_b_acc,delta_see,
           delta_see_acc,err_interp_n,n_cond_wall,Icond,Vcond,Icath,phi_inf,
           I_inf,f_split,f_split_adv,f_split_qperp,f_split_qpara,f_split_qb,
           f_split_Pperp,f_split_Ppara,f_split_ecterm,f_split_inel] = HET_sims_read(path_simstate_inp,path_simstate_out,
                                                                      path_postdata_out,path_simparams_inp,
                                                                      path_picM,allsteps_flag,timestep,read_inst_data,
                                                                      read_part_lists,read_flag,oldpost_sim[k],oldsimparams_sim[k])
        
        
        #### NOTE: After change in eFld collisions, ionization collisions are 
        #          not multiplied by the charge number jump (as before). 
        #          We do it here
        if oldpost_sim[k] >= 3:
            nu_i02 = 2.0*nu_i02
        #######################################################################
        
        
        print("Generating plotting variables (NaN in ghost nodes)...")                                                                                                      
        [Br,Bz,Bfield,phi,Er,Ez,Efield,nn1,
      nn2,nn3,ni1,ni2,ni3,ni4,ne,fn1_x,fn1_y,fn1_z,fn2_x,fn2_y,
      fn2_z,fn3_x,fn3_y,fn3_z,fi1_x,fi1_y,fi1_z,fi2_x,fi2_y,
      fi2_z,fi3_x,fi3_y,fi3_z,fi4_x,fi4_y,fi4_z,un1_x,un1_y,
      un1_z,un2_x,un2_y,un2_z,un3_x,un3_y,un3_z,ui1_x,ui1_y,
      ui1_z,ui2_x,ui2_y,ui2_z,ui3_x,ui3_y,ui3_z,ui4_x,ui4_y,
      ui4_z,ji1_x,ji1_y,ji1_z,ji2_x,ji2_y,ji2_z,ji3_x,ji3_y,
      ji3_z,ji4_x,ji4_y,ji4_z,je_r,je_t,je_z,je_perp,je_para,
      ue_r,ue_t,ue_z,ue_perp,ue_para,uthetaExB,Tn1,Tn2,Tn3,
      Ti1,Ti2,Ti3,Ti4,Te,n_mp_n1,n_mp_n2,n_mp_n3,
      n_mp_i1,n_mp_i2,n_mp_i3,n_mp_i4,avg_w_n1,avg_w_n2,
      avg_w_i1,avg_w_i2,neu_gen_weights1,neu_gen_weights2,
      ion_gen_weights1,ion_gen_weights2,ndot_ion01_n1,
      ndot_ion02_n1,ndot_ion12_i1,ndot_ion01_n2,ndot_ion02_n2,
      ndot_ion01_n3,ndot_ion02_n3,ndot_ion12_i3,ndot_CEX01_i3,ndot_CEX02_i4,
      F_theta,Hall_par,Hall_par_eff,nu_e_tot,nu_e_tot_eff,nu_en,nu_ei1,
      nu_ei2,nu_i01,nu_i02,nu_i12,nu_ex,err_interp_n,f_split_adv,
      f_split_qperp,f_split_qpara,f_split_qb,f_split_Pperp,
      f_split_Ppara,f_split_ecterm,f_split_inel,alpha_ano,alpha_ano_e,
      alpha_ano_q,alpha_ine,alpha_ine_q] = HET_sims_plotvars(nodes_flag,cells_flag,Br,Bz,Bfield,phi,Er,Ez,Efield,nn1,
                                                             nn2,nn3,ni1,ni2,ni3,ni4,ne,fn1_x,fn1_y,fn1_z,fn2_x,fn2_y,
                                                             fn2_z,fn3_x,fn3_y,fn3_z,fi1_x,fi1_y,fi1_z,fi2_x,fi2_y,
                                                             fi2_z,fi3_x,fi3_y,fi3_z,fi4_x,fi4_y,fi4_z,un1_x,un1_y,
                                                             un1_z,un2_x,un2_y,un2_z,un3_x,un3_y,un3_z,ui1_x,ui1_y,
                                                             ui1_z,ui2_x,ui2_y,ui2_z,ui3_x,ui3_y,ui3_z,ui4_x,ui4_y,
                                                             ui4_z,ji1_x,ji1_y,ji1_z,ji2_x,ji2_y,ji2_z,ji3_x,ji3_y,
                                                             ji3_z,ji4_x,ji4_y,ji4_z,je_r,je_t,je_z,je_perp,je_para,
                                                             ue_r,ue_t,ue_z,ue_perp,ue_para,uthetaExB,Tn1,Tn2,Tn3,
                                                             Ti1,Ti2,Ti3,Ti4,Te,n_mp_n1,n_mp_n2,n_mp_n3,
                                                             n_mp_i1,n_mp_i2,n_mp_i3,n_mp_i4,avg_w_n1,avg_w_n2,
                                                             avg_w_i1,avg_w_i2,neu_gen_weights1,neu_gen_weights2,
                                                             ion_gen_weights1,ion_gen_weights2,ndot_ion01_n1,
                                                             ndot_ion02_n1,ndot_ion12_i1,ndot_ion01_n2,ndot_ion02_n2,
                                                             ndot_ion01_n3,ndot_ion02_n3,ndot_ion12_i3,ndot_CEX01_i3,
                                                             ndot_CEX02_i4,F_theta,Hall_par,Hall_par_eff,nu_e_tot,
                                                             nu_e_tot_eff,nu_en,nu_ei1,nu_ei2,nu_i01,nu_i02,nu_i12,nu_ex,
                                                             err_interp_n,f_split_adv,f_split_qperp,f_split_qpara,
                                                             f_split_qb,f_split_Pperp,f_split_Ppara,f_split_ecterm,
                                                             f_split_inel,alpha_ano,alpha_ano_e,alpha_ano_q,alpha_ine,
                                                             alpha_ine_q)
        if mean_vars == 1:        
            print("Averaging variables...")                                                                              
            [phi_mean,Er_mean,Ez_mean,Efield_mean,nn1_mean,nn2_mean,nn3_mean,
           ni1_mean,ni2_mean,ni3_mean,ni4_mean,ne_mean,fn1_x_mean,fn1_y_mean,
           fn1_z_mean,fn2_x_mean,fn2_y_mean,fn2_z_mean,fn3_x_mean,fn3_y_mean,
           fn3_z_mean,fi1_x_mean,fi1_y_mean,fi1_z_mean,fi2_x_mean,fi2_y_mean,
           fi2_z_mean,fi3_x_mean,fi3_y_mean,fi3_z_mean,fi4_x_mean,fi4_y_mean,
           fi4_z_mean,un1_x_mean,un1_y_mean,un1_z_mean,un2_x_mean,un2_y_mean,
           un2_z_mean,un3_x_mean,un3_y_mean,un3_z_mean,ui1_x_mean,ui1_y_mean,
           ui1_z_mean,ui2_x_mean,ui2_y_mean,ui2_z_mean,ui3_x_mean,ui3_y_mean,
           ui3_z_mean,ui4_x_mean,ui4_y_mean,ui4_z_mean,ji1_x_mean,ji1_y_mean,
           ji1_z_mean,ji2_x_mean,ji2_y_mean,ji2_z_mean,ji3_x_mean,ji3_y_mean,
           ji3_z_mean,ji4_x_mean,ji4_y_mean,ji4_z_mean,je_r_mean,je_t_mean,
           je_z_mean,je_perp_mean,je_para_mean,ue_r_mean,ue_t_mean,ue_z_mean,
           ue_perp_mean,ue_para_mean,uthetaExB_mean,Tn1_mean,Tn2_mean,Tn3_mean,
           Ti1_mean,Ti2_mean,Ti3_mean,Ti4_mean,Te_mean,n_mp_n1_mean,n_mp_n2_mean,
           n_mp_n3_mean,n_mp_i1_mean,n_mp_i2_mean,n_mp_i3_mean,n_mp_i4_mean,
           avg_w_n1_mean,avg_w_n2_mean,avg_w_i1_mean,avg_w_i2_mean,
           neu_gen_weights1_mean,neu_gen_weights2_mean,ion_gen_weights1_mean,
           ion_gen_weights2_mean,ndot_ion01_n1_mean,ndot_ion02_n1_mean,
           ndot_ion12_i1_mean,ndot_ion01_n2_mean,ndot_ion02_n2_mean,
           ndot_ion01_n3_mean,ndot_ion02_n3_mean,ndot_ion12_i3_mean,
           ndot_CEX01_i3_mean,ndot_CEX02_i4_mean,
           ne_cath_mean,Te_cath_mean,nu_cath_mean,ndot_cath_mean,
           F_theta_mean,Hall_par_mean,Hall_par_eff_mean,nu_e_tot_mean,
           nu_e_tot_eff_mean,nu_en_mean,nu_ei1_mean,nu_ei2_mean,nu_i01_mean,
           nu_i02_mean,nu_i12_mean,nu_ex_mean,
           Boltz_mean,Boltz_dim_mean,phi_elems_mean,phi_faces_mean,ne_elems_mean,
           ne_faces_mean,Te_elems_mean,Te_faces_mean,err_interp_n_mean,f_split_adv_mean,
           f_split_qperp_mean,f_split_qpara_mean,f_split_qb_mean,f_split_Pperp_mean,
           f_split_Ppara_mean,f_split_ecterm_mean,f_split_inel_mean,
           je_perp_elems_mean,je_theta_elems_mean,je_para_elems_mean,
           je_z_elems_mean,je_r_elems_mean,je_perp_faces_mean,je_theta_faces_mean,
           je_para_faces_mean,je_z_faces_mean,je_r_faces_mean,
           F_theta_elems_mean,Hall_par_elems_mean,Hall_par_eff_elems_mean,
           nu_e_tot_elems_mean,nu_e_tot_eff_elems_mean,F_theta_faces_mean,
           Hall_par_faces_mean,Hall_par_eff_faces_mean,nu_e_tot_faces_mean,
           nu_e_tot_eff_faces_mean,nu_en_elems_mean,nu_ei1_elems_mean,
           nu_ei2_elems_mean,nu_i01_elems_mean,nu_i02_elems_mean,
           nu_i12_elems_mean,nu_ex_elems_mean,nu_en_faces_mean,
           nu_ei1_faces_mean,nu_ei2_faces_mean,nu_i01_faces_mean,
           nu_i02_faces_mean,nu_i12_faces_mean,nu_ex_faces_mean] = HET_sims_mean(nsteps,mean_type,last_steps,step_i,step_f,Z_ion_spe,
                                                                                 num_ion_spe,num_neu_spe,phi,Er,Ez,
                                                                                 Efield,Br,Bz,Bfield,nn1,nn2,nn3,ni1,ni2,ni3,ni4,ne,fn1_x,
                                                                                 fn1_y,fn1_z,fn2_x,fn2_y,fn2_z,fn3_x,fn3_y,fn3_z,fi1_x,fi1_y,
                                                                                 fi1_z,fi2_x,fi2_y,fi2_z,fi3_x,fi3_y,fi3_z,fi4_x,fi4_y,fi4_z,
                                                                                 un1_x,un1_y,un1_z,un2_x,un2_y,un2_z,un3_x,un3_y,un3_z,ui1_x,
                                                                                 ui1_y,ui1_z,ui2_x,ui2_y,ui2_z,ui3_x,ui3_y,ui3_z,ui4_x,ui4_y,
                                                                                 ui4_z,ji1_x,ji1_y,ji1_z,ji2_x,ji2_y,ji2_z,ji3_x,ji3_y,ji3_z,
                                                                                 ji4_x,ji4_y,ji4_z,je_r,je_t,je_z,je_perp,je_para,ue_r,ue_t,
                                                                                 ue_z,ue_perp,ue_para,uthetaExB,Tn1,Tn2,Tn3,Ti1,Ti2,Ti3,Ti4,Te,
                                                                                 n_mp_n1,n_mp_n2,n_mp_n3,n_mp_i1,n_mp_i2,n_mp_i3,n_mp_i4,
                                                                                 avg_w_n1,avg_w_n2,avg_w_i1,avg_w_i2,
                                                                                 neu_gen_weights1,neu_gen_weights2,ion_gen_weights1,ion_gen_weights2,
                                                                                 ndot_ion01_n1,ndot_ion02_n1,ndot_ion12_i1,ndot_ion01_n2,ndot_ion02_n2,
                                                                                 ndot_ion01_n3,ndot_ion02_n3,ndot_ion12_i3,ndot_CEX01_i3,ndot_CEX02_i4,
                                                                                 ne_cath,Te_cath,nu_cath,ndot_cath,
                                                                                 F_theta,Hall_par,Hall_par_eff,nu_e_tot,nu_e_tot_eff,nu_en,nu_ei1,
                                                                                 nu_ei2,nu_i01,nu_i02,nu_i12,nu_ex,
                                                                                 Boltz,Boltz_dim,phi_elems,phi_faces,ne_elems,ne_faces,
                                                                                 Te_elems,Te_faces,err_interp_n,
                                                                                 f_split_adv,f_split_qperp,f_split_qpara,f_split_qb,f_split_Pperp,
                                                                                 f_split_Ppara,f_split_ecterm,f_split_inel,
                                                                                 je_perp_elems,je_theta_elems,je_para_elems,je_z_elems,je_r_elems,
                                                                                 je_perp_faces,je_theta_faces,je_para_faces,je_z_faces,je_r_faces,
                                                                                 F_theta_elems,Hall_par_elems,Hall_par_eff_elems,nu_e_tot_elems,
                                                                                 nu_e_tot_eff_elems,F_theta_faces,Hall_par_faces,Hall_par_eff_faces,
                                                                                 nu_e_tot_faces,nu_e_tot_eff_faces,nu_en_elems,nu_ei1_elems,nu_ei2_elems,
                                                                                 nu_i01_elems,nu_i02_elems,nu_i12_elems,nu_ex_elems,nu_en_faces,
                                                                                 nu_ei1_faces,nu_ei2_faces,nu_i01_faces,nu_i02_faces,nu_i12_faces,
                                                                                 nu_ex_faces)
        print("Obtaining final variables for plotting...") 
        if mean_vars == 1 and plot_mean_vars == 1:
            print("Plotting variables are time-averaged")
            [Br_plot,Bz_plot,Bfield_plot,phi_plot,Er_plot,Ez_plot,Efield_plot,
           nn1_plot,nn2_plot,nn3_plot,ni1_plot,ni2_plot,ni3_plot,ni4_plot,
           ne_plot,fn1_x_plot,fn1_y_plot,fn1_z_plot,fn2_x_plot,fn2_y_plot,
           fn2_z_plot,fn3_x_plot,fn3_y_plot,fn3_z_plot,fi1_x_plot,fi1_y_plot,
           fi1_z_plot,fi2_x_plot,fi2_y_plot,fi2_z_plot,fi3_x_plot,fi3_y_plot,
           fi3_z_plot,fi4_x_plot,fi4_y_plot,fi4_z_plot,un1_x_plot,un1_y_plot,
           un1_z_plot,un2_x_plot,un2_y_plot,un2_z_plot,un3_x_plot,un3_y_plot,
           un3_z_plot,ui1_x_plot,ui1_y_plot,ui1_z_plot,ui2_x_plot,ui2_y_plot,
           ui2_z_plot,ui3_x_plot,ui3_y_plot,ui3_z_plot,ui4_x_plot,ui4_y_plot,
           ui4_z_plot,ji1_x_plot,ji1_y_plot,ji1_z_plot,ji2_x_plot,ji2_y_plot,
           ji2_z_plot,ji3_x_plot,ji3_y_plot,ji3_z_plot,ji4_x_plot,ji4_y_plot,
           ji4_z_plot,je_r_plot,je_t_plot,je_z_plot,je_perp_plot,je_para_plot,
           ue_r_plot,ue_t_plot,ue_z_plot,ue_perp_plot,ue_para_plot,uthetaExB_plot,
           Tn1_plot,Tn2_plot,Tn3_plot,Ti1_plot,Ti2_plot,Ti3_plot,Ti4_plot,
           Te_plot,n_mp_n1_plot,n_mp_n2_plot,n_mp_n3_plot,
           n_mp_i1_plot,n_mp_i2_plot,n_mp_i3_plot,n_mp_i4_plot,
           avg_w_n1_plot,avg_w_n2_plot,avg_w_i1_plot,
           avg_w_i2_plot,neu_gen_weights1_plot,neu_gen_weights2_plot,
           ion_gen_weights1_plot,ion_gen_weights2_plot,ndot_ion01_n1_plot,
           ndot_ion02_n1_plot,ndot_ion12_i1_plot,ndot_ion01_n2_plot,
           ndot_ion02_n2_plot,ndot_ion01_n3_plot,ndot_ion02_n3_plot,
           ndot_ion12_i3_plot,ndot_CEX01_i3_plot,ndot_CEX02_i4_plot,ne_cath_plot,
           nu_cath_plot,ndot_cath_plot,
           F_theta_plot,Hall_par_plot,Hall_par_eff_plot,nu_e_tot_plot,
           nu_e_tot_eff_plot,nu_en_plot,nu_ei1_plot,nu_ei2_plot,nu_i01_plot,
           nu_i02_plot,nu_i12_plot,nu_ex_plot,err_interp_n_plot,f_split_adv_plot,
           f_split_qperp_plot,f_split_qpara_plot,f_split_qb_plot,
           f_split_Pperp_plot,f_split_Ppara_plot,f_split_ecterm_plot,
           f_split_inel_plot] = HET_sims_cp_vars(Br,Bz,Bfield,phi_mean,Er_mean,Ez_mean,Efield_mean,nn1_mean,nn2_mean,
                                                 nn3_mean,ni1_mean,ni2_mean,ni3_mean,ni4_mean,ne_mean,fn1_x_mean,
                                                 fn1_y_mean,fn1_z_mean,fn2_x_mean,fn2_y_mean,fn2_z_mean,
                                                 fn3_x_mean,fn3_y_mean,fn3_z_mean,fi1_x_mean,fi1_y_mean,fi1_z_mean,
                                                 fi2_x_mean,fi2_y_mean,fi2_z_mean,fi3_x_mean,fi3_y_mean,fi3_z_mean,
                                                 fi4_x_mean,fi4_y_mean,fi4_z_mean,un1_x_mean,un1_y_mean,un1_z_mean,
                                                 un2_x_mean,un2_y_mean,un2_z_mean,un3_x_mean,un3_y_mean,un3_z_mean,
                                                 ui1_x_mean,ui1_y_mean,ui1_z_mean,ui2_x_mean,ui2_y_mean,ui2_z_mean,
                                                 ui3_x_mean,ui3_y_mean,ui3_z_mean,ui4_x_mean,ui4_y_mean,ui4_z_mean,
                                                 ji1_x_mean,ji1_y_mean,ji1_z_mean,ji2_x_mean,ji2_y_mean,ji2_z_mean,
                                                 ji3_x_mean,ji3_y_mean,ji3_z_mean,ji4_x_mean,ji4_y_mean,ji4_z_mean,
                                                 je_r_mean,je_t_mean,je_z_mean,
                                                 je_perp_mean,je_para_mean,ue_r_mean,ue_t_mean,ue_z_mean,ue_perp_mean,
                                                 ue_para_mean,uthetaExB_mean,Tn1_mean,Tn2_mean,Tn3_mean,Ti1_mean,Ti2_mean,
                                                 Ti3_mean,Ti4_mean,Te_mean,n_mp_n1_mean,n_mp_n2_mean,n_mp_n3_mean,
                                                 n_mp_i1_mean,n_mp_i2_mean,n_mp_i3_mean,n_mp_i4_mean,avg_w_n1_mean,
                                                 avg_w_n2_mean,avg_w_i1_mean,avg_w_i2_mean,neu_gen_weights1_mean,
                                                 neu_gen_weights2_mean,ion_gen_weights1_mean,ion_gen_weights2_mean,
                                                 ndot_ion01_n1_mean,ndot_ion02_n1_mean,ndot_ion12_i1_mean,
                                                 ndot_ion01_n2_mean,ndot_ion02_n2_mean,ndot_ion01_n3_mean,
                                                 ndot_ion02_n3_mean,ndot_ion12_i3_mean,ndot_CEX01_i3_mean,
                                                 ndot_CEX02_i4_mean,ne_cath_mean,
                                                 nu_cath_mean,ndot_cath_mean,F_theta_mean,Hall_par_mean,Hall_par_eff_mean,
                                                 nu_e_tot_mean,nu_e_tot_eff_mean,nu_en_mean,nu_ei1_mean,nu_ei2_mean,nu_i01_mean,
                                                 nu_i02_mean,nu_i12_mean,nu_ex_mean,err_interp_n_mean,f_split_adv_mean,f_split_qperp_mean,
                                                 f_split_qpara_mean,f_split_qb_mean,f_split_Pperp_mean,f_split_Ppara_mean,
                                                 f_split_ecterm_mean,f_split_inel_mean)
            
            
        else:
            [Br_plot,Bz_plot,Bfield_plot,phi_plot,Er_plot,Ez_plot,Efield_plot,
           nn1_plot,nn2_plot,nn3_plot,ni1_plot,ni2_plot,ni3_plot,ni4_plot,
           ne_plot,fn1_x_plot,fn1_y_plot,fn1_z_plot,fn2_x_plot,fn2_y_plot,
           fn2_z_plot,fn3_x_plot,fn3_y_plot,fn3_z_plot,fi1_x_plot,fi1_y_plot,
           fi1_z_plot,fi2_x_plot,fi2_y_plot,fi2_z_plot,fi3_x_plot,fi3_y_plot,
           fi3_z_plot,fi4_x_plot,fi4_y_plot,fi4_z_plot,un1_x_plot,un1_y_plot,
           un1_z_plot,un2_x_plot,un2_y_plot,un2_z_plot,un3_x_plot,un3_y_plot,
           un3_z_plot,ui1_x_plot,ui1_y_plot,ui1_z_plot,ui2_x_plot,ui2_y_plot,
           ui2_z_plot,ui3_x_plot,ui3_y_plot,ui3_z_plot,ui4_x_plot,ui4_y_plot,
           ui4_z_plot,ji1_x_plot,ji1_y_plot,ji1_z_plot,ji2_x_plot,ji2_y_plot,
           ji2_z_plot,ji3_x_plot,ji3_y_plot,ji3_z_plot,ji4_x_plot,ji4_y_plot,
           ji4_z_plot,je_r_plot,je_t_plot,je_z_plot,je_perp_plot,je_para_plot,
           ue_r_plot,ue_t_plot,ue_z_plot,ue_perp_plot,ue_para_plot,uthetaExB_plot,
           Tn1_plot,Tn2_plot,Tn3_plot,Ti1_plot,Ti2_plot,Ti3_plot,Ti4_plot,
           Te_plot,n_mp_n1_plot,n_mp_n2_plot,n_mp_n3_plot,
           n_mp_i1_plot,n_mp_i2_plot,n_mp_i3_plot,n_mp_i4_plot,
           avg_w_n1_plot,avg_w_n2_plot,avg_w_i1_plot,
           avg_w_i2_plot,neu_gen_weights1_plot,neu_gen_weights2_plot,
           ion_gen_weights1_plot,ion_gen_weights2_plot,ndot_ion01_n1_plot,
           ndot_ion02_n1_plot,ndot_ion12_i1_plot,ndot_ion01_n2_plot,
           ndot_ion02_n2_plot,ndot_ion01_n3_plot,ndot_ion02_n3_plot,
           ndot_ion12_i3_plot,ndot_CEX01_i3_plot,ndot_CEX02_i4_plot,ne_cath_plot,
           nu_cath_plot,ndot_cath_plot,
           F_theta_plot,Hall_par_plot,Hall_par_eff_plot,nu_e_tot_plot,
           nu_e_tot_eff_plot,nu_en_plot,nu_ei1_plot,nu_ei2_plot,nu_i01_plot,
           nu_i02_plot,nu_i12_plot,nu_ex_plot,err_interp_n_plot,f_split_adv_plot,
           f_split_qperp_plot,f_split_qpara_plot,f_split_qb_plot,
           f_split_Pperp_plot,f_split_Ppara_plot,f_split_ecterm_plot,
           f_split_inel_plot] = HET_sims_cp_vars(Br,Bz,Bfield,phi,Er,Ez,Efield,nn1,
                                                 nn2,nn3,ni1,ni2,ni3,ni4,ne,fn1_x,fn1_y,fn1_z,fn2_x,fn2_y,
                                                 fn2_z,fn3_x,fn3_y,fn3_z,fi1_x,fi1_y,fi1_z,fi2_x,fi2_y,
                                                 fi2_z,fi3_x,fi3_y,fi3_z,fi4_x,fi4_y,fi4_z,un1_x,un1_y,
                                                 un1_z,un2_x,un2_y,un2_z,un3_x,un3_y,un3_z,ui1_x,ui1_y,
                                                 ui1_z,ui2_x,ui2_y,ui2_z,ui3_x,ui3_y,ui3_z,ui4_x,ui4_y,
                                                 ui4_z,ji1_x,ji1_y,ji1_z,ji2_x,ji2_y,ji2_z,ji3_x,ji3_y,
                                                 ji3_z,ji4_x,ji4_y,ji4_z,je_r,je_t,je_z,je_perp,je_para,
                                                 ue_r,ue_t,ue_z,ue_perp,ue_para,uthetaExB,Tn1,Tn2,Tn3,Ti1,Ti2,
                                                 Ti3,Ti4,Te,n_mp_n1,n_mp_n2,n_mp_n3,n_mp_i1,n_mp_i2,
                                                 n_mp_i3,n_mp_i4,avg_w_n1,avg_w_n2,
                                                 avg_w_i1,avg_w_i2,neu_gen_weights1,neu_gen_weights2,
                                                 ion_gen_weights1,ion_gen_weights2,ndot_ion01_n1,
                                                 ndot_ion02_n1,ndot_ion12_i1,ndot_ion01_n2,ndot_ion02_n2,
                                                 ndot_ion01_n3,ndot_ion02_n3,ndot_ion12_i3,ndot_CEX01_i3,
                                                 ndot_CEX02_i4,ne_cath,nu_cath,
                                                 ndot_cath,F_theta,Hall_par,Hall_par_eff,nu_e_tot,
                                                 nu_e_tot_eff,nu_en,nu_ei1,nu_ei2,nu_i01,nu_i02,nu_i12,nu_ex,
                                                 err_interp_n,f_split_adv,f_split_qperp,f_split_qpara,
                                                 f_split_qb,f_split_Pperp,f_split_Ppara,f_split_ecterm,
                                                 f_split_inel)
                                                                                                          
         
        # Setting a common reference potential point
        if phi_ref == 1:
            phi_plot = phi_plot - phi_plot[iphi_ref,jphi_ref]
            
        # Interpolate variables directly computed at the MFAM from the MFAM to a finer PIC mesh for plotting
        # These variables include: phi, Te and je components
        if interp_MFAM_picM_plot == 1:
            if mean_vars == 1 and plot_mean_vars == 1:
                
                ji_x_mean               = ji1_x_mean + ji2_x_mean + ji3_x_mean + ji4_x_mean
                ji_y_mean               = ji1_y_mean + ji2_y_mean + ji3_y_mean + ji4_y_mean
                ji_z_mean               = ji1_z_mean + ji2_z_mean + ji3_z_mean + ji4_z_mean
                [zs_mp,rs_mp,dims_mp,nodes_flag_mp,cells_vol_mp,xi_bottom_mp,
                 xi_top_mp,eta_min_mp,eta_max_mp,phi_mp,Te_mp,je_perp_mp,je_theta_mp,
                 je_para_mp,je_z_mp,je_r_mp,je_2D_mp,ji_x_mp,ji_y_mp,ji_z_mp,
                 ji_2D_mp,j_r_mp,j_t_mp,j_z_mp,j_2D_mp,ne_mp,Bfield_mp,Br_mp,Bz_mp,
                 alpha_ano_mp,alpha_ano_e_mp,alpha_ano_q_mp,alpha_ine_mp,
                 alpha_ine_q_mp] = HET_sims_interp_MFAM_picM_plot(path_picM_plot,n_elems,n_faces,elem_geom,
                                                                  face_geom,versors_e,versors_f,phi_elems_mean,phi_faces_mean,Te_elems_mean,
                                                                  Te_faces_mean,je_perp_elems_mean,je_theta_elems_mean,
                                                                  je_para_elems_mean,je_z_elems_mean,je_r_elems_mean,
                                                                  je_perp_faces_mean,je_theta_faces_mean,je_para_faces_mean,
                                                                  je_z_faces_mean,je_r_faces_mean,zs,rs,ji_x_mean,ji_y_mean,
                                                                  ji_z_mean,ne_mean,
                                                                  alpha_ano_elems,alpha_ano_e_elems,alpha_ano_q_elems,alpha_ine_elems,
                                                                  alpha_ine_q_elems,alpha_ano_faces,alpha_ano_e_faces,alpha_ano_q_faces,
                                                                  alpha_ine_faces,alpha_ine_q_faces)
                
            else:
                ji_x                    = ji1_x + ji2_x + ji3_x + ji4_x
                ji_y                    = ji1_y + ji2_y + ji3_y + ji4_y
                ji_z                    = ji1_z + ji2_z + ji3_z + ji4_z
                [zs_mp,rs_mp,dims_mp,nodes_flag_mp,cells_vol_mp,xi_bottom_mp,
                 xi_top_mp,eta_min_mp,eta_max_mp,phi_mp,Te_mp,je_perp_mp,je_theta_mp,
                 je_para_mp,je_z_mp,je_r_mp,je_2D_mp,ji_x_mp,ji_y_mp,ji_z_mp,
                 ji_2D_mp,j_r_mp,j_t_mp,j_z_mp,j_2D_mp,ne_mp,Bfield_mp,Br_mp,Bz_mp,
                 alpha_ano_mp,alpha_ano_e_mp,alpha_ano_q_mp,alpha_ine_mp,
                 alpha_ine_q_mp] = HET_sims_interp_MFAM_picM_plot(path_picM_plot,n_elems,n_faces,elem_geom,
                                                                  face_geom,versors_e,versors_f,phi_elems,phi_faces,Te_elems,
                                                                  Te_faces,je_perp_elems,je_theta_elems,
                                                                  je_para_elems,je_z_elems,je_r_elems,
                                                                  je_perp_faces,je_theta_faces,je_para_faces,
                                                                  je_z_faces,je_r_faces,zs,rs,ji_x,ji_y,ji_z,ne,
                                                                  alpha_ano_elems,alpha_ano_e_elems,alpha_ano_q_elems,alpha_ine_elems,
                                                                  alpha_ine_q_elems,alpha_ano_faces,alpha_ano_e_faces,alpha_ano_q_faces,
                                                                  alpha_ine_faces,alpha_ine_q_faces)

        # Obtain auxiliar average variables
        if interp_MFAM_picM_plot == 1:
            ue_perp_mp         = -je_perp_mp/(e*ne_mp)
            ue_theta_mp        = -je_theta_mp/(e*ne_mp)
            ue_para_mp         = -je_para_mp/(e*ne_mp)
            ue_z_mp            = -je_z_mp/(e*ne_mp)
            ue_r_mp            = -je_r_mp/(e*ne_mp)
            ue_mp              = np.sqrt(ue_r_mp**2 +ue_theta_mp**2 + ue_z_mp**2)
            Ekin_e_mp          = 0.5*me*ue_mp**2/e
            ratio_Ekin_Te_mp   = Ekin_e_mp/Te_mp
            ratio_je_t_perp_mp = je_theta_mp/je_perp_mp
            je_mp              = np.sqrt(je_r_mp**2 + je_theta_mp**2 + je_z_mp**2)
            j_mp               = np.sqrt(j_r_mp**2 + j_t_mp**2 + j_z_mp**2)
            
        # Obtain angular profiles (Faraday probe scan) if required
        if plot_B_scan == 1 or plot_fields_scan == 1 or plot_dens_scan == 1 or plot_temp_scan  == 1 or plot_curr_scan == 1 or plot_freq_scan == 1:
            if mean_vars == 1 and plot_mean_vars == 1:
                nn_mean = nn1_mean + nn2_mean + nn3_mean
                [ang_scan,r_scan,z_scan,
                 B_scan,Br_scan,Bz_scan,phi_scan,Te_scan,je_perp_scan,je_theta_scan,
                 je_para_scan,je_z_scan,je_r_scan,je_2D_scan,je_scan,
                 ji_x_scan,ji_y_scan,ji_z_scan,ji_2D_scan,ji_scan,ne_scan,nn_scan,
                 Hall_par_scan,Hall_par_eff_scan,
                 j_r_scan,j_t_scan,j_z_scan,j_2D_scan,j_scan] = HET_sims_interp_scan(z_offset,r_offset,rscan,ang_min,ang_max,Npoints_ang,
                                                                                      n_elems,n_faces,elem_geom,face_geom,versors_e,versors_f,
                                                                                      phi_elems_mean,phi_faces_mean,Te_elems_mean,Te_faces_mean,
                                                                                      je_perp_elems_mean,je_theta_elems_mean,je_para_elems_mean,
                                                                                      je_z_elems_mean,je_r_elems_mean,
                                                                                      je_perp_faces_mean,je_theta_faces_mean,je_para_faces_mean,
                                                                                      je_z_faces_mean,je_r_faces_mean,zs,rs,ji_x_mean,ji_y_mean,
                                                                                      ji_z_mean,ne_mean,nn_mean,Hall_par_mean,Hall_par_eff_mean)
            else:
                nn = nn1 + nn2 + nn3
                [ang_scan,r_scan,z_scan,
                 B_scan,Br_scan,Bz_scan,phi_scan,Te_scan,je_perp_scan,je_theta_scan,
                 je_para_scan,je_z_scan,je_r_scan,je_2D_scan,je_scan,
                 ji_x_scan,ji_y_scan,ji_z_scan,ji_2D_scan,ji_scan,ne_scan,nn_scan,
                 Hall_par_scan,Hall_par_eff_scan,
                 j_r_scan,j_t_scan,j_z_scan,j_2D_scan,j_scan] = HET_sims_interp_scan(z_offset,r_offset,rscan,ang_min,ang_max,Npoints_ang,
                                                                                      n_elems,n_faces,elem_geom,face_geom,versors_e,versors_f,
                                                                                      phi_elems,phi_faces,Te_elems,Te_faces,je_perp_elems,
                                                                                      je_theta_elems,je_para_elems,je_z_elems,je_r_elems,
                                                                                      je_perp_faces,je_theta_faces,je_para_faces,je_z_faces,
                                                                                      je_r_faces,zs,rs,ji_x,ji_y,ji_z,ne,nn,Hall_par,
                                                                                      Hall_par_eff)
            
            Hall_par_effect_scan = np.sqrt(Hall_par_scan*Hall_par_eff_scan)
            ue_scan              = je_scan/(e*ne_scan)
            Ekin_e_scan          = 0.5*me*ue_scan**2/e
            ratio_Ekin_Te_scan   = Ekin_e_scan/Te_scan
            
    
        
 
    #     # Obtain the isothermal Boltzmann relation along the cathode magnetic line
    #     if len(elems_cath_Bline) > 0:
    #         if k == 3:
    #             elems_cath_Bline = elems_cath_Bline_2
                
    # #        [cath_Bline_phi, cath_phi, cath_Bline_Te, cath_Te, cath_Bline_ne,
    # #         cath_ne, cath_Bline_nodim_Boltz, cath_nodim_Boltz,
    # #         cath_Bline_dim_Boltz, cath_dim_Boltz] = comp_Boltz(elems_cath_Bline,cath_elem,V_cath,V_cath_tot,zs,rs,elem_geom,phi_plot,Te_plot,ne_plot)
             
    #         [cath_Bline_phi, cath_phi, cath_Bline_Te, cath_Te, cath_Bline_ne,
    #           cath_ne, cath_Bline_nodim_Boltz, cath_nodim_Boltz,
    #           cath_Bline_dim_Boltz, cath_dim_Boltz] = comp_Boltz(elems_cath_Bline,cath_elem,V_cath,V_cath_tot,zs,rs,elem_geom,face_geom,phi_plot,Te_plot,ne_plot,cath_type)
            
    #         # Obtain the isothermal Boltzmann relation along the given magnetic line
    #         [Bline_phi, ref_phi, Bline_Te, ref_Te, Bline_ne,
    #           ref_ne, Bline_nodim_Boltz, ref_nodim_Boltz,
    #           Bline_dim_Boltz, ref_dim_Boltz] = comp_Boltz(elems_Bline,np.array([ref_elem],dtype=int),V_cath,V_cath_tot,zs,rs,elem_geom,face_geom,phi_plot,Te_plot,ne_plot,cath_type)
         
        # Obtain zindex for radial profiles
        zind = np.where(zs[rind,:]<z_rprof*1E-2)[0][-1]
        if interp_MFAM_picM_plot == 1:
            zind_mp = np.where(zs_mp[rind,:]<z_rprof*1E-2)[0][-1]
            rind_mp = np.where(rs_mp[:,0] == rs[rind,0])[0][0]

        ue_plot                 = np.sqrt(ue_r_plot**2 +ue_t_plot**2 + ue_z_plot**2)
        ue2_plot                = np.sqrt(ue_perp_plot**2 +ue_t_plot**2 + ue_para_plot**2)
        ui1_plot                = np.sqrt(ui1_x_plot**2 + ui1_y_plot**2 + ui1_z_plot**2)
        ui2_plot                = np.sqrt(ui2_x_plot**2 + ui2_y_plot**2 + ui2_z_plot**2)
        cs01_plot               = np.sqrt(e*Te_plot/mass)
        cs02_plot               = np.sqrt(2*e*Te_plot/mass)
        Mi1_plot                = np.divide(ui1_plot,cs01_plot)
        Mi2_plot                = np.divide(ui2_plot,cs02_plot) 
        Mi1_z_plot              = np.divide(ui1_z_plot,cs01_plot)
        Mi2_z_plot              = np.divide(ui2_z_plot,cs02_plot)
        Ekin_e_plot             = 0.5*me*ue_plot**2/e
        Ekin_i1_plot            = 0.5*mass*ui1_plot**2/e
        Ekin_i2_plot            = 0.5*mass*ui2_plot**2/e
        ratio_Ekin_Te_plot      = Ekin_e_plot/Te_plot
        ratio_Ekin_Ti1_plot     = Ekin_i1_plot/Ti1_plot
        ratio_Ekin_Ti2_plot     = Ekin_i2_plot/Ti2_plot
        je_plot                 = np.sqrt(je_r_plot**2 + je_t_plot**2 + je_z_plot**2)
        je2_plot                = np.sqrt(je_perp_plot**2 + je_t_plot**2 + je_para_plot**2)
        ji_x_plot               = ji1_x_plot + ji2_x_plot + ji3_x_plot + ji4_x_plot
        ji_y_plot               = ji1_y_plot + ji2_y_plot + ji3_y_plot + ji4_y_plot
        ji_z_plot               = ji1_z_plot + ji2_z_plot + ji3_z_plot + ji4_z_plot
        ui_x_plot               = ji_x_plot/(e*ne_plot)
        ui_y_plot               = ji_y_plot/(e*ne_plot)
        ui_z_plot               = ji_z_plot/(e*ne_plot)
        ui_plot                 = np.sqrt(ui_x_plot**2 +ui_y_plot**2 + ui_z_plot**2)
        Z_avg                   = 1.0*ni1_plot/ne_plot + 2.0*ni2_plot/ne_plot + 1.0*ni3_plot/ne_plot + 2.0*ni4_plot/ne_plot
        cs_plot                 = np.sqrt(Z_avg*e*Te_plot/mass)
        Mi_plot                 = ui_plot/cs_plot
        Mi_z_plot               = ui_z_plot/cs_plot 
        ji_plot                 = np.sqrt( ji_x_plot**2 + ji_y_plot**2 +ji_z_plot**2 )
        ji1_plot                = np.sqrt( ji1_x_plot**2 + ji1_y_plot**2 + ji1_z_plot**2 )
        ji2_plot                = np.sqrt( ji2_x_plot**2 + ji2_y_plot**2 + ji2_z_plot**2 )
        j_r_plot                = ji_x_plot + je_r_plot
        j_t_plot                = ji_y_plot + je_t_plot
        j_z_plot                = ji_z_plot + je_z_plot
        j_plot                  = np.sqrt(j_r_plot**2 + j_t_plot**2 + j_z_plot**2)
        erel_je_plot            = np.abs(je2_plot-je_plot)/np.abs(je_plot)
        erel_ue_plot            = np.abs(ue2_plot-ue_plot)/np.abs(ue_plot)
        erel_jeji_plot          = np.abs(je_plot-ji_plot)/np.abs(ji_plot)
        ratio_ue_t_perp_plot    = ue_t_plot/ue_perp_plot
        ratio_ue_t_para_plot    = ue_t_plot/ue_para_plot
        ratio_ue_perp_para_plot = ue_perp_plot/ue_para_plot
        ratio_je_t_perp_plot    = je_t_plot/je_perp_plot
        je2D_plot               = np.sqrt(je_r_plot**2 + je_z_plot**2)
        ji2D_plot               = np.sqrt(ji_x_plot**2 + ji_z_plot**2)
        ji12D_plot              = np.sqrt(ji1_x_plot**2 + ji1_z_plot**2)
        ji22D_plot              = np.sqrt(ji2_x_plot**2 + ji2_z_plot**2)
        ji32D_plot              = np.sqrt(ji3_x_plot**2 + ji3_z_plot**2)
        ji42D_plot              = np.sqrt(ji4_x_plot**2 + ji4_z_plot**2)
        j2D_plot                = np.sqrt(j_r_plot**2 + j_z_plot**2)
        nu_ei_el_tot_plot       = nu_ei1_plot + nu_ei2_plot
        nu_ion_tot_plot         = nu_i01_plot + nu_i02_plot + nu_i12_plot
        nu_t_plot               = nu_e_tot_eff_plot - nu_e_tot_plot
        lambdaD_plot            = np.sqrt(eps0*(e*Te_plot)/(ne_plot*e**2))
        nn_plot                 = nn1_plot + nn2_plot + nn3_plot
        pn1_plot                = nn1_plot*Tn1_plot*e*1E-2 # Neutral pressure in mbar (1Pa = 1E-2 mbar)
        pn2_plot                = nn2_plot*Tn2_plot*e*1E-2 # Neutral pressure in mbar (1Pa = 1E-2 mbar)
        pn3_plot                = nn3_plot*Tn3_plot*e*1E-2 # Neutral pressure in mbar (1Pa = 1E-2 mbar)
        pn_plot                 = pn1_plot + pn2_plot + pn3_plot
        ndot_e_plot             = ndot_ion01_n1_plot[0:-1,0:-1] + ndot_ion01_n2_plot[0:-1,0:-1] + ndot_ion01_n3_plot[0:-1,0:-1] + 2.0*ndot_ion02_n1_plot[0:-1,0:-1] + 2.0*ndot_ion02_n2_plot[0:-1,0:-1] + 2.0*ndot_ion02_n3_plot[0:-1,0:-1] + ndot_ion12_i1_plot[0:-1,0:-1] + ndot_ion12_i3_plot[0:-1,0:-1]
        ratio_ni1_ni2_plot      = np.divide(ni2_plot,ni1_plot)
        ratio_ni1_ni3_plot      = np.divide(ni3_plot,ni1_plot)
        ratio_ni1_ni4_plot      = np.divide(ni4_plot,ni1_plot)
        ratio_ne_neCEX_plot     = np.divide(ni3_plot + 2*ni4_plot,ne_plot)
        ratio_nn1_nn2_plot      = np.divide(nn2_plot,nn1_plot)
        ratio_nn1_nn3_plot      = np.divide(nn3_plot,nn1_plot)
        ratio_nn1_nnCEX_plot    = np.divide(nn2_plot+nn3_plot,nn1_plot)
        ratio_nn_nnCEX_plot     = np.divide(nn2_plot+nn3_plot,nn_plot)
        ratio_nu_en_nu_e_tot_eff_plot      = np.divide(nu_en_plot,nu_e_tot_eff_plot)         # en elastic / eff tot
        ratio_nu_ion_tot_nu_e_tot_eff_plot = np.divide(nu_ion_tot_plot,nu_e_tot_eff_plot)    # ion tot / eff tot
        ratio_nu_ei_nu_e_tot_eff_plot      = np.divide(nu_ei_el_tot_plot,nu_e_tot_eff_plot)  # ei el (coulomb) / eff tot
        ratio_nu_ex_nu_e_tot_eff_plot      = np.divide(nu_ex_plot,nu_e_tot_eff_plot)         # excitation / eff tot
        ratio_nu_e_tot_nu_e_tot_eff_plot   = np.divide(nu_e_tot_plot,nu_e_tot_eff_plot)      # e tot / eff tot
        ratio_nu_t_nu_e_tot_eff_plot       = np.divide(nu_t_plot,nu_e_tot_eff_plot)          # t / eff tot
        ratio_nu_e_tot_nu_t_plot           = np.divide(nu_e_tot_plot,nu_t_plot)              # e tot / t
        ratio_nu_ei_tot_nu_t_plot          = np.divide(nu_ei_el_tot_plot,nu_t_plot)          # ei el (coulomb) / t 
        
        
        # Compute the total mass flow of all heavy species at each z section within the chamber
        xi_bottom = int(xi_bottom)
        xi_top    = int(xi_top)
        eta_min   = int(eta_min)
        eta_max   = int(eta_max)
        mA_Ch = np.zeros(int(xi_bottom)+1,dtype=float)
        mA_Ch2 = np.zeros(int(xi_bottom)+1,dtype=float)
        mA_Ch3 = np.zeros(int(xi_bottom)+1,dtype=float)
        I_Ch   = np.zeros(int(xi_bottom)+1,dtype=float)
        flux = fn1_z_plot + fn2_z_plot + fn3_z_plot + fi1_z_plot + fi2_z_plot + fi3_z_plot + fi4_z_plot
        for j in range(0,int(xi_bottom)+1):
#        for j in range(19,20):
            if j == 24:
#            for i in range(int(eta_min),int(eta_max)):
                for i in range(0,dims[0]-1):
                    dr = rs[i+1,j] - rs[i,j]
                    dz = rs[i+1,j]**2 - rs[i,j]**2
    #                print(dr,rs[i+1,j],rs[i,j])
                    mA_Ch[j] = mA_Ch[j] + 0.5*(flux[i,j]*rs[i,j] + flux[i+1,j]*rs[i+1,j])*dr
                    mA_Ch3[j] = mA_Ch3[j] + 0.5*(flux[i,j] + flux[i+1,j])*dz
                    I_Ch[j] = I_Ch[j] + 0.5*(j_z_plot[i,j]*rs[i,j] + j_z_plot[i+1,j]*rs[i+1,j])*dr
                    vec = np.multiply(rs[int(eta_min):int(eta_max)+1,j],flux[int(eta_min):int(eta_max)+1,j])
                    vec_r = rs[int(eta_min):int(eta_max)+1,j]
                    mA_Ch2[j] = 2.0*np.pi*mass*np.trapz(vec,x=vec_r)
            else:
                for i in range(int(eta_min),int(eta_max)):
#                for i in range(0,dims[0]-1):
                    dr = rs[i+1,j] - rs[i,j]
                    dz = rs[i+1,j]**2 - rs[i,j]**2
    #                print(dr,rs[i+1,j],rs[i,j])
                    mA_Ch[j] = mA_Ch[j] + 0.5*(flux[i,j]*rs[i,j] + flux[i+1,j]*rs[i+1,j])*dr
                    mA_Ch3[j] = mA_Ch3[j] + 0.5*(flux[i,j] + flux[i+1,j])*dz
                    I_Ch[j] = I_Ch[j] + 0.5*(j_z_plot[i,j]*rs[i,j] + j_z_plot[i+1,j]*rs[i+1,j])*dr
                    vec = np.multiply(rs[int(eta_min):int(eta_max)+1,j],flux[int(eta_min):int(eta_max)+1,j])
                    vec_r = rs[int(eta_min):int(eta_max)+1,j]
                    mA_Ch2[j] = 2.0*np.pi*mass*np.trapz(vec,x=vec_r)
        mA_Ch = mA_Ch*2.0*np.pi*mass
        mA_Ch3 = mA_Ch3*np.pi*mass
        I_Ch = 2*np.pi*I_Ch
#        print(mA_Ch) 
#        print(mA_Ch2[19])
#        print(mA_Ch3[19])
##        print(mA_Ch4)
#        print(I_Ch)
        
#        plt.figure("mdot")
#        plt.plot(zs[rind,0:int(xi_bottom)],mA_Ch[0:int(xi_bottom)],'b')
#        plt.plot(zs[rind,0:int(xi_bottom)],mA_Ch2[0:int(xi_bottom)],'r')
#        plt.plot(zs[rind,0:int(xi_bottom)],mA_Ch3[0:int(xi_bottom)],'g')
#        plt.figure("I_Ch")
#        plt.plot(zs[rind,0:int(xi_bottom)],I_Ch[0:int(xi_bottom)],'g')
       
        
        # Obtain volume-averaged values in plume volume
        Hall_par_effect_plot = np.sqrt(Hall_par_plot*Hall_par_eff_plot)
        hall_effect_mean     = 0.0
        hall_eff_mean        = 0.0
        hall_mean            = 0.0
        pn_mean              = 0.0
        phi_mean_vol         = 0.0
        Te_mean_vol          = 0.0 
        ne_mean_vol          = 0.0
        cells_vol_tot        = 0.0
        cells_vol_mp_tot     = 0.0
        for icell in range(0,dims[0]-1):
            for jcell in range(int(xi_bottom),dims[1]-1):
                hall_effect_cell = 0.25*(Hall_par_effect_plot[icell,jcell] + Hall_par_effect_plot[icell,jcell+1] + Hall_par_effect_plot[icell+1,jcell+1] + Hall_par_effect_plot[icell+1,jcell])
                hall_eff_cell    = 0.25*(Hall_par_eff_plot[icell,jcell] + Hall_par_eff_plot[icell,jcell+1] + Hall_par_eff_plot[icell+1,jcell+1] + Hall_par_eff_plot[icell+1,jcell])
                hall_cell        = 0.25*(Hall_par_plot[icell,jcell] + Hall_par_plot[icell,jcell+1] + Hall_par_plot[icell+1,jcell+1] + Hall_par_plot[icell+1,jcell])
                pn_cell          = 0.25*(pn_plot[icell,jcell] + pn_plot[icell,jcell+1] + pn_plot[icell+1,jcell+1] + pn_plot[icell+1,jcell])
                ne_cell          = 0.25*(ne_plot[icell,jcell] + ne_plot[icell,jcell+1] + ne_plot[icell+1,jcell+1] + ne_plot[icell+1,jcell])
                if interp_MFAM_picM_plot == 0:
                    phi_cell     = 0.25*(phi_plot[icell,jcell] + phi_plot[icell,jcell+1] + phi_plot[icell+1,jcell+1] + phi_plot[icell+1,jcell])
                    Te_cell      = 0.25*(Te_plot[icell,jcell]  + Te_plot[icell,jcell+1]  + Te_plot[icell+1,jcell+1]  + Te_plot[icell+1,jcell])
                    phi_mean_vol = phi_mean_vol + phi_cell*cells_vol[icell,jcell]
                    Te_mean_vol  = Te_mean_vol + Te_cell*cells_vol[icell,jcell]
                hall_effect_mean = hall_effect_mean + hall_effect_cell*cells_vol[icell,jcell]
                hall_eff_mean    = hall_eff_mean + hall_eff_cell*cells_vol[icell,jcell]
                hall_mean        = hall_mean + hall_cell*cells_vol[icell,jcell]
                pn_mean          = pn_mean + pn_cell*cells_vol[icell,jcell]
                ne_mean_vol      = ne_mean_vol + ne_cell*cells_vol[icell,jcell]
                cells_vol_tot    = cells_vol_tot + cells_vol[icell,jcell]
        
        if interp_MFAM_picM_plot == 1:
            for icell in range(0,dims_mp[0]-1):
                for jcell in range(int(xi_bottom_mp),dims_mp[1]-1):
                    phi_cell         = 0.25*(phi_mp[icell,jcell] + phi_mp[icell,jcell+1] + phi_mp[icell+1,jcell+1] + phi_mp[icell+1,jcell])
                    Te_cell          = 0.25*(Te_mp[icell,jcell]  + Te_mp[icell,jcell+1]  + Te_mp[icell+1,jcell+1]  + Te_mp[icell+1,jcell])
                    phi_mean_vol     = phi_mean_vol + phi_cell*cells_vol_mp[icell,jcell]
                    Te_mean_vol      = Te_mean_vol + Te_cell*cells_vol_mp[icell,jcell]
                    cells_vol_mp_tot = cells_vol_mp_tot + cells_vol_mp[icell,jcell]
                    
        hall_effect_mean = hall_effect_mean/cells_vol_tot
        hall_eff_mean    = hall_eff_mean/cells_vol_tot
        hall_mean        = hall_mean/cells_vol_tot
        pn_mean          = pn_mean/cells_vol_tot
        ne_mean_vol      = ne_mean_vol/cells_vol_tot
        if interp_MFAM_picM_plot == 0:
            phi_mean_vol = phi_mean_vol/cells_vol_tot
            Te_mean_vol  = Te_mean_vol/cells_vol_tot
        elif interp_MFAM_picM_plot == 1:
            phi_mean_vol = phi_mean_vol/cells_vol_mp_tot
            Te_mean_vol  = Te_mean_vol/cells_vol_mp_tot
        
        # if interp_MFAM_picM_plot == 1:
        #     print("------------------- ENTRO")
        #     # Copy j matrix and set NaNs where we are not looking for j=0 point
        #     # For P3 and P4 (paper GDML)
        #     # pos_tol_z1 = 1000
        #     # pos_tol_z2 = 1000
        #     # pos_tol_r1 = 600
        #     # # pos_tol_r2 = 2000
        #     # pos_tol_r2 = 1000
        #     # For P2 (paper GDML)
        #     pos_tol_z1 = 1000
        #     pos_tol_z2 = 200
        #     pos_tol_r1 = 600
        #     pos_tol_r2 = 1000
        #     # # For P1 (paper GDML)
        #     # pos_tol_z1 = 100
        #     # pos_tol_z2 = 100
        #     # pos_tol_r1 = 600
        #     # pos_tol_r2 = 100
        #     copy_j_2D_mp = np.copy(j_2D_mp)
        #     copy_j_2D_mp[0:pos_tol_r1,:]                   = np.nan
        #     copy_j_2D_mp[dims_mp[0]-pos_tol_r2::,:]        = np.nan
        #     copy_j_2D_mp[:,0:int(xi_bottom_mp)+pos_tol_z1] = np.nan
        #     copy_j_2D_mp[:,dims_mp[1]-pos_tol_z2::]        = np.nan
        #     # pos_null_j2D_point = np.where(j_2D_mp == np.nanmin(np.nanmin(j_2D_mp[pos_tol::,pos_tol::])))
        #     pos_null_j2D_point = np.where(j_2D_mp == np.nanmin(np.nanmin(copy_j_2D_mp)))
        #     z_null_j2D_point = zs_mp[pos_null_j2D_point][0]
        #     r_null_j2D_point = rs_mp[pos_null_j2D_point][0]
        #     j2D_null_point   = j_2D_mp[pos_null_j2D_point][0]
        # else:
        #     pos_tol = 5
        #     pos_null_j2D_point = np.where(j2D_plot == np.nanmin(np.nanmin(j2D_plot[pos_tol:dims[0]-pos_tol,int(xi_bottom)+pos_tol:-pos_tol:1])))
        #     z_null_j2D_point = zs[pos_null_j2D_point][0]
        #     r_null_j2D_point = rs[pos_null_j2D_point][0]
        #     j2D_null_point   = j2D_plot[pos_null_j2D_point][0]
        
        
        
        # Obtain axial profiles at the midline if lateral plume boundary is 
        # tilted, so that the PIC mesh points along thruster midradius in the plume
        # increase r position along the plume
        if interp_zprof == 1:
            if mean_vars == 1 and plot_mean_vars == 1:
                [z_prof,r_prof,z_prof_mp,r_prof_mp,
                 B_prof,Br_prof,Bz_prof,phi_prof,Te_prof,je_perp_prof,je_theta_prof,
                 je_para_prof,je_z_prof,je_r_prof,je_2D_prof,je_prof,
                 j_r_prof,j_t_prof,j_z_prof,j_2D_prof,j_prof,
                 B_prof_mp,Br_prof_mp,Bz_prof_mp,phi_prof_mp,Te_prof_mp,
                 je_perp_prof_mp,je_theta_prof_mp,je_para_prof_mp,je_z_prof_mp,
                 je_r_prof_mp,je_2D_prof_mp,je_prof_mp,
                 j_r_prof_mp,j_t_prof_mp,j_z_prof_mp,j_2D_prof_mp,j_prof_mp,
            
                 ji_x_prof,ji_y_prof,ji_z_prof,ji_2D_prof,ji_prof,ne_prof,nn_prof,
                 Hall_par_prof,Hall_par_eff_prof,Hall_par_effect_prof] = HET_sims_interp_zprof(interp_MFAM_picM_plot,rs[rind,0],
                                                                                               n_elems,n_faces,elem_geom,face_geom,versors_e,versors_f,
                                                                                               phi_elems_mean,phi_faces_mean,Te_elems_mean,Te_faces_mean,
                                                                                               je_perp_elems_mean,je_theta_elems_mean,je_para_elems_mean,
                                                                                               je_z_elems_mean,je_r_elems_mean,je_perp_faces_mean,
                                                                                               je_theta_faces_mean,je_para_faces_mean,je_z_faces_mean,
                                                                                               je_r_faces_mean,
                                                                                               zs,rs,zs_mp,rs_mp,
                                                                                               ji_x_plot,ji_y_plot,ji_z_plot,ne_plot,nn_plot,Hall_par_plot,
                                                                                               Hall_par_eff_plot)
            else:
                [z_prof,r_prof,z_prof_mp,r_prof_mp,
                 B_prof,Br_prof,Bz_prof,phi_prof,Te_prof,je_perp_prof,je_theta_prof,
                 je_para_prof,je_z_prof,je_r_prof,je_2D_prof,je_prof,
                 j_r_prof,j_t_prof,j_z_prof,j_2D_prof,j_prof,
                 B_prof_mp,Br_prof_mp,Bz_prof_mp,phi_prof_mp,Te_prof_mp,
                 je_perp_prof_mp,je_theta_prof_mp,je_para_prof_mp,je_z_prof_mp,
                 je_r_prof_mp,je_2D_prof_mp,je_prof_mp,
                 j_r_prof_mp,j_t_prof_mp,j_z_prof_mp,j_2D_prof_mp,j_prof_mp,
            
                 ji_x_prof,ji_y_prof,ji_z_prof,ji_2D_prof,ji_prof,ne_prof,nn_prof,
                 Hall_par_prof,Hall_par_eff_prof,Hall_par_effect_prof] = HET_sims_interp_zprof(interp_MFAM_picM_plot,rs[rind,0],
                                                                                               n_elems,n_faces,elem_geom,face_geom,versors_e,versors_f,
                                                                                               phi_elems,phi_faces,Te_elems,Te_faces,
                                                                                               je_perp_elems,je_theta_elems,je_para_elems,
                                                                                               je_z_elems,je_r_elems,je_perp_faces,
                                                                                               je_theta_faces,je_para_faces,je_z_faces,
                                                                                               je_r_faces,
                                                                                               zs,rs,zs_mp,rs_mp,
                                                                                               ji_x_plot,ji_y_plot,ji_z_plot,ne_plot,nn_plot,Hall_par_plot,
                                                                                               Hall_par_eff_plot)
    
        
        # Obtain the cathode coupling voltage by interpolating to the prescribed
        # point from the MFAM elements and faces
        # Introduce zcat_pos in meters
        zcat_pos = zcat_pos_vec[k]
        zpoint = zcat_pos*L_c*1E-2
        rpoint = rs[rind,0]
        [Vcoupling_interp] = HET_sims_interp_point(zpoint,rpoint,
                                                   n_elems,n_faces,elem_geom,face_geom,versors_e,versors_f,
                                                   phi_elems_mean,phi_faces_mean,Te_elems_mean,Te_faces_mean,
                                                   je_perp_elems_mean,je_theta_elems_mean,je_para_elems_mean,
                                                   je_z_elems_mean,je_r_elems_mean,je_perp_faces_mean,
                                                   je_theta_faces_mean,je_para_faces_mean,je_z_faces_mean,
                                                   je_r_faces_mean,
                                                   zs,rs,zs_mp,rs_mp,
                                                   ji_x_plot,ji_y_plot,ji_z_plot,ne_plot,nn_plot,Hall_par_plot,
                                                   Hall_par_eff_plot)
                                                                                               
        if plot_Bline_prof == 1:
            nn = nn1 + nn2 + nn3
            if Bline_type == 0:
                Bline = elems_cath_Bline
            elif Bline_type == 1:
                Bline = faces_cath_Bline

            [s_Bline,z_Bline,r_Bline,
            B_Bline,Bz_Bline,Br_Bline,alpha_ano_Bline,phi_Bline,ne_Bline,
            ne_Bline_mfam,nn_Bline,Te_Bline,ratio_Ekin_Te_Bline,je_perp_Bline,
            je_theta_Bline,je_para_Bline,je_z_Bline,je_r_Bline,Hall_par_Bline,
            Hall_par_eff_Bline,Hall_par_effect_Bline,felec_para_Bline,
            felec_perp_Bline,felec_z_Bline,felec_r_Bline,
            
            phi_Bline_mean,Te_Bline_mean,ne_Bline_mean,ne_Bline_mfam_mean,
            nn_Bline_mean,je_para_Bline_mean,Hall_par_Bline_mean,
            Hall_par_eff_Bline_mean,Hall_par_effect_Bline_mean,
            felec_para_Bline_mean,felec_perp_Bline_mean,felec_z_Bline_mean,
            felec_r_Bline_mean] = compute_Bline_prof(Bline,Bline_type,cath_elem,n_elems,n_faces,elem_geom,
                                                                    face_geom,faces,nodes,versors_e,versors_f,
                                                                    mean_type,nsteps,last_steps,step_i,step_f,
                                                                    zs,rs,ne,nn,
                                                                    phi_elems,phi_faces,ne_elems,ne_faces,Te_elems,Te_faces,
                                                                    je_perp_elems,je_theta_elems,je_para_elems,je_z_elems,
                                                                    je_r_elems,je_perp_faces,je_theta_faces,je_para_faces,
                                                                    je_z_faces,je_r_faces,
                                                                    alpha_ano_elems,alpha_ano_e_elems,alpha_ano_q_elems,
                                                                    alpha_ine_elems,alpha_ine_q_elems,alpha_ano_faces,
                                                                    alpha_ano_e_faces,alpha_ano_q_faces,alpha_ine_faces,
                                                                    alpha_ine_q_faces,
                                                                    Hall_par_elems,Hall_par_eff_elems,nu_e_tot_elems,
                                                                    nu_e_tot_eff_elems,Hall_par_faces,Hall_par_eff_faces,
                                                                    nu_e_tot_faces,nu_e_tot_eff_faces,nu_en_elems,
                                                                    nu_ei1_elems,nu_ei2_elems,nu_i01_elems,nu_i02_elems,
                                                                    nu_i12_elems,nu_ex_elems,nu_en_faces,nu_ei1_faces,
                                                                    nu_ei2_faces,nu_i01_faces,nu_i02_faces,nu_i12_faces,
                                                                    nu_ex_faces,
                                                                    felec_para_elems,felec_para_faces,felec_perp_elems,
                                                                    felec_perp_faces,felec_z_elems,felec_z_faces,
                                                                    felec_r_elems,felec_r_faces)
                                                                    
            # Obtain the crossing point between the Bline and the midradius
            if r_Bline[0] > rs[rind,0]:
                pos_r_Bline = np.where(r_Bline >= rs[rind,0])[0][-1]
            elif r_Bline[0] < rs[rind,0]:
                pos_r_Bline = np.where(r_Bline <= rs[rind,0])[0][-1]   
            print("Plotting Bline prof. Crossing Bline with midradius at s = %15.8e (m)" %s_Bline[pos_r_Bline])                          
                                                                                               
        ###########################################################################
        print("Plotting...")
        ############################ GENERATING PLOTS #############################
        print("interp_MFAM_picM_plot = "+str(interp_MFAM_picM_plot))        
        print("r zprofs              = %15.8e (cm)" %( rs[rind,0]*1E2 ) )
        if interp_MFAM_picM_plot == 1:
            print("r_mp zprofs           = %15.8e (cm)" %( rs_mp[rind_mp,0]*1E2 ) )
        print("z rprofs              = %15.8e (cm)" %( zs[0,zind]*1E2 ) )
        if interp_MFAM_picM_plot == 1:
            print("z_mp rprofs           = %15.8e (cm)" %( zs_mp[0,zind_mp]*1E2 ) )
        print("erel_ue max           = %15.8e; erel_ue min         = %15.8e (-)" %( np.nanmax(erel_ue_plot[rind,:]), np.nanmin(erel_ue_plot[rind,:]) ) )
        print("erel_je max           = %15.8e; erel_je min         = %15.8e (-)" %( np.nanmax(erel_je_plot[rind,:]), np.nanmin(erel_je_plot[rind,:]) ) )
        print("erel_jeji max         = %15.8e; erel_jeji min       = %15.8e (-)" %( np.nanmax(erel_jeji_plot[rind,:]), np.nanmin(erel_jeji_plot[rind,:]) ) )
        print("phi max               = %15.8e; phi min             = %15.8e (V)" %( np.nanmax(phi_plot[rind,:]), np.nanmin(phi_plot[rind,:]) ) )
        print("Efield max            = %15.8e; Efield min          = %15.8e (V/m)" %( np.nanmax(Efield_plot[rind,:]), np.nanmin(Efield_plot[rind,:]) ) )
        print("Bfield max            = %15.8e; Bfield min          = %15.8e (G)" %( np.nanmax(Bfield_plot[rind,:]*1E4), np.nanmin(Bfield_plot[rind,:]*1E4) ) )
        print("Er max                = %15.8e; Er min              = %15.8e (V/m)" %( np.nanmax(Er_plot[rind,:]), np.nanmin(Er_plot[rind,:]) ) )
        print("Ez max                = %15.8e; Ez min              = %15.8e (V/m)" %( np.nanmax(Ez_plot[rind,:]), np.nanmin(Ez_plot[rind,:]) ) )
        print("ne max                = %15.8e; ne min              = %15.8e (1/m3)" %( np.nanmax(ne_plot[rind,:]), np.nanmin(ne_plot[rind,:]) ) )
        print("ni1 max               = %15.8e; ni1 min             = %15.8e (1/m3)" %( np.nanmax(ni1_plot[rind,:]), np.nanmin(ni1_plot[rind,:]) ) )
        print("ni2 max               = %15.8e; ni2 min             = %15.8e (1/m3)" %( np.nanmax(ni2_plot[rind,:]), np.nanmin(ni2_plot[rind,:]) ) )
        print("ni3 max               = %15.8e; ni3 min             = %15.8e (1/m3)" %( np.nanmax(ni3_plot[rind,:]), np.nanmin(ni3_plot[rind,:]) ) )
        print("ni4 max               = %15.8e; ni4 min             = %15.8e (1/m3)" %( np.nanmax(ni4_plot[rind,:]), np.nanmin(ni4_plot[rind,:]) ) )
        print("ni2/ni1 max           = %15.8e; ni2/ni1 min         = %15.8e (-)" %( np.nanmax(ratio_ni1_ni2_plot[rind,:]), np.nanmin(ratio_ni1_ni2_plot[rind,:]) ) )
        print("ni3/ni1 max           = %15.8e; ni3/ni1 min         = %15.8e (-)" %( np.nanmax(ratio_ni1_ni3_plot[rind,:]), np.nanmin(ratio_ni1_ni3_plot[rind,:]) ) )
        print("ni4/ni1 max           = %15.8e; ni4/ni1 min         = %15.8e (-)" %( np.nanmax(ratio_ni1_ni4_plot[rind,:]), np.nanmin(ratio_ni1_ni4_plot[rind,:]) ) )
        print("neCEX/ne max          = %15.8e; neCEX/ne min        = %15.8e (-)" %( np.nanmax(ratio_ne_neCEX_plot[rind,:]), np.nanmin(ratio_ne_neCEX_plot[rind,:]) ) )
        print("nn1 max               = %15.8e; nn1 min             = %15.8e (1/m3)" %( np.nanmax(nn1_plot[rind,:]), np.nanmin(nn1_plot[rind,:]) ) )
        print("nn2 max               = %15.8e; nn2 min             = %15.8e (1/m3)" %( np.nanmax(nn2_plot[rind,:]), np.nanmin(nn2_plot[rind,:]) ) )
        print("nn3 max               = %15.8e; nn3 min             = %15.8e (1/m3)" %( np.nanmax(nn3_plot[rind,:]), np.nanmin(nn3_plot[rind,:]) ) )
        print("nn2/nn1 max           = %15.8e; nn2/nn1 min         = %15.8e (-)" %( np.nanmax(ratio_nn1_nn2_plot[rind,:]), np.nanmin(ratio_nn1_nn2_plot[rind,:]) ) )
        print("nn3/nn1 max           = %15.8e; nn3/nn1 min         = %15.8e (-)" %( np.nanmax(ratio_nn1_nn3_plot[rind,:]), np.nanmin(ratio_nn1_nn3_plot[rind,:]) ) )
        print("nnCEX/nn1 max         = %15.8e; nnCEX/nn1 min       = %15.8e (-)" %( np.nanmax(ratio_nn1_nnCEX_plot[rind,:]), np.nanmin(ratio_nn1_nnCEX_plot[rind,:]) ) )
        print("nnCEX/nn max          = %15.8e; nnCEX/nn min        = %15.8e (-)" %( np.nanmax(ratio_nn_nnCEX_plot[rind,:]), np.nanmin(ratio_nn_nnCEX_plot[rind,:]) ) )
        print("Te max                = %15.8e; Te min              = %15.8e (eV)" %( np.nanmax(Te_plot[rind,:]), np.nanmin(Te_plot[rind,:]) ) )
        print("Ti1 max               = %15.8e; Ti1 min             = %15.8e (eV)" %( np.nanmax(Ti1_plot[rind,:]), np.nanmin(Ti1_plot[rind,:]) ) )
        print("Ti2 max               = %15.8e; Ti2 min             = %15.8e (eV)" %( np.nanmax(Ti2_plot[rind,:]), np.nanmin(Ti2_plot[rind,:]) ) )
        print("Ti3 max               = %15.8e; Ti3 min             = %15.8e (eV)" %( np.nanmax(Ti3_plot[rind,:]), np.nanmin(Ti3_plot[rind,:]) ) )
        print("Ti4 max               = %15.8e; Ti4 min             = %15.8e (eV)" %( np.nanmax(Ti4_plot[rind,:]), np.nanmin(Ti4_plot[rind,:]) ) )
        print("Tn1 max               = %15.8e; Tn1 min             = %15.8e (eV)" %( np.nanmax(Tn1_plot[rind,:]), np.nanmin(Tn1_plot[rind,:]) ) )
        print("Tn2 max               = %15.8e; Tn2 min             = %15.8e (eV)" %( np.nanmax(Tn2_plot[rind,:]), np.nanmin(Tn2_plot[rind,:]) ) )
        print("Tn3 max               = %15.8e; Tn3 min             = %15.8e (eV)" %( np.nanmax(Tn3_plot[rind,:]), np.nanmin(Tn3_plot[rind,:]) ) )
        print("Ekin_e max            = %15.8e; Ekin_e min          = %15.8e (eV)" %( np.nanmax(Ekin_e_plot[rind,:]), np.nanmin(Ekin_e_plot[rind,:]) ) )
        print("Ekin_i1 max           = %15.8e; Ekin_i1 min         = %15.8e (eV)" %( np.nanmax(Ekin_i1_plot[rind,:]), np.nanmin(Ekin_i1_plot[rind,:]) ) )
        print("Ekin_i2 max           = %15.8e; Ekin_i2 min         = %15.8e (eV)" %( np.nanmax(Ekin_i2_plot[rind,:]), np.nanmin(Ekin_i2_plot[rind,:]) ) )
        print("Ekin/Te max           = %15.8e; Ekin/Te min         = %15.8e (-)" %( np.nanmax(ratio_Ekin_Te_plot[rind,:]), np.nanmin(ratio_Ekin_Te_plot[rind,:]) ) )
        print("Ekin/Ti1 max          = %15.8e; Ekin/Ti1 min        = %15.8e (-)" %( np.nanmax(ratio_Ekin_Ti1_plot[rind,:]), np.nanmin(ratio_Ekin_Ti1_plot[rind,:]) ) )
        print("Ekin/Ti2 max          = %15.8e; Ekin/Ti2 min        = %15.8e (-)" %( np.nanmax(ratio_Ekin_Ti2_plot[rind,:]), np.nanmin(ratio_Ekin_Ti2_plot[rind,:]) ) )
        print("Mi1 max               = %15.8e; Mi1 min             = %15.8e (-)" %( np.nanmax(Mi1_plot[rind,:]), np.nanmin(Mi1_plot[rind,:]) ) )
        print("Mi2 max               = %15.8e; Mi2 min             = %15.8e (-)" %( np.nanmax(Mi2_plot[rind,:]), np.nanmin(Mi2_plot[rind,:]) ) )
        print("Mi max                = %15.8e; Mi min              = %15.8e (-)" %( np.nanmax(Mi_plot[rind,:]), np.nanmin(Mi_plot[rind,:]) ) )
        print("Mi1_z max             = %15.8e; Mi1_z min           = %15.8e (-)" %( np.nanmax(Mi1_z_plot[rind,:]), np.nanmin(Mi1_z_plot[rind,:]) ) )
        print("Mi2_z max             = %15.8e; Mi2_z min           = %15.8e (-)" %( np.nanmax(Mi2_z_plot[rind,:]), np.nanmin(Mi2_z_plot[rind,:]) ) )
        print("Mi_z max              = %15.8e; Mi_z min            = %15.8e (-)" %( np.nanmax(Mi_z_plot[rind,:]), np.nanmin(Mi_z_plot[rind,:]) ) )
        print("ui_x max              = %15.8e; ui_x min            = %15.8e (m/s)" %( np.nanmax(ui_x_plot[rind,:]), np.nanmin(ui_x_plot[rind,:]) ) )
        print("ui_y max              = %15.8e; ui_y min            = %15.8e (m/s)" %( np.nanmax(ui_y_plot[rind,:]), np.nanmin(ui_y_plot[rind,:]) ) )
        print("ui_z max              = %15.8e; ui_z min            = %15.8e (m/s)" %( np.nanmax(ui_z_plot[rind,:]), np.nanmin(ui_z_plot[rind,:]) ) )
        print("ue_r max              = %15.8e; ue_r min            = %15.8e (m/s)" %( np.nanmax(ue_r_plot[rind,:]), np.nanmin(ue_r_plot[rind,:]) ) )
        print("ue_t max              = %15.8e; ue_t min            = %15.8e (m/s)" %( np.nanmax(ue_t_plot[rind,:]), np.nanmin(ue_t_plot[rind,:]) ) )
        print("ue_z max              = %15.8e; ue_z min            = %15.8e (m/s)" %( np.nanmax(ue_z_plot[rind,:]), np.nanmin(ue_z_plot[rind,:]) ) )
        print("ue_perp max           = %15.8e; ue_perp min         = %15.8e (m/s)" %( np.nanmax(ue_perp_plot[rind,:]), np.nanmin(ue_perp_plot[rind,:]) ) )
        print("ue_para max           = %15.8e; ue_para min         = %15.8e (m/s)" %( np.nanmax(ue_para_plot[rind,:]), np.nanmin(ue_para_plot[rind,:]) ) )
        print("ue_t/ue_perp max      = %15.8e; ue_t/ue_perp min    = %15.8e (m/s)" %( np.nanmax(ratio_ue_t_perp_plot[rind,:]), np.nanmin(ratio_ue_t_perp_plot[rind,:]) ) )
        print("ue_t/ue_para max      = %15.8e; ue_t/ue_para min    = %15.8e (m/s)" %( np.nanmax(ratio_ue_t_para_plot[rind,:]), np.nanmin(ratio_ue_t_para_plot[rind,:]) ) )
        print("ue_perp/ue_para max   = %15.8e; ue_perp/ue_para min = %15.8e (m/s)" %( np.nanmax(ratio_ue_perp_para_plot[rind,:]), np.nanmin(ratio_ue_perp_para_plot[rind,:]) ) )
        print("uthetaExB max         = %15.8e; uthetaExB min       = %15.8e (m/s)" %( np.nanmax(uthetaExB_plot[rind,:]), np.nanmin(uthetaExB_plot[rind,:]) ) )        
        print("je_r max              = %15.8e; je_r min            = %15.8e (A/m2)" %( np.nanmax(je_r_plot[rind,:]), np.nanmin(je_r_plot[rind,:]) ) )
        print("je_t max              = %15.8e; je_t min            = %15.8e (A/m2)" %( np.nanmax(je_t_plot[rind,:]), np.nanmin(je_t_plot[rind,:]) ) )
        print("je_z max              = %15.8e; je_z min            = %15.8e (A/m2)" %( np.nanmax(je_z_plot[rind,:]), np.nanmin(je_z_plot[rind,:]) ) )
        print("je_perp max           = %15.8e; je_perp min         = %15.8e (A/m2)" %( np.nanmax(je_perp_plot[rind,:]), np.nanmin(je_perp_plot[rind,:]) ) )
        print("je_para max           = %15.8e; je_para min         = %15.8e (A/m2)" %( np.nanmax(je_para_plot[rind,:]), np.nanmin(je_para_plot[rind,:]) ) )
        print("je_t/je_perp max      = %15.8e; je_t/je_perp min    = %15.8e (-)" %( np.nanmax(ratio_je_t_perp_plot[rind,:]), np.nanmin(ratio_je_t_perp_plot[rind,:]) ) )
        print("F_theta max           = %15.8e; F_theta min         = %15.8e (A/m2)" %( np.nanmax(F_theta_plot[rind,:]), np.nanmin(F_theta_plot[rind,:]) ) )        
        print("je max                = %15.8e; je min              = %15.8e (A/m2)" %( np.nanmax(je_plot[rind,:]), np.nanmin(je_plot[rind,:]) ) )
        print("ji max                = %15.8e; ji min              = %15.8e (A/m2)" %( np.nanmax(ji_plot[rind,:]), np.nanmin(ji_plot[rind,:]) ) )
        print("ji1 max               = %15.8e; ji1 min             = %15.8e (A/m2)" %( np.nanmax(ji1_plot[rind,:]), np.nanmin(ji1_plot[rind,:]) ) )
        print("ji2 max               = %15.8e; ji2 min             = %15.8e (A/m2)" %( np.nanmax(ji2_plot[rind,:]), np.nanmin(ji2_plot[rind,:]) ) )
        print("j max                 = %15.8e; j min               = %15.8e (A/m2)" %( np.nanmax(j_plot[rind,:]), np.nanmin(j_plot[rind,:]) ) )
        print("je2D max              = %15.8e; je2D min            = %15.8e (A/m2)" %( np.nanmax(je2D_plot[rind,:]), np.nanmin(je2D_plot[rind,:]) ) )
        print("ji2D max              = %15.8e; ji2D min            = %15.8e (A/m2)" %( np.nanmax(ji2D_plot[rind,:]), np.nanmin(ji2D_plot[rind,:]) ) )
        print("j2D max               = %15.8e; j2D min             = %15.8e (A/m2)" %( np.nanmax(j2D_plot[rind,:]), np.nanmin(j2D_plot[rind,:]) ) )
        print("Hall_par max          = %15.8e; Hall_par min        = %15.8e (-)" %( np.nanmax(Hall_par_plot[rind,:]), np.nanmin(Hall_par_plot[rind,:]) ) )
        print("Hall_par_eff max      = %15.8e; Hall_par_eff min    = %15.8e (-)" %( np.nanmax(Hall_par_eff_plot[rind,:]), np.nanmin(Hall_par_eff_plot[rind,:]) ) )
        print("Hall_par_effect max   = %15.8e; Hall_par_effect min = %15.8e (-)" %( np.nanmax(Hall_par_effect_plot[rind,:]), np.nanmin(Hall_par_effect_plot[rind,:]) ) )
        print("nu_e_tot max          = %15.8e; nu_e_tot min        = %15.8e (Hz)" %( np.nanmax(nu_e_tot_plot[rind,:]), np.nanmin(nu_e_tot_plot[rind,:]) ) )
        print("nu_e_tot_eff max      = %15.8e; nu_e_tot_eff min    = %15.8e (Hz)" %( np.nanmax(nu_e_tot_eff_plot[rind,:]), np.nanmin(nu_e_tot_eff_plot[rind,:]) ) )
        print("nu_en max             = %15.8e; nu_en min           = %15.8e (Hz)" %( np.nanmax(nu_en_plot[rind,:]), np.nanmin(nu_en_plot[rind,:]) ) )
        print("nu_ei1 max            = %15.8e; nu_ei1 min          = %15.8e (Hz)" %( np.nanmax(nu_ei1_plot[rind,:]), np.nanmin(nu_ei1_plot[rind,:]) ) )
        print("nu_ei2 max            = %15.8e; nu_ei2 min          = %15.8e (Hz)" %( np.nanmax(nu_ei2_plot[rind,:]), np.nanmin(nu_ei2_plot[rind,:]) ) )
        print("nu_i01 max            = %15.8e; nu_i01 min          = %15.8e (Hz)" %( np.nanmax(nu_i01_plot[rind,:]), np.nanmin(nu_i01_plot[rind,:]) ) )
        print("nu_i02 max            = %15.8e; nu_i02 min          = %15.8e (Hz)" %( np.nanmax(nu_i02_plot[rind,:]), np.nanmin(nu_i02_plot[rind,:]) ) )
        print("nu_i12 max            = %15.8e; nu_i12 min          = %15.8e (Hz)" %( np.nanmax(nu_i12_plot[rind,:]), np.nanmin(nu_i12_plot[rind,:]) ) )
        print("nu_ex max             = %15.8e; nu_ex min           = %15.8e (Hz)" %( np.nanmax(nu_ex_plot[rind,:]), np.nanmin(nu_ex_plot[rind,:]) ) )
        print("nu_ei_el_tot max      = %15.8e; nu_ei_el_tot min    = %15.8e (Hz)" %( np.nanmax(nu_ei_el_tot_plot[rind,:]), np.nanmin(nu_ei_el_tot_plot[rind,:]) ) )
        print("nu_ion_tot max        = %15.8e; nu_ion_tot min      = %15.8e (Hz)" %( np.nanmax(nu_ion_tot_plot[rind,:]), np.nanmin(nu_ion_tot_plot[rind,:]) ) )
        print("lambdaD max           = %15.8e; lambdaD min         = %15.8e (mm)" %( np.nanmax(lambdaD_plot*1E3), np.nanmin(lambdaD_plot*1E3) ) )
        print("pn max                = %15.8e; pn min              = %15.8e (mbar)" %( np.nanmax(pn_plot[rind,:]), np.nanmin(pn_plot[rind,:]) ) )
        print("###### Values at the cathode #######")     
        # if len(elems_cath_Bline) > 0:
        #     print("cath_ne        = %15.8e" %cath_ne)
        #     print("cath_Te        = %15.8e" %cath_Te)
        print("ne_cath_mean        = %15.8e" %np.mean(ne_cath_mean))
        print("Te_cath_mean        = %15.8e" %np.mean(Te_cath_mean))
        
        
        
        if interp_MFAM_picM_plot == 1:
            zs_mp                = zs_mp*1E2
            rs_mp                = rs_mp*1E2
        if plot_Bline_prof == 1:
            s_Bline = s_Bline*1E2
            z_Bline = z_Bline*1E2
            r_Bline = r_Bline*1E2
            
        zs                = zs*1E2
        rs                = rs*1E2
        zscells           = zscells*1E2
        rscells           = rscells*1E2
        z_prof            = z_prof*1E2
        r_prof            = r_prof*1E2
        z_prof_mp         = z_prof_mp*1E2
        r_prof_mp         = r_prof_mp*1E2
        points            = points*1E2
        z_cath            = z_cath*1E2
        r_cath            = r_cath*1E2
        elem_geom[3,:]    = elem_geom[3,:]*1E4
        elem_geom[0,:]    = elem_geom[0,:]*1E2
        elem_geom[1,:]    = elem_geom[1,:]*1E2
        Efield_plot       = Efield_plot*1E-3
        Er_plot           = Er_plot*1E-3
        Ez_plot           = Ez_plot*1E-3
        Bfield_plot       = Bfield_plot*1E4
        Br_plot           = Br_plot*1E4
        Bz_plot           = Bz_plot*1E4
        je_r_plot         = je_r_plot*1E-4      # This is A/cm2
        je_t_plot         = je_t_plot*1E-4      # This is A/cm2
        je_z_plot         = je_z_plot*1E-4      # This is A/cm2
        je_para_plot      = je_para_plot*1E-4   # This is A/cm2
        je_perp_plot      = je_perp_plot*1E-4   # This is A/cm2
        ji_x_plot         = ji_x_plot*1E-4      # This is A/cm2
        ji_y_plot         = ji_y_plot*1E-4      # This is A/cm2
        ji_z_plot         = ji_z_plot*1E-4      # This is A/cm2
        ji1_x_plot        = ji1_x_plot*1E-4     # This is A/cm2
        ji1_y_plot        = ji1_y_plot*1E-4     # This is A/cm2
        ji1_z_plot        = ji1_z_plot*1E-4     # This is A/cm2
        ji2_x_plot        = ji2_x_plot*1E-4     # This is A/cm2
        ji2_y_plot        = ji2_y_plot*1E-4     # This is A/cm2
        ji2_z_plot        = ji2_z_plot*1E-4     # This is A/cm2
        ji3_x_plot        = ji3_x_plot*1E-4     # This is A/cm2
        ji3_y_plot        = ji3_y_plot*1E-4     # This is A/cm2
        ji3_z_plot        = ji3_z_plot*1E-4     # This is A/cm2
        ji4_x_plot        = ji4_x_plot*1E-4     # This is A/cm2
        ji4_y_plot        = ji4_y_plot*1E-4     # This is A/cm2
        ji4_z_plot        = ji4_z_plot*1E-4     # This is A/cm2
        je2D_plot         = je2D_plot*1E-4      # This is A/cm2
        ji2D_plot         = ji2D_plot*1E-4      # This is A/cm2
        ji12D_plot        = ji12D_plot*1E-4     # This is A/cm2
        ji22D_plot        = ji22D_plot*1E-4     # This is A/cm2
        ji32D_plot        = ji32D_plot*1E-4     # This is A/cm2
        ji42D_plot        = ji42D_plot*1E-4     # This is A/cm2
        j2D_plot          = j2D_plot*1E-4       # This is A/cm2
        ji1_plot          = ji1_plot*1E-4       # This is A/cm2
        ji2_plot          = ji2_plot*1E-4       # This is A/cm2
        j_plot            = j_plot*1E-4         # This is A/cm2
        je_plot           = je_plot*1E-4        # This is A/cm2
        ji_plot           = ji_plot*1E-4        # This is A/cm2
        if interp_MFAM_picM_plot == 1: 
            je_perp_mp        = je_perp_mp*1E-4   # This is A/cm2
            je_theta_mp       = je_theta_mp*1E-4  # This is A/cm2
            je_para_mp        = je_para_mp*1E-4   # This is A/cm2
            je_z_mp           = je_z_mp*1E-4      # This is A/cm2
            je_r_mp           = je_r_mp*1E-4      # This is A/cm2
            je_2D_mp          = je_2D_mp*1E-4     # This is A/cm2
            ji_x_mp           = ji_x_mp*1E-4      # This is A/cm2
            ji_y_mp           = ji_y_mp*1E-4      # This is A/cm2
            ji_z_mp           = ji_z_mp*1E-4      # This is A/cm2
            ji_2D_mp          = ji_2D_mp*1E-4     # This is A/cm2
            j_r_mp            = j_r_mp*1E-4       # This is A/cm2
            j_t_mp            = j_t_mp*1E-4       # This is A/cm2
            j_z_mp            = j_z_mp*1E-4       # This is A/cm2
            j_2D_mp           = j_2D_mp*1E-4      # This is A/cm2
            je_mp             = je_mp*1E-4        # This is A/cm2
            j_mp              = j_mp*1E-4         # This is A/cm2
            
        if plot_B_scan == 1 or plot_fields_scan == 1 or plot_dens_scan == 1 or plot_temp_scan  == 1 or plot_curr_scan == 1 or plot_freq_scan == 1:
            z_scan = z_scan*1E2
            r_scan = r_scan*1E2
            je_perp_scan  = je_perp_scan*1E-4  # This is A/cm2
            je_theta_scan = je_theta_scan*1E-4  # This is A/cm2
            je_para_scan  = je_para_scan*1E-4   # This is A/cm2
            je_z_scan     = je_z_scan*1E-4      # This is A/cm2
            je_r_scan     = je_r_scan*1E-4      # This is A/cm2
            je_2D_scan    = je_2D_scan*1E-4     # This is A/cm2
            je_scan       = je_scan*1E-4        # This is A/cm2
            ji_x_scan     = ji_x_scan*1E-4      # This is A/cm2
            ji_y_scan     = ji_y_scan*1E-4      # This is A/cm2
            ji_z_scan     = ji_z_scan*1E-4      # This is A/cm2
            ji_2D_scan    = ji_2D_scan*1E-4     # This is A/cm2
            ji_scan       = ji_scan*1E-4        # This is A/cm2
            j_r_scan      = j_r_scan*1E-4       # This is A/cm2
            j_t_scan      = j_t_scan*1E-4       # This is A/cm2
            j_z_scan      = j_z_scan*1E-4       # This is A/cm2
            j_2D_scan     = j_2D_scan*1E-4      # This is A/cm2
            j_scan        = j_scan*1E-4         # This is A/cm2
        
            
#        nu_e_tot_plot     = nu_e_tot_plot*1E-6
#        nu_e_tot_eff_plot = nu_e_tot_eff_plot*1E-6
#        nu_en_plot        = nu_en_plot*1E-6
#        nu_ei1_plot       = nu_ei1_plot*1E-6
#        nu_ei2_plot       = nu_ei2_plot*1E-6
#        nu_i01_plot       = nu_i01_plot*1E-6
#        nu_i02_plot       = nu_i02_plot*1E-6
#        nu_i12_plot       = nu_i12_plot*1E-6
        lambdaD_plot = lambdaD_plot*1E3
        

        
        
        
        # Comment the following lines if we want units in axes
        if interp_MFAM_picM_plot == 1:
            zs_mp = zs_mp/L_c
            rs_mp = rs_mp/H_c
        if plot_Bline_prof == 1:
            s_Bline = s_Bline/H_c
            z_Bline = z_Bline/L_c
            r_Bline = r_Bline/H_c
        zs = zs/L_c
        rs = rs/H_c
        z_prof = z_prof/L_c
        r_prof = r_prof/H_c
        z_prof_mp = z_prof_mp/L_c
        r_prof_mp = r_prof_mp/H_c
        points[:,0] = points[:,0]/L_c
        points[:,1] = points[:,1]/H_c
        z_cath = z_cath/L_c
        r_cath = r_cath/H_c
        zscells = zscells/L_c
        rscells = rscells/H_c
        if plot_B_scan == 1 or plot_fields_scan == 1 or plot_dens_scan == 1 or plot_temp_scan  == 1 or plot_curr_scan == 1 or plot_freq_scan == 1:
            z_scan = z_scan/L_c
            r_scan = r_scan/H_c
        
        print("###### Values for IEPC22 ######")
        if interp_zprof == 0:
            if interp_MFAM_picM_plot == 1:
                print("TeP (eV)            = %15.8e" %Te_mp[rind_mp,-1])
                print("phiP (V)            = %15.8e" %phi_mp[rind_mp,-1])
                print("jzeP (A/cm2)        = %15.8e" %(je_z_mp[rind_mp,-1]))
                print("jziP (A/cm2)        = %15.8e" %(ji_z_plot[rind,-1]))
                print("TeP_axis (eV)       = %15.8e" %Te_mp[0,-1])
                print("phiP_axis (V)       = %15.8e" %phi_mp[0,-1])
                print("jzeP_axis (A/cm2)   = %15.8e" %(je_z_mp[0,-1]))
                print("jziP_axis (A/cm2)   = %15.8e" %(ji_z_plot[0,-1]))
                if zs_mp[rind_mp,-1] > zcat_pos:
                    pos = np.where(zs_mp[rind_mp,:]>=zcat_pos)[0][0]
                else:
                    pos = -1
                print("pos_Vcoupling       = %15.8e" %pos)
                print("z_Vcoupling/L_c     = %15.8e" %zs_mp[rind_mp,pos])
                print("Vcoupling (V)       = %15.8e" %phi_mp[rind_mp,pos])
                print("Vcoupling2 (V)      = %15.8e" %(np.mean(phi_mp[rind_mp,pos::])))
                print("Vcoupling_axis (V)  = %15.8e" %(np.nanmean(phi_mp[0,np.where(nodes_flag_mp[0,:] == -1)])))
                print("Vcoupling_axis2 (V) = %15.8e" %(np.nanmean(phi_mp[0,pos::])))
                print("Vcoupling_interp (V)= %15.8e" %Vcoupling_interp)
                print("Vcoupling_mean (V)  = %15.8e" %(np.mean(phi_mp[rind_mp,pos-1:pos+2])))
                
            else:
                print("TeP (eV)            = %15.8e" %Te_plot[rind,-1])
                print("phiP (V)            = %15.8e" %phi_plot[rind,-1])
                print("jzeP (A/cm2)        = %15.8e" %(je_z_plot[rind,-1]))
                print("jziP (A/cm2)        = %15.8e" %(ji_z_plot[rind,-1]))
                print("TeP_axis (eV)       = %15.8e" %Te_plot[0,-1])
                print("phiP_axis (V)       = %15.8e" %phi_plot[0,-1])
                print("jzeP_axis (A/cm2)   = %15.8e" %(je_z_plot[0,-1]))
                print("jziP_axis (A/cm2)   = %15.8e" %(ji_z_plot[0,-1]))
                if zs[rind,-1] > zcat_pos:
                    pos = np.where(zs[rind,:]>=zcat_pos)[0][0]
                else:
                    pos = -1
                print("pos_Vcoupling       = %15.8e" %pos)
                print("z_Vcoupling/L_c     = %15.8e" %zs[rind,pos])
                print("Vcoupling (V)       = %15.8e" %phi_plot[rind,pos])
                print("Vcoupling2 (V)      = %15.8e" %(np.mean(phi_plot[rind,pos::])))
                print("Vcoupling_axis (V)  = %15.8e" %(np.nanmean(phi_plot[0,np.where(nodes_flag[0,:] == -1)])))
                print("Vcoupling_axis2 (V) = %15.8e" %(np.nanmean(phi_plot[0,pos::])))
                print("Vcoupling_interp (V)= %15.8e" %Vcoupling_interp)
                print("Vcoupling_mean (V)  = %15.8e" %(np.mean(phi_plot[rind,pos-1:pos+2])))
        elif interp_zprof == 1:
            if interp_MFAM_picM_plot == 1:
                print("TeP (eV)            = %15.8e" %Te_prof_mp[-1])
                print("phiP (V)            = %15.8e" %phi_prof_mp[-1])
                print("jzeP (A/cm2)        = %15.8e" %(je_z_prof_mp[-1]))
                print("jziP (A/cm2)        = %15.8e" %(ji_z_prof[-1]))
                print("TeP_axis (eV)       = %15.8e" %Te_mp[0,-1])
                print("phiP_axis (V)       = %15.8e" %phi_mp[0,-1])
                print("jzeP_axis (A/cm2)   = %15.8e" %(je_z_mp[0,-1]))
                print("jziP_axis (A/cm2)   = %15.8e" %(ji_z_plot[0,-1]))
                if z_prof_mp[-1] > zcat_pos:
                    pos = np.where(z_prof_mp[:]>=zcat_pos)[0][0]
                else:
                    pos = -1
                print("pos_Vcoupling       = %15.8e" %pos)
                print("z_Vcoupling/L_c     = %15.8e" %z_prof_mp[pos])
                print("Vcoupling (V)       = %15.8e" %phi_prof_mp[pos])
                print("Vcoupling2 (V)      = %15.8e" %(np.mean(phi_prof_mp[pos::])))
                print("Vcoupling_axis (V)  = %15.8e" %(np.nanmean(phi_mp[0,np.where(nodes_flag_mp[0,:] == -1)])))
                print("Vcoupling_axis2 (V) = %15.8e" %(np.nanmean(phi_mp[0,pos::])))
                print("Vcoupling_interp (V)= %15.8e" %Vcoupling_interp)
                print("Vcoupling_mean (V)  = %15.8e" %(np.mean(phi_prof_mp[pos-1:pos+2])))
            else:
                print("TeP (eV)            = %15.8e" %Te_prof[-1])
                print("phiP (V)            = %15.8e" %phi_prof[-1])
                print("jzeP (A/cm2)        = %15.8e" %(je_z_prof[-1]))
                print("jziP (A/cm2)        = %15.8e" %(ji_z_prof[-1]))
                print("TeP_axis (eV)       = %15.8e" %Te_plot[0,-1])
                print("phiP_axis (V)       = %15.8e" %phi_plot[0,-1])
                print("jzeP_axis (A/cm2)   = %15.8e" %(je_z_plot[0,-1]))
                print("jziP_axis (A/cm2)   = %15.8e" %(ji_z_plot[0,-1]))
                if z_prof[-1] > zcat_pos:
                    pos = np.where(z_prof[:]>=zcat_pos)[0][0]
                else:
                    pos = -1
                print("pos_Vcoupling       = %15.8e" %pos)
                print("z_Vcoupling/L_c     = %15.8e" %z_prof[pos])
                print("Vcoupling (V)       = %15.8e" %phi_prof[pos])
                print("Vcoupling2 (V)      = %15.8e" %(np.mean(phi_prof[pos::])))
                print("Vcoupling_axis (V)  = %15.8e" %(np.nanmean(phi_plot[0,np.where(nodes_flag[0,:] == -1)])))
                print("Vcoupling_axis2 (V) = %15.8e" %(np.nanmean(phi_plot[0,pos::])))
                print("Vcoupling_interp (V)= %15.8e" %Vcoupling_interp)
                print("Vcoupling_mean (V)  = %15.8e" %(np.mean(phi_prof[pos-1:pos+2])))
                
        
        print("hall_effect_mean in plume         = %15.8e" %hall_effect_mean)
        print("hall_eff_mean in plume            = %15.8e" %hall_eff_mean)
        print("hall_mean in plume                = %15.8e" %hall_mean)
        # print("z_null_j2D_point in plume (z/Lc)  = %15.8e" %(z_null_j2D_point*1E2/L_c))
        # print("r_null_j2D_point in plume (r/Hc)  = %15.8e" %(r_null_j2D_point*1E2/H_c))
        # print("j2D_null_point in plume   (A/cm2) = %15.8e" %(j2D_null_point*1E-4))
        print("pn_mean in plume (mbar)           = %15.8e" %pn_mean)
        print("phi_mean in plume (V)             = %15.8e" %phi_mean_vol)
        print("Te_mean in plume (eV)             = %15.8e" %Te_mean_vol)
        print("ne_mean in plume (1/m3)           = %15.8e" %ne_mean_vol)
        
        
        if plot_B_prof == 1:
            plt.figure(r'B prof')
            if interp_zprof == 0:
                if interp_MFAM_picM_plot == 1:
                    plt.plot(zs_mp[rind_mp,:],Bfield_mp[rind_mp,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                else:
                    plt.plot(zs[rind,:],Bfield_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            elif interp_zprof == 1:
                if interp_MFAM_picM_plot == 1:
                    plt.plot(z_prof_mp,B_prof_mp, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                else:
                    plt.plot(z_prof,B_prof, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])        
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(Bfield_plot[rind,:]),np.nanmax(Bfield_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

#            plt.figure('Br prof')
#            if interp_MFAM_picM_plot == 1:
#                plt.plot(zs_mp[rind_mp,:],Br_mp[rind_mp,:], linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
#            else:
#                plt.plot(zs[rind,:],Br_plot[rind,:], linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
#            if plot_zcath_012 == 1:            
#                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(Br_plot[rind,:]),np.nanmax(Br_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

#            plt.figure('Bz prof')
#            if interp_MFAM_picM_plot == 1:
#                plt.plot(zs_mp[rind_mp,:],Bz_mp[rind_mp,:], linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
#            else:
#                plt.plot(zs[rind,:],Bz_plot[rind,:], linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
#            if plot_zcath_012 == 1:            
#                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(Bz_plot[rind,:]),np.nanmax(Bz_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

            plt.figure(r'alpha prof')
            if interp_MFAM_picM_plot == 1:
                plt.plot(zs_mp[rind_mp,:],alpha_ano_mp[rind_mp,:]*100.0, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            else:
                plt.plot(zs[rind,:],alpha_ano[rind,:]*100.0, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(alpha_ano[rind,:]*100.0),np.nanmax(alpha_ano[rind,:]*100.0)]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

            
        if plot_fields_prof == 1:
            plt.figure(r'phi prof plume')
            if interp_zprof == 0:
                if interp_MFAM_picM_plot == 1:
                    plt.plot(zs_mp[rind_mp,:],phi_mp[rind_mp,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                else:
                    plt.plot(zs[rind,:],phi_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            elif interp_zprof == 1:
                if interp_MFAM_picM_plot == 1:
                    plt.plot(z_prof_mp,phi_prof_mp, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                else:
                    plt.plot(z_prof,phi_prof, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(phi_plot[rind,:]),np.nanmax(phi_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

            plt.figure(r'phi prof')
            if interp_zprof == 0:
                if interp_MFAM_picM_plot == 1:
                    plt.plot(zs_mp[rind_mp,:],phi_mp[rind_mp,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                else:
        #            plt.plot(zs[rind,:],phi_plot[rind,:], linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                    plt.plot(zs[rind,:],phi_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            elif interp_zprof == 1:
                if interp_MFAM_picM_plot == 1:
                    plt.plot(z_prof_mp,phi_prof_mp, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                else:
        #            plt.plot(zs[rind,:],phi_plot[rind,:], linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                    plt.plot(z_prof,phi_prof, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(phi_plot[rind,:]),np.nanmax(phi_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

            plt.figure(r'E prof')
            plt.plot(zs[rind,:],Efield_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:              
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(Efield_plot[rind,:]),np.nanmax(Efield_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

#            plt.figure('Er prof')
#            plt.plot(zs[rind,:],Er_plot[rind,:], linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
#            if plot_zcath_012 == 1:       
#                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(Er_plot[rind,:]),np.nanmax(Er_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

            plt.figure('Ez prof plume')
            plt.plot(zs[rind,:],Ez_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:             
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(Ez_plot[rind,:]),np.nanmax(Ez_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

            plt.figure('Ez prof')
            plt.plot(zs[rind,:],Ez_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:             
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(Ez_plot[rind,:]),np.nanmax(Ez_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

        if plot_dens_prof == 1:
            plt.figure('n prof plume')
            if interp_zprof == 0:
                plt.semilogy(zs[rind,:],ne_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            elif interp_zprof == 1:
                plt.semilogy(z_prof,ne_prof, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:             
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(ne_plot[rind,:]),np.nanmax(ne_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

            plt.figure('n prof')
            if interp_zprof == 0:
    #            plt.semilogy(zs[rind,:],ne_plot[rind,:], linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                plt.semilogy(zs[rind,:],ne_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            elif interp_zprof == 1:
    #            plt.semilogy(z_prof,ne_prof, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                plt.semilogy(z_prof,ne_prof, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:             
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(ne_plot[rind,:]),np.nanmax(ne_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

            plt.figure('ni1 prof')
            plt.semilogy(zs[rind,:],ni1_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:             
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(ni1_plot[rind,:]),np.nanmax(ni1_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

            plt.figure('ni2 prof')
            plt.semilogy(zs[rind,:],ni2_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:             
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(ni2_plot[rind,:]),np.nanmax(ni2_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

            plt.figure('ratio_ni1_ni2 prof')
            plt.semilogy(zs[rind,:],ratio_ni1_ni2_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:             
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(ratio_ni1_ni2_plot[rind,:]),np.nanmax(ratio_ni1_ni2_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")
            
            plt.figure('ratio_ni1_ni3 prof')
            plt.semilogy(zs[rind,:],ratio_ni1_ni3_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:             
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(ratio_ni1_ni3_plot[rind,:]),np.nanmax(ratio_ni1_ni3_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")
    
            plt.figure('ratio_ni1_ni4 prof')
            plt.semilogy(zs[rind,:],ratio_ni1_ni4_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:             
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(ratio_ni1_ni4_plot[rind,:]),np.nanmax(ratio_ni1_ni4_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

            plt.figure('ratio_ne_neCEX prof')
            plt.semilogy(zs[rind,:],ratio_ne_neCEX_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:             
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(ratio_ne_neCEX_plot[rind,:]),np.nanmax(ratio_ne_neCEX_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")
    
            plt.figure('nn prof')
            if interp_zprof == 0:
                plt.semilogy(zs[rind,:],nn_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            elif interp_zprof == 1:
                plt.semilogy(z_prof,nn_prof, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:             
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(nn_plot[rind,:]),np.nanmax(nn_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")
            
            plt.figure('ratio_nn1_nn2 prof')
            plt.semilogy(zs[rind,:],ratio_nn1_nn2_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:             
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(ratio_nn1_nn2_plot[rind,:]),np.nanmax(ratio_nn1_nn2_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")
            
            plt.figure('ratio_nn1_nn3 prof')
            plt.semilogy(zs[rind,:],ratio_nn1_nn3_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:             
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(ratio_nn1_nn3_plot[rind,:]),np.nanmax(ratio_nn1_nn3_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")
            
            plt.figure('ratio_nn1_nnCEX prof')
            plt.semilogy(zs[rind,:],ratio_nn1_nnCEX_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:             
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(ratio_nn1_nnCEX_plot[rind,:]),np.nanmax(ratio_nn1_nnCEX_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

            plt.figure('ratio_nn_nnCEX prof')
            plt.semilogy(zs[rind,:],ratio_nn_nnCEX_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:             
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(ratio_nn_nnCEX_plot[rind,:]),np.nanmax(ratio_nn_nnCEX_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")
        
        
            plt.figure('all nis prof')
            if k == 0:
                plt.semilogy(zs[rind,:],ni1_plot[rind,:], linestyle=linestyles[ind], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color='k', markeredgecolor = 'k', label=labels[k]+" i1")
                plt.semilogy(zs[rind,:],ni2_plot[rind,:], linestyle=linestyles[ind], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color='r', markeredgecolor = 'k', label=labels[k]+" i2")
                if np.any(ni3_plot[rind,:] != 0):
                    plt.semilogy(zs[rind,:],ni3_plot[rind,:], linestyle=linestyles[ind], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color='b', markeredgecolor = 'k', label=labels[k]+" i1 CEX")
                    plt.semilogy(zs[rind,:],ni4_plot[rind,:], linestyle=linestyles[ind], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color='m', markeredgecolor = 'k', label=labels[k]+" i2 CEX")
            else:
                plt.semilogy(zs[rind,:],ni1_plot[rind,:], linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color='k', markeredgecolor = 'k', label=labels[k]+" i1")
                plt.semilogy(zs[rind,:],ni2_plot[rind,:], linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color='r', markeredgecolor = 'k', label=labels[k]+" i2")
                plt.semilogy(zs[rind,:],ni3_plot[rind,:], linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color='b', markeredgecolor = 'k', label=labels[k]+" i1 CEX")
                plt.semilogy(zs[rind,:],ni4_plot[rind,:], linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color='m', markeredgecolor = 'k', label=labels[k]+" i2 CEX")
               
            if plot_zcath_012 == 1:             
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(ni1_plot[rind,:]),np.nanmax(ni1_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

            
        if plot_temp_prof == 1:
            plt.figure('Te prof plume')
            if interp_zprof == 0:
                if interp_MFAM_picM_plot == 1:
                    plt.plot(zs_mp[rind_mp,:],Te_mp[rind_mp,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                else:
                    plt.plot(zs[rind,:],Te_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            elif interp_zprof == 1:
                if interp_MFAM_picM_plot == 1:
                    plt.plot(z_prof_mp,Te_prof_mp, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                else:
                    plt.plot(z_prof,Te_prof, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:             
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(Te_plot[rind,:]),np.nanmax(Te_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")
            
            plt.figure('Te prof')
            if interp_zprof == 0:
                if interp_MFAM_picM_plot == 1:
                    plt.plot(zs_mp[rind_mp,:],Te_mp[rind_mp,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                else:
        #            plt.plot(zs[rind,:],Te_plot[rind,:], linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                    plt.plot(zs[rind,:],Te_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            elif interp_zprof == 1:
                if interp_MFAM_picM_plot == 1:
                    plt.plot(z_prof_mp,Te_prof_mp, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                else:
        #            plt.plot(z_prof,Te_prof, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                    plt.plot(z_prof,Te_prof, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:             
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(Te_plot[rind,:]),np.nanmax(Te_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

            plt.figure('Ti1 prof')
            plt.plot(zs[rind,:],Ti1_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(Ti1_plot[rind,:]),np.nanmax(Ti1_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

            plt.figure('Ti2 prof')
            plt.plot(zs[rind,:],Ti2_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(Ti2_plot[rind,:]),np.nanmax(Ti2_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

            plt.figure('Tn prof')
            plt.plot(zs[rind,:],Tn1_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(Tn1_plot[rind,:]),np.nanmax(Tn1_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")
            
            plt.figure('ratio_Ekin_Te prof')
            if interp_MFAM_picM_plot == 1:
                plt.semilogy(zs_mp[rind_mp,:],ratio_Ekin_Te_mp[rind_mp,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            else:
                plt.semilogy(zs[rind,:],ratio_Ekin_Te_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(ratio_Ekin_Te_plot[rind,:]),np.nanmax(ratio_Ekin_Te_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

            plt.figure('ratio_Ekin_Ti1 prof')
            plt.plot(zs[rind,:],ratio_Ekin_Ti1_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(ratio_Ekin_Ti1_plot[rind,:]),np.nanmax(ratio_Ekin_Ti1_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")
            
            plt.figure('ratio_Ekin_Ti2 prof')
            plt.plot(zs[rind,:],ratio_Ekin_Ti2_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(ratio_Ekin_Ti2_plot[rind,:]),np.nanmax(ratio_Ekin_Ti2_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")
                
            plt.figure('pn prof')
            plt.semilogy(zs[rind,:],pn_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:             
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(pn_plot[rind,:]),np.nanmax(pn_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")
        
        if plot_vel_prof == 1:
            plt.figure('Mi1 prof')
            plt.plot(zs[rind,:],Mi1_plot[rind,:], linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(Mi1_plot[rind,:]),np.nanmax(Mi1_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

            plt.figure('Mi2 prof')
            plt.plot(zs[rind,:],Mi2_plot[rind,:], linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(Mi2_plot[rind,:]),np.nanmax(Mi2_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

            plt.figure('Mi prof')
            plt.plot(zs[rind,:],Mi_plot[rind,:], linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(Mi_plot[rind,:]),np.nanmax(Mi_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

            plt.figure('Mzi1 prof')
            plt.plot(zs[rind,:],Mi1_z_plot[rind,:], linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(Mi1_z_plot[rind,:]),np.nanmax(Mi1_z_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

            plt.figure('Mzi2 prof')
            plt.plot(zs[rind,:],Mi2_z_plot[rind,:], linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(Mi2_z_plot[rind,:]),np.nanmax(Mi2_z_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

            plt.figure('Mzi prof')
            plt.plot(zs[rind,:],Mi_z_plot[rind,:], linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(Mi_z_plot[rind,:]),np.nanmax(Mi_z_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

            plt.figure('ui_r prof')
            plt.plot(zs[rind,:],ui_x_plot[rind,:], linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(ui_x_plot[rind,:]),np.nanmax(ui_x_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

            plt.figure('ui_t prof')
            plt.plot(zs[rind,:],ui_y_plot[rind,:], linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(ui_y_plot[rind,:]),np.nanmax(ui_y_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

            plt.figure('ui_z prof')
            plt.plot(zs[rind,:],ui_z_plot[rind,:], linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(ui_z_plot[rind,:]),np.nanmax(ui_z_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

            plt.figure('ue_r prof')
            plt.plot(zs[rind,:],ue_r_plot[rind,:], linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(ue_r_plot[rind,:]),np.nanmax(ue_r_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

            plt.figure('ue_t prof')
            plt.plot(zs[rind,:],ue_t_plot[rind,:], linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.plot(zs[rind,:],uthetaExB_plot[rind,:], linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label="")            
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(ue_t_plot[rind,:]),np.nanmax(ue_t_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

            plt.figure('ue_z prof')
            plt.plot(zs[rind,:],ue_z_plot[rind,:], linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(ue_z_plot[rind,:]),np.nanmax(ue_z_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

            plt.figure('ue_perp prof')
            plt.plot(zs[rind,:],ue_perp_plot[rind,:], linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(ue_perp_plot[rind,:]),np.nanmax(ue_perp_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

            plt.figure('ue_para prof')
            plt.plot(zs[rind,:],ue_para_plot[rind,:], linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(ue_para_plot[rind,:]),np.nanmax(ue_para_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

            plt.figure('ratio ue_t_perp prof')
            plt.plot(zs[rind,:],ratio_ue_t_perp_plot[rind,:], linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(ratio_ue_t_perp_plot[rind,:]),np.nanmax(ratio_ue_t_perp_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

            plt.figure('ratio ue_t_para prof')
            plt.plot(zs[rind,:],ratio_ue_t_para_plot[rind,:], linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(ratio_ue_t_para_plot[rind,:]),np.nanmax(ratio_ue_t_para_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

            plt.figure('ratio ue_perp_para prof')
            plt.plot(zs[rind,:],ratio_ue_perp_para_plot[rind,:], linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(ratio_ue_perp_para_plot[rind,:]),np.nanmax(ratio_ue_perp_para_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

        if plot_curr_prof == 1:
            plt.figure('je_r prof')
            if interp_zprof == 0:
                if interp_MFAM_picM_plot == 1:
                    plt.plot(zs_mp[rind_mp,:],-je_r_mp[rind_mp,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                else:
                    plt.plot(zs[rind,:],-je_r_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            elif interp_zprof == 1:
                if interp_MFAM_picM_plot == 1:
                    plt.plot(z_prof_mp,-je_r_prof_mp, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                else:
                    plt.plot(z_prof,-je_r_prof, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(je_r_plot[rind,:]),np.nanmax(je_r_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

            plt.figure('je_t prof')
            if interp_zprof == 0:
                if interp_MFAM_picM_plot == 1:
                    plt.plot(zs_mp[rind_mp,:],je_theta_mp[rind_mp,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])            
                else:
        #            plt.plot(zs[rind,:],abs(-je_t_plot[rind,:]), linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
        #            plt.plot(zs[rind,:],-je_t_plot[rind,:], linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                    plt.plot(zs[rind,:],je_t_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])            
            elif interp_zprof == 1:
                if interp_MFAM_picM_plot == 1:
                    plt.plot(z_prof_mp,je_theta_prof_mp, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])            
                else:
        #            plt.plot(z_prof,abs(-je_theta_prof), linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
        #            plt.plot(z_prof,-je_theta_prof, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind2], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                    plt.plot(z_prof,je_theta_prof, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])            
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(je_t_plot[rind,:]),np.nanmax(je_t_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")
            
            plt.figure('je_z prof')
            if interp_zprof == 0:
                if interp_MFAM_picM_plot == 1:
                    plt.plot(zs_mp[rind_mp,:],-je_z_mp[rind_mp,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                else:
                    plt.plot(zs[rind,:],-je_z_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            elif interp_zprof == 1:
                if interp_MFAM_picM_plot == 1:
                    plt.plot(z_prof_mp,-je_z_prof_mp, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                else:
                    plt.plot(z_prof,-je_z_prof, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])    
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(je_z_plot[rind,:]),np.nanmax(je_z_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

            plt.figure('je_z prof chamber')
            if interp_zprof == 0:
                if interp_MFAM_picM_plot == 1:
                    plt.plot(zs_mp[rind_mp,:],-je_z_mp[rind_mp,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                else:
                    plt.plot(zs[rind,:],-je_z_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            elif interp_zprof == 1:
                if interp_MFAM_picM_plot == 1:
                    plt.plot(z_prof_mp,-je_z_prof_mp, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                else:
                    plt.plot(z_prof,-je_z_prof, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])    
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(je_z_plot[rind,:]),np.nanmax(je_z_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")


            plt.figure('je_perp prof')
            if interp_zprof == 0:
                if interp_MFAM_picM_plot == 1:
                    plt.plot(zs_mp[rind_mp,:],-je_perp_mp[rind_mp,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                else:
                    plt.plot(zs[rind,:],-je_perp_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            elif interp_zprof == 1:
                if interp_MFAM_picM_plot == 1:
                    plt.plot(z_prof_mp,-je_perp_prof_mp, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                else:
                    plt.plot(z_prof,-je_perp_prof, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(je_perp_plot[rind,:]),np.nanmax(je_perp_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")
            
            plt.figure('je_para prof')
            if interp_zprof == 0:
                if interp_MFAM_picM_plot == 1:
                    plt.plot(zs_mp[rind_mp,:],-je_para_mp[rind_mp,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                else:
                    plt.plot(zs[rind,:],-je_para_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            elif interp_zprof == 1:
                if interp_MFAM_picM_plot == 1:
                    plt.plot(z_prof_mp,-je_para_prof_mp, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                else:
                    plt.plot(z_prof,-je_para_prof, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])  
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(je_para_plot[rind,:]),np.nanmax(je_para_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

            plt.figure('ratio je_t_perp prof')
            if interp_zprof == 0:
                if interp_MFAM_picM_plot == 1:
                    plt.plot(zs_mp[rind_mp,:],ratio_je_t_perp_mp[rind_mp,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                else:
                    plt.plot(zs[rind,:],ratio_je_t_perp_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            elif interp_zprof == 1:
                if interp_MFAM_picM_plot == 1:
                    plt.plot(z_prof_mp,je_theta_prof_mp/je_perp_prof_mp, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                else:
                    plt.plot(z_prof,je_theta_prof/je_perp_prof, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])  
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(ratio_je_t_perp_plot[rind,:]),np.nanmax(ratio_je_t_perp_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

            plt.figure('Hall_je_perp prof')
            plt.plot(zs[rind,:],Hall_par_plot[rind,:]*je_perp_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(Hall_par_plot[rind,:]*je_perp_plot[rind,:]),np.nanmax(Hall_par_plot[rind,:]*je_perp_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

            plt.figure('Ftheta prof')
            plt.plot(zs[rind,:],F_theta_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(F_theta_plot[rind,:]),np.nanmax(F_theta_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

            plt.figure('je prof')
            if interp_zprof == 0:
                if interp_MFAM_picM_plot == 1:
                    plt.semilogy(zs_mp[rind_mp,:],je_mp[rind_mp,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                else:
                    plt.semilogy(zs[rind,:],je_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            elif interp_zprof == 1:
                if interp_MFAM_picM_plot == 1:
                    plt.semilogy(z_prof_mp,je_prof_mp, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                else:
                    plt.semilogy(z_prof,je_prof, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(je_plot[rind,:]),np.nanmax(je_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

            plt.figure('ji prof')
            if interp_zprof == 0:
                plt.semilogy(zs[rind,:],ji_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            elif interp_zprof == 1:
                plt.semilogy(z_prof,ji_prof, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(ji_plot[rind,:]),np.nanmax(ji_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

            plt.figure('ji1/ji prof')
            plt.plot(zs[rind,:],ji1_plot[rind,:]/(ji1_plot[rind,:]+ji2_plot[rind,:]), linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
#            plt.plot(zs[rind,:],ji1_plot[rind,:]/ji_plot[rind,:], linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(ji1_plot[rind,:]),np.nanmax(ji1_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

            plt.figure('ji2/ji prof')
            plt.plot(zs[rind,:],ji2_plot[rind,:]/(ji1_plot[rind,:]+ji2_plot[rind,:]), linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
#            plt.plot(zs[rind,:],ji2_plot[rind,:]/ji_plot[rind,:], linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(ji2_plot[rind,:]),np.nanmax(ji2_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")
    
            plt.figure('ji1_ji2_ji prof')
            plt.plot(zs[rind,:],ji_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k]+" ion")
            plt.plot(zs[rind,:],ji1_plot[rind,:], linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k]+" i1")
            plt.plot(zs[rind,:],ji2_plot[rind,:], linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k]+" i2")
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(ji2_plot[rind,:]),np.nanmax(ji_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

            plt.figure('j prof')
            if interp_zprof == 0:
                if interp_MFAM_picM_plot == 1:
                    plt.semilogy(zs_mp[rind_mp,:],j_mp[rind_mp,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                else:
                    plt.semilogy(zs[rind,:],j_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            elif interp_zprof == 1:
                if interp_MFAM_picM_plot == 1:
                    plt.semilogy(z_prof_mp,j_prof_mp, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                else:
                    plt.semilogy(z_prof,j_prof, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(j_plot[rind,:]),np.nanmax(j_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")
            
            plt.figure('ji_r prof')            
            if interp_zprof == 0:
                plt.plot(zs[rind,:],ji_x_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            elif interp_zprof == 1:
                plt.plot(z_prof,ji_x_prof, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(ji_x_plot[rind,:]),np.nanmax(ji_x_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")
            
            plt.figure('ji_z prof')
            if interp_zprof == 0:
                plt.plot(zs[rind,:],ji_z_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            elif interp_zprof == 1:
                plt.plot(z_prof,ji_z_prof, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(ji_z_plot[rind,:]),np.nanmax(ji_z_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")
           
            plt.figure('je zr prof')
            if interp_zprof == 0:
                if interp_MFAM_picM_plot == 1:
                    plt.semilogy(zs_mp[rind_mp,:],je_2D_mp[rind_mp,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                else:
                    plt.semilogy(zs[rind,:],je2D_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            elif interp_zprof == 1:
                if interp_MFAM_picM_plot == 1:
                    plt.semilogy(z_prof_mp,je_2D_prof_mp, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                else:
                    plt.semilogy(z_prof,je_2D_prof, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(je2D_plot[rind,:]),np.nanmax(je2D_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")
           
            plt.figure('ji zr prof')
            if interp_zprof == 0:
                plt.semilogy(zs[rind,:],ji2D_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            elif interp_zprof == 1:
                plt.semilogy(z_prof,ji_2D_prof, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(ji2D_plot[rind,:]),np.nanmax(ji2D_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")
    
            plt.figure('j zr prof') 
            if interp_zprof == 0:
                if interp_MFAM_picM_plot == 1:
                    plt.semilogy(zs_mp[rind_mp,:],j_2D_mp[rind_mp,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                else:
                    plt.semilogy(zs[rind,:],j2D_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            elif interp_zprof == 1:
                if interp_MFAM_picM_plot == 1:
                    plt.semilogy(z_prof_mp,j_2D_prof_mp, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                else:
                    plt.semilogy(z_prof,j_2D_prof, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(j2D_plot[rind,:]),np.nanmax(j2D_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")
           
        if plot_nmp_prof == 1:
            plt.figure('Nmpi1 prof')
            plt.plot(zscells[rind-1,:],n_mp_i1_plot[rind-1,0:-1:1], linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(n_mp_i1_plot[rind-1,:]),np.nanmax(n_mp_i1_plot[rind-1,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

            plt.figure('Nmpi2 prof')
            plt.plot(zscells[rind-1,:],n_mp_i2_plot[rind-1,0:-1:1], linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(n_mp_i2_plot[rind-1,:]),np.nanmax(n_mp_i2_plot[rind-1,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

            plt.figure('Nmpn1 prof')
            plt.plot(zscells[rind-1,:],n_mp_n1_plot[rind-1,0:-1:1], linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(n_mp_n1_plot[rind-1,:]),np.nanmax(n_mp_n1_plot[rind-1,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

        if plot_freq_prof == 1:
            plt.figure('Hall_par prof')
            if interp_zprof == 0:
                plt.semilogy(zs[rind,:],Hall_par_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            elif interp_zprof == 1:
                plt.semilogy(z_prof,Hall_par_prof, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(Hall_par_plot[rind,:]),np.nanmax(Hall_par_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

            plt.figure('Hall_par_eff prof')
            if interp_zprof == 0:
                plt.plot(zs[rind,:],Hall_par_eff_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            elif interp_zprof == 1:
                plt.plot(z_prof,Hall_par_eff_prof, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(Hall_par_eff_plot[rind,:]),np.nanmax(Hall_par_eff_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

            plt.figure('Hall_par_effect prof')
            if interp_zprof == 0:
                plt.plot(zs[rind,:],Hall_par_effect_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            elif interp_zprof == 1:
                plt.plot(z_prof,Hall_par_effect_prof, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(Hall_par_effect_plot[rind,:]),np.nanmax(Hall_par_effect_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

            plt.figure('nu_e_tot prof')
            plt.semilogy(zs[rind,:],nu_e_tot_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(nu_e_tot_plot[rind,:]),np.nanmax(nu_e_tot_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

            plt.figure('nu_e_tot_eff prof')
            plt.semilogy(zs[rind,:],nu_e_tot_eff_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(nu_e_tot_eff_plot[rind,:]),np.nanmax(nu_e_tot_eff_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

            plt.figure('nu_t prof')
            plt.semilogy(zs[rind,:],nu_t_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(nu_t_plot[rind,:]),np.nanmax(nu_t_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

            plt.figure('nu_en prof')
            plt.semilogy(zs[rind,:],nu_en_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(nu_en_plot[rind,:]),np.nanmax(nu_en_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

            plt.figure('nu_ei1 prof')
            plt.semilogy(zs[rind,:],nu_ei1_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(nu_ei1_plot[rind,:]),np.nanmax(nu_ei1_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

            plt.figure('nu_ei2 prof')
            plt.semilogy(zs[rind,:],nu_ei2_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(nu_ei2_plot[rind,:]),np.nanmax(nu_ei2_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

            plt.figure('nu_i01 prof')
            plt.semilogy(zs[rind,:],nu_i01_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(nu_i01_plot[rind,:]),np.nanmax(nu_i01_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

            plt.figure('nu_i02 prof')
            plt.semilogy(zs[rind,:],nu_i02_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(nu_i02_plot[rind,:]),np.nanmax(nu_i02_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

            plt.figure('nu_i12 prof')
            plt.semilogy(zs[rind,:],nu_i12_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(nu_i12_plot[rind,:]),np.nanmax(nu_i12_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")
            
            plt.figure('nu_ex prof')
            plt.semilogy(zs[rind,:],nu_ex_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(nu_ex_plot[rind,:]),np.nanmax(nu_ex_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")
            
            plt.figure('nu_ei_el_tot prof')
            plt.semilogy(zs[rind,:],nu_ei_el_tot_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(nu_ei_el_tot_plot[rind,:]),np.nanmax(nu_ei_el_tot_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

            plt.figure('nu_ion_tot prof')
            plt.semilogy(zs[rind,:],nu_ion_tot_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(nu_ion_tot_plot[rind,:]),np.nanmax(nu_ion_tot_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

            plt.figure('ratio_nu_en_nu_e_tot_eff prof')
            plt.semilogy(zs[rind,:],ratio_nu_en_nu_e_tot_eff_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(ratio_nu_en_nu_e_tot_eff_plot[rind,:]),np.nanmax(ratio_nu_en_nu_e_tot_eff_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

            plt.figure('ratio_nu_ion_tot_nu_e_tot_eff prof')
            plt.semilogy(zs[rind,:],ratio_nu_ion_tot_nu_e_tot_eff_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(ratio_nu_en_nu_e_tot_eff_plot[rind,:]),np.nanmax(ratio_nu_en_nu_e_tot_eff_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

            plt.figure('ratio_nu_ei_el_tot_nu_e_tot_eff prof')
            plt.semilogy(zs[rind,:],ratio_nu_ei_nu_e_tot_eff_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(ratio_nu_en_nu_e_tot_eff_plot[rind,:]),np.nanmax(ratio_nu_en_nu_e_tot_eff_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

            plt.figure('ratio_nu_ex_nu_e_tot_eff prof')
            plt.semilogy(zs[rind,:],ratio_nu_ex_nu_e_tot_eff_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(ratio_nu_en_nu_e_tot_eff_plot[rind,:]),np.nanmax(ratio_nu_en_nu_e_tot_eff_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

            plt.figure('ratio_nu_e_tot_nu_e_tot_eff prof')
            plt.semilogy(zs[rind,:],ratio_nu_e_tot_nu_e_tot_eff_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(ratio_nu_en_nu_e_tot_eff_plot[rind,:]),np.nanmax(ratio_nu_en_nu_e_tot_eff_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

            plt.figure('ratio_nu_t_nu_e_tot_eff prof')
            plt.semilogy(zs[rind,:],ratio_nu_t_nu_e_tot_eff_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(ratio_nu_en_nu_e_tot_eff_plot[rind,:]),np.nanmax(ratio_nu_en_nu_e_tot_eff_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

            plt.figure('ratio_nu_e_tot_nu_t prof')
            plt.semilogy(zs[rind,:],ratio_nu_e_tot_nu_t_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(ratio_nu_e_tot_nu_t_plot[rind,:]),np.nanmax(ratio_nu_e_tot_nu_t_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")
        
            plt.figure('ratio_nu_ei_el_tot_nu_t prof')
            plt.semilogy(zs[rind,:],ratio_nu_ei_tot_nu_t_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(ratio_nu_ei_tot_nu_t_plot[rind,:]),np.nanmax(ratio_nu_ei_tot_nu_t_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")

            plt.figure('ndot_e prof')
            plt.semilogy(zscells[rind,:],ndot_e_plot[rind,:]/np.max(ndot_e_plot[rind,:]), linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(ndot_e_plot[rind,:]/np.max(ndot_e_plot[rind,:])),np.nanmax(ndot_e_plot[rind,:]/np.max(ndot_e_plot[rind,:]))]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")
            
            plt.figure('ndot_e prof chamber')
            plt.semilogy(zscells[rind,:],ndot_e_plot[rind,:]/np.max(ndot_e_plot[rind,:]), linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(ndot_e_plot[rind,:]/np.max(ndot_e_plot[rind,:])),np.nanmax(ndot_e_plot[rind,:]/np.max(ndot_e_plot[rind,:]))]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")
            

        if plot_cath_Bline_prof == 1:
            plt.figure('nodim Boltzmann cathBline prof')
            plt.plot(elem_geom[3,elems_cath_Bline],cath_Bline_nodim_Boltz, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
#            plt.plot(elem_geom[3,cath_elem],cath_nodim_Boltz, linestyle='', linewidth = line_width, markevery=marker_every, markersize=marker_size_cath, marker=cathode_marker, color=cathode_color, markeredgecolor = 'k', label="")
            if plot_Bline_cathBline == 1:  
                plt.plot(elem_geom[3,elems_Bline],Bline_nodim_Boltz, linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label="")
                plt.plot(elem_geom[3,ref_elem],ref_nodim_Boltz, linestyle='', linewidth = line_width, markevery=marker_every, markersize=marker_size_cath, marker=cathode_marker, color=ref_color, markeredgecolor = 'k', label="")
            
            plt.figure('dim Boltzmann cathBline prof')
            plt.plot(elem_geom[3,elems_cath_Bline],cath_Bline_dim_Boltz, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
#            plt.plot(elem_geom[3,cath_elem],cath_dim_Boltz, linestyle='', linewidth = line_width, markevery=marker_every, markersize=marker_size_cath, marker=cathode_marker, color=cathode_color, markeredgecolor = 'k', label="")
#            if plot_Bline_cathBline == 1:  
#                plt.plot(elem_geom[3,elems_Bline],Bline_dim_Boltz, linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label="")
#                plt.plot(elem_geom[3,ref_elem],ref_dim_Boltz, linestyle='', linewidth = line_width, markevery=marker_every, markersize=marker_size_cath, marker=cathode_marker, color=ref_color, markeredgecolor = 'k', label="")
            
            plt.figure('phi cathBline prof')
            plt.plot(elem_geom[3,elems_cath_Bline],cath_Bline_phi-cath_phi, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
#            plt.plot(elem_geom[3,cath_elem],cath_phi-cath_phi, linestyle='', linewidth = line_width, markevery=marker_every, markersize=marker_size_cath, marker=cathode_marker, color=cathode_color, markeredgecolor = 'k', label="")
            
            plt.figure('ne term cathBline prof')
            plt.plot(elem_geom[3,elems_cath_Bline],cath_Te*np.log(cath_Bline_ne/cath_ne), linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
#            plt.plot(elem_geom[3,cath_elem],cath_Te*np.log(cath_ne/cath_ne), linestyle='', linewidth = line_width, markevery=marker_every, markersize=marker_size_cath, marker=cathode_marker, color=cathode_color, markeredgecolor = 'k', label="")

            plt.figure('ne rel cathBline prof')
            plt.plot(elem_geom[3,elems_cath_Bline],cath_Bline_ne/cath_ne, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
#            plt.plot(elem_geom[3,cath_elem],cath_ne/cath_ne, linestyle='', linewidth = line_width, markevery=marker_every, markersize=marker_size_cath, marker=cathode_marker, color=cathode_color, markeredgecolor = 'k', label="")
#            if plot_Bline_cathBline == 1:
#                plt.plot(elem_geom[3,elems_Bline],Bline_ne/ref_ne, linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label="")
#                plt.plot(elem_geom[3,ref_elem],ref_ne/ref_ne, linestyle='', linewidth = line_width, markevery=marker_every, markersize=marker_size_cath, marker=cathode_marker, color=ref_color, markeredgecolor = 'k', label="")

            plt.figure('Te rel cathBline prof')
            if plot_Bline_cathBline == 1:   
                plt.plot(elem_geom[3,elems_Bline],Bline_Te/ref_Te, linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label="")
#                plt.plot(elem_geom[3,ref_elem],ref_Te/ref_Te, linestyle='', linewidth = line_width, markevery=marker_every, markersize=marker_size_cath, marker=cathode_marker, color=ref_color, markeredgecolor = 'k', label="")
            plt.plot(elem_geom[3,elems_cath_Bline],cath_Bline_Te/cath_Te, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
#            plt.plot(elem_geom[3,cath_elem],cath_Te/cath_Te, linestyle='', linewidth = line_width, markevery=marker_every, markersize=marker_size_cath, marker=cathode_marker, color=cathode_color, markeredgecolor = 'k', label="")
            
            plt.figure('ne cathBline prof')
            plt.semilogy(elem_geom[3,elems_cath_Bline],cath_Bline_ne, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
#            plt.plot(elem_geom[3,cath_elem],cath_ne, linestyle='', linewidth = line_width, markevery=marker_every, markersize=marker_size_cath, marker=cathode_marker, color=cathode_color, markeredgecolor = 'k', label="")

            plt.figure('Te cathBline prof')
            plt.plot(elem_geom[3,elems_cath_Bline],cath_Bline_Te, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
#            plt.plot(elem_geom[3,cath_elem],cath_Te, linestyle='', linewidth = line_width, markevery=marker_every, markersize=marker_size_cath, marker=cathode_marker, color=cathode_color, markeredgecolor = 'k', label="")
            
#            plt.plot(elem_geom[3,elems_Bline],Bline_Te, linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
#            plt.plot(elem_geom[3,ref_elem],ref_Te, linestyle='', linewidth = line_width, markevery=marker_every, markersize=marker_size_cath, marker=cathode_marker, color=cathode_color, markeredgecolor = 'k', label="")
            
            plt.figure('Te (z) cathBline prof')
            plt.plot(elem_geom[0,elems_cath_Bline],Te_elems_mean[elems_cath_Bline], linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
#            plt.plot(elem_geom[0,cath_elem],cath_Te, linestyle='', linewidth = line_width, markevery=marker_every, markersize=marker_size_cath, marker=cathode_marker, color=cathode_color, markeredgecolor = 'k', label="")
            
            plt.figure('phi (z) cathBline prof')
            plt.plot(elem_geom[0,elems_cath_Bline],phi_elems_mean[elems_cath_Bline], linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
#            plt.plot(elem_geom[0,cath_elem],cath_Te, linestyle='', linewidth = line_width, markevery=marker_every, markersize=marker_size_cath, marker=cathode_marker, color=cathode_color, markeredgecolor = 'k', label="")
            
            
#            plt.figure('nodim Boltzmann Bline prof')
#            plt.plot(elem_geom[3,elems_Bline],Bline_nodim_Boltz, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
#            plt.plot(elem_geom[3,ref_elem],ref_nodim_Boltz, linestyle='', linewidth = line_width, markevery=marker_every, markersize=marker_size_cath, marker=cathode_marker, color=cathode_color, markeredgecolor = 'k', label="")
#            
#            plt.figure('dim Boltzmann Bline prof')
#            plt.plot(elem_geom[3,elems_Bline],Bline_dim_Boltz, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
#            plt.plot(elem_geom[3,ref_elem],ref_dim_Boltz, linestyle='', linewidth = line_width, markevery=marker_every, markersize=marker_size_cath, marker=cathode_marker, color=cathode_color, markeredgecolor = 'k', label="")
#            
#            plt.figure('phi Bline prof')   
#            plt.plot(elem_geom[3,elems_Bline],Bline_phi-ref_phi, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
#            plt.plot(elem_geom[3,ref_elem],ref_phi-ref_phi, linestyle='', linewidth = line_width, markevery=marker_every, markersize=marker_size_cath, marker=cathode_marker, color=cathode_color, markeredgecolor = 'k', label="")
#            
#            plt.figure('ne term Bline prof')
#            plt.plot(elem_geom[3,elems_Bline],ref_Te*np.log(Bline_ne/ref_ne), linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
#            plt.plot(elem_geom[3,ref_elem],ref_Te*np.log(ref_ne/ref_ne), linestyle='', linewidth = line_width, markevery=marker_every, markersize=marker_size_cath, marker=cathode_marker, color=cathode_color, markeredgecolor = 'k', label="")
#
#            plt.figure('ne rel Bline prof')
#            plt.plot(elem_geom[3,elems_Bline],Bline_ne/ref_ne, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
#            plt.plot(elem_geom[3,ref_elem],ref_ne/ref_ne, linestyle='', linewidth = line_width, markevery=marker_every, markersize=marker_size_cath, marker=cathode_marker, color=cathode_color, markeredgecolor = 'k', label="")
#
#            plt.figure('Te rel Bline prof')
#            plt.plot(elem_geom[3,elems_Bline],Bline_Te/ref_Te, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
#            plt.plot(elem_geom[3,ref_elem],ref_Te/ref_Te, linestyle='', linewidth = line_width, markevery=marker_every, markersize=marker_size_cath, marker=cathode_marker, color=cathode_color, markeredgecolor = 'k', label="")
#           
#            plt.figure('ne Bline prof')
#            plt.semilogy(elem_geom[3,elems_Bline],Bline_ne, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
#            plt.plot(elem_geom[3,ref_elem],ref_ne, linestyle='', linewidth = line_width, markevery=marker_every, markersize=marker_size_cath, marker=cathode_marker, color=cathode_color, markeredgecolor = 'k', label="")
#            
#            plt.figure('Te Bline prof')
#            plt.plot(elem_geom[3,elems_Bline],Bline_Te, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
#            plt.plot(elem_geom[3,ref_elem],ref_Te, linestyle='', linewidth = line_width, markevery=marker_every, markersize=marker_size_cath, marker=cathode_marker, color=cathode_color, markeredgecolor = 'k', label="")
#            
        if plot_err_interp_prof == 1:
            plt.figure(r'err_interp_n prof')
            plt.semilogy(zs[rind,:],err_interp_n_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(err_interp_n_plot[rind,:]),np.nanmax(err_interp_n_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")
        
        if plot_lambdaD_prof == 1:
            plt.figure(r'lambdaD prof')
            plt.plot(zs[rind,:],lambdaD_plot[rind,:], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])  
            if plot_zcath_012 == 1:            
                plt.plot(z_cath*np.ones(2),np.array([np.nanmin(lambdaD_plot[rind,:]),np.nanmax(lambdaD_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")
        
        if plot_Bline_prof == 1:
            plt.figure(r'B Bline prof')
            plt.plot(s_Bline,B_Bline, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])  
            
            plt.figure(r'alphat Bline prof')
            plt.plot(s_Bline,alpha_ano_Bline, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])  

            plt.figure(r'phi Bline prof')
            plt.plot(s_Bline,phi_Bline_mean, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])  
            
            plt.figure(r'ne Bline prof')
            plt.semilogy(s_Bline,ne_Bline_mean, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])  
            plt.semilogy(s_Bline,ne_Bline_mfam_mean, linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])  

            plt.figure(r'nn Bline prof')
            plt.semilogy(s_Bline,nn_Bline_mean, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])  
            
            plt.figure(r'Te Bline prof')
            plt.plot(s_Bline,Te_Bline_mean, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])  
            
            plt.figure('ratio_Ekin_Te Bline prof')
            
            plt.figure('je_para Bline prof')
            plt.plot(s_Bline,-je_para_Bline_mean, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])  
            
            plt.figure('Hall_par Bline prof')
            plt.plot(s_Bline,Hall_par_Bline_mean, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])  
            
            plt.figure('Hall_par_eff Bline prof')
            plt.plot(s_Bline,Hall_par_eff_Bline_mean, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])  
            
            plt.figure('Hall_par_effect Bline prof')
            plt.plot(s_Bline,Hall_par_effect_Bline_mean, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])  

            plt.figure('felec_para Bline prof')
            plt.plot(s_Bline,felec_para_Bline_mean, linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])  


        if plot_fields_rprof == 1:
            plt.figure(r'phi rprof')
            if interp_MFAM_picM_plot == 1:
                plt.plot(rs_mp[:,zind_mp],phi_mp[:,zind_mp], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            else:
                plt.plot(rs[:,zind],phi_plot[:,zind], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure(r'E rprof')
            plt.plot(rs[:,zind],Efield_plot[:,zind], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('Er rprof')
            plt.plot(rs[:,zind],Er_plot[:,zind], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('Ez rprof')
            plt.plot(rs[:,zind],Ez_plot[:,zind], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])

        if plot_dens_rprof == 1:
            plt.figure('n rprof')
            plt.semilogy(rs[:,zind],ne_plot[:,zind], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('ni1 rprof')
            plt.semilogy(rs[:,zind],ni1_plot[:,zind], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('ni2 rprof')
            plt.semilogy(rs[:,zind],ni2_plot[:,zind], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])        
            plt.figure('ratio_ni1_ni2 rprof')
            plt.semilogy(rs[:,zind],ratio_ni1_ni2_plot[:,zind], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('ratio_ni1_ni3 rprof')
            plt.semilogy(rs[:,zind],ratio_ni1_ni3_plot[:,zind], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('ratio_ni1_ni4 rprof')
            plt.semilogy(rs[:,zind],ratio_ni1_ni4_plot[:,zind], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('ratio_ne_neCEX rprof')
            plt.semilogy(rs[:,zind],ratio_ne_neCEX_plot[:,zind], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('nn rprof')
            plt.semilogy(rs[:,zind],nn_plot[:,zind], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('ratio_nn1_nn2 rprof')
            plt.semilogy(rs[:,zind],ratio_nn1_nn2_plot[:,zind], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('ratio_nn1_nn3 rprof')
            plt.semilogy(rs[:,zind],ratio_nn1_nn3_plot[:,zind], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('ratio_nn1_nnCEX rprof')
            plt.semilogy(rs[:,zind],ratio_nn1_nnCEX_plot[:,zind], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('ratio_nn_nnCEX rprof')
            plt.semilogy(rs[:,zind],ratio_nn_nnCEX_plot[:,zind], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('all nis rprof')
            if k == 0:
                plt.semilogy(rs[:,zind],ni1_plot[:,zind], linestyle=linestyles[ind], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color='k', markeredgecolor = 'k', label=labels[k]+" i1")
                plt.semilogy(rs[:,zind],ni2_plot[:,zind], linestyle=linestyles[ind], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color='r', markeredgecolor = 'k', label=labels[k]+" i2")
                if np.any(ni3_plot[:,zind] != 0):
                    plt.semilogy(rs[:,zind],ni3_plot[:,zind], linestyle=linestyles[ind], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color='b', markeredgecolor = 'k', label=labels[k]+" i1 CEX")
                    plt.semilogy(rs[:,zind],ni4_plot[:,zind], linestyle=linestyles[ind], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color='m', markeredgecolor = 'k', label=labels[k]+" i2 CEX")
            else:
                plt.semilogy(rs[:,zind],ni1_plot[:,zind], linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color='k', markeredgecolor = 'k', label=labels[k]+" i1")
                plt.semilogy(rs[:,zind],ni2_plot[:,zind], linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color='r', markeredgecolor = 'k', label=labels[k]+" i2")
                plt.semilogy(rs[:,zind],ni3_plot[:,zind], linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color='b', markeredgecolor = 'k', label=labels[k]+" i1 CEX")
                plt.semilogy(rs[:,zind],ni4_plot[:,zind], linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color='m', markeredgecolor = 'k', label=labels[k]+" i2 CEX")

        if plot_temp_rprof == 1:
            plt.figure('Te rprof')
            if interp_MFAM_picM_plot == 1:
                plt.plot(rs_mp[:,zind_mp],Te_mp[:,zind_mp], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            else:
                plt.plot(rs[:,zind],Te_plot[:,zind], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('Ti1 rprof')
            plt.plot(rs[:,zind],Ti1_plot[:,zind], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('Ti2 rprof')
            plt.plot(rs[:,zind],Ti2_plot[:,zind], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('Tn rprof')
            plt.plot(rs[:,zind],Tn1_plot[:,zind], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('ratio_Ekin_Te rprof')
            if interp_MFAM_picM_plot == 1:
                plt.semilogy(rs_mp[:,zind_mp],ratio_Ekin_Te_mp[:,zind_mp], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            else:
                plt.semilogy(rs[:,zind],ratio_Ekin_Te_plot[:,zind], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('ratio_Ekin_Ti1 rprof')
            plt.plot(rs[:,zind],ratio_Ekin_Ti1_plot[:,zind], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('ratio_Ekin_Ti2 rprof')
            plt.plot(rs[:,zind],ratio_Ekin_Ti2_plot[:,zind], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('pn rprof')
            plt.semilogy(rs[:,zind],pn_plot[:,zind], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])

        if plot_curr_rprof == 1:
            plt.figure('je_r rprof')
            if interp_MFAM_picM_plot == 1:
                if log_curr_rprof == 1:
                    plt.semilogy(rs_mp[:,zind_mp],np.abs(-je_r_mp[:,zind_mp]), linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                else:
                    plt.plot(rs_mp[:,zind_mp],-je_r_mp[:,zind_mp], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            else:
                if log_curr_rprof == 1:
                    plt.semilogy(rs[:,zind],np.abs(-je_r_plot[:,zind]), linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                else:
                    plt.plot(rs[:,zind],-je_r_plot[:,zind], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('je_t rprof')
            if interp_MFAM_picM_plot == 1:
                if log_curr_rprof == 1:
                    plt.semilogy(rs_mp[:,zind_mp],np.abs(je_theta_mp[:,zind_mp]), linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                else:
                    plt.plot(rs_mp[:,zind_mp],je_theta_mp[:,zind_mp], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            else:
                if log_curr_rprof == 1:
                    plt.semilogy(rs[:,zind],np.abs(je_t_plot[:,zind]), linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                else:
                    plt.plot(rs[:,zind],je_t_plot[:,zind], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('je_z rprof')
            if interp_MFAM_picM_plot == 1:
                if log_curr_rprof == 1:
                    plt.semilogy(rs_mp[:,zind_mp],np.abs(-je_z_mp[:,zind_mp]), linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                else:
                    plt.plot(rs_mp[:,zind_mp],-je_z_mp[:,zind_mp], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            else:
                if log_curr_rprof == 1:
                    plt.semilogy(rs[:,zind],np.abs(-je_z_plot[:,zind]), linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                else:
                    plt.plot(rs[:,zind],-je_z_plot[:,zind], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('je_perp rprof')
            if interp_MFAM_picM_plot == 1:
                if log_curr_rprof == 1:
                    plt.semilogy(rs_mp[:,zind_mp],np.abs(-je_perp_mp[:,zind_mp]), linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                else:
                    plt.plot(rs_mp[:,zind_mp],-je_perp_mp[:,zind_mp], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            else:
                if log_curr_rprof == 1:
                    plt.semilogy(rs[:,zind],np.abs(-je_perp_plot[:,zind]), linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                else:
                    plt.plot(rs[:,zind],-je_perp_plot[:,zind], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('je_para rprof')
            if interp_MFAM_picM_plot == 1:
                if log_curr_rprof == 1:
                    plt.semilogy(rs_mp[:,zind_mp],np.abs(-je_para_mp[:,zind_mp]), linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                else:
                    plt.plot(rs_mp[:,zind_mp],-je_para_mp[:,zind_mp], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            else:
                if log_curr_rprof == 1:
                    plt.semilogy(rs[:,zind],np.abs(-je_para_plot[:,zind]), linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                else:
                    plt.plot(rs[:,zind],-je_para_plot[:,zind], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('ratio je_t_perp rprof')
            if interp_MFAM_picM_plot == 1:
                plt.plot(rs_mp[:,zind_mp],ratio_je_t_perp_mp[:,zind_mp], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            else:
                plt.plot(rs[:,zind],ratio_je_t_perp_plot[:,zind], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('Hall_je_perp rprof')
            plt.plot(rs[:,zind],Hall_par_plot[:,zind]*je_perp_plot[:,zind], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('Ftheta rprof')
            plt.plot(rs[:,zind],F_theta_plot[:,zind], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('je rprof')
            if interp_MFAM_picM_plot == 1:
                if log_curr_rprof == 1:
                    plt.semilogy(rs_mp[:,zind_mp],je_mp[:,zind_mp], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                else:
                    plt.plot(rs_mp[:,zind_mp],je_mp[:,zind_mp], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            else:
                if log_curr_rprof == 1:
                    plt.semilogy(rs[:,zind],je_plot[:,zind], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                else:
                    plt.plot(rs[:,zind],je_plot[:,zind], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('ji rprof')
            if log_curr_rprof == 1:
                plt.semilogy(rs[:,zind],ji_plot[:,zind], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            else:
                plt.plot(rs[:,zind],ji_plot[:,zind], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('ji1/ji rprof')
            plt.plot(rs[:,zind],ji1_plot[:,zind]/(ji1_plot[:,zind]+ji2_plot[:,zind]), linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('ji2/ji rprof')
            plt.plot(rs[:,zind],ji2_plot[:,zind]/(ji1_plot[:,zind]+ji2_plot[:,zind]), linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('ji1_ji2_ji rprof')
            plt.plot(rs[:,zind],ji_plot[:,zind], linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k]+" ion")
            plt.plot(rs[:,zind],ji1_plot[:,zind], linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k]+" i1")
            plt.plot(rs[:,zind],ji2_plot[:,zind], linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k]+" i2")
            plt.figure('j rprof')
            if interp_MFAM_picM_plot == 1:
                if log_curr_rprof == 1:
                    plt.semilogy(rs_mp[:,zind_mp],j_mp[:,zind_mp], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                else:
                    plt.plot(rs_mp[:,zind_mp],j_mp[:,zind_mp], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            else:
                if log_curr_rprof == 1:
                    plt.semilogy(rs[:,zind],j_plot[:,zind], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                else:
                    plt.plot(rs[:,zind],j_plot[:,zind], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('ji_r rprof')
            if log_curr_rprof == 1:
                plt.semilogy(rs[:,zind],np.abs(ji_x_plot[:,zind]), linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            else:
                plt.plot(rs[:,zind],ji_x_plot[:,zind], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('ji_z rprof')
            if log_curr_rprof == 1:
                plt.semilogy(rs[:,zind],np.abs(ji_z_plot[:,zind]), linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            else:
                plt.plot(rs[:,zind],ji_z_plot[:,zind], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('je zr rprof')
            if interp_MFAM_picM_plot == 1:
                if log_curr_rprof == 1:
                    plt.semilogy(rs_mp[:,zind_mp],je_2D_mp[:,zind_mp], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                else:
                    plt.plot(rs_mp[:,zind_mp],je_2D_mp[:,zind_mp], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            else:
                if log_curr_rprof == 1:
                    plt.semilogy(rs[:,zind],je2D_plot[:,zind], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                else:
                    plt.plot(rs[:,zind],je2D_plot[:,zind], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('ji zr rprof')
            if log_curr_rprof == 1:
                plt.semilogy(rs[:,zind],ji2D_plot[:,zind], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            else:
                plt.plot(rs[:,zind],ji2D_plot[:,zind], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('j zr rprof')
            if interp_MFAM_picM_plot == 1:
                if log_curr_rprof == 1:
                    plt.semilogy(rs_mp[:,zind_mp],j_2D_mp[:,zind_mp], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                else:
                    plt.plot(rs_mp[:,zind_mp],j_2D_mp[:,zind_mp], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            else:
                if log_curr_rprof == 1:
                    plt.semilogy(rs[:,zind],j2D_plot[:,zind], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                else:
                    plt.plot(rs[:,zind],j2D_plot[:,zind], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('j_z rprof')
            if interp_MFAM_picM_plot == 1:
                if log_curr_rprof == 1:
                    plt.semilogy(rs_mp[:,zind_mp],np.abs(j_z_mp[:,zind_mp]), linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                else:
                    plt.plot(rs_mp[:,zind_mp],j_z_mp[:,zind_mp], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            else:
                if log_curr_rprof == 1:
                    plt.semilogy(rs[:,zind],np.abs(j_z_plot[:,zind]), linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                else:
                    plt.plot(rs[:,zind],j_z_plot[:,zind], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('j_r rprof')
            if interp_MFAM_picM_plot == 1:
                if log_curr_rprof == 1:
                    plt.semilogy(rs_mp[:,zind_mp],np.abs(j_r_mp[:,zind_mp]), linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                else:
                    plt.plot(rs_mp[:,zind_mp],j_r_mp[:,zind_mp], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            else:
                if log_curr_rprof == 1:
                    plt.semilogy(rs[:,zind],np.abs(j_r_plot[:,zind]), linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
                else:
                    plt.plot(rs[:,zind],j_r_plot[:,zind], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])



        if plot_freq_rprof == 1:
            plt.figure('Hall_par rprof')
            plt.plot(rs[:,zind],Hall_par_plot[:,zind], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('Hall_par_eff rprof')
            plt.plot(rs[:,zind],Hall_par_eff_plot[:,zind], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('Hall_par_effect rprof')
            plt.plot(rs[:,zind],Hall_par_effect_plot[:,zind], linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('nu_e_tot rprof')
            plt.semilogy(rs[:,zind],nu_e_tot_plot[:,zind], linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('nu_e_tot_eff rprof')
            plt.semilogy(rs[:,zind],nu_e_tot_eff_plot[:,zind], linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('nu_en rprof')
            plt.semilogy(rs[:,zind],nu_en_plot[:,zind], linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('nu_ei1 rprof')
            plt.semilogy(rs[:,zind],nu_ei1_plot[:,zind], linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('nu_ei2 rprof')
            plt.semilogy(rs[:,zind],nu_ei2_plot[:,zind], linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('nu_i01 rprof')
            plt.semilogy(rs[:,zind],nu_i01_plot[:,zind], linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('nu_i02 rprof')
            plt.semilogy(rs[:,zind],nu_i02_plot[:,zind], linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('nu_i12 rprof')
            plt.semilogy(rs[:,zind],nu_i12_plot[:,zind], linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('nu_ei_el_tot rprof')
            plt.semilogy(rs[:,zind],nu_ei_el_tot_plot[:,zind], linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('nu_ion_tot rprof')
            plt.semilogy(rs[:,zind],nu_ion_tot_plot[:,zind], linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('ndot_e rprof')
            plt.semilogy(rscells[:,zind],ndot_e_plot[:,zind], linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            

        if plot_B_scan == 1:
            plt.figure(r'B scan')
            plt.plot(ang_scan,B_scan,linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            # plt.plot(-ang_scan,B_scan,linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label="")

        if plot_fields_scan == 1:
            plt.figure(r'phi scan')
            plt.plot(ang_scan,phi_scan,linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            # plt.plot(-ang_scan,phi_scan,linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label="")
            
        if plot_dens_scan == 1:
            plt.figure('n scan')
            plt.semilogy(ang_scan,ne_scan,linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            # plt.semilogy(-ang_scan,ne_scan,linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label="")
            plt.figure('nn scan')
            plt.semilogy(ang_scan,nn_scan,linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            # plt.semilogy(-ang_scan,nn_scan,linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label="")
            
        if plot_temp_scan == 1:
            plt.figure('Te scan')
            plt.plot(ang_scan,Te_scan,linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            # plt.plot(-ang_scan,Te_scan,linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label="")
            plt.figure('ratio_Ekin_Te scan')
            plt.plot(ang_scan,ratio_Ekin_Te_scan,linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            # plt.plot(-ang_scan,ratio_Ekin_Te_scan,linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label="")
            
        if plot_curr_scan == 1:
            plt.figure('je_t scan')
            if log_curr_scan == 1:
                plt.semilogy(ang_scan,np.abs(je_theta_scan),linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            else:
                plt.plot(ang_scan,je_theta_scan,linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('je_z scan')
            if log_curr_scan == 1:
                plt.semilogy(ang_scan,np.abs(-je_z_scan),linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            else:
                plt.plot(ang_scan,-je_z_scan,linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])            
            plt.figure('je_r scan')
            if log_curr_scan == 1:
                plt.semilogy(ang_scan,np.abs(-je_r_scan),linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            else:
                plt.plot(ang_scan,-je_r_scan,linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('je_para scan')
            if log_curr_scan == 1:
                plt.semilogy(ang_scan,np.abs(-je_para_scan),linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            else:
                plt.plot(ang_scan,-je_para_scan,linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('je_perp scan')
            if log_curr_scan == 1:
                plt.semilogy(ang_scan,np.abs(-je_perp_scan),linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            else:
                plt.plot(ang_scan,-je_perp_scan,linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('je zr scan')
            if log_curr_scan == 1:
                plt.semilogy(ang_scan,je_2D_scan,linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            else:
                plt.plot(ang_scan,je_2D_scan,linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('ji_z scan')
            if log_curr_scan == 1:
                plt.semilogy(ang_scan,np.abs(ji_z_scan),linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            else:
                plt.plot(ang_scan,ji_z_scan,linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('ji_r scan')
            if log_curr_scan == 1:
                plt.semilogy(ang_scan,np.abs(ji_x_scan),linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            else:
                plt.plot(ang_scan,ji_x_scan,linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('ji zr scan')
            if log_curr_scan == 1:
                plt.semilogy(ang_scan,ji_2D_scan,linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            else:
                plt.plot(ang_scan,ji_2D_scan,linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('j_z scan')
            if log_curr_scan == 1:
                plt.semilogy(ang_scan,np.abs(j_z_scan),linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            else:
                plt.plot(ang_scan,j_z_scan,linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('j_r scan')
            if log_curr_scan == 1:
                plt.semilogy(ang_scan,np.abs(j_r_scan),linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            else:
                plt.plot(ang_scan,j_r_scan,linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('j zr scan')
            if log_curr_scan == 1:
                plt.semilogy(ang_scan,j_2D_scan,linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            else:
                plt.plot(ang_scan,j_2D_scan,linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('je scan')
            if log_curr_scan == 1:
                plt.semilogy(ang_scan,je_scan,linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            else:
                plt.plot(ang_scan,je_scan,linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('ji scan')
            if log_curr_scan == 1:
                plt.semilogy(ang_scan,ji_scan,linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            else:
                plt.plot(ang_scan,ji_scan,linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('j scan')
            if log_curr_scan == 1:
                plt.semilogy(ang_scan,j_scan,linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            else:
                plt.plot(ang_scan,j_scan,linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])

    
        if plot_freq_scan == 1:
            plt.figure('Hall_par scan')
            plt.plot(ang_scan,Hall_par_scan,linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('Hall_par_eff scan')
            plt.plot(ang_scan,Hall_par_eff_scan,linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            plt.figure('Hall_par_effect scan')
            plt.plot(ang_scan,Hall_par_effect_scan,linestyle=linestyles[k], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])


        
        ind = ind + 1
        if ind > 6:
            ind = 0
            ind2 = ind2 + 1
            if ind2 > 6:
                ind = 0
                ind2 = 0
                ind3 = ind3 + 1
                
                
    xi_top = int(xi_top)

        
    if plot_B_prof == 1:
        plt.figure(r'B prof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])
        
#        plt.figure('Br prof')
#        if labels[0] != '':
#            plt.legend(fontsize = font_size_legend,loc=1,frameon = True) 
#        ax = plt.gca()
#        ax.set_xlim(0,xmax)
#        ylims = ax.get_ylim()
#        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
#        if plot_zcath_012 == 2:
#            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
#        if plot_zcath_012 == 3:
#            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
#            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
#        ax.set_ylim(ylims[0],ylims[1])
        
#        plt.figure('Bz prof')
#        if labels[0] != '':
#            plt.legend(fontsize = font_size_legend,loc=1,frameon = True) 
#        ax = plt.gca()
#        ax.set_xlim(0,xmax)
#        ylims = ax.get_ylim()
#        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
#        if plot_zcath_012 == 2:
#            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
#        if plot_zcath_012 == 3:
#            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
#            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
#        ax.set_ylim(ylims[0],ylims[1])
        
        plt.figure(r'alpha prof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])
        
    if plot_fields_prof == 1:
        plt.figure(r'phi prof plume')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
#            plt.legend(fontsize = font_size_legend,loc=1,edgecolor='k',frameon = True) 
        ax = plt.gca()
        # For P4
        ax.set_xlim(3,15)
        ax.set_xticks(np.arange(3,15+1,1))
        ax.set_ylim(-5,50)
        # For P3
        # ax.set_xlim(3,12)
        # ax.set_xticks(np.arange(3,12+1,1))
        # ax.set_ylim(-5,60)  
        # For P2
        # ax.set_xlim(3,8)
        # ax.set_xticks(np.arange(3,8+1,1))
        # ax.set_ylim(-5,80) 
        ylims = ax.get_ylim()
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])
        
        plt.figure(r'phi prof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
#            plt.legend(fontsize = font_size_legend,loc=1,edgecolor='k',frameon = True) 
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
#        ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
#        ax.set_xlim(0,12)
#        ax.set_ylim(0,300)
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
#        plt.plot(zs[rind,:],np.zeros(np.shape(zs[rind,:])), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])
        
        plt.figure(r'E prof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
#        ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
#        ax.set_xlim(0,12)
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])
        
#        plt.figure('Er prof')
#        if labels[0] != '':
#            plt.legend(fontsize = font_size_legend,loc=1,edgecolor='k',frameon=True) 
#        ax = plt.gca()
#        ax.set_xlim(0,xmax)
##        ax.set_xlim(0,12)
##        ax.set_xlim(0,xmax)
#        ylims = ax.get_ylim()
#        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
##        plt.plot(zs[rind,:],np.zeros(np.shape(zs[rind,:])), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")        
#        if plot_zcath_012 == 2:
#            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
#        if plot_zcath_012 == 3:
#            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
#            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")        
#        ax.set_ylim(ylims[0],ylims[1])
        
        
        plt.figure('Ez prof plume')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        # ax.set_xlim(0,np.ceil(xmax))
        # ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        # For P4
        ax.set_xlim(3,15)
        ax.set_xticks(np.arange(3,15+1,1))
        # For P3
        # ax.set_xlim(3,12)
        # ax.set_xticks(np.arange(3,12+1,1))
        # For P2
        # ax.set_xlim(3,8)
        # ax.set_xticks(np.arange(3,8+1,1))
#        ax.set_xlim(0,12)
#        ax.set_ylim(-2.0,16.0)
#        ax.set_ylim(-2.0,12.0)
#        ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
#        plt.plot(zs[rind,:],np.zeros(np.shape(zs[rind,:])), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])
        
        plt.figure('Ez prof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
#        ax.set_xlim(0,12)
#        ax.set_ylim(-2.0,16.0)
#        ax.set_ylim(-2.0,12.0)
#        ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
#        plt.plot(zs[rind,:],np.zeros(np.shape(zs[rind,:])), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])
         



    if plot_dens_prof == 1:
        plt.figure('n prof plume')
#        if labels[0] != '':
#            plt.legend(fontsize = font_size_legend,loc=1,frameon = True) 
        ax = plt.gca()
        # For P4
        ax.set_xlim(3,15)
        ax.set_xticks(np.arange(3,15+1,1))
        # For P3
        # ax.set_xlim(3,12)
        # ax.set_xticks(np.arange(3,12+1,1))
        # For P2
        # ax.set_xlim(3,8)
        # ax.set_xticks(np.arange(3,8+1,1))
        ax.set_ylim(7e15,7e17)
        ylims = ax.get_ylim()
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])

           
        plt.figure('n prof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
#        ax.set_xlim(0,12)
#        ax.set_ylim(1e16,1e19)
#        ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])

        plt.figure('ni1 prof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True)
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
#        ax.set_xlim(0,12)
#        ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])

        plt.figure('ni2 prof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True)
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
#        ax.set_xlim(0,12)
#        ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])

        plt.figure('ratio_ni1_ni2 prof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True)
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
#        ax.set_xlim(0,12)
#        ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])
        
        plt.figure('ratio_ni1_ni3 prof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True)
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
#        ax.set_xlim(0,12)
#        ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])
        
        plt.figure('ratio_ni1_ni4 prof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True)
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
#        ax.set_xlim(0,12)
#        ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])

        plt.figure('ratio_ne_neCEX prof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True)
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
#        ax.set_xlim(0,12)
#        ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])

        plt.figure('nn prof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True)
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
#        ax.set_xlim(0,12)
#        ax.set_ylim(1e16,1e20)
#        ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])
        
        plt.figure('ratio_nn1_nn2 prof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True)
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
#        ax.set_xlim(0,12)
#        ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])
        
        plt.figure('ratio_nn1_nn3 prof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True)
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
#        ax.set_xlim(0,12)
#        ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])
        
        plt.figure('ratio_nn1_nnCEX prof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True)
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
#        ax.set_xlim(0,12)
#        ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])

        plt.figure('ratio_nn_nnCEX prof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True)
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
#        ax.set_xlim(0,12)
#        ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])
        
        plt.figure('all nis prof')
#        if labels[0] != '':
#            plt.legend(fontsize = font_size_legend,loc=1,frameon = True)
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
#        ax.set_xlim(0,12)
#        ax.set_ylim(1e16,1e20)
#        ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])

    if plot_temp_prof == 1:
        plt.figure('Te prof plume')
#        if labels[0] != '':
#            plt.legend(fontsize = font_size_legend,loc=1,frameon = True)
        ax = plt.gca()
        # For P4
        ax.set_xlim(3,15)
        ax.set_xticks(np.arange(3,15+1,1))
        # For P3
        # ax.set_xlim(3,12)
        # ax.set_xticks(np.arange(3,12+1,1))
        # For P2
        # ax.set_xlim(3,8)
        # ax.set_xticks(np.arange(3,8+1,1))
        ax.set_ylim(0,17)
        ylims = ax.get_ylim()
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])

        
        plt.figure('Te prof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True)
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
#        ax.set_xlim(0,12)
#        ax.set_ylim(0,50)
#        ax.set_ylim(0,25)
#        ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])
#        ax.set_ylim(0,50)
        
        plt.figure('Ti1 prof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True)
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])
        
        plt.figure('Ti2 prof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True)
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")        
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])
        
        plt.figure('Tn prof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True)
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")        
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])
        
        plt.figure('ratio_Ekin_Te prof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True)
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")        
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])
        ax.set_xticks(np.arange(0,zs[0,-1]+1,1))
        
        plt.figure('ratio_Ekin_Ti1 prof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True)
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")        
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])
      
        plt.figure('ratio_Ekin_Ti2 prof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True)
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])
        
        plt.figure('pn prof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True)
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])

    if plot_vel_prof == 1:
        plt.figure('Mi1 prof')
        plt.legend(fontsize = font_size_legend,loc='best') 
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")

        plt.figure('Mi2 prof')
        plt.legend(fontsize = font_size_legend,loc='best') 
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")

        plt.figure('Mi prof')
        plt.legend(fontsize = font_size_legend,loc='best') 
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")


        plt.figure('Mzi1 prof')
        plt.legend(fontsize = font_size_legend,loc='best') 
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")

        plt.figure('Mzi2 prof')
        plt.legend(fontsize = font_size_legend,loc='best') 
        ax = plt.gca()
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")

        plt.figure('Mzi prof')
        plt.legend(fontsize = font_size_legend,loc='best') 
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")


        plt.figure('ui_r prof')
        plt.legend(fontsize = font_size_legend,loc='best') 
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")

        plt.figure('ui_t prof')
        plt.legend(fontsize = font_size_legend,loc='best') 
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")

        plt.figure('ui_z prof')
        plt.legend(fontsize = font_size_legend,loc='best') 
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")

        plt.figure('ue_r prof')
        plt.legend(fontsize = font_size_legend,loc='best') 
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        plt.plot(zs[rind,:],np.zeros(np.shape(zs[rind,:])), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")

        plt.figure('ue_t prof')
        plt.legend(fontsize = font_size_legend-5,loc='best') 
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        plt.plot(zs[rind,:],np.zeros(np.shape(zs[rind,:])), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")

        plt.figure('ue_z prof')
        plt.legend(fontsize = font_size_legend,loc='best') 
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        plt.plot(zs[rind,:],np.zeros(np.shape(zs[rind,:])), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")

        plt.figure('ue_perp prof')
        plt.legend(fontsize = font_size_legend,loc='best') 
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        plt.plot(zs[rind,:],np.zeros(np.shape(zs[rind,:])), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")

        plt.figure('ue_para prof')
        plt.legend(fontsize = font_size_legend,loc='best') 
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        plt.plot(zs[rind,:],np.zeros(np.shape(zs[rind,:])), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")

        plt.figure('ratio ue_t_perp prof')
        plt.legend(fontsize = font_size_legend,loc='best') 
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")

        plt.figure('ratio ue_t_para prof')
        plt.legend(fontsize = font_size_legend,loc='best') 
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")

        plt.figure('ratio ue_perp_para prof')
        plt.legend(fontsize = font_size_legend,loc='best') 
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")

    if plot_curr_prof == 1:
        plt.figure('je_r prof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True)
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
#        plt.plot(zs[rind,:],np.zeros(np.shape(zs[rind,:])), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])
        
        plt.figure('je_t prof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True)
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
#        plt.plot(zs[rind,:],np.zeros(np.shape(zs[rind,:])), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])
        
        plt.figure('je_z prof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True)
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
#        plt.plot(zs[rind,:],np.zeros(np.shape(zs[rind,:])), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])
        
        plt.figure('je_z prof chamber')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True)
        ax = plt.gca()
        ax.set_xlim(0,6)
        ax.set_xticks(np.arange(0,6+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
#        plt.plot(zs[rind,:],np.zeros(np.shape(zs[rind,:])), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])
        
        plt.figure('je_perp prof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True)
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
#        plt.plot(zs[rind,:],np.zeros(np.shape(zs[rind,:])), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])
        
        plt.figure('je_para prof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True)
#        plt.legend(fontsize = font_size_legend,loc=4,ncol=1,edgecolor='k',frameon=True) 
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
#        plt.plot(zs[rind,:],np.zeros(np.shape(zs[rind,:])), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])
        
        plt.figure('ratio je_t_perp prof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True)
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
#        plt.plot(zs[rind,:],np.zeros(np.shape(zs[rind,:])), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])
        
        plt.figure('Hall_je_perp prof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True)
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        plt.plot(zs[rind,:],np.zeros(np.shape(zs[rind,:])), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])
        
        plt.figure('Ftheta prof')
        plt.legend(fontsize = font_size_legend,loc='best',frameon = True)
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        plt.plot(zs[rind,:],np.zeros(np.shape(zs[rind,:])), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])
        
        plt.figure('je prof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True)
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])

        plt.figure('ji prof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True)
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])
        
        plt.figure('ji1/ji prof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True)
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])
        
        plt.figure('ji2/ji prof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True)
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])

        plt.figure('ji1_ji2_ji prof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True)
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])

        plt.figure('j prof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True)
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])

        plt.figure('ji_r prof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True)
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        plt.plot(zs[rind,:],np.zeros(np.shape(zs[rind,:])), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
       
        plt.figure('ji_z prof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True)
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        plt.plot(zs[rind,:],np.zeros(np.shape(zs[rind,:])), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])
        
        plt.figure('je zr prof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True)
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        plt.plot(zs[rind,:],np.zeros(np.shape(zs[rind,:])), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])
        
        plt.figure('ji zr prof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True)
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        plt.plot(zs[rind,:],np.zeros(np.shape(zs[rind,:])), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])
        
        plt.figure('j zr prof') 
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True)
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        plt.plot(zs[rind,:],np.zeros(np.shape(zs[rind,:])), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])
        
    if plot_nmp_prof == 1:
        plt.figure('Nmpi1 prof')
        plt.legend(fontsize = font_size_legend,loc='best',frameon = True)
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
       
        plt.figure('Nmpi2 prof')
        plt.legend(fontsize = font_size_legend,loc='best') 
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")

        plt.figure('Nmpn1 prof')
        plt.legend(fontsize = font_size_legend,loc='best') 
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")

    if plot_freq_prof == 1:
        plt.figure('Hall_par prof')
        plt.legend(fontsize = font_size_legend,loc='best',frameon = True)
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])
        
        plt.figure('Hall_par_eff prof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True)
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
#        ax.set_xlim(0,12)
#        ax.set_ylim(5,70)
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])
        
        plt.figure('Hall_par_effect prof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True)
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
#        ax.set_xlim(0,12)
#        ax.set_ylim(5,70)
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])

        plt.figure('nu_e_tot prof')
        plt.legend(fontsize = font_size_legend,loc='best') 
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])
        
        plt.figure('nu_e_tot_eff prof')
        plt.legend(fontsize = font_size_legend,loc='best') 
        ax = plt.gca()
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])
        
        plt.figure('nu_t prof')
        plt.legend(fontsize = font_size_legend,loc='best') 
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])
        
        plt.figure('nu_en prof')
        plt.legend(fontsize = font_size_legend,loc='best') 
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])
        
        plt.figure('nu_ei1 prof')
        plt.legend(fontsize = font_size_legend,loc='best') 
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])
        
        plt.figure('nu_ei2 prof')
        plt.legend(fontsize = font_size_legend,loc='best') 
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])
        
        plt.figure('nu_i01 prof')
        plt.legend(fontsize = font_size_legend,loc='best') 
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])
        
        plt.figure('nu_i02 prof')
        plt.legend(fontsize = font_size_legend,loc='best') 
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")

        plt.figure('nu_i12 prof')
        plt.legend(fontsize = font_size_legend,loc='best') 
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])
        
        plt.figure('nu_ex prof')
        plt.legend(fontsize = font_size_legend,loc='best') 
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])
        
        plt.figure('nu_ei_el_tot prof')
        plt.legend(fontsize = font_size_legend,loc='best') 
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])
        
        plt.figure('nu_ion_tot prof')
        plt.legend(fontsize = font_size_legend,loc='best') 
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])
        
        plt.figure('ratio_nu_en_nu_e_tot_eff prof')
        plt.legend(fontsize = font_size_legend,loc='best') 
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])

        plt.figure('ratio_nu_ion_tot_nu_e_tot_eff prof')
        plt.legend(fontsize = font_size_legend,loc='best') 
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])

        plt.figure('ratio_nu_ei_el_tot_nu_e_tot_eff prof')
        plt.legend(fontsize = font_size_legend,loc='best') 
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])

        plt.figure('ratio_nu_ex_nu_e_tot_eff prof')
        plt.legend(fontsize = font_size_legend,loc='best') 
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])

        plt.figure('ratio_nu_e_tot_nu_e_tot_eff prof')
        plt.legend(fontsize = font_size_legend,loc='best') 
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])

        plt.figure('ratio_nu_t_nu_e_tot_eff prof')
        plt.legend(fontsize = font_size_legend,loc='best') 
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])
        
        plt.figure('ratio_nu_e_tot_nu_t prof')
        plt.legend(fontsize = font_size_legend,loc='best') 
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])
        
        plt.figure('ratio_nu_ei_el_tot_nu_t prof')
        plt.legend(fontsize = font_size_legend,loc='best') 
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])
        
        plt.figure('ndot_e prof')
        plt.legend(fontsize = font_size_legend,loc='best') 
        ax = plt.gca()
        ax.set_xlim(0,np.ceil(xmax))
        ax.set_xticks(np.arange(0,np.ceil(xmax)+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])
        
        plt.figure('ndot_e prof chamber')
        plt.legend(fontsize = font_size_legend,loc='best') 
        ax = plt.gca()
        ax.set_xlim(0,6)
        ax.set_xticks(np.arange(0,6+1,1))
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])
    
    if plot_cath_Bline_prof == 1:
        plt.figure('nodim Boltzmann cathBline prof')
        plt.legend(fontsize = font_size_legend,loc=3) 
        plt.figure('dim Boltzmann cathBline prof')
        plt.legend(fontsize = font_size_legend,loc=1) 
        ax = plt.gca()
        ax.yaxis.set_major_formatter(FormatStrFormatter('%.1f'))
        plt.figure('phi cathBline prof')
#        plt.legend(fontsize = font_size_legend,loc=1) 
        plt.figure('ne term cathBline prof')
        plt.legend(fontsize = font_size_legend,loc=1) 
        ax = plt.gca()
#        ax.set_xlim(1,11)
        plt.figure('ne rel cathBline prof')
#        plt.legend(fontsize = font_size_legend,loc=1) 
        ax = plt.gca()
#        ax.set_xlim(1,11)
        ax.yaxis.set_major_formatter(FormatStrFormatter('%.1f'))
        plt.figure('Te rel cathBline prof')
#        plt.legend(fontsize = font_size_legend,loc=2) 
        ax = plt.gca()
#        ax.set_xlim(1,11)
        plt.figure('ne cathBline prof')
#        plt.legend(fontsize = font_size_legend,loc=3) 
        ax = plt.gca()
#        ax.set_xlim(1,11)
        plt.figure('Te cathBline prof')
#        plt.legend(fontsize = font_size_legend,loc=4,ncol=2) 
        ax = plt.gca()
#        ax.set_xlim(1,11)
        
#        plt.figure('nodim Boltzmann Bline prof')
#        plt.legend(fontsize = font_size_legend,loc=3) 
#        plt.figure('dim Boltzmann Bline prof')
#        plt.legend(fontsize = font_size_legend,loc=4) 
#        plt.figure('phi Bline prof')   
#        plt.legend(fontsize = font_size_legend,loc=3) 
#        plt.figure('ne term Bline prof')
#        plt.legend(fontsize = font_size_legend,loc=3) 
#        plt.figure('ne rel Bline prof')
#        plt.legend(fontsize = font_size_legend,loc=3) 
#        plt.figure('Te rel Bline prof')
#        plt.legend(fontsize = font_size_legend,loc=3) 
#        plt.figure('ne Bline prof')
#        plt.legend(fontsize = font_size_legend,loc=3) 
#        plt.figure('Te Bline prof')
#        plt.legend(fontsize = font_size_legend,loc=3) 
        
    if plot_err_interp_prof == 1:
        plt.figure(r'err_interp_n prof')
        plt.legend(fontsize = font_size_legend,loc='best') 
        ax = plt.gca()
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])
            
    if plot_lambdaD_prof == 1:
        plt.figure(r'lambdaD prof')
        plt.legend(fontsize = font_size_legend,loc='best') 
        ax = plt.gca()
        ylims = ax.get_ylim()
        plt.plot(zs[rind,xi_top]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 2:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        if plot_zcath_012 == 3:
            plt.plot(zcat_pos*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
            plt.plot(zcat_pos_2*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle=':', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='k', markeredgecolor = 'k', label="")
        ax.set_ylim(ylims[0],ylims[1])

    if plot_Bline_prof == 1:
        plt.figure(r'B Bline prof')
        plt.legend(fontsize = font_size_legend,loc='best') 
        ax = plt.gca()
        ax.axvline(x=s_Bline[pos_r_Bline], linestyle='-.',color='k', linewidth = line_width)
             
        plt.figure(r'alphat Bline prof')
        plt.legend(fontsize = font_size_legend,loc='best') 
        ax = plt.gca()
        ax.axvline(x=s_Bline[pos_r_Bline], linestyle='-.',color='k', linewidth = line_width)
        
        plt.figure(r'phi Bline prof')
        plt.legend(fontsize = font_size_legend,loc='best') 
        ax = plt.gca()
        ax.axvline(x=s_Bline[pos_r_Bline], linestyle='-.',color='k', linewidth = line_width)
        
        plt.figure(r'ne Bline prof')
        plt.legend(fontsize = font_size_legend,loc='best') 
        ax = plt.gca()
        ax.axvline(x=s_Bline[pos_r_Bline], linestyle='-.',color='k', linewidth = line_width)
        
        plt.figure(r'nn Bline prof')
        plt.legend(fontsize = font_size_legend,loc='best') 
        ax = plt.gca()
        ax.axvline(x=s_Bline[pos_r_Bline], linestyle='-.',color='k', linewidth = line_width)
        
        plt.figure(r'Te Bline prof')
        plt.legend(fontsize = font_size_legend,loc='best') 
        ax = plt.gca()
        ax.axvline(x=s_Bline[pos_r_Bline], linestyle='-.',color='k', linewidth = line_width)
        
        plt.figure('ratio_Ekin_Te Bline prof')
        plt.legend(fontsize = font_size_legend,loc='best') 
        ax = plt.gca()
        ax.axvline(x=s_Bline[pos_r_Bline], linestyle='-.',color='k', linewidth = line_width)
        
        plt.figure('je_para Bline prof')
        plt.legend(fontsize = font_size_legend,loc='best') 
        ax = plt.gca()
        ax.axvline(x=s_Bline[pos_r_Bline], linestyle='-.',color='k', linewidth = line_width)
        
        plt.figure('Hall_par Bline prof')
        plt.legend(fontsize = font_size_legend,loc='best') 
        ax = plt.gca()
        ax.axvline(x=s_Bline[pos_r_Bline], linestyle='-.',color='k', linewidth = line_width)
        
        plt.figure('Hall_par_eff Bline prof')
        plt.legend(fontsize = font_size_legend,loc='best') 
        ax = plt.gca()
        ax.axvline(x=s_Bline[pos_r_Bline], linestyle='-.',color='k', linewidth = line_width)
        
        plt.figure('Hall_par_effect Bline prof')
        plt.legend(fontsize = font_size_legend,loc='best') 
        ax = plt.gca()
        ax.axvline(x=s_Bline[pos_r_Bline], linestyle='-.',color='k', linewidth = line_width)
        
        plt.figure('felec_para Bline prof')
        plt.legend(fontsize = font_size_legend,loc='best') 
        ax = plt.gca()
        ax.axvline(x=s_Bline[pos_r_Bline], linestyle='-.',color='k', linewidth = line_width)

    if plot_fields_rprof == 1:
        plt.figure(r'phi rprof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        # ax.set_xlim(0,rs[-1,-1])
        # ax.set_xticks(np.arange(0,rs[-1,-1]+1,1))
        ax.set_xlim(0,rmax)
        ax.set_xticks(np.arange(0,np.ceil(rmax)+1,1))
        plt.axvline(x=rs[rind,0], linestyle='--',color='k')

        plt.figure(r'E rprof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        # ax.set_xlim(0,rs[-1,-1])
        # ax.set_xticks(np.arange(0,rs[-1,-1]+1,1))
        ax.set_xlim(0,rmax)
        ax.set_xticks(np.arange(0,np.ceil(rmax)+1,1))
        plt.axvline(x=rs[rind,0], linestyle='--',color='k')

        plt.figure('Er rprof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        # ax.set_xlim(0,rs[-1,-1])
        # ax.set_xticks(np.arange(0,rs[-1,-1]+1,1))
        ax.set_xlim(0,rmax)
        ax.set_xticks(np.arange(0,np.ceil(rmax)+1,1))
        plt.axvline(x=rs[rind,0], linestyle='--',color='k')

        plt.figure('Ez rprof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        # ax.set_xlim(0,rs[-1,-1])
        # ax.set_xticks(np.arange(0,rs[-1,-1]+1,1))
        ax.set_xlim(0,rmax)
        ax.set_xticks(np.arange(0,np.ceil(rmax)+1,1))
        plt.axvline(x=rs[rind,0], linestyle='--',color='k')

    if plot_dens_rprof == 1:
        plt.figure('n rprof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        # ax.set_xlim(0,rs[-1,-1])
        # ax.set_xticks(np.arange(0,rs[-1,-1]+1,1))
        ax.set_xlim(0,rmax)
        ax.set_xticks(np.arange(0,np.ceil(rmax)+1,1))
        plt.axvline(x=rs[rind,0], linestyle='--',color='k')
        
        plt.figure('ni1 rprof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        # ax.set_xlim(0,rs[-1,-1])
        # ax.set_xticks(np.arange(0,rs[-1,-1]+1,1))
        ax.set_xlim(0,rmax)
        ax.set_xticks(np.arange(0,np.ceil(rmax)+1,1))
        plt.axvline(x=rs[rind,0], linestyle='--',color='k')
        
        plt.figure('ni2 rprof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        # ax.set_xlim(0,rs[-1,-1])
        # ax.set_xticks(np.arange(0,rs[-1,-1]+1,1))
        ax.set_xlim(0,rmax)
        ax.set_xticks(np.arange(0,np.ceil(rmax)+1,1))
        plt.axvline(x=rs[rind,0], linestyle='--',color='k')
        
        plt.figure('ratio_ni1_ni2 rprof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        # ax.set_xlim(0,rs[-1,-1])
        # ax.set_xticks(np.arange(0,rs[-1,-1]+1,1))
        ax.set_xlim(0,rmax)
        ax.set_xticks(np.arange(0,np.ceil(rmax)+1,1))
        plt.axvline(x=rs[rind,0], linestyle='--',color='k')
        
        plt.figure('ratio_ni1_ni3 rprof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        # ax.set_xlim(0,rs[-1,-1])
        # ax.set_xticks(np.arange(0,rs[-1,-1]+1,1))
        ax.set_xlim(0,rmax)
        ax.set_xticks(np.arange(0,np.ceil(rmax)+1,1))
        plt.axvline(x=rs[rind,0], linestyle='--',color='k')
        
        plt.figure('ratio_ni1_ni4 rprof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        # ax.set_xlim(0,rs[-1,-1])
        # ax.set_xticks(np.arange(0,rs[-1,-1]+1,1))
        ax.set_xlim(0,rmax)
        ax.set_xticks(np.arange(0,np.ceil(rmax)+1,1))
        plt.axvline(x=rs[rind,0], linestyle='--',color='k')
        
        plt.figure('ratio_ne_neCEX rprof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        # ax.set_xlim(0,rs[-1,-1])
        # ax.set_xticks(np.arange(0,rs[-1,-1]+1,1))
        ax.set_xlim(0,rmax)
        ax.set_xticks(np.arange(0,np.ceil(rmax)+1,1))
        plt.axvline(x=rs[rind,0], linestyle='--',color='k')
        
        plt.figure('nn rprof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        # ax.set_xlim(0,rs[-1,-1])
        # ax.set_xticks(np.arange(0,rs[-1,-1]+1,1))
        ax.set_xlim(0,rmax)
        ax.set_xticks(np.arange(0,np.ceil(rmax)+1,1))
        plt.axvline(x=rs[rind,0], linestyle='--',color='k')
        
        plt.figure('ratio_nn1_nn2 rprof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        # ax.set_xlim(0,rs[-1,-1])
        # ax.set_xticks(np.arange(0,rs[-1,-1]+1,1))
        ax.set_xlim(0,rmax)
        ax.set_xticks(np.arange(0,np.ceil(rmax)+1,1))
        plt.axvline(x=rs[rind,0], linestyle='--',color='k')
        
        plt.figure('ratio_nn1_nn3 rprof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        # ax.set_xlim(0,rs[-1,-1])
        # ax.set_xticks(np.arange(0,rs[-1,-1]+1,1))
        ax.set_xlim(0,rmax)
        ax.set_xticks(np.arange(0,np.ceil(rmax)+1,1))
        plt.axvline(x=rs[rind,0], linestyle='--',color='k')
        
        plt.figure('ratio_nn1_nnCEX rprof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        # ax.set_xlim(0,rs[-1,-1])
        # ax.set_xticks(np.arange(0,rs[-1,-1]+1,1))
        ax.set_xlim(0,rmax)
        ax.set_xticks(np.arange(0,np.ceil(rmax)+1,1))
        plt.axvline(x=rs[rind,0], linestyle='--',color='k')
        
        plt.figure('ratio_nn_nnCEX rprof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        # ax.set_xlim(0,rs[-1,-1])
        # ax.set_xticks(np.arange(0,rs[-1,-1]+1,1))
        ax.set_xlim(0,rmax)
        ax.set_xticks(np.arange(0,np.ceil(rmax)+1,1))
        plt.axvline(x=rs[rind,0], linestyle='--',color='k')
        
        plt.figure('all nis rprof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        # ax.set_xlim(0,rs[-1,-1])
        # ax.set_xticks(np.arange(0,rs[-1,-1]+1,1))
        ax.set_xlim(0,rmax)
        ax.set_xticks(np.arange(0,np.ceil(rmax)+1,1))
        plt.axvline(x=rs[rind,0], linestyle='--',color='k')
        
    if plot_temp_rprof == 1:
        plt.figure('Te rprof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        # ax.set_xlim(0,rs[-1,-1])
        # ax.set_xticks(np.arange(0,rs[-1,-1]+1,1))
        ax.set_xlim(0,rmax)
        ax.set_xticks(np.arange(0,np.ceil(rmax)+1,1))
        plt.axvline(x=rs[rind,0], linestyle='--',color='k')

        plt.figure('Ti1 rprof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        # ax.set_xlim(0,rs[-1,-1])
        # ax.set_xticks(np.arange(0,rs[-1,-1]+1,1))
        ax.set_xlim(0,rmax)
        ax.set_xticks(np.arange(0,np.ceil(rmax)+1,1))
        plt.axvline(x=rs[rind,0], linestyle='--',color='k')

        plt.figure('Ti2 rprof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        # ax.set_xlim(0,rs[-1,-1])
        # ax.set_xticks(np.arange(0,rs[-1,-1]+1,1))
        ax.set_xlim(0,rmax)
        ax.set_xticks(np.arange(0,np.ceil(rmax)+1,1))
        plt.axvline(x=rs[rind,0], linestyle='--',color='k')

        plt.figure('Tn rprof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        # ax.set_xlim(0,rs[-1,-1])
        # ax.set_xticks(np.arange(0,rs[-1,-1]+1,1))
        ax.set_xlim(0,rmax)
        ax.set_xticks(np.arange(0,np.ceil(rmax)+1,1))
        plt.axvline(x=rs[rind,0], linestyle='--',color='k')

        plt.figure('ratio_Ekin_Te rprof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        # ax.set_xlim(0,rs[-1,-1])
        # ax.set_xticks(np.arange(0,rs[-1,-1]+1,1))
        ax.set_xlim(0,rmax)
        ax.set_xticks(np.arange(0,np.ceil(rmax)+1,1))
        plt.axvline(x=rs[rind,0], linestyle='--',color='k')

        plt.figure('ratio_Ekin_Ti1 rprof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        # ax.set_xlim(0,rs[-1,-1])
        # ax.set_xticks(np.arange(0,rs[-1,-1]+1,1))
        ax.set_xlim(0,rmax)
        ax.set_xticks(np.arange(0,np.ceil(rmax)+1,1))
        plt.axvline(x=rs[rind,0], linestyle='--',color='k')

        plt.figure('ratio_Ekin_Ti2 rprof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        # ax.set_xlim(0,rs[-1,-1])
        # ax.set_xticks(np.arange(0,rs[-1,-1]+1,1))
        ax.set_xlim(0,rmax)
        ax.set_xticks(np.arange(0,np.ceil(rmax)+1,1))
        plt.axvline(x=rs[rind,0], linestyle='--',color='k')

        plt.figure('pn rprof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        # ax.set_xlim(0,rs[-1,-1])
        # ax.set_xticks(np.arange(0,rs[-1,-1]+1,1))
        ax.set_xlim(0,rmax)
        ax.set_xticks(np.arange(0,np.ceil(rmax)+1,1))
        plt.axvline(x=rs[rind,0], linestyle='--',color='k')


    if plot_curr_rprof == 1:
        plt.figure('je_r rprof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        # ax.set_xlim(0,rs[-1,-1])
        # ax.set_xticks(np.arange(0,rs[-1,-1]+1,1))
        ax.set_xlim(0,rmax)
        ax.set_xticks(np.arange(0,np.ceil(rmax)+1,1))
        plt.axvline(x=rs[rind,0], linestyle='--',color='k')

        plt.figure('je_t rprof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        # ax.set_xlim(0,rs[-1,-1])
        # ax.set_xticks(np.arange(0,rs[-1,-1]+1,1))
        ax.set_xlim(0,rmax)
        ax.set_xticks(np.arange(0,np.ceil(rmax)+1,1))
        plt.axvline(x=rs[rind,0], linestyle='--',color='k')

        plt.figure('je_z rprof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        # ax.set_xlim(0,rs[-1,-1])
        # ax.set_xticks(np.arange(0,rs[-1,-1]+1,1))
        ax.set_xlim(0,rmax)
        ax.set_xticks(np.arange(0,np.ceil(rmax)+1,1))
        plt.axvline(x=rs[rind,0], linestyle='--',color='k')

        plt.figure('je_perp rprof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        # ax.set_xlim(0,rs[-1,-1])
        # ax.set_xticks(np.arange(0,rs[-1,-1]+1,1))
        ax.set_xlim(0,rmax)
        ax.set_xticks(np.arange(0,np.ceil(rmax)+1,1))
        plt.axvline(x=rs[rind,0], linestyle='--',color='k')

        plt.figure('je_para rprof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        # ax.set_xlim(0,rs[-1,-1])
        # ax.set_xticks(np.arange(0,rs[-1,-1]+1,1))
        ax.set_xlim(0,rmax)
        ax.set_xticks(np.arange(0,np.ceil(rmax)+1,1))
        plt.axvline(x=rs[rind,0], linestyle='--',color='k')

        plt.figure('ratio je_t_perp rprof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        # ax.set_xlim(0,rs[-1,-1])
        # ax.set_xticks(np.arange(0,rs[-1,-1]+1,1))
        ax.set_xlim(0,rmax)
        ax.set_xticks(np.arange(0,np.ceil(rmax)+1,1))
        plt.axvline(x=rs[rind,0], linestyle='--',color='k')

        plt.figure('Hall_je_perp rprof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        # ax.set_xlim(0,rs[-1,-1])
        # ax.set_xticks(np.arange(0,rs[-1,-1]+1,1))
        ax.set_xlim(0,rmax)
        ax.set_xticks(np.arange(0,np.ceil(rmax)+1,1))
        plt.axvline(x=rs[rind,0], linestyle='--',color='k')

        plt.figure('Ftheta rprof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        # ax.set_xlim(0,rs[-1,-1])
        # ax.set_xticks(np.arange(0,rs[-1,-1]+1,1))
        ax.set_xlim(0,rmax)
        ax.set_xticks(np.arange(0,np.ceil(rmax)+1,1))
        plt.axvline(x=rs[rind,0], linestyle='--',color='k')

        plt.figure('je rprof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        # ax.set_xlim(0,rs[-1,-1])
        # ax.set_xticks(np.arange(0,rs[-1,-1]+1,1))
        ax.set_xlim(0,rmax)
        ax.set_xticks(np.arange(0,np.ceil(rmax)+1,1))
        plt.axvline(x=rs[rind,0], linestyle='--',color='k')

        plt.figure('ji rprof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        # ax.set_xlim(0,rs[-1,-1])
        # ax.set_xticks(np.arange(0,rs[-1,-1]+1,1))
        ax.set_xlim(0,rmax)
        ax.set_xticks(np.arange(0,np.ceil(rmax)+1,1))
        plt.axvline(x=rs[rind,0], linestyle='--',color='k')

        plt.figure('ji1/ji rprof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        # ax.set_xlim(0,rs[-1,-1])
        # ax.set_xticks(np.arange(0,rs[-1,-1]+1,1))
        ax.set_xlim(0,rmax)
        ax.set_xticks(np.arange(0,np.ceil(rmax)+1,1))
        plt.axvline(x=rs[rind,0], linestyle='--',color='k')

        plt.figure('ji2/ji rprof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        # ax.set_xlim(0,rs[-1,-1])
        # ax.set_xticks(np.arange(0,rs[-1,-1]+1,1))
        ax.set_xlim(0,rmax)
        ax.set_xticks(np.arange(0,np.ceil(rmax)+1,1))
        plt.axvline(x=rs[rind,0], linestyle='--',color='k')

        plt.figure('ji1_ji2_ji rprof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        # ax.set_xlim(0,rs[-1,-1])
        # ax.set_xticks(np.arange(0,rs[-1,-1]+1,1))
        ax.set_xlim(0,rmax)
        ax.set_xticks(np.arange(0,np.ceil(rmax)+1,1))
        plt.axvline(x=rs[rind,0], linestyle='--',color='k')

        plt.figure('j rprof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        # ax.set_xlim(0,rs[-1,-1])
        # ax.set_xticks(np.arange(0,rs[-1,-1]+1,1))
        ax.set_xlim(0,rmax)
        ax.set_xticks(np.arange(0,np.ceil(rmax)+1,1))
        plt.axvline(x=rs[rind,0], linestyle='--',color='k')

        plt.figure('ji_r rprof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        # ax.set_xlim(0,rs[-1,-1])
        # ax.set_xticks(np.arange(0,rs[-1,-1]+1,1))
        ax.set_xlim(0,rmax)
        ax.set_xticks(np.arange(0,np.ceil(rmax)+1,1))
        plt.axvline(x=rs[rind,0], linestyle='--',color='k')

        plt.figure('ji_z rprof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        # ax.set_xlim(0,rs[-1,-1])
        # ax.set_xticks(np.arange(0,rs[-1,-1]+1,1))
        ax.set_xlim(0,rmax)
        ax.set_xticks(np.arange(0,np.ceil(rmax)+1,1))
        plt.axvline(x=rs[rind,0], linestyle='--',color='k')

        plt.figure('je zr rprof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        # ax.set_xlim(0,rs[-1,-1])
        # ax.set_xticks(np.arange(0,rs[-1,-1]+1,1))
        ax.set_xlim(0,rmax)
        ax.set_xticks(np.arange(0,np.ceil(rmax)+1,1))
        plt.axvline(x=rs[rind,0], linestyle='--',color='k')

        plt.figure('ji zr rprof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        # ax.set_xlim(0,rs[-1,-1])
        # ax.set_xticks(np.arange(0,rs[-1,-1]+1,1))
        ax.set_xlim(0,rmax)
        ax.set_xticks(np.arange(0,np.ceil(rmax)+1,1))
        plt.axvline(x=rs[rind,0], linestyle='--',color='k')

        plt.figure('j zr rprof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        # ax.set_xlim(0,rs[-1,-1])
        # ax.set_xticks(np.arange(0,rs[-1,-1]+1,1))
        ax.set_xlim(0,rmax)
        ax.set_xticks(np.arange(0,np.ceil(rmax)+1,1))
        plt.axvline(x=rs[rind,0], linestyle='--',color='k')
        
        plt.figure('j_z rprof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        # ax.set_xlim(0,rs[-1,-1])
        # ax.set_xticks(np.arange(0,rs[-1,-1]+1,1))
        ax.set_xlim(0,rmax)
        ax.set_xticks(np.arange(0,np.ceil(rmax)+1,1))
        plt.axvline(x=rs[rind,0], linestyle='--',color='k')

        plt.figure('j_r rprof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        # ax.set_xlim(0,rs[-1,-1])
        # ax.set_xticks(np.arange(0,rs[-1,-1]+1,1))
        ax.set_xlim(0,rmax)
        ax.set_xticks(np.arange(0,np.ceil(rmax)+1,1))
        plt.axvline(x=rs[rind,0], linestyle='--',color='k')

    if plot_freq_rprof == 1:
        plt.figure('Hall_par rprof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        # ax.set_xlim(0,rs[-1,-1])
        # ax.set_xticks(np.arange(0,rs[-1,-1]+1,1))
        ax.set_xlim(0,rmax)
        ax.set_xticks(np.arange(0,np.ceil(rmax)+1,1))
        plt.axvline(x=rs[rind,0], linestyle='--',color='k')

        plt.figure('Hall_par_eff rprof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        # ax.set_xlim(0,rs[-1,-1])
        # ax.set_xticks(np.arange(0,rs[-1,-1]+1,1))
        ax.set_xlim(0,rmax)
        ax.set_xticks(np.arange(0,np.ceil(rmax)+1,1))
        plt.axvline(x=rs[rind,0], linestyle='--',color='k')

        plt.figure('Hall_par_effect rprof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        # ax.set_xlim(0,rs[-1,-1])
        # ax.set_xticks(np.arange(0,rs[-1,-1]+1,1))
        ax.set_xlim(0,rmax)
        ax.set_xticks(np.arange(0,np.ceil(rmax)+1,1))
        plt.axvline(x=rs[rind,0], linestyle='--',color='k')
        
        plt.figure('nu_e_tot rprof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        # ax.set_xlim(0,rs[-1,-1])
        # ax.set_xticks(np.arange(0,rs[-1,-1]+1,1))
        ax.set_xlim(0,rmax)
        ax.set_xticks(np.arange(0,np.ceil(rmax)+1,1))
        plt.axvline(x=rs[rind,0], linestyle='--',color='k')

        plt.figure('nu_e_tot_eff rprof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        # ax.set_xlim(0,rs[-1,-1])
        # ax.set_xticks(np.arange(0,rs[-1,-1]+1,1))
        ax.set_xlim(0,rmax)
        ax.set_xticks(np.arange(0,np.ceil(rmax)+1,1))
        plt.axvline(x=rs[rind,0], linestyle='--',color='k')

        plt.figure('nu_en rprof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        # ax.set_xlim(0,rs[-1,-1])
        # ax.set_xticks(np.arange(0,rs[-1,-1]+1,1))
        ax.set_xlim(0,rmax)
        ax.set_xticks(np.arange(0,np.ceil(rmax)+1,1))
        plt.axvline(x=rs[rind,0], linestyle='--',color='k')

        plt.figure('nu_ei1 rprof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        # ax.set_xlim(0,rs[-1,-1])
        # ax.set_xticks(np.arange(0,rs[-1,-1]+1,1))
        ax.set_xlim(0,rmax)
        ax.set_xticks(np.arange(0,np.ceil(rmax)+1,1))
        plt.axvline(x=rs[rind,0], linestyle='--',color='k')

        plt.figure('nu_ei2 rprof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        # ax.set_xlim(0,rs[-1,-1])
        # ax.set_xticks(np.arange(0,rs[-1,-1]+1,1))
        ax.set_xlim(0,rmax)
        ax.set_xticks(np.arange(0,np.ceil(rmax)+1,1))
        plt.axvline(x=rs[rind,0], linestyle='--',color='k')
 
        plt.figure('nu_i01 rprof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        # ax.set_xlim(0,rs[-1,-1])
        # ax.set_xticks(np.arange(0,rs[-1,-1]+1,1))
        ax.set_xlim(0,rmax)
        ax.set_xticks(np.arange(0,np.ceil(rmax)+1,1))
        plt.axvline(x=rs[rind,0], linestyle='--',color='k')

        plt.figure('nu_i02 rprof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        # ax.set_xlim(0,rs[-1,-1])
        # ax.set_xticks(np.arange(0,rs[-1,-1]+1,1))
        ax.set_xlim(0,rmax)
        ax.set_xticks(np.arange(0,np.ceil(rmax)+1,1))
        plt.axvline(x=rs[rind,0], linestyle='--',color='k')

        plt.figure('nu_i12 rprof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        # ax.set_xlim(0,rs[-1,-1])
        # ax.set_xticks(np.arange(0,rs[-1,-1]+1,1))
        ax.set_xlim(0,rmax)
        ax.set_xticks(np.arange(0,np.ceil(rmax)+1,1))
        plt.axvline(x=rs[rind,0], linestyle='--',color='k')

        plt.figure('nu_ei_el_tot rprof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        # ax.set_xlim(0,rs[-1,-1])
        # ax.set_xticks(np.arange(0,rs[-1,-1]+1,1))
        ax.set_xlim(0,rmax)
        ax.set_xticks(np.arange(0,np.ceil(rmax)+1,1))
        plt.axvline(x=rs[rind,0], linestyle='--',color='k')

        plt.figure('nu_ion_tot rprof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        # ax.set_xlim(0,rs[-1,-1])
        # ax.set_xticks(np.arange(0,rs[-1,-1]+1,1))
        ax.set_xlim(0,rmax)
        ax.set_xticks(np.arange(0,np.ceil(rmax)+1,1))
        plt.axvline(x=rs[rind,0], linestyle='--',color='k')

        plt.figure('ndot_e rprof')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        # ax.set_xlim(0,rs[-1,-1])
        # ax.set_xticks(np.arange(0,rs[-1,-1]+1,1))
        ax.set_xlim(0,rmax)
        ax.set_xticks(np.arange(0,np.ceil(rmax)+1,1))
        plt.axvline(x=rs[rind,0], linestyle='--',color='k')
        
    if plot_B_scan == 1:
        plt.figure(r'B scan')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        ax.set_xlim(-ang_max,ang_max)

    if plot_fields_scan == 1:
        plt.figure(r'phi scan')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        ax.set_xlim(-ang_max,ang_max)

    if plot_dens_scan == 1:
        plt.figure('n scan')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        ax.set_xlim(-ang_max,ang_max)

        plt.figure('nn scan')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        ax.set_xlim(-ang_max,ang_max)

    if plot_temp_scan == 1:
        plt.figure('Te scan')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        ax.set_xlim(-ang_max,ang_max)

        plt.figure('ratio_Ekin_Te scan')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        ax.set_xlim(-ang_max,ang_max)

    if plot_curr_scan == 1:
        plt.figure('je_t scan')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        ax.set_xlim(-ang_max,ang_max)
        
        plt.figure('je_z scan')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        ax.set_xlim(-ang_max,ang_max)
        
        plt.figure('je_r scan')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        ax.set_xlim(-ang_max,ang_max)
        
        plt.figure('je_para scan')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        ax.set_xlim(-ang_max,ang_max)
        
        plt.figure('je_perp scan')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        ax.set_xlim(-ang_max,ang_max)
        
        plt.figure('je zr scan')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        ax.set_xlim(-ang_max,ang_max)
        
        plt.figure('ji_z scan')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        ax.set_xlim(-ang_max,ang_max)
        
        plt.figure('ji_r scan')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        ax.set_xlim(-ang_max,ang_max)

        plt.figure('ji zr scan')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        ax.set_xlim(-ang_max,ang_max)
        
        plt.figure('j_z scan')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        ax.set_xlim(-ang_max,ang_max)
        
        plt.figure('j_r scan')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        ax.set_xlim(-ang_max,ang_max)

        plt.figure('j zr scan')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        ax.set_xlim(-ang_max,ang_max)

        plt.figure('je scan')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        ax.set_xlim(-ang_max,ang_max)

        plt.figure('ji scan')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        ax.set_xlim(-ang_max,ang_max)

        plt.figure('j scan')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        ax.set_xlim(-ang_max,ang_max)

    if plot_freq_scan == 1:
        plt.figure('Hall_par scan')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        ax.set_xlim(-ang_max,ang_max)

        plt.figure('Hall_par_eff scan')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        ax.set_xlim(-ang_max,ang_max)

        plt.figure('Hall_par_effect scan')
        if labels[0] != '':
            plt.legend(fontsize = font_size_legend,loc='best',frameon = True) 
        ax = plt.gca()
        ylims = ax.get_ylim()
        ax.set_ylim(ylims[0],ylims[1])
        ax.set_xlim(-ang_max,ang_max)


    if save_flag == 1:
        if plot_B_prof == 1:
            plt.figure(r'B prof')
            plt.savefig(path_out+"Bfield_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
#            plt.figure('Br prof')
#            plt.savefig(path_out+"Br_z_r"+str(rind)+figs_format,bbox_inches='tight')
#            plt.close()
#            plt.figure('Bz prof')
#            plt.savefig(path_out+"Bz_z_r"+str(rind)+figs_format,bbox_inches='tight')
#            plt.close()
            plt.figure(r'alpha prof')
            plt.savefig(path_out+"alpha_ano_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
        if plot_fields_prof == 1:
            plt.figure(r'phi prof plume')
            plt.savefig(path_out+"phi_z_r"+str(rind)+"_plume"+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure(r'phi prof')
            plt.savefig(path_out+"phi_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure(r'E prof')
            plt.savefig(path_out+"Efield_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
#            plt.figure('Er prof')
#            plt.savefig(path_out+"Er_z_r"+str(rind)+figs_format,bbox_inches='tight')
#            plt.close()
            plt.figure('Ez prof plume')
            plt.savefig(path_out+"Ez_z_r"+str(rind)+"_plume"+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('Ez prof')
            plt.savefig(path_out+"Ez_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
        if plot_dens_prof == 1:
            plt.figure('n prof plume')
            plt.savefig(path_out+"ne_z_r"+str(rind)+"_plume"+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('n prof')
            plt.savefig(path_out+"ne_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ni1 prof')
            plt.savefig(path_out+"ni1_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ni2 prof')
            plt.savefig(path_out+"ni2_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ratio_ni1_ni2 prof')
            plt.savefig(path_out+"ratio_ni1ni2_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ratio_ni1_ni3 prof')
            plt.savefig(path_out+"ratio_ni1ni3_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ratio_ni1_ni4 prof')
            plt.savefig(path_out+"ratio_ni1ni4_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ratio_ne_neCEX prof')
            plt.savefig(path_out+"ratio_neneCEX_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('nn prof')
            plt.savefig(path_out+"nn_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ratio_nn1_nn2 prof')
            plt.savefig(path_out+"ratio_nn1nn2_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ratio_nn1_nn3 prof')
            plt.savefig(path_out+"ratio_nn1nn3_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ratio_nn1_nnCEX prof')
            plt.savefig(path_out+"ratio_nn1nnCEX_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ratio_nn_nnCEX prof')
            plt.savefig(path_out+"ratio_nnnnCEX_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('all nis prof')
            plt.savefig(path_out+"all_nis_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
        if plot_temp_prof == 1:
            plt.figure('Te prof plume')
            plt.savefig(path_out+"Te_z_r"+str(rind)+"_plume"+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('Te prof')
            plt.savefig(path_out+"Te_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('Ti1 prof')
            plt.savefig(path_out+"Ti1_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('Ti2 prof')
            plt.savefig(path_out+"Ti2_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('Tn prof')
            plt.savefig(path_out+"Tn_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ratio_Ekin_Te prof')
            plt.savefig(path_out+"ratio_Ekin_Te_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ratio_Ekin_Ti1 prof')
            plt.savefig(path_out+"ratio_Ekin_Ti1_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ratio_Ekin_Ti2 prof')
            plt.savefig(path_out+"ratio_Ekin_Ti2_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('pn prof')
            plt.savefig(path_out+"pn_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
        if plot_vel_prof == 1:
            plt.figure('Mi1 prof')
            plt.savefig(path_out+"Mi1_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('Mi2 prof')
            plt.savefig(path_out+"Mi2_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('Mi prof')
            plt.savefig(path_out+"Mi_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('Mzi1 prof')
            plt.savefig(path_out+"Mi1z_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('Mzi2 prof')
            plt.savefig(path_out+"Mi2z_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('Mzi prof')
            plt.savefig(path_out+"Miz_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ui_r prof')
            plt.savefig(path_out+"ui_r_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ui_t prof')
            plt.savefig(path_out+"ui_t_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ui_z prof')    
            plt.savefig(path_out+"ui_z_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ue_r prof')
            plt.savefig(path_out+"ue_r_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ue_t prof')
            plt.savefig(path_out+"ue_t_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ue_z prof')
            plt.savefig(path_out+"ue_z_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ue_perp prof')
            plt.savefig(path_out+"ue_perp_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ue_para prof')
            plt.savefig(path_out+"ue_para_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ratio ue_t_perp prof')
            plt.savefig(path_out+"ratio_ue_t_perp_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ratio ue_t_para prof')
            plt.savefig(path_out+"ratio_ue_t_para_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ratio ue_perp_para prof')
            plt.savefig(path_out+"ratio_ue_perp_para_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
        if plot_curr_prof == 1:
            plt.figure('je_r prof')
            plt.savefig(path_out+"je_r_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('je_t prof')
            plt.savefig(path_out+"je_t_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('je_z prof')
            plt.savefig(path_out+"je_z_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('je_z prof chamber')
            plt.savefig(path_out+"je_z_z_r"+str(rind)+"_chamber"+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('je_perp prof')
            plt.savefig(path_out+"je_perp_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('je_para prof')
            plt.savefig(path_out+"je_para_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ratio je_t_perp prof')
            plt.savefig(path_out+"ratio_je_t_perp_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('Hall_je_perp prof')
            plt.savefig(path_out+"Hall_je_perp_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('Ftheta prof') 
            plt.savefig(path_out+"Ftheta_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('je prof')
            plt.savefig(path_out+"je_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ji prof')
            plt.savefig(path_out+"ji_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ji1/ji prof')
            plt.savefig(path_out+"ratio_ji1ji_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ji2/ji prof')
            plt.savefig(path_out+"ratio_ji2ji_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ji1_ji2_ji prof')
            plt.savefig(path_out+"ji1_ji2_ji_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('j prof')
            plt.savefig(path_out+"j_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ji_r prof')
            plt.savefig(path_out+"ji_r_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ji_z prof')
            plt.savefig(path_out+"ji_z_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('je zr prof')
            plt.savefig(path_out+"je2D_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ji zr prof')
            plt.savefig(path_out+"ji2D_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('j zr prof')            
            plt.savefig(path_out+"j2D_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
        if plot_nmp_prof == 1:
            plt.figure('Nmpi1 prof')
            plt.savefig(path_out+"Nmpi1_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('Nmpi2 prof')
            plt.savefig(path_out+"Nmpi2_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('Nmpn1 prof')
            plt.savefig(path_out+"Nmpn1_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
        if plot_freq_prof == 1:
            plt.figure('Hall_par prof')
            plt.savefig(path_out+"Hall_par_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('Hall_par_eff prof')
            plt.savefig(path_out+"Hall_par_eff_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('Hall_par_effect prof')
            plt.savefig(path_out+"Hall_par_effect_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('nu_e_tot prof')
            plt.savefig(path_out+"nu_e_tot_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('nu_e_tot_eff prof')
            plt.savefig(path_out+"nu_e_tot_eff_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('nu_t prof')
            plt.savefig(path_out+"nu_t_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('nu_en prof')
            plt.savefig(path_out+"nu_en_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('nu_ei1 prof')
            plt.savefig(path_out+"nu_ei1_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('nu_ei2 prof')
            plt.savefig(path_out+"nu_ei2_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('nu_i01 prof')
            plt.savefig(path_out+"nu_i01_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('nu_i02 prof')
            plt.savefig(path_out+"nu_i02_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('nu_i12 prof')
            plt.savefig(path_out+"nu_i12_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('nu_ex prof')
            plt.savefig(path_out+"nu_ex_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('nu_ei_el_tot prof')
            plt.savefig(path_out+"nu_ei_el_tot_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('nu_ion_tot prof')
            plt.savefig(path_out+"nu_ion_tot_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ratio_nu_en_nu_e_tot_eff prof')
            plt.savefig(path_out+"ratio_nu_en_nu_e_tot_eff_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ratio_nu_ion_tot_nu_e_tot_eff prof')
            plt.savefig(path_out+"ratio_nu_ion_tot_nu_e_tot_eff_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ratio_nu_ei_el_tot_nu_e_tot_eff prof')
            plt.savefig(path_out+"ratio_nu_ei_el_tot_nu_e_tot_eff_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ratio_nu_ex_nu_e_tot_eff prof')
            plt.savefig(path_out+"ratio_nu_ex_nu_e_tot_eff_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ratio_nu_e_tot_nu_e_tot_eff prof')
            plt.savefig(path_out+"ratio_nu_e_tot_nu_e_tot_eff_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ratio_nu_t_nu_e_tot_eff prof')
            plt.savefig(path_out+"ratio_nu_t_nu_e_tot_eff_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ratio_nu_e_tot_nu_t prof')
            plt.savefig(path_out+"ratio_nu_e_tot_nu_t_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ratio_nu_ei_el_tot_nu_t prof')
            plt.savefig(path_out+"ratio_nu_ei_el_tot_nu_t_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ndot_e prof')
            plt.savefig(path_out+"ndot_e_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ndot_e prof chamber')
            plt.savefig(path_out+"ndot_e_z_r"+str(rind)+"chamber"+figs_format,bbox_inches='tight')
            plt.close()
        if plot_cath_Bline_prof == 1:
            plt.figure('nodim Boltzmann cathBline prof')
            plt.savefig(path_out+"nodim_Boltz_cath_Bline"+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('dim Boltzmann cathBline prof')
            plt.savefig(path_out+"dim_Boltz_cath_Bline"+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('phi cathBline prof')
            plt.savefig(path_out+"phi_cath_Bline"+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ne term cathBline prof')
            plt.savefig(path_out+"ne_term_cath_Bline"+figs_format,bbox_inches='tight')
            plt.close() 
            plt.figure('ne rel cathBline prof')
            plt.savefig(path_out+"ne_rel_cath_Bline"+figs_format,bbox_inches='tight')
            plt.close() 
            plt.figure('Te rel cathBline prof')
            plt.savefig(path_out+"Te_rel_cath_Bline"+figs_format,bbox_inches='tight')
            plt.close() 
            plt.figure('ne cathBline prof')
            plt.savefig(path_out+"ne_cath_Bline"+figs_format,bbox_inches='tight')
            plt.close() 
            plt.figure('Te cathBline prof')
            plt.savefig(path_out+"Te_cath_Bline"+figs_format,bbox_inches='tight')
            plt.close() 
#            plt.figure('nodim Boltzmann Bline prof')
#            plt.savefig(path_out+"nodim_Boltz_Bline"+figs_format,bbox_inches='tight')
#            plt.close()
#            plt.figure('dim Boltzmann Bline prof')
#            plt.savefig(path_out+"dim_Boltz_Bline"+figs_format,bbox_inches='tight')
#            plt.close()
#            plt.figure('phi Bline prof')   
#            plt.savefig(path_out+"phi_Bline"+figs_format,bbox_inches='tight')
#            plt.close()
#            plt.figure('ne term Bline prof')
#            plt.savefig(path_out+"ne_term_Bline"+figs_format,bbox_inches='tight')
#            plt.close() 
#            plt.figure('ne rel Bline prof')
#            plt.savefig(path_out+"ne_rel_Bline"+figs_format,bbox_inches='tight')
#            plt.close() 
#            plt.figure('Te rel Bline prof')
#            plt.savefig(path_out+"Te_rel_Bline"+figs_format,bbox_inches='tight')
#            plt.close() 
#            plt.figure('ne Bline prof')
#            plt.savefig(path_out+"ne_Bline"+figs_format,bbox_inches='tight')
#            plt.close() 
#            plt.figure('Te Bline prof')
#            plt.savefig(path_out+"Te_Bline"+figs_format,bbox_inches='tight')
#            plt.close() 
        if plot_err_interp_prof == 1:
            plt.figure(r'err_interp_n prof')
            plt.savefig(path_out+"err_interp_n_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
        if plot_lambdaD_prof == 1:
            plt.figure(r'lambdaD prof')
            plt.savefig(path_out+"lambdaD_z_r"+str(rind)+figs_format,bbox_inches='tight')
            plt.close()
        
        if plot_Bline_prof == 1:
            plt.figure(r'B Bline prof')
            plt.savefig(path_out+"B_Bline"+figs_format,bbox_inches='tight')
            plt.close()     
            plt.figure(r'alphat Bline prof')
            plt.savefig(path_out+"alphat_Bline"+figs_format,bbox_inches='tight')
            plt.close()  
            plt.figure(r'phi Bline prof')
            plt.savefig(path_out+"phi_Bline"+figs_format,bbox_inches='tight')
            plt.close()  
            plt.figure(r'ne Bline prof')
            plt.savefig(path_out+"ne_Bline"+figs_format,bbox_inches='tight')
            plt.close()  
            plt.figure(r'nn Bline prof')
            plt.savefig(path_out+"nn_Bline"+figs_format,bbox_inches='tight')
            plt.close()  
            plt.figure(r'Te Bline prof')
            plt.savefig(path_out+"Te_Bline"+figs_format,bbox_inches='tight')
            plt.close()  
            plt.figure('ratio_Ekin_Te Bline prof')
            plt.savefig(path_out+"ratio_Ekin_Te_Bline"+figs_format,bbox_inches='tight')
            plt.close()  
            plt.figure('je_para Bline prof')
            plt.savefig(path_out+"je_para_Bline"+figs_format,bbox_inches='tight')
            plt.close()  
            plt.figure('Hall_par Bline prof')
            plt.savefig(path_out+"Hall_par_Bline"+figs_format,bbox_inches='tight')
            plt.close()  
            plt.figure('Hall_par_eff Bline prof')
            plt.savefig(path_out+"Hall_par_eff_Bline"+figs_format,bbox_inches='tight')
            plt.close()  
            plt.figure('Hall_par_effect Bline prof')
            plt.savefig(path_out+"Hall_par_effect_Bline"+figs_format,bbox_inches='tight')
            plt.close()  
            plt.figure('felec_para Bline prof')
            plt.savefig(path_out+"felec_para_Bline"+figs_format,bbox_inches='tight')
            plt.close()  
        if plot_fields_rprof == 1:
            plt.figure(r'phi rprof')
            plt.savefig(path_out+"phi_r_z"+str(zind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure(r'E rprof')
            plt.savefig(path_out+"Efield_r_z"+str(zind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('Er rprof')
            plt.savefig(path_out+"Er_r_z"+str(zind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('Ez rprof')
            plt.savefig(path_out+"Ez_r_z"+str(zind)+figs_format,bbox_inches='tight')
            plt.close()
        if plot_dens_rprof == 1:
            plt.figure('n rprof')
            plt.savefig(path_out+"ne_r_z"+str(zind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ni1 rprof')
            plt.savefig(path_out+"ni1_r_z"+str(zind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ni2 rprof')
            plt.savefig(path_out+"ni2_r_z"+str(zind)+figs_format,bbox_inches='tight')
            plt.close()        
            plt.figure('ratio_ni1_ni2 rprof')
            plt.savefig(path_out+"ratio_ni1ni2_r_z"+str(zind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ratio_ni1_ni3 rprof')
            plt.savefig(path_out+"ratio_ni1ni3_r_z"+str(zind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ratio_ni1_ni4 rprof')
            plt.savefig(path_out+"ratio_ni1ni4_r_z"+str(zind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ratio_ne_neCEX rprof')
            plt.savefig(path_out+"ratio_neneCEX_r_z"+str(zind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('nn rprof')
            plt.savefig(path_out+"nn_r_z"+str(zind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ratio_nn1_nn2 rprof')
            plt.savefig(path_out+"ratio_nn1nn2_r_z"+str(zind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ratio_nn1_nn3 rprof')
            plt.savefig(path_out+"ratio_nn1nn3_r_z"+str(zind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ratio_nn1_nnCEX rprof')
            plt.savefig(path_out+"ratio_nn1nnCEX_r_z"+str(zind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ratio_nn_nnCEX rprof')
            plt.savefig(path_out+"ratio_nnnnCEX_r_z"+str(zind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('all nis rprof')
            plt.savefig(path_out+"all_nis_r_z"+str(zind)+figs_format,bbox_inches='tight')
            plt.close()
        if plot_temp_rprof == 1:
            plt.figure('Te rprof')
            plt.savefig(path_out+"Te_r_z"+str(zind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('Ti1 rprof')
            plt.savefig(path_out+"Ti1_r_z"+str(zind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('Ti2 rprof')
            plt.savefig(path_out+"Ti2_r_z"+str(zind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('Tn rprof')
            plt.savefig(path_out+"Tn_r_z"+str(zind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ratio_Ekin_Te rprof')
            plt.savefig(path_out+"ratio_Ekin_Te_r_z"+str(zind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ratio_Ekin_Ti1 rprof')
            plt.savefig(path_out+"ratio_Ekin_Ti1_r_z"+str(zind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ratio_Ekin_Ti2 rprof')
            plt.savefig(path_out+"ratio_Ekin_Ti2_r_z"+str(zind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('pn rprof')
            plt.savefig(path_out+"pn_r_z"+str(zind)+figs_format,bbox_inches='tight')
            plt.close()
        if plot_curr_rprof == 1:
            plt.figure('je_r rprof')
            plt.savefig(path_out+"je_r_r_z"+str(zind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('je_t rprof')
            plt.savefig(path_out+"je_t_r_z"+str(zind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('je_z rprof')
            plt.savefig(path_out+"je_z_r_z"+str(zind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('je_perp rprof')
            plt.savefig(path_out+"je_perp_r_z"+str(zind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('je_para rprof')
            plt.savefig(path_out+"je_para_r_z"+str(zind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ratio je_t_perp rprof')
            plt.savefig(path_out+"ratio_je_t_perp_r_z"+str(zind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('Hall_je_perp rprof')
            plt.savefig(path_out+"Hall_je_perp_r_z"+str(zind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('Ftheta rprof')
            plt.savefig(path_out+"Ftheta_r_z"+str(zind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('je rprof')
            plt.savefig(path_out+"je_r_z"+str(zind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ji rprof')
            plt.savefig(path_out+"ji_r_z"+str(zind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ji1/ji rprof')
            plt.savefig(path_out+"ratio_ji1ji_r_z"+str(zind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ji2/ji rprof')
            plt.savefig(path_out+"ratio_ji2ji_r_z"+str(zind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ji1_ji2_ji rprof')
            plt.savefig(path_out+"ji1_ji2_ji_r_z"+str(zind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('j rprof')
            plt.savefig(path_out+"j_r_z"+str(zind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ji_r rprof')
            plt.savefig(path_out+"ji_r_r_z"+str(zind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ji_z rprof')
            plt.savefig(path_out+"ji_z_r_z"+str(zind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('je zr rprof')
            plt.savefig(path_out+"je2D_r_z"+str(zind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ji zr rprof')
            plt.savefig(path_out+"ji2D_r_z"+str(zind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('j zr rprof')
            plt.savefig(path_out+"j2D_r_z"+str(zind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('j_z rprof')
            plt.savefig(path_out+"j_z_r_z"+str(zind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('j_r rprof')
            plt.savefig(path_out+"j_r_r_z"+str(zind)+figs_format,bbox_inches='tight')
            plt.close()
        if plot_freq_rprof == 1:
            plt.figure('Hall_par rprof')
            plt.savefig(path_out+"Hall_par_r_z"+str(zind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('Hall_par_eff rprof')
            plt.savefig(path_out+"Hall_par_eff_r_z"+str(zind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('Hall_par_effect rprof')
            plt.savefig(path_out+"Hall_par_effect_r_z"+str(zind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('nu_e_tot rprof')
            plt.savefig(path_out+"nu_e_tot_r_z"+str(zind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('nu_e_tot_eff rprof')
            plt.savefig(path_out+"nu_e_tot_eff_r_z"+str(zind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('nu_en rprof')
            plt.savefig(path_out+"nu_en_r_z"+str(zind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('nu_ei1 rprof')
            plt.savefig(path_out+"nu_ei1_r_z"+str(zind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('nu_ei2 rprof')
            plt.savefig(path_out+"nu_ei2_r_z"+str(zind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('nu_i01 rprof')
            plt.savefig(path_out+"nu_i01_r_z"+str(zind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('nu_i02 rprof')
            plt.savefig(path_out+"nu_i02_r_z"+str(zind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('nu_i12 rprof')
            plt.savefig(path_out+"nu_i12_r_z"+str(zind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('nu_ei_el_tot rprof')
            plt.savefig(path_out+"nu_ei_el_tot_r_z"+str(zind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('nu_ion_tot rprof')
            plt.savefig(path_out+"nu_ion_tot_r_z"+str(zind)+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ndot_e rprof')
            plt.savefig(path_out+"ndot_e_r_z"+str(zind)+figs_format,bbox_inches='tight')
            plt.close()
            
        if plot_B_scan == 1:
            plt.figure(r'B scan')
            plt.savefig(path_out+"Bfield_scan"+str(int(rscan))+figs_format,bbox_inches='tight')
            plt.close()
        if plot_fields_scan == 1:
            plt.figure(r'phi scan')
            plt.savefig(path_out+"phi_scan"+str(int(rscan))+figs_format,bbox_inches='tight')
            plt.close()
        if plot_dens_scan == 1:
            plt.figure('n scan')
            plt.savefig(path_out+"ne_scan"+str(int(rscan))+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('nn scan')
            plt.savefig(path_out+"nn_scan"+str(int(rscan))+figs_format,bbox_inches='tight')
            plt.close()
        if plot_temp_scan == 1:
            plt.figure('Te scan')
            plt.savefig(path_out+"Te_scan"+str(int(rscan))+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ratio_Ekin_Te scan')
            plt.savefig(path_out+"ratio_Ekin_Te_scan"+str(int(rscan))+figs_format,bbox_inches='tight')
            plt.close()
        if plot_curr_scan == 1:
            plt.figure('je_t scan')
            plt.savefig(path_out+"je_t_scan"+str(int(rscan))+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('je_z scan')
            plt.savefig(path_out+"je_z_scan"+str(int(rscan))+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('je_r scan')
            plt.savefig(path_out+"je_r_scan"+str(int(rscan))+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('je_para scan')
            plt.savefig(path_out+"je_para_scan"+str(int(rscan))+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('je_perp scan')
            plt.savefig(path_out+"je_perp_scan"+str(int(rscan))+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('je zr scan')
            plt.savefig(path_out+"je2D_scan"+str(int(rscan))+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ji_z scan')
            plt.savefig(path_out+"ji_z_scan"+str(int(rscan))+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ji_r scan')
            plt.savefig(path_out+"ji_r_scan"+str(int(rscan))+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ji zr scan')
            plt.savefig(path_out+"ji2D_scan"+str(int(rscan))+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('j_z scan')
            plt.savefig(path_out+"j_z_scan"+str(int(rscan))+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('j_r scan')
            plt.savefig(path_out+"j_r_scan"+str(int(rscan))+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('j zr scan')
            plt.savefig(path_out+"j2D_scan"+str(int(rscan))+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('je scan')
            plt.savefig(path_out+"je_scan"+str(int(rscan))+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('ji scan')
            plt.savefig(path_out+"ji_scan"+str(int(rscan))+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('j scan')
            plt.savefig(path_out+"j_scan"+str(int(rscan))+figs_format,bbox_inches='tight')
            plt.close()
        if plot_freq_scan == 1:
            plt.figure('Hall_par scan')
            plt.savefig(path_out+"Hall_par_scan"+str(int(rscan))+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('Hall_par_eff scan')
            plt.savefig(path_out+"Hall_par_eff_scan"+str(int(rscan))+figs_format,bbox_inches='tight')
            plt.close()
            plt.figure('Hall_par_effect scan')
            plt.savefig(path_out+"Hall_par_effect_scan"+str(int(rscan))+figs_format,bbox_inches='tight')
            plt.close()




    ###########################################################################
        
        

if cont_plots == 1:
    print("######## cont_plots ########")
    
    # Common reference potential PIC mesh node Python indeces
    phi_ref  = 1
    iphi_ref = 17
    jphi_ref = 28
    
    # Print out time step
    timestep = 'last'
#    timestep = 62
    allsteps_flag   = 1
    read_inst_data  = 0
    read_part_lists = 0
    read_flag       = 1
    
    mean_vars       = 1
    mean_type       = 0
    last_steps      = 250
    step_i          = 230
    step_f          = 330
    plot_mean_vars  = 1
    
    
    plot_fields = 0
    plot_dens   = 1
    plot_temp   = 0
    plot_vel    = 0
    plot_curr   = 0
    plot_nmp    = 0
    plot_freq   = 0

    if timestep == 'last':
        timestep = -1  
    if allsteps_flag == 0:
        mean_vars = 0

    
    # Simulation names
    nsims = 3                 
    sim_names = ["../../Rb_hyphen/sim/sims/SPT100_al0075_Ne5_C1",
                 "../../Rb_hyphen/sim/sims/SPT100_al0075_Ne5_C2",
                 "../../Rb_hyphen/sim/sims/SPT100_al0075_Ne5_CID878"]
                 
#    sim_names = ["../../Rb_hyphen/sim/sims/SPT100_al005_Ne5_C1",
#                 "../../Rb_hyphen/sim/sims/SPT100_al005_Ne5_C2",
#                 "../../Rb_hyphen/sim/sims/SPT100_al005_Ne5_CID878",
#                 "../../Rb_hyphen/sim/sims/SPT100_al0075_Ne5_C1",
#                 "../../Rb_hyphen/sim/sims/SPT100_al0075_Ne5_C2",
#                 "../../Rb_hyphen/sim/sims/SPT100_al0075_Ne5_CID878"]

    # Labels   

#    labels = [r"$\alpha_{a}$ = 7.5\%, VC 449",
#              r"$\alpha_{a}$ = 7.5\%, VC 481",
#              r"$\alpha_{a}$ = 7.5\%, VC 878"]
              
    labels = [r"$\alpha_{a}$ = 5\%, C1",
              r"$\alpha_{a}$ = 5\%, C2",
              r"$\alpha_{a}$ = 5\%, VC 878",
              r"$\alpha_{a}$ = 7.5\%, C1",
              r"$\alpha_{a}$ = 7.5\%, C2",
              r"$\alpha_{a}$ = 7.5\%, VC 878"]
              
    # Line colors
    colors = ['r','g','b','k','c','m','y']
    # Markers
    markers = ['o','s','^', 'v', '<', '>','*']
    # Line style
    linestyles = ['-','--','-.', ':','-','--','-.']
              
          
    # Isolines plots
    if plot_fields == 1:
        plt.figure('phi isolines')
        plt.title(r"(a) $\phi$ (V)", fontsize = font_size,y=1.02)
        plt.figure('E isolines')
        plt.title(r"(b) $|\boldsymbol{E}|$ (10$^{3}$ Vm$^{-1}$)", fontsize = font_size,y=1.02)
        plt.figure('Er isolines')
        plt.title(r"(c) $\boldsymbol{E}_r$ (10$^{3}$ Vm$^{-1}$)", fontsize = font_size,y=1.02)
        plt.figure('Ez isolines')
        plt.title(r"(d) $\boldsymbol{E}_z$ (10$^{3}$ Vm$^{-1}$)", fontsize = font_size,y=1.02)
    if plot_dens == 1:
        plt.figure('n isolines')
        plt.title(r"(e) $n_e$ (m$^{-3}$)", fontsize = font_size,y=1.02)
        plt.figure('ni1 isolines')
        plt.title(r"(f) $n_{i1}$ (m$^{-3}$)", fontsize = font_size,y=1.02)
        plt.figure('ni2 isolines')
        plt.title(r"(g) $n_{i2}$ (m$^{-3}$)", fontsize = font_size,y=1.02)
        plt.figure('ratio_ni1_ni2 isolines')
        plt.title(r"(h) $n_{i1}/n_{i2}$ (-)", fontsize = font_size,y=1.02)
        plt.figure('nn isolines')
        plt.title(r"(i) $n_{n}$ (m$^{-3}$)", fontsize = font_size,y=1.02)
    if plot_temp == 1:
        plt.figure('Te isolines')
        plt.title(r"(j) $T_{e}$ (eV)", fontsize = font_size,y=1.02)
        plt.figure('Ti1 isolines')
        plt.title(r"(k) $T_{i1}$ (eV)", fontsize = font_size,y=1.02)
        plt.figure('Ti2 isolines')
        plt.title(r"(k) $T_{i2}$ (eV)", fontsize = font_size,y=1.02)
        plt.figure('Tn isolines')
        plt.title(r"(k) $T_{n}$ (eV)", fontsize = font_size,y=1.02)
        plt.figure('ratio_Ekin_Te isolines')
        plt.title(r"(q) $E_{kin,e}/T_e$ (-)", fontsize = font_size,y=1.02)
        plt.figure('ratio_Ekin_Ti1 isolines')
        plt.title(r"(q) $E_{kin,i1}/T_{i1}$ (-)", fontsize = font_size,y=1.02)
        plt.figure('ratio_Ekin_Ti2 isolines')
        plt.title(r"(q) $E_{kin,i2}/T_{i2}$ (-)", fontsize = font_size,y=1.02)
    if plot_vel == 1:
        plt.figure('Mi1 isolines')
        plt.title(r"(l) $M_i1$ (-)", fontsize = font_size,y=1.02)
        plt.figure('Mi2 isolines')
        plt.title(r"(l) $M_i2$ (-)", fontsize = font_size,y=1.02)
        plt.figure('ue_r isolines')
        plt.title(r"(l) $u_{re}$ (ms$^{-1}$)", fontsize = font_size,y=1.02)
        plt.figure('ue_t isolines')
        plt.title(r"(l) $u_{\theta e}$ (ms$^{-1}$)", fontsize = font_size,y=1.02)
        plt.figure('ue_z isolines')
        plt.title(r"(l) $u_{z e}$ (ms$^{-1}$)", fontsize = font_size,y=1.02)
        plt.figure('ue_perp isolines')
        plt.title(r"(l) $u_{\bot e}$ (ms$^{-1}$)", fontsize = font_size,y=1.02)
        plt.figure('ue_para isolines')
        plt.title(r"(l) $u_{\parallel e}$ (ms$^{-1}$)", fontsize = font_size,y=1.02)
        plt.figure('ratio ue_t_perp isolines')
        plt.title(r"(l) $u_{\theta e}/u_{\bot e}$ (-)", fontsize = font_size,y=1.02)
        plt.figure('ratio ue_t_para isolines')
        plt.title(r"(l) $u_{\theta e}/u_{\parallel e}$ (-)", fontsize = font_size,y=1.02)
        plt.figure('ratio ue_perp_para isolines')
        plt.title(r"(l) $u_{\bot}/u_{\parallel e}$ (-)", fontsize = font_size,y=1.02)
    if plot_curr == 1:
        plt.figure('je_r isolines')
        plt.title(r"(l) $-j_{re}$ (Am$^{-2}$)", fontsize = font_size,y=1.02)
        plt.figure('je_t isolines')
        plt.title(r"(l) $-j_{\theta e}$ (Am$^{-2}$)", fontsize = font_size,y=1.02)
        plt.figure('je_z isolines')
        plt.title(r"(l) $-j_{z e}$ (Am$^{-2}$)", fontsize = font_size,y=1.02)
        plt.figure('je_perp isolines')
        plt.title(r"(l) $-j_{\bot e}$ (Am$^{-2}$)", fontsize = font_size,y=1.02)
        plt.figure('je_para isolines')
        plt.title(r"(l) $-j_{\parallel e}$ (Am$^{-2}$)", fontsize = font_size,y=1.02)
        plt.figure('je isolines')
        plt.title(r"(l) $|\boldsymbol{j}_{e}|$ (Am$^{-2}$)", fontsize = font_size,y=1.02)
        plt.figure('ji isolines')
        plt.title(r"(l) $|\boldsymbol{j}_{i}|$ (Am$^{-2}$)", fontsize = font_size,y=1.02)
        plt.figure('j isolines')
        plt.title(r"(l) $|\boldsymbol{j}|$ (Am$^{-2}$)", fontsize = font_size,y=1.02)
    if plot_nmp == 1:
        plt.figure('Nmpi1 isolines')
        plt.title(r"(p) $N_{mp,i1}$ (-)", fontsize = font_size,y=1.02)
        plt.figure('Nmpi2 isolines')
        plt.title(r"(p) $N_{mp,i2}$ (-)", fontsize = font_size,y=1.02)
        plt.figure('Nmpn1 isolines')
        plt.title(r"(p) $N_{mp,n}$ (-)", fontsize = font_size,y=1.02)
    if plot_freq == 1:
        plt.figure('Hall_par isolines')
        plt.title(r"(p) $\chi$ (-)", fontsize = font_size,y=1.02)
        plt.figure('Hall_par_eff isolines')
        plt.title(r"(p) $\chi^{\ast}$ (-)", fontsize = font_size,y=1.02)
        plt.figure('nu_e_tot isolines')
        plt.title(r"(p) $\nu_{e}$ (MHz)", fontsize = font_size,y=1.02)
        plt.figure('nu_e_tot_eff isolines')
        plt.title(r"(p) $\nu_{e}^{\ast}$ (MHz)", fontsize = font_size,y=1.02)
        plt.figure('nu_en isolines')
        plt.title(r"(p) $\nu_{en}$ (MHz)", fontsize = font_size,y=1.02)
        plt.figure('nu_ei1 isolines')
        plt.title(r"(p) $\nu_{ei1}$ (MHz)", fontsize = font_size,y=1.02)
        plt.figure('nu_ei2 isolines')
        plt.title(r"(p) $\nu_{ei2}$ (MHz)", fontsize = font_size,y=1.02)
        plt.figure('nu_i01 isolines')
        plt.title(r"(p) $\nu_{i01}$ (MHz)", fontsize = font_size,y=1.02)
        plt.figure('nu_i02 isolines')
        plt.title(r"(p) $\nu_{i02}$ (MHz)", fontsize = font_size,y=1.02)
        plt.figure('nu_i12 isolines')
        plt.title(r"(p) $\nu_{i12}$ (MHz)", fontsize = font_size,y=1.02)
        

        
        
    for k in range(0,nsims):
        ind_ini_letter = sim_names[k].rfind('/') + 1
        print("##### CASE "+str(k+1)+": "+sim_names[k][ind_ini_letter::]+" #####")
        ######################## READ INPUT/OUTPUT FILES ##########################
        # Obtain paths to simulation files
        path_picM         = sim_names[k]+"/SET/inp/SPT100_picM.hdf5"
        path_simstate_inp = sim_names[k]+"/CORE/inp/SimState.hdf5"
        path_simstate_out = sim_names[k]+"/CORE/out/SimState.hdf5"
        path_postdata_out = sim_names[k]+"/CORE/out/PostData.hdf5"
        path_simparams_inp = sim_names[k]+"/CORE/inp/sim_params.inp"
        print("Reading results...")
        [num_ion_spe,num_neu_spe,n_mp_cell_i,n_mp_cell_n,n_mp_cell_i_min,
           n_mp_cell_i_max,n_mp_cell_n_min,n_mp_cell_n_max,min_ion_plasma_density,
           m_A,spec_refl_prob,ene_bal,points,zs,rs,zscells,rscells,dims,
           nodes_flag,cells_flag,cells_vol,volume,vol,ind_maxr_c,ind_maxz_c,nr_c,nz_c,
           eta_max,eta_min,xi_top,xi_bottom,time,time_fast,steps,steps_fast,dt,dt_e,
           nsteps,nsteps_fast,nsteps_eFld,faces,nodes,elem_n,boundary_f,face_geom,elem_geom,
           n_faces,n_elems,n_faces_boundary,bIDfaces_Dwall,bIDfaces_Awall,
           bIDfaces_FLwall,IDfaces_Dwall,IDfaces_Awall,IDfaces_FLwall,zfaces_Dwall,
           rfaces_Dwall,Afaces_Dwall,zfaces_Awall,rfaces_Awall,Afaces_Awall,
           zfaces_FLwall,rfaces_FLwall,Afaces_FLwall,
           cath_elem,z_cath,r_cath,V_cath,mass,ssIons1,ssIons2,ssNeutrals1,ssNeutrals2,
           n_mp_i1_list,n_mp_i2_list,n_mp_n1_list,n_mp_n2_list,phi,phi_elems,Ez,Er,Efield,
           Bz,Br,Bfield,Te,Te_elems,je_mag_elems,je_perp_elems,je_theta_elems,je_para_elems,
           cs01,cs02,nn1,nn2,ni1,ni2,ne,ne_elems,fn1_x,fn1_y,
           fn1_z,fn2_x,fn2_y,fn2_z,fi1_x,fi1_y,fi1_z,fi2_x,fi2_y,fi2_z,un1_x,un1_y,un1_z,
           un2_x,un2_y,un2_z,ui1_x,ui1_y,ui1_z,ui2_x,ui2_y,ui2_z,ji1_x,ji1_y,
           ji1_z,ji2_x,ji2_y,ji2_z,je_r,je_t,je_z,je_perp,je_para,ue_r,ue_t,ue_z,
           ue_perp,ue_para,uthetaExB,Tn1,Tn2,Ti1,Ti2,n_mp_n1,n_mp_n2,n_mp_i1,n_mp_i2,
           avg_w_n1,avg_w_n2,avg_w_i1,avg_w_i2,neu_gen_weights1,neu_gen_weights2,
           ion_gen_weights1,ion_gen_weights2,surf_elems,n_imp_elems,imp_elems,
           imp_elems_kbc,imp_elems_MkQ1,imp_elems_Te,imp_elems_dphi_kbc,
           imp_elems_dphi_sh,imp_elems_nQ1,imp_elems_nQ2,imp_elems_ion_flux_in1,
           imp_elems_ion_flux_out1,imp_elems_ion_ene_flux_in1,
           imp_elems_ion_ene_flux_out1,imp_elems_ion_imp_ene1,
           imp_elems_ion_flux_in2,imp_elems_ion_flux_out2,
           imp_elems_ion_ene_flux_in2,imp_elems_ion_ene_flux_out2,
           imp_elems_ion_imp_ene2,imp_elems_neu_flux_in1,imp_elems_neu_flux_out1,
           imp_elems_neu_ene_flux_in1,imp_elems_neu_ene_flux_out1,
           imp_elems_neu_imp_ene1,imp_elems_neu_flux_in2,imp_elems_neu_flux_out2,
           imp_elems_neu_ene_flux_in2,imp_elems_neu_ene_flux_out2,
           imp_elems_neu_imp_ene2,tot_mass_mp_neus,tot_mass_mp_ions,tot_num_mp_neus,
           tot_num_mp_ions,tot_mass_exit_neus,tot_mass_exit_ions,mass_mp_neus,
           mass_mp_ions,num_mp_neus,num_mp_ions,avg_dens_mp_neus,avg_dens_mp_ions,
           eta_u,eta_prod,eta_thr,eta_div,eta_cur,thrust,thrust_ion,thrust_neu,thrust_e,
           Id_inst,Id,Vd_inst,Vd,I_beam,I_tw_tot,Pd,Pd_inst,P_mat,P_inj,P_inf,P_ion,
           P_ex,P_use_tot_i,P_use_tot_n,P_use_tot,P_use_z_i,P_use_z_n,P_use_z,
           qe_wall,qe_wall_inst,Pe_faces_Dwall,Pe_faces_Awall,Pe_faces_FLwall,
           Pe_faces_Dwall_inst,Pe_faces_Awall_inst,Pe_faces_FLwall_inst,
           Pe_Dwall,Pe_Awall,Pe_FLwall,Pe_Dwall_inst,Pe_Awall_inst,Pe_FLwall_inst, 
           Pi_Dwall,Pi_Awall,Pi_FLwall,Pi_FLwall_nonz,Pn_Dwall,Pn_Awall,Pn_FLwall,
           Pn_FLwall_nonz,P_Dwall,P_Awall,P_FLwall,Pwalls,Pionex,Ploss,Pthrust,
           Pnothrust,Pnothrust_walls,balP,err_balP,ctr_Pd,ctr_Ploss,ctr_Pwalls,
           ctr_Pionex,ctr_P_DAwalls,ctr_P_FLwalls,ctr_P_FLwalls_in,ctr_P_FLwalls_i,
           ctr_P_FLwalls_n,ctr_P_FLwalls_e,balP_Pthrust,err_balP_Pthrust,
           ctr_balPthrust_Pd,ctr_balPthrust_Pnothrust,ctr_balPthrust_Pthrust,
           ctr_balPthrust_Pnothrust_walls,ctr_balPthrust_Pnothrust_ionex,
           err_def_balP,Isp_s,Isp_ms,dMdt_i1,dMdt_i2,dMdt_n1,dMdt_n2,dMdt_tot,
           mflow_coll_i1,mflow_coll_i2,mflow_coll_n1,mflow_coll_n2,mflow_fw_i1,
           mflow_fw_i2,mflow_fw_n1,mflow_fw_n2,mflow_tw_i1,mflow_tw_i2,mflow_tw_n1,
           mflow_tw_n2,mflow_ircmb_picS_n1,mflow_ircmb_picS_n2,mflow_inj_i1,mflow_inj_i2,
           mflow_fwmat_i1,mflow_fwmat_i2,mflow_inj_n1,mflow_fwmat_n1,mflow_inj_n2,
           mflow_fwmat_n2,mflow_twmat_i1,mflow_twinf_i1,mflow_twa_i1,mflow_twmat_i2,
           mflow_twinf_i2,mflow_twa_i2,mflow_twmat_n1,mflow_twinf_n1,mflow_twa_n1,
           mflow_twmat_n2,mflow_twinf_n2,mflow_twa_n2,mbal_n1,mbal_i1,mbal_i2,mbal_tot,
           err_mbal_n1,err_mbal_i1,err_mbal_i2,err_mbal_tot,ctr_mflow_coll_n1,
           ctr_mflow_fw_n1,ctr_mflow_tw_n1,ctr_mflow_coll_i1,ctr_mflow_fw_i1,
           ctr_mflow_tw_i1,ctr_mflow_coll_i2,ctr_mflow_fw_i2,ctr_mflow_tw_i2,
           ctr_mflow_coll_tot,ctr_mflow_fw_tot,ctr_mflow_tw_tot,dEdt_i1,dEdt_i2,
           dEdt_n1,dEdt_n2,eneflow_coll_i1,eneflow_coll_i2,eneflow_coll_n1,
           eneflow_coll_n2,eneflow_fw_i1,eneflow_fw_i2,eneflow_fw_n1,eneflow_fw_n2,
           eneflow_tw_i1,eneflow_tw_i2,eneflow_tw_n1,eneflow_tw_n2,Pfield_i1,
           Pfield_i2,eneflow_inj_i1,eneflow_fwmat_i1,eneflow_inj_i2,
           eneflow_fwmat_i2,eneflow_inj_n1,eneflow_fwmat_n1,eneflow_inj_n2,
           eneflow_fwmat_n2,eneflow_twmat_i1,eneflow_twinf_i1,eneflow_twa_i1,
           eneflow_twmat_i2,eneflow_twinf_i2,eneflow_twa_i2,eneflow_twmat_n1,
           eneflow_twinf_n1,eneflow_twa_n1,eneflow_twmat_n2,eneflow_twinf_n2,
           eneflow_twa_n2,ndot_ion01_n1,ndot_ion02_n1,ndot_ion12_i1,cath_type,ne_cath,Te_cath,
           nu_cath,ndot_cath,Q_cath,P_cath,V_cath_tot,ne_cath_avg,F_theta,Hall_par,
           Hall_par_eff,nu_e_tot,nu_e_tot_eff,nu_en,nu_ei1,nu_ei2,nu_i01,nu_i02,nu_i12,
           nu_ex,Boltz,Boltz_dim,Pfield_e,Ebal_e,ge_b,ge_b_acc,ge_sb_b,ge_sb_b_acc,
           delta_see,delta_see_acc,err_interp_n] = HET_sims_read(path_simstate_inp,path_simstate_out,
                                                                                           path_postdata_out,path_simparams_inp,
                                                                                           path_picM,allsteps_flag,timestep,read_inst_data,
                                                                                           read_part_lists,read_flag)
        print("Generating plotting variables (NaN in ghost nodes)...")                                                                                                      
        [Br,Bz,Bfield,phi,Er,Ez,Efield,nn1,nn2,ni1,ni2,ne,fn1_x,fn1_y,fn1_z,
           fn2_x,fn2_y,fn2_z,fi1_x,fi1_y,fi1_z,fi2_x,fi2_y,fi2_z,un1_x,un1_y,un1_z,
           un2_x,un2_y,un2_z,ui1_x,ui1_y,ui1_z,ui2_x,ui2_y,ui2_z,ji1_x,ji1_y,ji1_z,
           ji2_x,ji2_y,ji2_z,je_r,je_t,je_z,je_perp,je_para,ue_r,ue_t,ue_z,ue_perp,
           ue_para,uthetaExB,Tn1,Tn2,Ti1,Ti2,Te,n_mp_n1,n_mp_n2,n_mp_i1,n_mp_i2,avg_w_n1,
           avg_w_n2,avg_w_i1,avg_w_i2,neu_gen_weights1,neu_gen_weights2,
           ion_gen_weights1,ion_gen_weights2,ndot_ion01_n1,ndot_ion02_n1,ndot_ion12_i1,
           F_theta,Hall_par,Hall_par_eff,nu_e_tot,nu_e_tot_eff,nu_en,nu_ei1,nu_ei2,nu_i01,nu_i02,nu_i12] = HET_sims_plotvars(nodes_flag,cells_flag,Br,Bz,Bfield,phi,Er,Ez,Efield,nn1,nn2,ni1,ni2,ne,
                                                                                                                             fn1_x,fn1_y,fn1_z,fn2_x,fn2_y,fn2_z,fi1_x,fi1_y,fi1_z,fi2_x,fi2_y,fi2_z,
                                                                                                                             un1_x,un1_y,un1_z,un2_x,un2_y,un2_z,ui1_x,ui1_y,ui1_z,ui2_x,ui2_y,ui2_z,
                                                                                                                             ji1_x,ji1_y,ji1_z,ji2_x,ji2_y,ji2_z,je_r,je_t,je_z,je_perp,je_para,
                                                                                                                             ue_r,ue_t,ue_z,ue_perp,ue_para,uthetaExB,Tn1,Tn2,Ti1,Ti2,Te,
                                                                                                                             n_mp_n1,n_mp_n2,n_mp_i1,n_mp_i2,avg_w_n1,avg_w_n2,avg_w_i1,avg_w_i2,
                                                                                                                             neu_gen_weights1,neu_gen_weights2,ion_gen_weights1,ion_gen_weights2,
                                                                                                                             ndot_ion01_n1,ndot_ion02_n1,ndot_ion12_i1,F_theta,Hall_par,Hall_par_eff,
                                                                                                                             nu_e_tot,nu_e_tot_eff,nu_en,nu_ei1,nu_ei2,nu_i01,nu_i02,nu_i12)
        if mean_vars == 1:        
            print("Averaging variables...")                                                                              
            [phi_mean,Er_mean,Ez_mean,Efield_mean,nn1_mean,nn2_mean,
               ni1_mean,ni2_mean,ne_mean,fn1_x_mean,fn1_y_mean,fn1_z_mean,
               fn2_x_mean,fn2_y_mean,fn2_z_mean,fi1_x_mean,fi1_y_mean,fi1_z_mean,
               fi2_x_mean,fi2_y_mean,fi2_z_mean,un1_x_mean,un1_y_mean,un1_z_mean,
               un2_x_mean,un2_y_mean,un2_z_mean,ui1_x_mean,ui1_y_mean,ui1_z_mean,
               ui2_x_mean,ui2_y_mean,ui2_z_mean,ji1_x_mean,ji1_y_mean,ji1_z_mean,
               ji2_x_mean,ji2_y_mean,ji2_z_mean,je_r_mean,je_t_mean,je_z_mean,
               je_perp_mean,je_para_mean,ue_r_mean,ue_t_mean,ue_z_mean,ue_perp_mean,
               ue_para_mean,uthetaExB_mean,Tn1_mean,Tn2_mean,Ti1_mean,Ti2_mean,Te_mean,
               n_mp_n1_mean,n_mp_n2_mean,n_mp_i1_mean,n_mp_i2_mean,avg_w_n1_mean,
               avg_w_n2_mean,avg_w_i1_mean,avg_w_i2_mean,neu_gen_weights1_mean,
               neu_gen_weights2_mean,ion_gen_weights1_mean,ion_gen_weights2_mean,
               ndot_ion01_n1_mean,ndot_ion02_n1_mean,ndot_ion12_i1_mean,
               ne_cath_mean,nu_cath_mean,ndot_cath_mean,F_theta_mean,Hall_par_mean,
               Hall_par_eff_mean,nu_e_tot_mean,nu_e_tot_eff_mean,nu_en_mean,
               nu_ei1_mean,nu_ei2_mean,nu_i01_mean,nu_i02_mean,nu_i12_mean] = HET_sims_mean(nsteps,mean_type,last_steps,step_i,step_f,phi,Er,Ez,Efield,Br,Bz,Bfield,
                                                                                            nn1,nn2,ni1,ni2,ne,fn1_x,fn1_y,fn1_z,fn2_x,fn2_y,fn2_z,fi1_x,fi1_y,fi1_z,
                                                                                            fi2_x,fi2_y,fi2_z,un1_x,un1_y,un1_z,un2_x,un2_y,un2_z,ui1_x,ui1_y,ui1_z,
                                                                                            ui2_x,ui2_y,ui2_z,ji1_x,ji1_y,ji1_z,ji2_x,ji2_y,ji2_z,je_r,je_t,je_z,
                                                                                            je_perp,je_para,ue_r,ue_t,ue_z,ue_perp,ue_para,uthetaExB,Tn1,Tn2,Ti1,Ti2,Te,
                                                                                            n_mp_n1,n_mp_n2,n_mp_i1,n_mp_i2,avg_w_n1,avg_w_n2,avg_w_i1,avg_w_i2,
                                                                                            neu_gen_weights1,neu_gen_weights2,ion_gen_weights1,ion_gen_weights2,
                                                                                            ndot_ion01_n1,ndot_ion02_n1,ndot_ion12_i1,ne_cath,nu_cath,ndot_cath,F_theta,
                                                                                            Hall_par,Hall_par_eff,nu_e_tot,nu_e_tot_eff,nu_en,nu_ei1,nu_ei2,nu_i01,
                                                                                            nu_i02,nu_i12)
        print("Obtaining final variables for plotting...") 
        if mean_vars == 1 and plot_mean_vars == 1:
            print("Plotting variables are time-averaged")
            [Br_plot,Bz_plot,Bfield_plot,phi_plot,Er_plot,Ez_plot,Efield_plot,
               nn1_plot,nn2_plot,ni1_plot,ni2_plot,ne_plot,
               fn1_x_plot,fn1_y_plot,fn1_z_plot,fn2_x_plot,fn2_y_plot,fn2_z_plot,
               fi1_x_plot,fi1_y_plot,fi1_z_plot,fi2_x_plot,fi2_y_plot,fi2_z_plot,
               un1_x_plot,un1_y_plot,un1_z_plot,un2_x_plot,un2_y_plot,un2_z_plot,
               ui1_x_plot,ui1_y_plot,ui1_z_plot,ui2_x_plot,ui2_y_plot,ui2_z_plot,
               ji1_x_plot,ji1_y_plot,ji1_z_plot,ji2_x_plot,ji2_y_plot,ji2_z_plot,
               je_r_plot,je_t_plot,je_z_plot,je_perp_plot,je_para_plot,
               ue_r_plot,ue_t_plot,ue_z_plot,ue_perp_plot,ue_para_plot,uthetaExB_plot,
               Tn1_plot,Tn2_plot,Ti1_plot,Ti2_plot,Te_plot,n_mp_n1_plot,n_mp_n2_plot,
               n_mp_i1_plot,n_mp_i2_plot,avg_w_n1_plot,avg_w_n2_plot,avg_w_i1_plot,
               avg_w_i2_plot,neu_gen_weights1_plot,neu_gen_weights2_plot,
               ion_gen_weights1_plot,ion_gen_weights2_plot,ndot_ion01_n1_plot,
               ndot_ion02_n1_plot,ndot_ion12_i1_plot,ne_cath_plot,nu_cath_plot,ndot_cath_plot,
               F_theta_plot,Hall_par_plot,Hall_par_eff_plot,nu_e_tot_plot,nu_e_tot_eff_plot,
               nu_en_plot,nu_ei1_plot,nu_ei2_plot,nu_i01_plot,nu_i02_plot,nu_i12_plot] = HET_sims_cp_vars(Br,Bz,Bfield,phi_mean,Er_mean,Ez_mean,Efield_mean,nn1_mean,nn2_mean,
                                                                                                          ni1_mean,ni2_mean,ne_mean,fn1_x_mean,fn1_y_mean,fn1_z_mean,
                                                                                                          fn2_x_mean,fn2_y_mean,fn2_z_mean,fi1_x_mean,fi1_y_mean,fi1_z_mean,
                                                                                                          fi2_x_mean,fi2_y_mean,fi2_z_mean,un1_x_mean,un1_y_mean,un1_z_mean,
                                                                                                          un2_x_mean,un2_y_mean,un2_z_mean,ui1_x_mean,ui1_y_mean,ui1_z_mean,
                                                                                                          ui2_x_mean,ui2_y_mean,ui2_z_mean,ji1_x_mean,ji1_y_mean,ji1_z_mean,
                                                                                                          ji2_x_mean,ji2_y_mean,ji2_z_mean,je_r_mean,je_t_mean,je_z_mean,
                                                                                                          je_perp_mean,je_para_mean,ue_r_mean,ue_t_mean,ue_z_mean,ue_perp_mean,
                                                                                                          ue_para_mean,uthetaExB_mean,Tn1_mean,Tn2_mean,Ti1_mean,Ti2_mean,Te_mean,
                                                                                                          n_mp_n1_mean,n_mp_n2_mean,n_mp_i1_mean,n_mp_i2_mean,avg_w_n1_mean,
                                                                                                          avg_w_n2_mean,avg_w_i1_mean,avg_w_i2_mean,neu_gen_weights1_mean,
                                                                                                          neu_gen_weights2_mean,ion_gen_weights1_mean,ion_gen_weights2_mean,
                                                                                                          ndot_ion01_n1_mean,ndot_ion02_n1_mean,ndot_ion12_i1_mean,ne_cath_mean,
                                                                                                          nu_cath_mean,ndot_cath_mean,F_theta_mean,Hall_par_mean,Hall_par_eff_mean,
                                                                                                          nu_e_tot_mean,nu_e_tot_eff_mean,nu_en_mean,nu_ei1_mean,nu_ei2_mean,nu_i01_mean,
                                                                                                          nu_i02_mean,nu_i12_mean)
        else:
            [Br_plot,Bz_plot,Bfield_plot,phi_plot,Er_plot,Ez_plot,Efield_plot,
               nn1_plot,nn2_plot,ni1_plot,ni2_plot,ne_plot,
               fn1_x_plot,fn1_y_plot,fn1_z_plot,fn2_x_plot,fn2_y_plot,fn2_z_plot,
               fi1_x_plot,fi1_y_plot,fi1_z_plot,fi2_x_plot,fi2_y_plot,fi2_z_plot,
               un1_x_plot,un1_y_plot,un1_z_plot,un2_x_plot,un2_y_plot,un2_z_plot,
               ui1_x_plot,ui1_y_plot,ui1_z_plot,ui2_x_plot,ui2_y_plot,ui2_z_plot,
               ji1_x_plot,ji1_y_plot,ji1_z_plot,ji2_x_plot,ji2_y_plot,ji2_z_plot,
               je_r_plot,je_t_plot,je_z_plot,je_perp_plot,je_para_plot,
               ue_r_plot,ue_t_plot,ue_z_plot,ue_perp_plot,ue_para_plot,uthetaExB_plot,
               Tn1_plot,Tn2_plot,Ti1_plot,Ti2_plot,Te_plot,n_mp_n1_plot,n_mp_n2_plot,
               n_mp_i1_plot,n_mp_i2_plot,avg_w_n1_plot,avg_w_n2_plot,avg_w_i1_plot,
               avg_w_i2_plot,neu_gen_weights1_plot,neu_gen_weights2_plot,
               ion_gen_weights1_plot,ion_gen_weights2_plot,ndot_ion01_n1_plot,
               ndot_ion02_n1_plot,ndot_ion12_i1_plot,ne_cath_plot,nu_cath_plot,ndot_cath_plot,
               F_theta_plot,Hall_par_plot,Hall_par_eff_plot,nu_e_tot_plot,nu_e_tot_eff_plot,
               nu_en_plot,nu_ei1_plot,nu_ei2_plot,nu_i01_plot,nu_i02_plot,nu_i12_plot] = HET_sims_cp_vars(Br,Bz,Bfield,phi,Er,Ez,Efield,nn1,nn2,ni1,ni2,ne,
                                                                                                          fn1_x,fn1_y,fn1_z,fn2_x,fn2_y,fn2_z,fi1_x,fi1_y,fi1_z,fi2_x,fi2_y,fi2_z,
                                                                                                          un1_x,un1_y,un1_z,un2_x,un2_y,un2_z,ui1_x,ui1_y,ui1_z,ui2_x,ui2_y,ui2_z,
                                                                                                          ji1_x,ji1_y,ji1_z,ji2_x,ji2_y,ji2_z,je_r,je_t,je_z,je_perp,je_para,
                                                                                                          ue_r,ue_t,ue_z,ue_perp,ue_para,uthetaExB,Tn1,Tn2,Ti1,Ti2,Te,
                                                                                                          n_mp_n1,n_mp_n2,n_mp_i1,n_mp_i2,avg_w_n1,avg_w_n2,avg_w_i1,avg_w_i2,
                                                                                                          neu_gen_weights1,neu_gen_weights2,ion_gen_weights1,ion_gen_weights2,
                                                                                                          ndot_ion01_n1,ndot_ion02_n1,ndot_ion12_i1,ne_cath,nu_cath,ndot_cath,F_theta,
                                                                                                          Hall_par,Hall_par_eff,nu_e_tot,nu_e_tot_eff,nu_en,nu_ei1,nu_ei2,nu_i01,
                                                                                                          nu_i02,nu_i12)
                                                                                                          
        # Setting a common reference potential point
        if phi_ref == 1:
            phi_plot = phi_plot - phi_plot[iphi_ref,jphi_ref]
                                                                                               
        
        ratio_ni1_ni2_plot      = np.divide(ni1_plot,ni2_plot)
        ue_plot                 = np.sqrt(ue_r_plot**2 +ue_t_plot**2 + ue_z_plot**2)
        ue2_plot                = np.sqrt(ue_perp_plot**2 +ue_t_plot**2 + ue_para_plot**2)
        ui1_plot                = np.sqrt(ui1_x_plot**2 + ui1_y_plot**2 + ui1_z_plot**2)
        ui2_plot                = np.sqrt(ui2_x_plot**2 + ui2_y_plot**2 + ui2_z_plot**2)
        cs01_plot               = np.sqrt(e*Te_plot/mass)
        cs02_plot               = np.sqrt(2*e*Te_plot/mass)
        Mi1_plot                = np.divide(ui1_plot,cs01_plot)
        Mi2_plot                = np.divide(ui2_plot,cs02_plot) 
        Ekin_e_plot             = 0.5*me*ue_plot**2/e
        Ekin_i1_plot            = 0.5*mass*ui1_plot**2/e
        Ekin_i2_plot            = 0.5*mass*ui2_plot**2/e
        ratio_Ekin_Te_plot      = Ekin_e_plot/Te_plot
        ratio_Ekin_Ti1_plot     = Ekin_i1_plot/Ti1_plot
        ratio_Ekin_Ti2_plot     = Ekin_i2_plot/Ti2_plot
        je_plot                 = np.sqrt(je_r_plot**2 + je_t_plot**2 + je_z_plot**2)
        je2_plot                = np.sqrt(je_perp_plot**2 + je_t_plot**2 + je_para_plot**2)
        ji_x_plot               = ji1_x_plot + ji2_x_plot
        ji_y_plot               = ji1_y_plot + ji2_y_plot
        ji_z_plot               = ji1_z_plot + ji2_z_plot
        ji_plot                 = np.sqrt( ji_x_plot**2 + ji_y_plot**2 +ji_z_plot**2 )
        j_r_plot                = ji_x_plot + je_r_plot
        j_t_plot                = ji_y_plot + je_t_plot
        j_z_plot                = ji_z_plot + je_z_plot
        j_plot                  = np.sqrt(j_r_plot**2 + j_t_plot**2 + j_z_plot**2)
        erel_je_plot            = np.abs(je2_plot-je_plot)/np.abs(je_plot)
        erel_ue_plot            = np.abs(ue2_plot-ue_plot)/np.abs(ue_plot)
        erel_jeji_plot          = np.abs(je_plot-ji_plot)/np.abs(ji_plot)
        erel_jz_plot            = np.abs(je_z_plot+ji_z_plot)/np.abs(ji_z_plot)
        ratio_ue_t_perp_plot    = ue_t_plot/ue_perp_plot
        ratio_ue_t_para_plot    = ue_t_plot/ue_para_plot
        ratio_ue_perp_para_plot = ue_perp_plot/ue_para_plot
        ###########################################################################
        print("Plotting...")
        ############################ GENERATING PLOTS #############################
        print("erel_ue max         = %15.8e; erel_ue min         = %15.8e (-)" %( np.nanmax(erel_ue_plot), np.nanmin(erel_ue_plot) ) )
        print("erel_je max         = %15.8e; erel_je min         = %15.8e (-)" %( np.nanmax(erel_je_plot), np.nanmin(erel_je_plot) ) )
        print("erel_jeji max       = %15.8e; erel_jeji min       = %15.8e (-)" %( np.nanmax(erel_jeji_plot), np.nanmin(erel_jeji_plot) ) )
        print("erel_jz inf max     = %15.8e; erel_jz inf min     = %15.8e (-)" %( np.nanmax(erel_jz_plot[:,-1]), np.nanmin(erel_jz_plot[:,-1]) ) )
        print("phi max             = %15.8e; phi min             = %15.8e (V)" %( np.nanmax(phi_plot), np.nanmin(phi_plot) ) )
        print("Efield max          = %15.8e; Efield min          = %15.8e (V/m)" %( np.nanmax(Efield_plot), np.nanmin(Efield_plot) ) )
        print("Er max              = %15.8e; Er min              = %15.8e (V/m)" %( np.nanmax(Er_plot), np.nanmin(Er_plot) ) )
        print("Ez max              = %15.8e; Ez min              = %15.8e (V/m)" %( np.nanmax(Ez_plot), np.nanmin(Ez_plot) ) )
        print("ne max              = %15.8e; ne min              = %15.8e (1/m3)" %( np.nanmax(ne_plot), np.nanmin(ne_plot) ) )
        print("ni1 max             = %15.8e; ni1 min             = %15.8e (1/m3)" %( np.nanmax(ni1_plot), np.nanmin(ni1_plot) ) )
        print("ni2 max             = %15.8e; ni2 min             = %15.8e (1/m3)" %( np.nanmax(ni2_plot), np.nanmin(ni2_plot) ) )
        print("ni1/ni2 max         = %15.8e; ni1/ni2 min         = %15.8e (-)" %( np.nanmax(ratio_ni1_ni2_plot), np.nanmin(ratio_ni1_ni2_plot) ) )
        print("nn1 max             = %15.8e; nn1 min             = %15.8e (1/m3)" %( np.nanmax(nn1_plot), np.nanmin(nn1_plot) ) )
        print("Te max              = %15.8e; nn1 min             = %15.8e (eV)" %( np.nanmax(Te_plot), np.nanmin(Te_plot) ) )
        print("Ti1 max             = %15.8e; Ti1 min             = %15.8e (eV)" %( np.nanmax(Ti1_plot), np.nanmin(Ti1_plot) ) )
        print("Ti2 max             = %15.8e; Ti2 min             = %15.8e (eV)" %( np.nanmax(Ti2_plot), np.nanmin(Ti2_plot) ) )
        print("Tn1 max             = %15.8e; Tn1 min             = %15.8e (eV)" %( np.nanmax(Tn1_plot), np.nanmin(Tn1_plot) ) )
        print("Ekin_e max          = %15.8e; Ekin_e min          = %15.8e (eV)" %( np.nanmax(Ekin_e_plot), np.nanmin(Ekin_e_plot) ) )
        print("Ekin_i1 max         = %15.8e; Ekin_i1 min         = %15.8e (eV)" %( np.nanmax(Ekin_i1_plot), np.nanmin(Ekin_i1_plot) ) )
        print("Ekin_i2 max         = %15.8e; Ekin_i2 min         = %15.8e (eV)" %( np.nanmax(Ekin_i2_plot), np.nanmin(Ekin_i2_plot) ) )
        print("Ekin/Te max         = %15.8e; Ekin/Te min         = %15.8e (-)" %( np.nanmax(ratio_Ekin_Te_plot), np.nanmin(ratio_Ekin_Te_plot) ) )
        print("Ekin/Ti1 max        = %15.8e; Ekin/Ti1 min        = %15.8e (-)" %( np.nanmax(ratio_Ekin_Ti1_plot), np.nanmin(ratio_Ekin_Ti1_plot) ) )
        print("Ekin/Ti2 max        = %15.8e; Ekin/Ti2 min        = %15.8e (-)" %( np.nanmax(ratio_Ekin_Ti2_plot), np.nanmin(ratio_Ekin_Ti2_plot) ) )
        print("Mi1 max             = %15.8e; Mi1 min             = %15.8e (-)" %( np.nanmax(Mi1_plot), np.nanmin(Mi1_plot) ) )
        print("Mi2 max             = %15.8e; Mi2 min             = %15.8e (-)" %( np.nanmax(Mi2_plot), np.nanmin(Mi2_plot) ) )
        print("ue_r max            = %15.8e; ue_r min            = %15.8e (m/s)" %( np.nanmax(ue_r_plot), np.nanmin(ue_r_plot) ) )
        print("ue_t max            = %15.8e; ue_t min            = %15.8e (m/s)" %( np.nanmax(ue_t_plot), np.nanmin(ue_t_plot) ) )
        print("ue_z max            = %15.8e; ue_z min            = %15.8e (m/s)" %( np.nanmax(ue_z_plot), np.nanmin(ue_z_plot) ) )
        print("ue_perp max         = %15.8e; ue_perp min         = %15.8e (m/s)" %( np.nanmax(ue_perp_plot), np.nanmin(ue_perp_plot) ) )
        print("ue_para max         = %15.8e; ue_para min         = %15.8e (m/s)" %( np.nanmax(ue_para_plot), np.nanmin(ue_para_plot) ) )
        print("ue_t/ue_perp max    = %15.8e; ue_t/ue_perp min    = %15.8e (m/s)" %( np.nanmax(ratio_ue_t_perp_plot), np.nanmin(ratio_ue_t_perp_plot) ) )
        print("ue_t/ue_para max    = %15.8e; ue_t/ue_para min    = %15.8e (m/s)" %( np.nanmax(ratio_ue_t_para_plot), np.nanmin(ratio_ue_t_para_plot) ) )
        print("ue_perp/ue_para max = %15.8e; ue_perp/ue_para min = %15.8e (m/s)" %( np.nanmax(ratio_ue_perp_para_plot), np.nanmin(ratio_ue_perp_para_plot) ) )
        print("je_r max            = %15.8e; je_r min            = %15.8e (A/m2)" %( np.nanmax(je_r_plot), np.nanmin(je_r_plot) ) )
        print("je_t max            = %15.8e; je_t min            = %15.8e (A/m2)" %( np.nanmax(je_t_plot), np.nanmin(je_t_plot) ) )
        print("je_z max            = %15.8e; je_z min            = %15.8e (A/m2)" %( np.nanmax(je_z_plot), np.nanmin(je_z_plot) ) )
        print("je_perp max         = %15.8e; je_perp min         = %15.8e (A/m2)" %( np.nanmax(je_perp_plot), np.nanmin(je_perp_plot) ) )
        print("je_para max         = %15.8e; je_para min         = %15.8e (A/m2)" %( np.nanmax(je_para_plot), np.nanmin(je_para_plot) ) )
        print("je max              = %15.8e; je min              = %15.8e (A/m2)" %( np.nanmax(je_plot), np.nanmin(je_plot) ) )
        print("ji max              = %15.8e; ji min              = %15.8e (A/m2)" %( np.nanmax(ji_plot), np.nanmin(ji_plot) ) )
        print("j max               = %15.8e; j min               = %15.8e (A/m2)" %( np.nanmax(j_plot), np.nanmin(j_plot) ) )
        print("F_theta max         = %15.8e; F_theta min         = %15.8e (A/m2)" %( np.nanmax(F_theta_plot), np.nanmin(F_theta_plot) ) )
        print("Hall_par max        = %15.8e; Hall_par min        = %15.8e (A/m2)" %( np.nanmax(Hall_par_plot), np.nanmin(Hall_par_plot) ) )
        print("Hall_par_eff max    = %15.8e; Hall_par_eff min    = %15.8e (A/m2)" %( np.nanmax(Hall_par_eff_plot), np.nanmin(Hall_par_eff_plot) ) )
        print("nu_e_tot max        = %15.8e; nu_e_tot min        = %15.8e (A/m2)" %( np.nanmax(nu_e_tot_plot), np.nanmin(nu_e_tot_plot) ) )
        print("nu_e_tot_eff max    = %15.8e; nu_e_tot_eff min    = %15.8e (A/m2)" %( np.nanmax(nu_e_tot_eff_plot), np.nanmin(nu_e_tot_eff_plot) ) )
        print("nu_en max           = %15.8e; nu_en min           = %15.8e (A/m2)" %( np.nanmax(nu_en_plot), np.nanmin(nu_en_plot) ) )
        print("nu_ei1 max          = %15.8e; nu_ei1 min          = %15.8e (A/m2)" %( np.nanmax(nu_ei1_plot), np.nanmin(nu_ei1_plot) ) )
        print("nu_ei2 max          = %15.8e; nu_ei2 min          = %15.8e (A/m2)" %( np.nanmax(nu_ei2_plot), np.nanmin(nu_ei2_plot) ) )
        print("nu_i01 max          = %15.8e; nu_i01 min          = %15.8e (A/m2)" %( np.nanmax(nu_i01_plot), np.nanmin(nu_i01_plot) ) )
        print("nu_i02 max          = %15.8e; nu_i02 min          = %15.8e (A/m2)" %( np.nanmax(nu_i02_plot), np.nanmin(nu_i02_plot) ) )
        print("nu_i12 max          = %15.8e; nu_i12 min          = %15.8e (A/m2)" %( np.nanmax(nu_i12_plot), np.nanmin(nu_i12_plot) ) )
        
        
        zs                = zs*1E2
        rs                = rs*1E2
        zscells           = zscells*1E2
        rscells           = rscells*1E2
        points            = points*1E2
        z_cath            = z_cath*1E2
        r_cath            = r_cath*1E2
        Efield_plot       = Efield_plot*1E-3
        Er_plot           = Er_plot*1E-3
        Ez_plot           = Ez_plot*1E-3
#        nu_e_tot_plot     = nu_e_tot_plot*1E-6
#        nu_e_tot_eff_plot = nu_e_tot_eff_plot*1E-6
#        nu_en_plot        = nu_en_plot*1E-6
#        nu_ei1_plot       = nu_ei1_plot*1E-6
#        nu_ei2_plot       = nu_ei2_plot*1E-6
#        nu_i01_plot       = nu_i01_plot*1E-6
#        nu_i02_plot       = nu_i02_plot*1E-6
#        nu_i12_plot       = nu_i12_plot*1E-6

        if plot_fields == 1:
            plt.figure('phi isolines')
            ax = plt.gca()
            log_type         = 0
            auto             = 1
            min_val0         = 0.0
            max_val0         = 0.0
            cont             = 0
            lines            = 1
            cont_nlevels     = 500
            auto_cbar_ticks  = 1 
            auto_lines_ticks = 0
            nticks_cbar      = 5
            nticks_lines     = 10
            cbar_ticks       = np.array([250, 200, 150, 100, 75, 50])
            lines_ticks      = np.array([300, 280, 250, 240, 230, 225, 220, 200, 175, 150, 125, 100, 75, 50, 40, 30, 25, 10, 5,1,0.1,0,-0.1,-1,-5,-10,-25,-30,-40,-50,-75,-100])
            lines_ticks_loc  = 'default'
            cbar_ticks_fmt    = '{%.1f}'
            lines_ticks_fmt   = '{%.2f}'
            lines_width       = line_width
            lines_ticks_color = colors[k]
            lines_style       = '-'
            [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size_isolines, zs, rs, phi_plot, nodes_flag, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)       
            plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
            plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)     
            plt.plot(zs[iphi_ref,jphi_ref],rs[iphi_ref,jphi_ref],'ys',linewidth = line_width_boundary,markersize = marker_size)  


            plt.figure('E isolines')
            ax = plt.gca()
            log_type         = 0
            auto             = 1
            min_val0         = 1E12
            max_val0         = 5E14
            cont             = 0
            lines            = 1
            cont_nlevels     = 500
            auto_cbar_ticks  = 1 
            auto_lines_ticks = 0
            nticks_cbar      = 4
            nticks_lines     = 6
            cbar_ticks       = np.array([1E11,1E12,1E13,1E14])
            lines_ticks      = np.array([0,200,500,1000,2000,3000,4000,20000,60000])*1E-3
            lines_ticks_loc  = 'default'
            cbar_ticks_fmt    = '{%.2f}'
            lines_ticks_fmt   = '{%.1f}'
            lines_width       = line_width
            lines_ticks_color = colors[k]
            lines_style       = '-'
            [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size_isolines, zs, rs, Efield_plot, nodes_flag, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)   
            plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
            plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)              


            plt.figure('Ez isolines')
            ax = plt.gca()
            log_type         = 0
            auto             = 1
            min_val0         = 1E12
            max_val0         = 5E14
            cont             = 0
            lines            = 1
            cont_nlevels     = 500
            auto_cbar_ticks  = 1 
            auto_lines_ticks = 0
            nticks_cbar      = 4
            nticks_lines     = 4
            cbar_ticks       = np.array([1E11,1E12,1E13,1E14])
            lines_ticks      = np.array([-500,0,200,500,1000,2000,5000,10000,15000,20000])*1E-3
            lines_ticks_loc  = 'default'
            cbar_ticks_fmt    = '{%.2f}'
            lines_ticks_fmt   = '{%.1f}'
            lines_width       = line_width
            lines_ticks_color = colors[k]
            lines_style       = '-'
            [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size_isolines, zs, rs, Ez_plot, nodes_flag, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)  
            plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
            plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
              

            plt.figure('Er isolines')
            ax = plt.gca()
            log_type         = 0
            auto             = 1
            min_val0         = 1E12
            max_val0         = 5E14
            cont             = 0
            lines            = 1
            cont_nlevels     = 500
            auto_cbar_ticks  = 1 
            auto_lines_ticks = 0
            nticks_cbar      = 4
            nticks_lines     = 6
            cbar_ticks       = np.array([1E11,1E12,1E13,1E14])
            lines_ticks      = np.array([-60000,-50000,-40000,-30000,-10000,-500,0,500,1000,2500,5000,7500,10000])*1E-3
            lines_ticks_loc  = 'default'
            cbar_ticks_fmt    = '{%.2f}'
            lines_ticks_fmt   = '{%.1f}'
            lines_width       = line_width
            lines_ticks_color = colors[k]
            lines_style       = '-'
            [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size_isolines, zs, rs, Er_plot, nodes_flag, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)    
            plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
            plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
               
                
        if plot_dens == 1:      
            plt.figure('n isolines')
            ax = plt.gca()
            log_type         = 1
            auto             = 0
            min_val0         = 1E12
            max_val0         = 5E14
            cont             = 0
            lines            = 1
            cont_nlevels     = 500
            auto_cbar_ticks  = 0 
            auto_lines_ticks = -1
            nticks_cbar      = 4
            nticks_lines     = 4
            cbar_ticks       = np.array([1E11,1E12,1E13,1E14])
            lines_ticks      = np.array([5E18,3E18,2E18,1E18,5E17,1E17,5E16,1E16,5E15,1E11])
            lines_ticks_loc  = 'default'
            cbar_ticks_fmt    = '{%.2f}'
            lines_ticks_fmt   = '{%.1f}'
            lines_width       = line_width
            lines_ticks_color = colors[k]
            lines_style       = '-'
            [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size_isolines, zs, rs, ne_plot, nodes_flag, log_type, auto, 
                              min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                              nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                              lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)  
            # Isolines ticks (exponent)
            ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
            plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
            plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
            

            plt.figure('ni1 isolines')
            ax = plt.gca()
            log_type         = 1
            auto             = 0
            min_val0         = 1E12
            max_val0         = 5E14
            cont             = 0
            lines            = 1
            cont_nlevels     = 500
            auto_cbar_ticks  = 0 
            auto_lines_ticks = -1
            nticks_cbar      = 4
            nticks_lines     = 4
            cbar_ticks       = np.array([1E11,1E12,1E13,1E14])
            lines_ticks      = np.array([5E18,3E18,2E18,1E18,5E17,1E17,5E16,1E16,5E15,1E11])
            lines_ticks_loc  = 'default'
            cbar_ticks_fmt    = '{%.2f}'
            lines_ticks_fmt   = '{%.1f}'
            lines_width       = line_width
            lines_ticks_color = colors[k]
            lines_style       = '-'
            [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size_isolines, zs, rs, ni1_plot, nodes_flag, log_type, auto, 
                              min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                              nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                              lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)  
            # Isolines ticks (exponent)
            ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
            plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
            plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
            
            
            plt.figure('ni2 isolines')
            ax = plt.gca()
            log_type         = 1
            auto             = 0
            min_val0         = 1E12
            max_val0         = 5E14
            cont             = 0
            lines            = 1
            cont_nlevels     = 500
            auto_cbar_ticks  = 0 
            auto_lines_ticks = -1
            nticks_cbar      = 4
            nticks_lines     = 4
            cbar_ticks       = np.array([1E11,1E12,1E13,1E14])
            lines_ticks      = np.array([4E17,2E17,1E17,5E16,1E16,5E15,1E14,1E11])
            lines_ticks_loc  = 'default'
            cbar_ticks_fmt    = '{%.2f}'
            lines_ticks_fmt   = '{%.1f}'
            lines_width       = line_width
            lines_ticks_color = colors[k]
            lines_style       = '-'
            [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size_isolines, zs, rs, ni2_plot, nodes_flag, log_type, auto, 
                              min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                              nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                              lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)  
            # Isolines ticks (exponent)
            ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
            plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
            plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)      
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
            
            
            plt.figure('ratio_ni1_ni2 isolines')
            ax = plt.gca()
            log_type         = 0
            auto             = 1
            min_val0         = 0
            max_val0         = 5
            cont             = 0
            lines            = 1
            cont_nlevels     = 500
            auto_cbar_ticks  = 1 
            auto_lines_ticks = 0
            nticks_cbar      = 4
            nticks_lines     = 4
            cbar_ticks       = np.array([1E11,1E12,1E13,1E14])
            lines_ticks      = np.array([0.05,0.1,0.5,1,2,4,6,8,10,15,20,50,100,120,150])
            lines_ticks_loc  = 'default'
            cbar_ticks_fmt    = '{%.2f}'
            lines_ticks_fmt   = '{%.2f}'
            lines_width       = line_width
            lines_ticks_color = colors[k]
            lines_style       = '-'
            [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size_isolines, zs, rs, ratio_ni1_ni2_plot, nodes_flag, log_type, auto, 
                              min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                              nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                              lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)  
            plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
            plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)      
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
            
            
            plt.figure('nn isolines')
            ax = plt.gca()
            log_type         = 1
            auto             = 0
            min_val0         = 1E12
            max_val0         = 5E14
            cont             = 0
            lines            = 1
            cont_nlevels     = 500
            auto_cbar_ticks  = 0 
            auto_lines_ticks = -1
            nticks_cbar      = 4
            nticks_lines     = 10
            cbar_ticks       = np.array([1E11,1E12,1E13,1E14])
            lines_ticks      = np.array([3E19,1.5E19,1E19,5E18,1E18,5E17,4E17,3E17,2E17,1E17,5E16,1E16,5E15])
            lines_ticks_loc  = 'default'
            cbar_ticks_fmt    = '{%.2f}'
            lines_ticks_fmt   = '{%.1f}'
            lines_width       = line_width
            lines_ticks_color = colors[k]
            lines_style       = '-'
            [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size_isolines, zs, rs, nn1_plot, nodes_flag, log_type, auto, 
                              min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                              nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                              lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)  
            # Isolines ticks (exponent)
            ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
            plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
            plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
            
             
        if plot_temp == 1:   
            plt.figure('Te isolines')
            ax = plt.gca()
            log_type         = 0
            auto             = 1
            min_val0         = 0.0
            max_val0         = 0.0
            cont             = 0
            lines            = 1
            cont_nlevels     = 500
            auto_cbar_ticks  = 1 
            auto_lines_ticks = 0
            nticks_cbar      = 5
            nticks_lines     = 10
            cbar_ticks       = np.array([0.0, -1.0, -2.0, -3.0, -5.0, -10.0])
#            lines_ticks      = np.array([0,0.1,0.5,1,2,3,4,5,6,7,8,9,10,11,12,13,13.2,13.5,13.7,14,15,16,17,18,19,20,21,22,23,24,25,30,40,45])
            lines_ticks      = np.array([0,0.1,0.5,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,30,40,45])
            lines_ticks_loc  = 'default'
            cbar_ticks_fmt    = '{%.1f}'
            lines_ticks_fmt   = '{%.2f}'
            lines_width       = line_width
            lines_ticks_color = colors[k]
            lines_style       = '-'
            [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size_isolines, zs, rs, Te_plot, nodes_flag, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)   
            plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
            plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
            
               
            plt.figure('Ti1 isolines')
            ax = plt.gca()
            log_type         = 0
            auto             = 1
            min_val0         = 0.0
            max_val0         = 0.0
            cont             = 0
            lines            = 1
            cont_nlevels     = 500
            auto_cbar_ticks  = 1 
            auto_lines_ticks = 0
            nticks_cbar      = 5
            nticks_lines     = 10
            cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
            lines_ticks      = np.array([0,0.5,1,2,5,10,15,20,25,30,35,40])
            lines_ticks_loc  = 'default'
            cbar_ticks_fmt    = '{%.1f}'
            lines_ticks_fmt   = '{%.2f}'
            lines_width       = line_width
            lines_ticks_color = colors[k]
            lines_style       = '-'
            [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size_isolines, zs, rs, Ti1_plot, nodes_flag, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)                    
            plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
            plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
            

            plt.figure('Ti2 isolines')
            ax = plt.gca()
            log_type         = 0
            auto             = 1
            min_val0         = 0.0
            max_val0         = 0.0
            cont             = 0
            lines            = 1
            cont_nlevels     = 500
            auto_cbar_ticks  = 1 
            auto_lines_ticks = 0
            nticks_cbar      = 5
            nticks_lines     = 10
            cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
            lines_ticks      = np.array([0,0.5,1,2,5,10,15,20,25,30,35,40,45,50,55,60,65])
            lines_ticks_loc  = 'default'
            cbar_ticks_fmt    = '{%.1f}'
            lines_ticks_fmt   = '{%.2f}'
            lines_width       = line_width
            lines_ticks_color = colors[k]
            lines_style       = '-'
            [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size_isolines, zs, rs, Ti2_plot, nodes_flag, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)                    
            plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
            plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
            
        
            plt.figure('Tn isolines')
            ax = plt.gca()
            log_type         = 0
            auto             = 1
            min_val0         = 0.0
            max_val0         = 0.0
            cont             = 0
            lines            = 1
            cont_nlevels     = 500
            auto_cbar_ticks  = 1 
            auto_lines_ticks = 0
            nticks_cbar      = 5
            nticks_lines     = 10
            cbar_ticks       = np.array([0.0, -1.0, -2.0, -3.0, -5.0, -10.0])
            lines_ticks      = np.array([0,0.01,0.02,0.03,0.04,0.05,.06,0.07,.08,0.09,0.1,0.11,0.12,0.13])
            lines_ticks_loc  = 'default'
            cbar_ticks_fmt    = '{%.1f}'
            lines_ticks_fmt   = '{%.2f}'
            lines_width       = line_width
            lines_ticks_color = colors[k]
            lines_style       = '-'
            [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size_isolines, zs, rs, Tn1_plot, nodes_flag, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)   
            plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
            plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
           

            plt.figure('ratio_Ekin_Te isolines')
            ax = plt.gca()
            log_type         = 0
            auto             = 1
            min_val0         = 0.0
            max_val0         = 0.0
            cont             = 0
            lines            = 1
            cont_nlevels     = 500
            auto_cbar_ticks  = 1 
            auto_lines_ticks = 0
            nticks_cbar      = 5
            nticks_lines     = 10
            cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
            lines_ticks      = np.array([0.01,0.05,0.1,0.2,0.5,0.7,1,2,3,4,5,10,50,100,500,1000,10000,20000])
            lines_ticks_loc  = 'default'
            cbar_ticks_fmt    = '{%.1f}'
            lines_ticks_fmt   = '{%.2f}'
            lines_width       = line_width
            lines_ticks_color = colors[k]
            lines_style       = '-'
            [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size_isolines, zs, rs, ratio_Ekin_Te_plot, nodes_flag, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)  
            plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
            plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
            
        
            plt.figure('ratio_Ekin_Ti1 isolines')
            ax = plt.gca()
            log_type         = 0
            auto             = 1
            min_val0         = 0.0
            max_val0         = 0.0
            cont             = 0
            lines            = 1
            cont_nlevels     = 500
            auto_cbar_ticks  = 1 
            auto_lines_ticks = 0
            nticks_cbar      = 5
            nticks_lines     = 10
            cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
            lines_ticks      = np.array([0.0,0.01,0.1,0.5,1,2,3,4,5,6,7,10,50])
            lines_ticks_loc  = 'default'
            cbar_ticks_fmt    = '{%.1f}'
            lines_ticks_fmt   = '{%.2f}'
            lines_width       = line_width
            lines_ticks_color = colors[k]
            lines_style       = '-'
            [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size_isolines, zs, rs, ratio_Ekin_Ti1_plot, nodes_flag, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)  
            plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
            plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
            
          
            plt.figure('ratio_Ekin_Ti2 isolines')
            ax = plt.gca()
            log_type         = 0
            auto             = 1
            min_val0         = 0.0
            max_val0         = 0.0
            cont             = 0
            lines            = 1
            cont_nlevels     = 500
            auto_cbar_ticks  = 1 
            auto_lines_ticks = 0
            nticks_cbar      = 5
            nticks_lines     = 10
            cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
            lines_ticks      = np.array([0.0,0.01,0.1,0.5,1,2,3,4,5,6,7,10,50])
            lines_ticks_loc  = 'default'
            cbar_ticks_fmt    = '{%.1f}'
            lines_ticks_fmt   = '{%.2f}'
            lines_width       = line_width
            lines_ticks_color = colors[k]
            lines_style       = '-'
            [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size_isolines, zs, rs, ratio_Ekin_Ti2_plot, nodes_flag, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)  
            plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
            plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
           

        if plot_vel == 1:
            plt.figure('Mi1 isolines')
            ax = plt.gca()
            log_type         = 0
            auto             = 1
            min_val0         = 0.0
            max_val0         = 0.0
            cont             = 0
            lines            = 1
            cont_nlevels     = 500
            auto_cbar_ticks  = 1 
            auto_lines_ticks = 0
            nticks_cbar      = 5
            nticks_lines     = 10
            cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
            lines_ticks      = np.array([0.0,0.25,0.5,0.75,1.0,1.5,2.0,2.5,3.0,3.5,4.0,4.5])
            lines_ticks_loc  = 'default'
            cbar_ticks_fmt    = '{%.1f}'
            lines_ticks_fmt   = '{%.2f}'
            lines_width       = line_width
            lines_ticks_color = colors[k]
            lines_style       = '-'
            [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size_isolines, zs, rs, Mi1_plot, nodes_flag, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
            plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
            plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
            
               
            plt.figure('Mi2 isolines')
            ax = plt.gca()
            log_type         = 0
            auto             = 1
            min_val0         = 0.0
            max_val0         = 0.0
            cont             = 0
            lines            = 1
            cont_nlevels     = 500
            auto_cbar_ticks  = 1 
            auto_lines_ticks = 0
            nticks_cbar      = 5
            nticks_lines     = 10
            cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
            lines_ticks      = np.array([0.0,0.25,0.5,0.75,1.0,1.5,2.0,2.5,3.0])
            lines_ticks_loc  = 'default'
            cbar_ticks_fmt    = '{%.1f}'
            lines_ticks_fmt   = '{%.2f}'
            lines_width       = line_width
            lines_ticks_color = colors[k]
            lines_style       = '-'
            [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size_isolines, zs, rs, Mi2_plot, nodes_flag, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
            plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
            plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
            
           
            plt.figure('ue_r isolines')
            ax = plt.gca()
            log_type         = 0
            auto             = 1
            min_val0         = 0.0
            max_val0         = 0.0
            cont             = 0
            lines            = 1
            cont_nlevels     = 500
            auto_cbar_ticks  = 1 
            auto_lines_ticks = -1
            nticks_cbar      = 5
            nticks_lines     = 10
            cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
            lines_ticks      = np.array([-1E4,-5E3,-2E3,-1E3,-7E2,-5E2,-2E2,-1E2,-1E1,1E1,1E2,2E2,5E2,7E2,1E3,2E3,5E3,1E4])
            lines_ticks_loc  = 'default'
            cbar_ticks_fmt    = '{%.1f}'
            lines_ticks_fmt   = '{%.2f}'
            lines_width       = line_width
            lines_ticks_color = colors[k]
            lines_style       = '-'
            
            [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size_isolines, zs, rs, ue_r_plot, nodes_flag, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
            ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines+5, zorder = 1)
            plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
            plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
            
                      
            plt.figure('ue_t isolines')
            ax = plt.gca()
            log_type         = 0
            auto             = 1
            min_val0         = 0.0
            max_val0         = 0.0
            cont             = 0
            lines            = 1
            cont_nlevels     = 500
            auto_cbar_ticks  = 1 
            auto_lines_ticks = -1
            nticks_cbar      = 5
            nticks_lines     = 10
            cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
#            lines_ticks      = np.array([-2E6,-1E6,-7E5,-5E5,-2E5-1E5,1E3,1E4,1E5,2E5,5E5,7E5,1E6,2E6,3E6,4E6,5E6,7E6])
            lines_ticks      = np.array([-2E6,-1E6,-2E5-1E5,1E3,1E4,1E5,2E5,5E5,7E5,1E6,2E6,3E6,4E6,5E6,7E6])
            lines_ticks_loc  = 'default'
            cbar_ticks_fmt    = '{%.1f}'
            lines_ticks_fmt   = '{%.4f}'
            lines_width       = line_width
            lines_ticks_color = colors[k]
            lines_style       = '-'
            
            [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size_isolines, zs, rs, ue_t_plot, nodes_flag, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
            ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines+3, zorder = 1)
            plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
            plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
           
               
            plt.figure('ue_z isolines')
            ax = plt.gca()
            log_type         = 0
            auto             = 1
            min_val0         = 0.0
            max_val0         = 0.0
            cont             = 0
            lines            = 1
            cont_nlevels     = 500
            auto_cbar_ticks  = 1 
            auto_lines_ticks = -1
            nticks_cbar      = 5
            nticks_lines     = 10
            cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
            lines_ticks      = np.array([-1E5,-5E4,-1E4,-5E13,-5E3,-2E3,-1E3,-7E2,-5E2,-2E2,-1E2,1E2,5E2,1E3,2E3,5E3,1E4,5E4,1E5])
            lines_ticks_loc  = 'default'
            cbar_ticks_fmt    = '{%.1f}'
            lines_ticks_fmt   = '{%.2f}'
            lines_width       = line_width
            lines_ticks_color = colors[k]
            lines_style       = '-'
            
            [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size_isolines, zs, rs, ue_z_plot, nodes_flag, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
            ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines+5, zorder = 1)
            plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
            plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
            
        
            plt.figure('ue_perp isolines')
            ax = plt.gca()
            log_type         = 0
            auto             = 1
            min_val0         = 0.0
            max_val0         = 0.0
            cont             = 0
            lines            = 1
            cont_nlevels     = 500
            auto_cbar_ticks  = 1 
            auto_lines_ticks = -1
            nticks_cbar      = 5
            nticks_lines     = 10
            cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
            lines_ticks      = np.array([-1E5,-5E4,-1E4,-5E13,-5E3,-2E3,-1E3,-7E2,-5E2,-2E2,-1E2,1E2,5E2,1E3,2E3,5E3,1E4,5E4,1E5])
            lines_ticks_loc  = 'default'
            cbar_ticks_fmt    = '{%.1f}'
            lines_ticks_fmt   = '{%.2f}'
            lines_width       = line_width
            lines_ticks_color = colors[k]
            lines_style       = '-'
            
            [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size_isolines, zs, rs, ue_perp_plot, nodes_flag, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
            ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines+5, zorder = 1)
            plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
            plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
            
        
            plt.figure('ue_para isolines')
            ax = plt.gca()
            log_type         = 0
            auto             = 1
            min_val0         = 0.0
            max_val0         = 0.0
            cont             = 0
            lines            = 1
            cont_nlevels     = 500
            auto_cbar_ticks  = 1 
            auto_lines_ticks = -1
            nticks_cbar      = 5
            nticks_lines     = 10
            cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
            lines_ticks      = np.array([-1E4,-5E3,-2E3,-1E3,-7E2,-5E2,-2E2,-1E2,-1E1,1E1,1E2,2E2,5E2,7E2,1E3,2E3,5E3,1E4])
            lines_ticks_loc  = 'default'
            cbar_ticks_fmt    = '{%.1f}'
            lines_ticks_fmt   = '{%.2f}'
            lines_width       = line_width
            lines_ticks_color = colors[k]
            lines_style       = '-'
            
            [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size_isolines, zs, rs, ue_para_plot, nodes_flag, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
            ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines+5, zorder = 1)
            plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
            plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
            

            plt.figure('ratio ue_t_perp isolines')
            ax = plt.gca()
            log_type         = 0
            auto             = 1
            min_val0         = 0.0
            max_val0         = 0.0
            cont             = 0
            lines            = 1
            cont_nlevels     = 500
            auto_cbar_ticks  = 1 
            auto_lines_ticks = -1
            nticks_cbar      = 5
            nticks_lines     = 10
            cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
            lines_ticks      = np.array([-1E3,-5E2,-2E2,-5E1,-1E1,-5E0,-1E0,1E0,5E0,1E1,5E1,1E2,5E2,1E3,2E3,3E3,5E3,1E4])
            lines_ticks_loc  = 'default'
            cbar_ticks_fmt    = '{%.1f}'
            lines_ticks_fmt   = '{%.2f}'
            lines_width       = line_width
            lines_ticks_color = colors[k]
            lines_style       = '-'
            [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size_isolines, zs, rs, ratio_ue_t_perp_plot, nodes_flag, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
            ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines+3, zorder = 1)
            plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
            plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
            
                
            plt.figure('ratio ue_t_para isolines')
            ax = plt.gca()
            log_type         = 0
            auto             = 1
            min_val0         = 0.0
            max_val0         = 0.0
            cont             = 0
            lines            = 1
            cont_nlevels     = 500
            auto_cbar_ticks  = 1 
            auto_lines_ticks = -1
            nticks_cbar      = 5
            nticks_lines     = 10
            cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
            lines_ticks      = np.array([-1E3,-5E2,1E1,5E1,1E2,1E3])
            lines_ticks_loc  = 'default'
            cbar_ticks_fmt    = '{%.1f}'
            lines_ticks_fmt   = '{%.2f}'
            lines_width       = line_width
            lines_ticks_color = colors[k]
            lines_style       = '-'
            [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size_isolines, zs, rs, ratio_ue_t_para_plot, nodes_flag, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
            ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines+3, zorder = 1)
            plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
            plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
                    
                                
            plt.figure('ratio ue_perp_para isolines')
            ax = plt.gca()
            log_type         = 0
            auto             = 1
            min_val0         = 0.0
            max_val0         = 0.0
            cont             = 0
            lines            = 1
            cont_nlevels     = 500
            auto_cbar_ticks  = 1 
            auto_lines_ticks = -1
            nticks_cbar      = 5
            nticks_lines     = 10
            cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
#            lines_ticks      = np.array([-10,-1.5,-1,-0.1,-0.05,-0.01,0,0.01,0.05,0.1,1,1.5,10])
            lines_ticks      = np.array([-1E1,-7E0,-5E0,-3E0,-1E0,-7E-1,-1E-1,])
            lines_ticks_loc  = 'default'
            cbar_ticks_fmt    = '{%.1f}'
            lines_ticks_fmt   = '{%.2f}'
            lines_width       = line_width
            lines_ticks_color = colors[k]
            lines_style       = '-'
            [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size_isolines, zs, rs, ratio_ue_perp_para_plot, nodes_flag, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
            ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines+3, zorder = 1)
            plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
            plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)            
                
                
        if plot_curr == 1:
            plt.figure('je_r isolines')
            ax = plt.gca()
            log_type         = 0
            auto             = 1
            min_val0         = 0.0
            max_val0         = 0.0
            cont             = 0
            lines            = 1
            cont_nlevels     = 500
            auto_cbar_ticks  = 1 
            auto_lines_ticks = -1
            nticks_cbar      = 5
            nticks_lines     = 10
            cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
            lines_ticks      = np.array([-1E2,-7E1,-5E1,-2E1,-1E1,-7E0,-5E0,-2E0,-1E0,1E-1,2E-1,5E-1,7E-1,1E0,2E0,5E0,7E0,1E1,2E1,3E1,5E1,7E1,1E2])
            lines_ticks_loc  = 'default'
            cbar_ticks_fmt    = '{%.1f}'
            lines_ticks_fmt   = '{%.2f}'
            lines_width       = line_width
            lines_ticks_color = colors[k]
            lines_style       = '-'
            [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size_isolines, zs, rs, -je_r_plot, nodes_flag, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
            ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines+5, zorder = 1)
            plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
            plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
            
           
            plt.figure('je_t isolines')
            ax = plt.gca()
            log_type         = 0
            auto             = 1
            min_val0         = 0.0
            max_val0         = 0.0
            cont             = 0
            lines            = 1
            cont_nlevels     = 500
            auto_cbar_ticks  = 1 
            auto_lines_ticks = -1
            nticks_cbar      = 5
            nticks_lines     = 10
            cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
            lines_ticks      = np.array([-1E4,-5E3,-2E3,-1E3,-5E2,-1E2,1E2,5E2,1E3,2E3,5E3,1E4,2E4])
            lines_ticks_loc  = 'default'
            cbar_ticks_fmt    = '{%.1f}'
            lines_ticks_fmt   = '{%.4f}'
            lines_width       = line_width
            lines_ticks_color = colors[k]
            lines_style       = '-'
            [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size_isolines, zs, rs, je_t_plot, nodes_flag, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
            ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines+5, zorder = 1)
            plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
            plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
            
           
            plt.figure('je_z isolines')
            ax = plt.gca()
            log_type         = 0
            auto             = 1
            min_val0         = 0.0
            max_val0         = 0.0
            cont             = 0
            lines            = 1
            cont_nlevels     = 500
            auto_cbar_ticks  = 1 
            auto_lines_ticks = -1
            nticks_cbar      = 5
            nticks_lines     = 10
            cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
            lines_ticks      = np.array([-7E2,-5E2,-2E2,-1E2,-7E1,-5E1,-2E1,-1E1,1E0,1E1,2E1,5E1,7E1,1E2,2E2])
            lines_ticks_loc  = 'default'
            cbar_ticks_fmt    = '{%.1f}'
            lines_ticks_fmt   = '{%.2f}'
            lines_width       = line_width
            lines_ticks_color = colors[k]
            lines_style       = '-'
            [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size_isolines, zs, rs, -je_z_plot, nodes_flag, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
            ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines+5, zorder = 1)
            plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
            plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
            
        
            plt.figure('je_perp isolines')
            ax = plt.gca()
            log_type         = 0
            auto             = 1
            min_val0         = 0.0
            max_val0         = 0.0
            cont             = 0
            lines            = 1
            cont_nlevels     = 500
            auto_cbar_ticks  = 1 
            auto_lines_ticks = -1
            nticks_cbar      = 5
            nticks_lines     = 10
            cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
            lines_ticks      = np.array([-7E2,-5E2,-2E2,-1E2,-7E1,-5E1,-2E1,-1E1,1E0,1E1,2E1,5E1,7E1,1E2,2E2])
            lines_ticks_loc  = 'default'
            cbar_ticks_fmt    = '{%.1f}'
            lines_ticks_fmt   = '{%.2f}'
            lines_width       = line_width
            lines_ticks_color = colors[k]
            lines_style       = '-'
            [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size_isolines, zs, rs, -je_perp_plot, nodes_flag, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
            ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines+5, zorder = 1)
            plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
            plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
             
        
            plt.figure('je_para isolines')
            ax = plt.gca()
            log_type         = 0
            auto             = 1
            min_val0         = 0.0
            max_val0         = 0.0
            cont             = 0
            lines            = 1
            cont_nlevels     = 500
            auto_cbar_ticks  = 1 
            auto_lines_ticks = -1
            nticks_cbar      = 5
            nticks_lines     = 10
            cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
            lines_ticks      = np.array([-1E2,-7E1,-5E1,-2E1,-1E1,-7E0,-5E0,-2E0,-1E0,1E-1,2E-1,5E-1,7E-1,1E0,2E0,5E0,7E0,1E1,2E1,3E1,5E1,7E1,1E2])
            lines_ticks_loc  = 'default'
            cbar_ticks_fmt    = '{%.1f}'
            lines_ticks_fmt   = '{%.2f}'
            lines_width       = line_width
            lines_ticks_color = colors[k]
            lines_style       = '-'
            [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size_isolines, zs, rs, -je_para_plot, nodes_flag, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
            ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines+5, zorder = 1)
            plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
            plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
            

            plt.figure('je isolines')
            ax = plt.gca()
            log_type         = 1
            auto             = 1
            min_val0         = 0.0
            max_val0         = 0.0
            cont             = 0
            lines            = 1
            cont_nlevels     = 500
            auto_cbar_ticks  = 1 
            auto_lines_ticks = -1
            nticks_cbar      = 5
            nticks_lines     = 10
            cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
            lines_ticks      = np.array([1E1,1E2,5E2,1E3,2E3,5E3,1E4,2E4])
            lines_ticks_loc  = 'default'
            cbar_ticks_fmt    = '{%.1f}'
            lines_ticks_fmt   = '{%.4f}'
            lines_width       = line_width
            lines_ticks_color = colors[k]
            lines_style       = '-'
            [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size_isolines, zs, rs, je_plot, nodes_flag, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
            ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines+5, zorder = 1)
            plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
            plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
            

            plt.figure('ji isolines')
            ax = plt.gca()
            log_type         = 1
            auto             = 1
            min_val0         = 0.0
            max_val0         = 0.0
            cont             = 0
            lines            = 1
            cont_nlevels     = 500
            auto_cbar_ticks  = 1 
            auto_lines_ticks = -1
            nticks_cbar      = 5
            nticks_lines     = 10
            cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
            lines_ticks      = np.array([1E-5,1E-4,1E-3,1E-2,1E-1,1E0,1E1,1E2,2E2])
            lines_ticks_loc  = 'default'
            cbar_ticks_fmt    = '{%.1f}'
            lines_ticks_fmt   = '{%.4f}'
            lines_width       = line_width
            lines_ticks_color = colors[k]
            lines_style       = '-'
            [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size_isolines, zs, rs, ji_plot, nodes_flag, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
            ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines+5, zorder = 1)
            plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
            plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
            

            plt.figure('j isolines')
            ax = plt.gca()
            log_type         = 1
            auto             = 1
            min_val0         = 0.0
            max_val0         = 0.0
            cont             = 0
            lines            = 1
            cont_nlevels     = 500
            auto_cbar_ticks  = 1 
            auto_lines_ticks = -1
            nticks_cbar      = 5
            nticks_lines     = 10
            cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
            lines_ticks      = np.array([1E1,1E2,5E2,1E3,2E3,5E3,1E4,2E4])
            lines_ticks_loc  = 'default'
            cbar_ticks_fmt    = '{%.1f}'
            lines_ticks_fmt   = '{%.4f}'
            lines_width       = line_width
            lines_ticks_color = colors[k]
            lines_style       = '-'
            [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size_isolines, zs, rs, j_plot, nodes_flag, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
            ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines+5, zorder = 1)
            plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
            plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
            
            
            plt.figure('F_theta isolines')
            ax = plt.gca()
            log_type         = 0
            auto             = 1
            min_val0         = 0.0
            max_val0         = 0.0
            cont             = 0
            lines            = 1
            cont_nlevels     = 500
            auto_cbar_ticks  = 1 
            auto_lines_ticks = -1
            nticks_cbar      = 5
            nticks_lines     = 10
            cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
            lines_ticks      = np.array([-1E4,-5E3,-2E3,-1E3,-5E2,-1E2,1E2,5E2,1E3,2E3,5E3,1E4,2E4])
            lines_ticks_loc  = 'default'
            cbar_ticks_fmt    = '{%.1f}'
            lines_ticks_fmt   = '{%.4f}'
            lines_width       = line_width
            lines_ticks_color = colors[k]
            lines_style       = '-'
            [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size_isolines, zs, rs, F_theta, nodes_flag, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
            ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines+5, zorder = 1)
            plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
            plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
            
            
        if plot_nmp == 1:
            plt.figure('Nmpi1 isolines')
            ax = plt.gca()
            log_type         = 0
            auto             = 1
            min_val0         = 0.0
            max_val0         = 0.0
            cont             = 0
            lines            = 1
            cont_nlevels     = 500
            auto_cbar_ticks  = 1 
            auto_lines_ticks = 1
            nticks_cbar      = 5
            nticks_lines     = 10
            cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
            lines_ticks      = np.array([0.0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1,1.1,1.2])
            lines_ticks_loc  = 'default'
            cbar_ticks_fmt    = '{%.1f}'
            lines_ticks_fmt   = '{%.2f}'
            lines_width       = line_width
            lines_ticks_color = colors[k]
            lines_style       = '-'
            var = n_mp_i1_plot[0:-1,0:-1]
            [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size_isolines, zscells, rscells, var, nodes_flag[0:-1,0:-1], log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)   
            plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
            plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
            

            plt.figure('Nmpi2 isolines')
            ax = plt.gca()
            log_type         = 0
            auto             = 1
            min_val0         = 0.0
            max_val0         = 0.0
            cont             = 0
            lines            = 1
            cont_nlevels     = 500
            auto_cbar_ticks  = 1 
            auto_lines_ticks = 1
            nticks_cbar      = 5
            nticks_lines     = 10
            cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
            lines_ticks      = np.array([0.0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1,1.1,1.2])
            lines_ticks_loc  = 'default'
            cbar_ticks_fmt    = '{%.1f}'
            lines_ticks_fmt   = '{%.2f}'
            lines_width       = line_width
            lines_ticks_color = colors[k]
            lines_style       = '-'
            var = n_mp_i2_plot[0:-1,0:-1]
            [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size_isolines, zscells, rscells, var, nodes_flag[0:-1,0:-1], log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)   
            plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
            plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
            
               
            plt.figure('Nmpn1 isolines')
            ax = plt.gca()
            log_type         = 0
            auto             = 1
            min_val0         = 0.0
            max_val0         = 0.0
            cont             = 0
            lines            = 1
            cont_nlevels     = 500
            auto_cbar_ticks  = 1 
            auto_lines_ticks = 1
            nticks_cbar      = 5
            nticks_lines     = 10
            cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
            lines_ticks      = np.array([0.0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1,1.1,1.2])
            lines_ticks_loc  = 'default'
            cbar_ticks_fmt    = '{%.1f}'
            lines_ticks_fmt   = '{%.2f}'
            lines_width       = line_width
            lines_ticks_color = colors[k]
            lines_style       = '-'
            var = n_mp_n1_plot[0:-1,0:-1]
            [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size_isolines, zscells, rscells, var, nodes_flag[0:-1,0:-1], log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width)   
            plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
            plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
            
        if plot_freq == 1:
            plt.figure('Hall_par isolines')
            ax = plt.gca()
            log_type         = 1
            auto             = 1
            min_val0         = 0.0
            max_val0         = 0.0
            cont             = 0
            lines            = 1
            cont_nlevels     = 500
            auto_cbar_ticks  = 1 
            auto_lines_ticks = -1
            nticks_cbar      = 5
            nticks_lines     = 10
            cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
            lines_ticks      = np.array([1E0,5E0,1E1,5E1,1E2,5E2,1E3,5E3,1E4,5E4,1E5,5E5,1E6])
            lines_ticks_loc  = 'default'
            cbar_ticks_fmt    = '{%.1f}'
            lines_ticks_fmt   = '{%.4f}'
            lines_width       = line_width
            lines_ticks_color = colors[k]
            lines_style       = '-'
            [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size_isolines, zs, rs, Hall_par_plot, nodes_flag, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
            ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines+5, zorder = 1)
            plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
            plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size) 



            if np.any(Hall_par_plot) != np.any(Hall_par_eff_plot):
                plt.figure('Hall_par_eff isolines')
                ax = plt.gca()
                log_type         = 1
                auto             = 1
                min_val0         = 0.0
                max_val0         = 0.0
                cont             = 0
                lines            = 1
                cont_nlevels     = 500
                auto_cbar_ticks  = 1 
                auto_lines_ticks = -1
                nticks_cbar      = 5
                nticks_lines     = 10
                cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
                lines_ticks      = np.array([1E0,5E0,1E1,5E1,1E2,5E2,1E3,5E3,1E4,5E4,1E5,5E5,1E6])
                lines_ticks_loc  = 'default'
                cbar_ticks_fmt    = '{%.1f}'
                lines_ticks_fmt   = '{%.4f}'
                lines_width       = line_width
                lines_ticks_color = colors[k]
                lines_style       = '-'
                [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size_isolines, zs, rs, Hall_par_eff_plot, nodes_flag, log_type, auto, 
                                       min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                       nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                       lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
                ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines+5, zorder = 1)
                plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
                plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
                plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size) 
                
            
            
            plt.figure('nu_e_tot isolines')
            ax = plt.gca()
            log_type         = 1
            auto             = 1
            min_val0         = 0.0
            max_val0         = 0.0
            cont             = 0
            lines            = 1
            cont_nlevels     = 500
            auto_cbar_ticks  = 1 
            auto_lines_ticks = -1
            nticks_cbar      = 5
            nticks_lines     = 10
            cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
            lines_ticks      = np.array([2E3,5E3,1E4,5E4,1E5,5E5,1E6,5E6,1E7,5E7,1E8])
            lines_ticks_loc  = 'default'
            cbar_ticks_fmt    = '{%.1f}'
            lines_ticks_fmt   = '{%.4f}'
            lines_width       = line_width
            lines_ticks_color = colors[k]
            lines_style       = '-'
            [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size_isolines, zs, rs, nu_e_tot_plot, nodes_flag, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
            ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines+5, zorder = 1)
            plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
            plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
            
            
    
            if np.any(nu_e_tot_plot) != np.any(nu_e_tot_eff_plot):
                plt.figure('nu_e_tot_eff isolines')
                ax = plt.gca()
                log_type         = 1
                auto             = 1
                min_val0         = 0.0
                max_val0         = 0.0
                cont             = 0
                lines            = 1
                cont_nlevels     = 500
                auto_cbar_ticks  = 1 
                auto_lines_ticks = -1
                nticks_cbar      = 5
                nticks_lines     = 10
                cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
                lines_ticks      = np.array([2E3,5E3,1E4,5E4,1E5,5E5,1E6,5E6,1E7,5E7,1E8])
                lines_ticks_loc  = 'default'
                cbar_ticks_fmt    = '{%.1f}'
                lines_ticks_fmt   = '{%.4f}'
                lines_width       = line_width
                lines_ticks_color = colors[k]
                lines_style       = '-'
                [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size_isolines, zs, rs, nu_e_tot_eff_plot, nodes_flag, log_type, auto, 
                                       min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                       nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                       lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
                ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines+5, zorder = 1)
                plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
                plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
                plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
                
    
    
            plt.figure('nu_en isolines')
            ax = plt.gca()
            log_type         = 1
            auto             = 1
            min_val0         = 0.0
            max_val0         = 0.0
            cont             = 0
            lines            = 1
            cont_nlevels     = 500
            auto_cbar_ticks  = 1 
            auto_lines_ticks = -1
            nticks_cbar      = 5
            nticks_lines     = 10
            cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
            lines_ticks      = np.array([5E2,1E3,5E3,1E4,5E4,1E5,5E5,1E6,5E6,1E7])
            lines_ticks_loc  = 'default'
            cbar_ticks_fmt    = '{%.1f}'
            lines_ticks_fmt   = '{%.4f}'
            lines_width       = line_width
            lines_ticks_color = colors[k]
            lines_style       = '-'
            [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size_isolines, zs, rs, nu_en_plot, nodes_flag, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
            ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines+5, zorder = 1)
            plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
            plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
            
            
    
            plt.figure('nu_ei1 isolines')
            ax = plt.gca()
            log_type         = 1
            auto             = 1
            min_val0         = 0.0
            max_val0         = 0.0
            cont             = 0
            lines            = 1
            cont_nlevels     = 500
            auto_cbar_ticks  = 1 
            auto_lines_ticks = -1
            nticks_cbar      = 5
            nticks_lines     = 10
            cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
            lines_ticks      = np.array([5E2,1E3,5E3,1E4,5E4,1E5,5E5,1E6,5E6,1E7,5E7])
            lines_ticks_loc  = 'default'
            cbar_ticks_fmt    = '{%.1f}'
            lines_ticks_fmt   = '{%.4f}'
            lines_width       = line_width
            lines_ticks_color = colors[k]
            lines_style       = '-'
            [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size_isolines, zs, rs, nu_ei1_plot, nodes_flag, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
            ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines+5, zorder = 1)
            plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
            plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)          
            
            
    
            plt.figure('nu_ei2 isolines')
            ax = plt.gca()
            log_type         = 1
            auto             = 1
            min_val0         = 0.0
            max_val0         = 0.0
            cont             = 0
            lines            = 1
            cont_nlevels     = 500
            auto_cbar_ticks  = 1 
            auto_lines_ticks = -1
            nticks_cbar      = 5
            nticks_lines     = 10
            cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
            lines_ticks      = np.array([5E2,1E3,5E3,1E4,5E4,1E5,5E5,1E6,5E6,1E7,5E7])
            lines_ticks_loc  = 'default'
            cbar_ticks_fmt    = '{%.1f}'
            lines_ticks_fmt   = '{%.4f}'
            lines_width       = line_width
            lines_ticks_color = colors[k]
            lines_style       = '-'
            [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size_isolines, zs, rs, nu_ei2_plot, nodes_flag, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
            ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines+5, zorder = 1)
            plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
            plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size) 
            
            
    
            plt.figure('nu_i01 isolines')
            ax = plt.gca()
            log_type         = 1
            auto             = 1
            min_val0         = 0.0
            max_val0         = 0.0
            cont             = 0
            lines            = 1
            cont_nlevels     = 500
            auto_cbar_ticks  = 1 
            auto_lines_ticks = -1
            nticks_cbar      = 5
            nticks_lines     = 10
            cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
            lines_ticks      = np.array([1E0,5E2,1E3,5E3,1E4,5E4,1E5,5E5,1E6])
            lines_ticks_loc  = 'default'
            cbar_ticks_fmt    = '{%.1f}'
            lines_ticks_fmt   = '{%.4f}'
            lines_width       = line_width
            lines_ticks_color = colors[k]
            lines_style       = '-'
            [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size_isolines, zs, rs, nu_i01_plot, nodes_flag, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
            ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines+5, zorder = 1)
            plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
            plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size) 
            
            
    
            plt.figure('nu_i02 isolines')
            ax = plt.gca()
            log_type         = 1
            auto             = 1
            min_val0         = 0.0
            max_val0         = 0.0
            cont             = 0
            lines            = 1
            cont_nlevels     = 500
            auto_cbar_ticks  = 1 
            auto_lines_ticks = -1
            nticks_cbar      = 5
            nticks_lines     = 10
            cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
            lines_ticks      = np.array([1E0,5E2,1E3,5E3,1E4,5E4])
            lines_ticks_loc  = 'default'
            cbar_ticks_fmt    = '{%.1f}'
            lines_ticks_fmt   = '{%.4f}'
            lines_width       = line_width
            lines_ticks_color = colors[k]
            lines_style       = '-'
            [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size_isolines, zs, rs, nu_i02_plot, nodes_flag, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
            ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines+5, zorder = 1)
            plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
            plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size) 
    
    
    
            plt.figure('nu_i12 isolines')
            ax = plt.gca()
            log_type         = 1
            auto             = 1
            min_val0         = 0.0
            max_val0         = 0.0
            cont             = 0
            lines            = 1
            cont_nlevels     = 500
            auto_cbar_ticks  = 1 
            auto_lines_ticks = -1
            nticks_cbar      = 5
            nticks_lines     = 10
            cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
            lines_ticks      = np.array([1E0,5E2,1E3,5E3,1E4])
            lines_ticks_loc  = 'default'
            cbar_ticks_fmt    = '{%.1f}'
            lines_ticks_fmt   = '{%.4f}'
            lines_width       = line_width
            lines_ticks_color = colors[k]
            lines_style       = '-'
            [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size_isolines, zs, rs, nu_i12_plot, nodes_flag, log_type, auto, 
                                   min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                                   nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                                   lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
            ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines+5, zorder = 1)
            plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
            plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
            plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size) 

                   
                             
    if save_flag == 1:
        if plot_fields == 1:
            plt.figure('phi isolines')
            plt.savefig(path_out+"phi_iso"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('E isolines')
            plt.savefig(path_out+"E_iso"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('Er isolines')
            plt.savefig(path_out+"Er_iso"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('Ez isolines')
            plt.savefig(path_out+"Ez_iso"+figs_format,bbox_inches='tight') 
            plt.close()
        if plot_dens == 1:
            plt.figure('n isolines')
            plt.savefig(path_out+"ne_iso"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('ni1 isolines')
            plt.savefig(path_out+"ni1_iso"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('ni2 isolines')
            plt.savefig(path_out+"ni2_iso"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('ratio_ni1_ni2 isolines')
            plt.savefig(path_out+"ratio_ni1_ni2_iso"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('nn isolines')
            plt.savefig(path_out+"nn_iso"+figs_format,bbox_inches='tight') 
            plt.close()
        if plot_temp == 1:
            plt.figure('Te isolines')
            plt.savefig(path_out+"Te_iso"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('Ti1 isolines')
            plt.savefig(path_out+"Ti1_iso"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('Ti2 isolines')
            plt.savefig(path_out+"Ti2_iso"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('Tn isolines')
            plt.savefig(path_out+"Tn_iso"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('ratio_Ekin_Te isolines')
            plt.savefig(path_out+"ratio_Ekin_Te_iso"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('ratio_Ekin_Ti1 isolines')
            plt.savefig(path_out+"ratio_Ekin_Ti1_iso"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('ratio_Ekin_Ti2 isolines')
            plt.savefig(path_out+"ratio_Ekin_Ti2_iso"+figs_format,bbox_inches='tight') 
            plt.close()
        if plot_vel == 1:
            plt.figure('Mi1 isolines')
            plt.savefig(path_out+"Mi1_iso"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('Mi2 isolines')
            plt.savefig(path_out+"Mi2_iso"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('ue_r isolines')
            plt.savefig(path_out+"ue_r_iso"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('ue_t isolines')
            plt.savefig(path_out+"ue_t_iso"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('ue_z isolines')
            plt.savefig(path_out+"ue_z_iso"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('ue_perp isolines')
            plt.savefig(path_out+"ue_perp_iso"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('ue_para isolines')
            plt.savefig(path_out+"ue_para_iso"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('ratio ue_t_perp isolines')
            plt.savefig(path_out+"ratio_ue_t_perp_iso"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('ratio ue_t_para isolines')
            plt.savefig(path_out+"ratio_ue_t_para_iso"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('ratio ue_perp_para isolines')
            plt.savefig(path_out+"ratio_ue_perp_para_iso"+figs_format,bbox_inches='tight') 
            plt.close()
        if plot_curr == 1:
            plt.figure('je_r isolines')
            plt.savefig(path_out+"je_r_iso"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('je_t isolines')
            plt.savefig(path_out+"je_t_iso"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('je_z isolines')
            plt.savefig(path_out+"je_z_iso"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('je_perp isolines')
            plt.savefig(path_out+"je_perp_iso"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('je_para isolines')
            plt.savefig(path_out+"je_para_iso"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('je isolines')
            plt.savefig(path_out+"je_iso"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('ji isolines')
            plt.savefig(path_out+"ji_iso"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('j isolines')
            plt.savefig(path_out+"j_iso"+figs_format,bbox_inches='tight') 
            plt.close()
        if plot_nmp == 1:
            plt.figure('Nmpi1 isolines')
            plt.savefig(path_out+"Nmpi1_iso"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('Nmpi2 isolines')
            plt.savefig(path_out+"Nmpi2_iso"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('Nmpn1 isolines')
            plt.savefig(path_out+"Nmpn1_iso"+figs_format,bbox_inches='tight') 
            plt.close()
        if plot_freq == 1:
            plt.figure('Hall_par isolines')
            plt.savefig(path_out+"Hall_par_iso"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('Hall_par_eff isolines')
            plt.savefig(path_out+"Hall_par_eff_iso"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('nu_e_tot isolines')
            plt.savefig(path_out+"nu_e_tot_iso"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('nu_e_tot_eff isolines')
            plt.savefig(path_out+"nu_e_tot_eff_iso"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('nu_en isolines')
            plt.savefig(path_out+"nu_en_iso"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('nu_ei1 isolines')
            plt.savefig(path_out+"nu_ei1_iso"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('nu_ei2 isolines')
            plt.savefig(path_out+"nu_ei2_iso"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('nu_i01 isolines')
            plt.savefig(path_out+"nu_i01_iso"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('nu_i02 isolines')
            plt.savefig(path_out+"nu_i02_iso"+figs_format,bbox_inches='tight') 
            plt.close()
            plt.figure('nu_i12 isolines')
            plt.savefig(path_out+"nu_i12_iso"+figs_format,bbox_inches='tight') 
            plt.close()
    ###########################################################################

        
    

        
# --- MASS BALANCE PLOTS ------------------------------------------------------
if mbal_plots == 1:  
    print("######## mbal_plots ########")
    
    rind = 0

    marker_every = 10
    font_size_legend = font_size - 10
    
    # Simulation names
    nsims = 1
                 
    sim_names = ["../../Rb_hyphen/sim/sims/SPT100_al0025_Ne5_C1"]
    
                 
                 
    # Labels
    labels = [r"D 4mA",
              r"D 4mA, no coll"]
              
    labels = [r"D 4mA",
              r"S 4mA"]
              
    # Line colors
    colors = ['r','g','b','k','c','m']
    # Markers
    markers = ['o','s','^', 'v', '<', '>']
    # Line style
    linestyles = ['-','--','-.', ':','-','--']


    # Plot the time evolution of the neutrals 1 mass balance
    plt.figure("n1 mass bal")
    plt.title(r"(f) $dM_{n1}/dt$ (10$^{-7}$ kgs$^{-1}$)", fontsize = font_size,y=1.02)
    plt.xlabel(r'$t$ (ms)', fontsize = font_size)
    plt.xticks(fontsize = ticks_size) 
    plt.yticks(fontsize = ticks_size)
    # Plot the time evolution of the ions 1 mass balance
    plt.figure("i1 mass bal")
    plt.title(r"(f) $dM_{i1}/dt$ (10$^{-7}$ kgs$^{-1}$)",fontsize = font_size,y=1.02)
    plt.xlabel(r'$t$ (ms)', fontsize = font_size)
    plt.xticks(fontsize = ticks_size) 
    plt.yticks(fontsize = ticks_size)
    # Plot the time evolution of the ions 2 mass balance
    plt.figure("i2 mass bal")
    plt.title(r"(f) $dM_{i2}/dt$ (10$^{-7}$ kgs$^{-1}$)", fontsize = font_size,y=1.02)
    plt.xlabel(r'$t$ (ms)', fontsize = font_size)
    plt.xticks(fontsize = ticks_size) 
    plt.yticks(fontsize = ticks_size)
    # Plot the time evolution of the total mass balance
    plt.figure("Total mass bal")
    plt.title(r"(f) $dM_{tot}/dt$ (10$^{-7}$ kgs$^{-1}$)", fontsize = font_size,y=1.02)
    plt.xlabel(r'$t$ (ms)', fontsize = font_size)
    plt.xticks(fontsize = ticks_size) 
    plt.yticks(fontsize = ticks_size)
    # Plot the time evolution of the neutrals 1 mass balance error 
    plt.figure("err n1 mass bal")
    plt.title(r"(f) $\epsilon_{n1}$ (-)", fontsize = font_size,y=1.02)
    plt.xlabel(r'$t$ (ms)', fontsize = font_size)
    plt.xticks(fontsize = ticks_size) 
    plt.yticks(fontsize = ticks_size)
    # Plot the time evolution of the ions 1 mass balance error 
    plt.figure("err i1 mass bal")
    plt.title(r"(f) $\epsilon_{i1}$ (-)", fontsize = font_size,y=1.02)
    plt.xlabel(r'$t$ (ms)', fontsize = font_size)
    plt.xticks(fontsize = ticks_size) 
    plt.yticks(fontsize = ticks_size)
    # Plot the time evolution of the ions 2 mass balance error 
    plt.figure("err i2 mass bal")
    plt.title(r"(f) $\epsilon_{i2}$ (-)", fontsize = font_size,y=1.02)
    plt.xlabel(r'$t$ (ms)', fontsize = font_size)
    plt.xticks(fontsize = ticks_size) 
    plt.yticks(fontsize = ticks_size)
    
#    if nsims == 1:
#        # Plot the time evolution of the contributions to the n1 mass balance
#        plt.figure("Contributions on n1 mass bal")
#        plt.title(r"$\dot{m}_{n1}^{coll}$, $\dot{m}_{n1}^{tw}$, $\dot{m}_{n1}^{fw}$ (10$^{-7}$ kgs$^{-1}$)", fontsize = font_size)
#        plt.xlabel(r'$t$ (ms)', fontsize = font_size)
#        plt.xticks(fontsize = ticks_size) 
#        plt.yticks(fontsize = ticks_size)
#        # Plot the time evolution of the contributions to the i1 mass balance
#        plt.figure("Contributions on i1 mass bal")
#        plt.title(r"$\dot{m}_{i1}^{coll}$, $\dot{m}_{i1}^{tw}$, $\dot{m}_{i1}^{fw}$ (10$^{-7}$ kgs$^{-1}$)", fontsize = font_size)
#        plt.xlabel(r'$t$ (ms)', fontsize = font_size)
#        plt.xticks(fontsize = ticks_size) 
#        plt.yticks(fontsize = ticks_size)
#        # Plot the time evolution of the contributions to the i2 mass balance
#        plt.figure("Contributions on i2 mass bal")
#        plt.title(r"$\dot{m}_{i2}^{coll}$, $\dot{m}_{i2}^{tw}$, $\dot{m}_{i2}^{fw}$ (10$^{-7}$ kgs$^{-1}$)", fontsize = font_size)
#        plt.xlabel(r'$t$ (ms)', fontsize = font_size)
#        plt.xticks(fontsize = ticks_size) 
#        plt.yticks(fontsize = ticks_size)
#        # Plot the time evolution of the collisions mass flows
#        plt.figure("Collisions mass flows")
#        plt.title(r"$\dot{m}^{coll}$ (10$^{-7}$ kgs$^{-1}$)", fontsize = font_size)
#        plt.xlabel(r'$t$ (ms)', fontsize = font_size)
#        plt.xticks(fontsize = ticks_size) 
#        plt.yticks(fontsize = ticks_size)
    

    for k in range(0,nsims):
        ind_ini_letter = sim_names[k].rfind('/') + 1
        print("##### CASE "+str(k+1)+": "+sim_names[k][ind_ini_letter::]+" #####")
        ######################## READ INPUT/OUTPUT FILES ##########################
        # Obtain paths to simulation files
        path_picM         = sim_names[k]+"/SET/inp/SPT100_picM.hdf5"
        path_simstate_inp = sim_names[k]+"/CORE/inp/SimState.hdf5"
        path_simstate_out = sim_names[k]+"/CORE/out/SimState.hdf5"
        path_postdata_out = sim_names[k]+"/CORE/out/PostData.hdf5"
        path_simparams_inp = sim_names[k]+"/CORE/inp/sim_params.inp"
        print("Reading results...")
        [num_ion_spe,num_neu_spe,n_mp_cell_i,n_mp_cell_n,n_mp_cell_i_min,
           n_mp_cell_i_max,n_mp_cell_n_min,n_mp_cell_n_max,min_ion_plasma_density,
           m_A,spec_refl_prob,ene_bal,points,zs,rs,zscells,rscells,dims,
           nodes_flag,cells_flag,cells_vol,volume,ind_maxr_c,ind_maxz_c,nr_c,nz_c,
           eta_max,eta_min,xi_top,xi_bottom,time,time_fast,steps,steps_fast,dt,dt_e,
           nsteps,nsteps_fast,nsteps_eFld,faces,nodes,boundary_f,face_geom,elem_geom,
           n_faces,n_elems,n_faces_boundary,bIDfaces_Dwall,bIDfaces_Awall,
           bIDfaces_FLwall,IDfaces_Dwall,IDfaces_Awall,IDfaces_FLwall,zfaces_Dwall,
           rfaces_Dwall,Afaces_Dwall,zfaces_Awall,rfaces_Awall,Afaces_Awall,
           zfaces_FLwall,rfaces_FLwall,Afaces_FLwall,
           cath_elem,z_cath,r_cath,V_cath,mass,ssIons1,ssIons2,ssNeutrals1,ssNeutrals2,
           n_mp_i1_list,n_mp_i2_list,n_mp_n1_list,n_mp_n2_list,phi,Ez,Er,Efield,
           Bz,Br,Bfield,Te,cs01,cs02,nn1,nn2,ni1,ni2,ne,fn1_x,fn1_y,fn1_z,fn2_x,
           fn2_y,fn2_z,fi1_x,fi1_y,fi1_z,fi2_x,fi2_y,fi2_z,un1_x,un1_y,un1_z,
           un2_x,un2_y,un2_z,ui1_x,ui1_y,ui1_z,ui2_x,ui2_y,ui2_z,ji1_x,ji1_y,
           ji1_z,ji2_x,ji2_y,ji2_z,je_r,je_t,je_z,je_perp,je_para,ue_r,ue_t,ue_z,
           ue_perp,ue_para,uthetaExB,Tn1,Tn2,Ti1,Ti2,n_mp_n1,n_mp_n2,n_mp_i1,n_mp_i2,
           avg_w_n1,avg_w_n2,avg_w_i1,avg_w_i2,neu_gen_weights1,neu_gen_weights2,
           ion_gen_weights1,ion_gen_weights2,surf_elems,n_imp_elems,imp_elems,
           imp_elems_kbc,imp_elems_MkQ1,imp_elems_Te,imp_elems_dphi_kbc,
           imp_elems_dphi_sh,imp_elems_nQ1,imp_elems_nQ2,imp_elems_ion_flux_in1,
           imp_elems_ion_flux_out1,imp_elems_ion_ene_flux_in1,
           imp_elems_ion_ene_flux_out1,imp_elems_ion_imp_ene1,
           imp_elems_ion_flux_in2,imp_elems_ion_flux_out2,
           imp_elems_ion_ene_flux_in2,imp_elems_ion_ene_flux_out2,
           imp_elems_ion_imp_ene2,imp_elems_neu_flux_in1,imp_elems_neu_flux_out1,
           imp_elems_neu_ene_flux_in1,imp_elems_neu_ene_flux_out1,
           imp_elems_neu_imp_ene1,imp_elems_neu_flux_in2,imp_elems_neu_flux_out2,
           imp_elems_neu_ene_flux_in2,imp_elems_neu_ene_flux_out2,
           imp_elems_neu_imp_ene2,tot_mass_mp_neus,tot_mass_mp_ions,tot_num_mp_neus,
           tot_num_mp_ions,tot_mass_exit_neus,tot_mass_exit_ions,mass_mp_neus,
           mass_mp_ions,num_mp_neus,num_mp_ions,avg_dens_mp_neus,avg_dens_mp_ions,
           eta_u,eta_prod,eta_thr,eta_div,eta_cur,thrust,thrust_ion,thrust_neu,thrust_e,
           Id_inst,Id,Vd_inst,Vd,I_beam,I_tw_tot,Pd,Pd_inst,P_mat,P_inj,P_inf,P_ion,
           P_ex,P_use_tot_i,P_use_tot_n,P_use_tot,P_use_z_i,P_use_z_n,P_use_z,
           qe_wall,qe_wall_inst,Pe_faces_Dwall,Pe_faces_Awall,Pe_faces_FLwall,
           Pe_faces_Dwall_inst,Pe_faces_Awall_inst,Pe_faces_FLwall_inst,
           Pe_Dwall,Pe_Awall,Pe_FLwall,Pe_Dwall_inst,Pe_Awall_inst,Pe_FLwall_inst, 
           Pi_Dwall,Pi_Awall,Pi_FLwall,Pi_FLwall_nonz,Pn_Dwall,Pn_Awall,Pn_FLwall,
           Pn_FLwall_nonz,P_Dwall,P_Awall,P_FLwall,Pwalls,Pionex,Ploss,Pthrust,
           Pnothrust,Pnothrust_walls,balP,err_balP,ctr_Pd,ctr_Ploss,ctr_Pwalls,
           ctr_Pionex,ctr_P_DAwalls,ctr_P_FLwalls,ctr_P_FLwalls_in,ctr_P_FLwalls_i,
           ctr_P_FLwalls_n,ctr_P_FLwalls_e,balP_Pthrust,err_balP_Pthrust,
           ctr_balPthrust_Pd,ctr_balPthrust_Pnothrust,ctr_balPthrust_Pthrust,
           ctr_balPthrust_Pnothrust_walls,ctr_balPthrust_Pnothrust_ionex,
           err_def_balP,Isp_s,Isp_ms,dMdt_i1,dMdt_i2,dMdt_n1,dMdt_n2,dMdt_tot,
           mflow_coll_i1,mflow_coll_i2,mflow_coll_n1,mflow_coll_n2,mflow_fw_i1,
           mflow_fw_i2,mflow_fw_n1,mflow_fw_n2,mflow_tw_i1,mflow_tw_i2,mflow_tw_n1,
           mflow_tw_n2,mflow_ircmb_picS_n1,mflow_ircmb_picS_n2,mflow_inj_i1,mflow_inj_i2,
           mflow_fwmat_i1,mflow_fwmat_i2,mflow_inj_n1,mflow_fwmat_n1,mflow_inj_n2,
           mflow_fwmat_n2,mflow_twmat_i1,mflow_twinf_i1,mflow_twa_i1,mflow_twmat_i2,
           mflow_twinf_i2,mflow_twa_i2,mflow_twmat_n1,mflow_twinf_n1,mflow_twa_n1,
           mflow_twmat_n2,mflow_twinf_n2,mflow_twa_n2,mbal_n1,mbal_i1,mbal_i2,mbal_tot,
           err_mbal_n1,err_mbal_i1,err_mbal_i2,err_mbal_tot,ctr_mflow_coll_n1,
           ctr_mflow_fw_n1,ctr_mflow_tw_n1,ctr_mflow_coll_i1,ctr_mflow_fw_i1,
           ctr_mflow_tw_i1,ctr_mflow_coll_i2,ctr_mflow_fw_i2,ctr_mflow_tw_i2,
           ctr_mflow_coll_tot,ctr_mflow_fw_tot,ctr_mflow_tw_tot,dEdt_i1,dEdt_i2,
           dEdt_n1,dEdt_n2,eneflow_coll_i1,eneflow_coll_i2,eneflow_coll_n1,
           eneflow_coll_n2,eneflow_fw_i1,eneflow_fw_i2,eneflow_fw_n1,eneflow_fw_n2,
           eneflow_tw_i1,eneflow_tw_i2,eneflow_tw_n1,eneflow_tw_n2,Pfield_i1,
           Pfield_i2,eneflow_inj_i1,eneflow_fwmat_i1,eneflow_inj_i2,
           eneflow_fwmat_i2,eneflow_inj_n1,eneflow_fwmat_n1,eneflow_inj_n2,
           eneflow_fwmat_n2,eneflow_twmat_i1,eneflow_twinf_i1,eneflow_twa_i1,
           eneflow_twmat_i2,eneflow_twinf_i2,eneflow_twa_i2,eneflow_twmat_n1,
           eneflow_twinf_n1,eneflow_twa_n1,eneflow_twmat_n2,eneflow_twinf_n2,
           eneflow_twa_n2,ndot_ion01_n1,ndot_ion02_n1,ndot_ion12_i1,ne_cath,Te_cath,
           nu_cath,ndot_cath,Q_cath,P_cath,F_theta,Hall_par,Hall_par_eff,
           nu_e_tot,nu_e_tot_eff,nu_en,nu_ei1,nu_ei2,nu_i01,nu_i02,nu_i12] = HET_sims_read(path_simstate_inp,path_simstate_out,
                                                                                           path_postdata_out,path_simparams_inp,
                                                                                           path_picM,allsteps_flag,timestep,read_inst_data,
                                                                                           read_part_lists,read_flag)
                                                                                                        

        ###########################################################################    
    
        ############################ GENERATING PLOTS #############################
        # Time in ms
        time      = time*1e3
        time_fast = time_fast*1e3
        # Distances in cm
        rs = rs*1e2
        zs = zs*1e2
        
#        dMdt_n1   = dMdt_n1
#        dMdt_i1   = dMdt_i1
#        dMdt_i2   = dMdt_i2
#        mflow_coll_n1 = mflow_coll_n1
#        mflow_coll_i1 = mflow_coll_i1
#        mflow_coll_i2 = mflow_coll_i2
#        mflow_fw_i1 = mflow_fw_i1
#        mflow_fw_i2 = mflow_fw_i2
#        mflow_fw_n1 = mflow_fw_n1
#        mflow_tw_n1 = mflow_tw_n1
#        mflow_tw_i1 = mflow_tw_i1
#        mflow_tw_i2 = mflow_tw_i2
    

        # Plot the time evoulution of the neutrals 1 mass balance
        if np.any(mbal_n1 != 0.0):
            plt.figure("n1 mass bal")
            plt.plot(time, mbal_n1, linestyle='-', linewidth=line_width, markevery=marker_every, markersize=marker_size, marker=markers[k], color=colors[k], markeredgecolor = 'k',label=labels[k])
            plt.plot(time, dMdt_n1, linestyle='--', linewidth=line_width, markevery=marker_every, markersize=marker_size, marker=markers[k], color=colors[k], markeredgecolor = 'k',label=labels[k])

        # Plot the time evoulution of the ions 1 mass balance
        if np.any(mbal_i1 != 0.0):
            plt.figure("i1 mass bal")
            plt.plot(time, mbal_i1, linestyle='-', linewidth=line_width, markevery=marker_every, markersize=marker_size, marker=markers[k], color=colors[k], markeredgecolor = 'k',label=labels[k])
            plt.plot(time, dMdt_i1, linestyle='--', linewidth=line_width, markevery=marker_every, markersize=marker_size, marker=markers[k], color=colors[k], markeredgecolor = 'k',label=labels[k])

        # Plot the time evoulution of the ions 2 mass balance
        plt.figure("i2 mass bal")
        plt.plot(time, mbal_i2, linestyle='-', linewidth=line_width, markevery=marker_every, markersize=marker_size, marker=markers[k], color=colors[k], markeredgecolor = 'k',label=labels[k])
        plt.plot(time, dMdt_i2, linestyle='--', linewidth=line_width, markevery=marker_every, markersize=marker_size, marker=markers[k], color=colors[k], markeredgecolor = 'k',label=labels[k])
        
        
        
        # Plot the time evoulution of the total mass balance
        plt.figure("Total mass bal")
        plt.plot(time, mbal_i1 + mbal_n1 + mbal_i2, linestyle='-', linewidth=line_width, markevery=marker_every, markersize=marker_size, marker=markers[k], color=colors[k], markeredgecolor = 'k',label=labels[k])
        plt.plot(time, dMdt_i1 + dMdt_n1 + dMdt_i2, linestyle='--', linewidth=line_width, markevery=marker_every, markersize=marker_size, marker=markers[k], color=colors[k], markeredgecolor = 'k',label=labels[k])

        # Plot the time evoulution of the neutrals 1 mass balance error 
        if np.any(err_mbal_n1[1:] != 0.0):
            plt.figure("err n1 mass bal")
            plt.semilogy(time, err_mbal_n1, linestyle='--', linewidth=line_width, markevery=marker_every, markersize=marker_size, marker=markers[k], color=colors[k], markeredgecolor = 'k',label=labels[k])

        
        # Plot the time evoulution of the ions 1 mass balance error 
        if np.any(err_mbal_i1[1:] != 0.0):
            plt.figure("err i1 mass bal")  
            plt.semilogy(time, err_mbal_i1, linestyle='--', linewidth=line_width, markevery=marker_every, markersize=marker_size, marker=markers[k], color=colors[k], markeredgecolor = 'k',label=labels[k])
        
        # Plot the time evoulution of the neutrals 2 mass balance error 
        plt.figure("err i2 mass bal")        
        plt.semilogy(time, err_mbal_i2, linestyle='--', linewidth=line_width, markevery=marker_every, markersize=marker_size, marker=markers[k], color=colors[k], markeredgecolor = 'k',label=labels[k])
        
        
    
#    if nsims == 1:     
#        # Plot the time evoulution of the contributions to the n1 mass balance
#        plt.figure("Contributions on n1 mass bal")
#        plt.plot(time, ctr_mflow_coll_n1, linestyle='-', linewidth=line_width, markevery=marker_every, markersize=marker_size, marker='o', color='r', markeredgecolor = 'r',label='Collisions')
#        plt.plot(time, ctr_mflow_tw_n1, linestyle='-', linewidth=line_width, markevery=marker_every, markersize=marker_size, marker='o', color='g', markeredgecolor = 'g',label='Flow to wall')
#        plt.plot(time, ctr_mflow_fw_n1, linestyle='-', linewidth=line_width, markevery=marker_every, markersize=marker_size, marker='o', color='b', markeredgecolor = 'b',label='Flow from wall')
#
#        # Plot the time evoulution of the contributions to the n2 mass balance
#        plt.figure("Contributions on n2 mass bal")
#        plt.plot(time, ctr_mflow_coll_n2, linestyle='-', linewidth=line_width, markevery=marker_every, markersize=marker_size, marker='o', color='r', markeredgecolor = 'r',label='Collisions')
#        plt.plot(time, ctr_mflow_tw_n2, linestyle='-', linewidth=line_width, markevery=marker_every, markersize=marker_size, marker='o', color='g', markeredgecolor = 'g',label='Flow to wall')
#        plt.plot(time, ctr_mflow_fw_n2, linestyle='-', linewidth=line_width, markevery=marker_every, markersize=marker_size, marker='o', color='b', markeredgecolor = 'b',label='Flow from wall')
#
#        # Plot the time evoulution of the contributions to the i1 mass balance
#        plt.figure("Contributions on i1 mass bal")
#        plt.plot(time, ctr_mflow_coll_i1, linestyle='-', linewidth=line_width, markevery=marker_every, markersize=marker_size, marker='o', color='r', markeredgecolor = 'r',label='Collisions')
#        plt.plot(time, ctr_mflow_tw_i1, linestyle='-', linewidth=line_width, markevery=marker_every, markersize=marker_size, marker='o', color='g', markeredgecolor = 'g',label='Flow to wall')
#        plt.plot(time, ctr_mflow_fw_i1, linestyle='-', linewidth=line_width, markevery=marker_every, markersize=marker_size, marker='o', color='b', markeredgecolor = 'b',label='Flow from wall')
#
#        # Plot the time evoulution of the collision mass flows
#        plt.figure("Collisions mass flows")
#        plt.plot(time, mflow_coll_n1, linestyle='-', linewidth=line_width, markevery=marker_every, markersize=marker_size, marker='o', color='r', markeredgecolor = 'r',label='$n_1$')
#        plt.plot(time, mflow_coll_n2, linestyle='-', linewidth=line_width, markevery=marker_every, markersize=marker_size, marker='o', color='g', markeredgecolor = 'g',label='$n_2$')
#        plt.plot(time, mflow_coll_n1 + mflow_coll_n2, linestyle='-', linewidth=line_width, markevery=marker_every, markersize=marker_size, marker='o', color='b', markeredgecolor = 'b',label='$n_1 + n_2$')
#        plt.plot(time, mflow_coll_i1, linestyle='-', linewidth=line_width, markevery=marker_every, markersize=marker_size, marker='o', color='k', markeredgecolor = 'k',label='$i_1$')
    

    
    plt.figure("n1 mass bal")
    plt.legend(fontsize = font_size,loc=1)
    plt.figure("i1 mass bal")
    plt.legend(fontsize = font_size,loc=1)
    plt.figure("i2 mass bal")
    plt.legend(fontsize = font_size,loc=1)
    plt.figure("Total mass bal")
    plt.legend(fontsize = font_size,loc=1)
    plt.figure("err n1 mass bal")
    plt.legend(fontsize = font_size,loc=1)
    plt.figure("err i1 mass bal") 
    plt.legend(fontsize = font_size,loc=1)
    plt.figure("err i2 mass bal") 
    plt.legend(fontsize = font_size,loc=1)       
    
#    if nsims == 1:
#        plt.figure("Contributions on n1 mass bal")
#        plt.legend(fontsize = font_size,loc=4)
#        plt.figure("Contributions on n2 mass bal")
#        plt.legend(fontsize = font_size,loc=4) 
#        plt.figure("Contributions on i1 mass bal")
#        plt.legend(fontsize = font_size,loc=4) 
#        plt.figure("Collisions mass flows")
#        plt.legend(fontsize = font_size,loc=4) 

    if save_flag == 1:
        plt.figure("n1 mass bal")
        plt.savefig(path_out+"mbal_n1"+figs_format,bbox_inches='tight') 
        plt.close()
        plt.figure("i1 mass bal")
        plt.savefig(path_out+"mbal_i1"+figs_format,bbox_inches='tight') 
        plt.close()
        plt.figure("i2 mass bal")
        plt.savefig(path_out+"mbal_i2"+figs_format,bbox_inches='tight') 
        plt.close()
        plt.figure("Total mass bal")
        plt.savefig(path_out+"mbal_tot"+figs_format,bbox_inches='tight') 
        plt.close()
        plt.figure("err n1 mass bal")
        plt.savefig(path_out+"err_mbal_n1"+figs_format,bbox_inches='tight') 
        plt.close()
        plt.figure("err i1 mass bal") 
        plt.savefig(path_out+"err_mbal_i1"+figs_format,bbox_inches='tight') 
        plt.close()
        plt.figure("err i2 mass bal") 
        plt.savefig(path_out+"err_mbal_i2"+figs_format,bbox_inches='tight') 
        plt.close() 
#        if nsims == 1:
#            plt.figure("Contributions on n1 mass bal")
#            plt.savefig(path_out+"ctr_mbal_n1"+figs_format,bbox_inches='tight') 
#            plt.close()
#            plt.figure("Contributions on n2 mass bal")
#            plt.savefig(path_out+"ctr_mbal_n2"+figs_format,bbox_inches='tight') 
#            plt.close()
#            plt.figure("Contributions on i1 mass bal")
#            plt.savefig(path_out+"ctr_mbal_i1"+figs_format,bbox_inches='tight') 
#            plt.close()
#            plt.figure("Collisions mass flows")
#            plt.savefig(path_out+"coll_mflows"+figs_format,bbox_inches='tight') 
#            plt.close()
    ########################################################################### 

            
        
if comp_time_plots == 1:     
    
#    font_size = 30
#    ticks_size = 30
#    marker_size = 10
#    line_width = 2.5
    font_size = 25
    ticks_size = 25
    marker_size = 7
    line_width = 1.5
    
    ratio = (15*4.127923E+04)/(10*4.576981E+05)
    
    N_ek       = np.array([5,10,20,50,100])
    total_comp_time = np.array([4.576981E+05,4.831330E+05,4.989851E+05,5.154866E+05,5.564101E+05])/(60.0*60.0)
    pic_comp_time = np.array([6.655034E+04,5.619829E+04,4.706281E+04,3.075761E+04,2.897919E+04])/(60.0*60.0)
    eFld_comp_time = np.array([2.871882E+05,3.506923E+05,3.977366E+05,4.290618E+05,4.777899E+05])/(60.0*60.0)
    
#    total_comp_time_percore = np.array([10*4.576981E+05,10*4.831330E+05,10*4.989851E+05,15*5.154866E+05,15*5.564101E+05])/(60.0*60.0)
#    pic_comp_time_percore   = np.array([10*6.655034E+04,10*5.619829E+04,10*4.706281E+04,15*3.075761E+04,15*2.897919E+04])/(60.0*60.0)
#    eFld_comp_time_percore  = np.array([10*2.871882E+05,10*3.506923E+05,10*3.977366E+05,15*4.290618E+05,15*4.777899E+05])/(60.0*60.0)
    
    total_comp_time_percore = np.array([10*4.576981E+05,10*4.831330E+05,10*4.989851E+05,15*5.154866E+05,15*5.564101E+05])/(60.0*60.0)*ratio
    pic_comp_time_percore   = np.array([10*6.655034E+04,10*5.619829E+04,10*4.706281E+04,15*3.075761E+04,15*2.897919E+04])/(60.0*60.0)*ratio
    eFld_comp_time_percore  = np.array([10*2.871882E+05,10*3.506923E+05,10*3.977366E+05,15*4.290618E+05,15*4.777899E+05])/(60.0*60.0)*ratio
    
    
    ##### NEW COMPUTATIONAL TIMES FROM SERIAL RUNS (1000 STEPS WITH NOMADS)
    # Single core computational time of 1000 steps in hours
    tcomp_1000 = np.array([1.575214E+03,1.786506E+03,2.685087E+03,4.708037E+03,7.024805E+03])/(60.0*60.0) # Hours
    # Single core computational time of 45000 steps with nomads in hours
    tcomp = tcomp_1000*(45000.0/1000.0)
    # Add the initialization single core computational time in hours (15000 steps)
    tcomp_ini = 9.663667E+03/(60.0*60.0)
    
    if generate_thesis_figures == 0:
        
        plt.figure("total_comp_time")
        plt.plot(N_ek,total_comp_time,'ko-')
        
        plt.figure("pic_comp_time")
        plt.plot(N_ek,pic_comp_time,'ko-')
        
        plt.figure("eFld_comp_time")
        plt.plot(N_ek,eFld_comp_time,'ko-')
        
        plt.figure("comp_times")
        plt.plot(N_ek,total_comp_time,'ko-',label="Total")
        plt.plot(N_ek,pic_comp_time,'go-',label="PIC")
        plt.plot(N_ek,eFld_comp_time,'ro-',label="eFld")
        plt.legend()
        
        plt.figure("percore_total_comp_time")
        plt.plot(N_ek,total_comp_time_percore,'ko-')
        
        plt.figure("percore_pic_comp_time")
        plt.plot(N_ek,pic_comp_time_percore,'ko-')
        
        plt.figure("percore_eFld_comp_time")
        plt.plot(N_ek,eFld_comp_time_percore,'ko-')
        
        plt.figure("percore_comp_times")
        plt.plot(N_ek,total_comp_time_percore,'ko-',label="Total")
        plt.plot(N_ek,pic_comp_time_percore,'go-',label="PIC")
        plt.plot(N_ek,eFld_comp_time_percore,'ro-',label="eFld")
        plt.legend()
    
    elif generate_thesis_figures == 1:
        
        plt.figure(r'comp_time per core')
        plt.xlabel(r"$N_{ke}$ (-)",fontsize = font_size)
        plt.ylabel(r"Computational time (days)",fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
#        plt.plot(N_ek,eFld_comp_time_percore/24.0,linestyle='-', linewidth = line_width, marker='o', color='k', markeredgecolor = 'k')
        plt.plot(N_ek,total_comp_time_percore/24.0,linestyle='-', linewidth = line_width, markersize=marker_size, marker='o', color='k', markeredgecolor = 'k')
        ax = plt.gca()
        ax.set_xlim(0,105)
#        ax.set_ylim(30,90)
#        ax.set_aspect('equal')
        if save_flag == 1:
            plt.savefig(path_out+"comp_time_Nke"+figs_format,bbox_inches='tight') 
            plt.close()

        

if heat_flux_plots == 1:
    
    nsteps     = 1201
    last_steps = 600
    
    mat = sio.loadmat("MATLAB_HET/q_picM.mat")
    nodes_flag   = mat.get('nodes_flag')
    zs           = mat.get('zs_picM')
    rs           = mat.get('rs_picM')
    q_para_picM  = mat.get('q_para_picM')
    q_perp_picM  = mat.get('q_perp_picM')
    q_theta_picM = mat.get('q_theta_picM')
    q_z_picM     = mat.get('q_z_picM')
    q_r_picM     = mat.get('q_r_picM')
    
    q_para_picM[np.where(nodes_flag == 0)]     = np.nan
    q_perp_picM[np.where(nodes_flag == 0)]     = np.nan
    q_theta_picM[np.where(nodes_flag == 0)]    = np.nan
    q_z_picM[np.where(nodes_flag == 0)]        = np.nan
    q_r_picM[np.where(nodes_flag == 0)]        = np.nan
    
    q_para_picM_mean  = np.nanmean(q_para_picM[:,:,nsteps-last_steps::],axis=2)
    q_perp_picM_mean  = np.nanmean(q_perp_picM[:,:,nsteps-last_steps::],axis=2)
    q_theta_picM_mean = np.nanmean(q_theta_picM[:,:,nsteps-last_steps::],axis=2)
    q_z_picM_mean  = np.nanmean(q_z_picM[:,:,nsteps-last_steps::],axis=2)
    q_r_picM_mean  = np.nanmean(q_r_picM[:,:,nsteps-last_steps::],axis=2)
    
    q2D_picM_mean = np.sqrt(q_para_picM_mean**2 + q_perp_picM_mean**2)
    q2D_zr_picM_mean = np.sqrt(q_z_picM_mean**2 + q_r_picM_mean**2)
    
    
    zs = zs*1e2
    rs = rs*1e2
    
    ticks_size_isolines = 20
    marker_every = 3
    
    rind       = 19
    rind_anode1 = rind
    rind_anode2 = 17
    zind_anode  = 8
    elems_cath_Bline   = range(407-1,483-1+2,2) # Elements along the cathode B line for cases C1, C2 and C3
#    elems_cath_Bline   = range(875-1,951-1+2,2) # Elements along the cathode B line for case C5
    
    
    q_para_picM_mean  = q_para_picM_mean*1E-4
    q_perp_picM_mean  = q_perp_picM_mean*1E-4
    q_theta_picM_mean = q_theta_picM_mean*1E-4
    
    

    # Obtain the vectors for the uniform mesh for streamlines plotting. It must be uniform and squared mesh
    delta_x = 0.11
    zvec = np.arange(zs[0,0],zs[0,-1]+delta_x,delta_x)
    rvec = np.copy(zvec)
    dims = np.shape(zs)



           
        
        
    plt.figure('qe_t ref')
    plt.title(r"$q_{\theta e}$ (10$^{4}$ Wm$^{-2}$)", fontsize = font_size,y=1.02)
    ax = plt.gca()
    log_type         = 0
    auto             = 1
    min_val0         = -1.5
    max_val0         = 6.0
    cont             = 1
    lines            = 1
    cont_nlevels     = 500
    auto_cbar_ticks  = 1 
    auto_lines_ticks = -1
    nticks_cbar      = 5
    nticks_lines     = 10
    cbar_ticks       = np.array([-1.5, 0.0, 1.5, 3.0, 4.5])
#        lines_ticks      = np.array([-1E4,-5E3,-2E3,-1E3,-5E2,-1E2,1E2,5E2,1E3,5E3,1E4,2E4,3E4,4E4])*1E-4
    lines_ticks      = np.array([100,50,40,25,0,-50,-100,-150])
    lines_ticks_loc  = 'default'
    cbar_ticks_fmt    = '{%.1f}'
    lines_ticks_fmt   = '{%.1f}'
    lines_width       = line_width
    lines_ticks_color = 'k'
    lines_style       = '-'
    [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size, zs, rs, q_theta_picM_mean, nodes_flag, log_type, auto, 
                           min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                           nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                           lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
    ax.clabel(CS2, CS2.levels, fmt=lines_ticks_fmt, inline=1, fontsize=ticks_size_isolines, zorder = 1)
#    plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
#    plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
#    plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
        
        
    
    plt.figure('qe_perp ref')
    plt.title(r"$q_{\bot e}$ (10$^{4}$ Wm$^{-2}$)", fontsize = font_size,y=1.02)
    ax = plt.gca()
    log_type         = 0
    auto             = 0
    min_val0         = -2.0
    max_val0         = 0.5
    cont             = 1
    lines            = 1
    cont_nlevels     = 500
    auto_cbar_ticks  = 1 
    auto_lines_ticks = -1
    nticks_cbar      = 5
    nticks_lines     = 10
    cbar_ticks       = np.array([-0.3,-0.2,-0.1, 0.0, 0.1, 0.2, 0.3])
#        lines_ticks      = np.array([-7E2,-5E2,-2E2,-1E2,-7E1,-5E1,-2E1,-1E1,1E0,1E1,2E1,5E1,7E1,1E2,2E2])*1E-4
    lines_ticks      = np.array([-0.5,-0.1,-0.05,-0.01,0.1,0.02,0.01])
    lines_ticks_loc  = [(1.69,4.25),(3.38,4.25),(5.51,4.25),(7.76,6.39),(6.48,1.35),(10.5,2.78),(7.0,5.5),(10.22,1.16)]        
#        lines_ticks_loc  = 'default'
    cbar_ticks_fmt    = '{%.1f}'
    lines_ticks_fmt   = '{%.2f}'
    lines_width       = line_width
    lines_ticks_color = 'k'
    lines_style       = '-'
    [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size, zs, rs, q_perp_picM_mean, nodes_flag, log_type, auto, 
                           min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                           nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                           lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
#        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
    ax.clabel(CS2, CS2.levels, fmt=lines_ticks_fmt, inline=1, manual = lines_ticks_loc, fontsize=ticks_size_isolines, zorder = 1)
#    plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
#    plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
#    plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
     

    plt.figure('qe_para ref')
    plt.title(r"$q_{\parallel e}$ (10$^{4}$ Wm$^{-2}$)", fontsize = font_size,y=1.02)
    ax = plt.gca()
    log_type         = 0
    auto             = 0
    min_val0         = -5.0
    max_val0         = 8.0
    cont             = 1
    lines            = 1
    cont_nlevels     = 500
    auto_cbar_ticks  = 1
    auto_lines_ticks = -1
    nticks_cbar      = 5
    nticks_lines     = 10
    cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
#        lines_ticks      = np.array([-1E2,-7E1,-5E1,-2E1,-1E1,-7E0,-5E0,-2E0,-1E0,1E-1,2E-1,5E-1,7E-1,1E0,2E0,5E0,7E0,1E1,2E1,3E1,5E1,7E1,1E2])*1E-4
    lines_ticks      = np.array([0.01,-0.05,0.05,-0.1,-0.5,0.5])
    lines_ticks_loc  = [(0.66,3.92),(1.82,4.0),(3.0,4.3),(4.49,6.13),(5.43,3.48),(8.20,2.78),(8.31,0.56),(9.95,4.0),(6.65,6.83)]        
#        lines_ticks_loc  = 'default'
    cbar_ticks_fmt    = '{%.1f}'
    lines_ticks_fmt   = '{%.2f}'
    lines_width       = line_width
    lines_ticks_color = 'k'
    lines_style       = '-'
    [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size, zs, rs, q_para_picM_mean, nodes_flag, log_type, auto, 
                           min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                           nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                           lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
#        ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, fontsize=ticks_size_isolines, zorder = 1)
    ax.clabel(CS2, CS2.levels, fmt=lines_ticks_fmt, inline=1, manual = lines_ticks_loc, fontsize=ticks_size_isolines, zorder = 1)
#    plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
#    plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
#    plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
        
        
    plt.figure('qe paraperp ref')
    plt.title(r"$|\tilde{\boldsymbol{q}}_{e}|$ (Wm$^{-2}$)", fontsize = font_size,y=1.02)
    ax = plt.gca()
    log_type         = 1
    auto             = 0
    min_val0         = 1E0
    max_val0         = 1E5
    cont             = 1
    lines            = 1
    cont_nlevels     = 500
    auto_cbar_ticks  = 1 
    auto_lines_ticks = -1
    nticks_cbar      = 5
    nticks_lines     = 10
    cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
#        lines_ticks      = np.array([8E1,1E2,5E2,1E3,2E3,5E3,1E4,2E4,3E4])
    lines_ticks      = np.array([1E2,5E2,1E3,1E4])
    lines_ticks_loc  = [(1.5,4.25),(3.4,4.25),(4.8,1.43),(7.56,7.4),(9.34,5.16),(8.45,0.6),(5.9,5.5),(4.0,6.4)]        
#        lines_ticks_loc  = 'default'
    cbar_ticks_fmt    = '{%.1f}'
    lines_ticks_fmt   = '{%.2f}'
    lines_width       = line_width
    lines_ticks_color = 'k'
    lines_style       = '-'
    [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size, zs, rs, q2D_picM_mean, nodes_flag, log_type, auto, 
                           min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                           nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                           lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
    ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, manual = lines_ticks_loc, fontsize=ticks_size_isolines, zorder = 1)
#    plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
#    plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
#    plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
#    # --- Plot the streamlines 
#    # Define number of starting points for plotting the streamlines
#    plot_start_points = 0
##        nstart_r = 25
##        nstart_z = 15
#    nstart_r = 12
#    nstart_z = 7
#    start_points = np.zeros((0,2))
#    # Mid chamber axial line
#    zstart = np.linspace(1,len(zvec)-2,nstart_z)
#    rstart = 38*np.ones(nstart_z)
#    start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#    # Top plume axial line
#    zstart = np.linspace(28,len(zvec)-2,nstart_z)
#    rstart = 68*np.ones(nstart_z)
#    start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#    # Radial line at plume 1
#    zstart = 40*np.ones(nstart_r)
#    rstart = np.linspace(1,len(zvec)-2,nstart_r)
#    start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#    # Radial line at plume 2
#    zstart = 80*np.ones(nstart_r)
#    rstart = np.linspace(1,len(zvec)-2,nstart_r)
#    start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#    # Radial chamber line
#    zstart = 20*np.ones(nstart_r-5)
#    rstart = np.linspace(30,50,nstart_r-5)
#    start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#                        
##    stream = streamline_2D(ax,zvec,rvec,dims,zs,rs,q_para_picM_mean,q_perp_picM_mean,flag_start,start_points,
##                           plot_start_points,10,streamline_width,streamline_color,arrow_size,
##                           arrow_style,min_length)
#    stream = streamline_2D(ax,zvec,rvec,dims,zs,rs,q_perp_picM_mean,q_para_picM_mean,flag_start,start_points,
#                           plot_start_points,10,streamline_width,streamline_color,arrow_size,
#                           arrow_style,min_length)
#    ax.set_xlim(zs[0,0],zs[0,-1])
#    ax.set_ylim(rs[0,0],rs[-1,0])
    
    
    plt.figure('qe zr ref')
    plt.title(r"$|\tilde{\boldsymbol{q}}_{e}|$ (Wm$^{-2}$)", fontsize = font_size,y=1.02)
    ax = plt.gca()
    log_type         = 1
    auto             = 0
    min_val0         = 1E0
    max_val0         = 1E5
    cont             = 1
    lines            = 1
    cont_nlevels     = 500
    auto_cbar_ticks  = 1 
    auto_lines_ticks = -1
    nticks_cbar      = 5
    nticks_lines     = 10
    cbar_ticks       = np.array([0.0,0.2,0.3,0.5,0.7,0.8,0.9,1])
#        lines_ticks      = np.array([8E1,1E2,5E2,1E3,2E3,5E3,1E4,2E4,3E4])
    lines_ticks      = np.array([1E2,5E2,1E3,1E4])
    lines_ticks_loc  = [(1.5,4.25),(3.4,4.25),(4.8,1.43),(7.56,7.4),(9.34,5.16),(8.45,0.6),(5.9,5.5),(4.0,6.4)]        
#        lines_ticks_loc  = 'default'
    cbar_ticks_fmt    = '{%.1f}'
    lines_ticks_fmt   = '{%.2f}'
    lines_width       = line_width
    lines_ticks_color = 'k'
    lines_style       = '-'
    [CS,CS2] = contour_2D (ax,'$z$ (cm)', '$r$ (cm)', font_size, ticks_size, zs, rs, q2D_zr_picM_mean, nodes_flag, log_type, auto, 
                           min_val0, max_val0, cont, lines, cont_nlevels, auto_cbar_ticks, auto_lines_ticks,
                           nticks_cbar, nticks_lines, cbar_ticks, lines_ticks, lines_ticks_loc, cbar_ticks_fmt,
                           lines_ticks_fmt, lines_ticks_color, lines_style, lines_width) 
    ax.clabel(CS2, CS2.levels, fmt=fmt_func_exponent_lines, inline=1, manual = lines_ticks_loc, fontsize=ticks_size_isolines, zorder = 1)
#    plt.plot(points[:,0],points[:,1],'k-',linewidth = line_width_boundary,markersize = marker_size)
#    plt.plot(np.array([points[-1,0],points[0,0]]),np.array([points[-1,1],points[0,1]]),'k-',linewidth = line_width_boundary,markersize = marker_size)     
#    plt.plot(z_cath,r_cath,'ks',linewidth = line_width_boundary,markersize = marker_size)
    # --- Plot the streamlines 
    # Define number of starting points for plotting the streamlines
    plot_start_points = 0
#        nstart_r = 25
#        nstart_z = 15
    nstart_r = 12
    nstart_z = 7
    start_points = np.zeros((0,2))
    # Mid chamber axial line
    zstart = np.linspace(1,len(zvec)-2,nstart_z)
    rstart = 38*np.ones(nstart_z)
    start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
    # Top plume axial line
    zstart = np.linspace(28,len(zvec)-2,nstart_z)
    rstart = 68*np.ones(nstart_z)
    start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
    # Radial line at plume 1
    zstart = 40*np.ones(nstart_r)
    rstart = np.linspace(1,len(zvec)-2,nstart_r)
    start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
    # Radial line at plume 2
    zstart = 80*np.ones(nstart_r)
    rstart = np.linspace(1,len(zvec)-2,nstart_r)
    start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
    # Radial chamber line
    zstart = 20*np.ones(nstart_r-5)
    rstart = np.linspace(30,50,nstart_r-5)
    start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
                        
#    stream = streamline_2D(ax,zvec,rvec,dims,zs,rs,q_para_picM_mean,q_perp_picM_mean,flag_start,start_points,
#                           plot_start_points,10,streamline_width,streamline_color,arrow_size,
#                           arrow_style,min_length)
    stream = streamline_2D(ax,zvec,rvec,dims,zs,rs,q_z_picM_mean,q_r_picM_mean,flag_start,start_points,
                           plot_start_points,10,streamline_width,streamline_color,arrow_size,
                           arrow_style,min_length)
    ax.set_xlim(zs[0,0],zs[0,-1])
    ax.set_ylim(rs[0,0],rs[-1,0])
        
    if save_flag == 1:
        plt.figure('qe_t ref')
        plt.savefig(path_out+"qe_t"+figs_format,bbox_inches='tight') 
        plt.close()
        plt.figure('qe_perp ref')
        plt.savefig(path_out+"qe_perp"+figs_format,bbox_inches='tight') 
        plt.close()
        plt.figure('qe_para ref')
        plt.savefig(path_out+"qe_para"+figs_format,bbox_inches='tight') 
        plt.close()
        plt.figure('qe paraperp ref')
        plt.savefig(path_out+"qe_paraperp_2D"+figs_format,bbox_inches='tight') 
        plt.close()
        plt.figure('qe zr ref')
        plt.savefig(path_out+"qe_zr_2D"+figs_format,bbox_inches='tight') 
        plt.close()
        




if bound_plots == 1:
    print("######## bound_plots ########")
    
#    marker_size  = 4
    marker_size_cath = 14
    cathode_marker = '*'
    cathode_color  = orange
    ref_color      = 'c'
    marker_every = 3
#    font_size_legend    = font_size - 15
    font_size_legend    = 15
    
    # Radial index for axial profiles
    rind = 17
#    rind = 19
    # Cathode plotting flag and cathode position in cm (for plot_zcath_012 = 2,3) 
    plot_zcath_012 = 2                  # 0 - Deactivated
                                        # 1 - Plot z_cath (cathode z position from eFld mesh)
                                        # 2 - Plot zcat_pos indicated below (cross Cathode Bline with axial profile)
                                        # 3 - Plot zcat_pos_2 (additional cross Cathode Bline with axial profile)
#    zcat_pos       = 5.9394542444501024 # z coordinate of crossing point of cathode C1, C2 and C3 Bline with rind = 19
#    zcat_pos_2     = 9.6917             # z coordinate of crossing point of cathode C5 (C4 thesis) Bline with rind=19
    # TOPO 2 ------------------------------------------------------------------
    plot_zcath_012 = 2
#    zcat_pos       = 15.55106875         # z coordinate of crossing point of cathode topo2 3298 and 3283 Bline with rind = 17
    zcat_pos       = 7.47248             # z coordinate of crossing point of cathode topo2 1200 Bline with rind = 17
#    zcat_pos       = 5.902074            # z coordinate of crossing point of cathode topo2 2853 Bline with rind = 17
    # TOPO 1 ------------------------------------------------------------------
    plot_zcath_012 = 2
#    zcat_pos       = 12.14428            # z coordinate of crossing point of cathode topo1 699 Bline with rind = 17
#    zcat_pos       = 7.3422075           # z coordinate of crossing point of cathode topo1 313 Bline with rind = 17   
#    zcat_pos       = 5.688635            # z coordinate of crossing point of cathode topo1 251 Bline with rind = 17 
    
    elems_cath_Bline    = range(407-1,483-1+2,2) # Elements along the cathode B line for cases C1, C2 and C3
    elems_cath_Bline_2  = range(875-1,951-1+2,2) # Elements along the cathode B line for case C5 (C4 thesis)
    elems_Bline         = range(330-1,406-1+2,2) # Elements along a B line
    ref_elem            = elems_Bline[len(elems_Bline)/2]
#    ref_elem            = elems_Bline[0]
    plot_Bline_cathBline = 1          # Only used for plots activated when plot_cath_Bline_prof = 1
    
    # Common reference potential PIC mesh node Python indeces
    phi_ref  = 0
    iphi_ref = 24
    jphi_ref = 28
    
    # Print out time steps
#    timestep = 'last'
    timestep = 996
  
    allsteps_flag   = 1
    read_inst_data  = 0
    read_part_lists = 0
    read_flag       = 1
    
    mean_vars       = 1
    mean_type       = 0
    last_steps      = 600
    last_steps      = 700
    step_i          = 600
    step_f          = 950
    plot_mean_vars  = 1
    
    
    plot_deltaSEE     = 1

    

    if timestep == 'last':
        timestep = -1  
    if allsteps_flag == 0:
        mean_vars = 0

    
    # Simulation names
    nsims = 1

    # Flag for old sims (1: old sim files, 0: new sim files)
    #oldpost_sim      = np.array([0,3,3,3,0,0,3,3,3,3,0,0,0,0],dtype = int)
    #oldsimparams_sim = np.array([6,7,7,7,6,6,7,7,7,7,6,6,5,0],dtype = int)  

    oldpost_sim      = np.array([0,3,3,3,3,3,3,3,0,0,3,3,3,3,0,0,0,0],dtype = int)
    oldsimparams_sim = np.array([6,7,7,7,7,7,7,7,6,6,7,7,7,7,6,6,5,0],dtype = int)    

    oldpost_sim      = np.array([3,3,3,3,3,3,3,0,0,3,3,3,3,0,0,0,0],dtype = int)
    oldsimparams_sim = np.array([7,7,7,7,7,7,7,6,6,7,7,7,7,6,6,5,0],dtype = int)         
    
    
    sim_names = [
                 "../../../sim/sims/Topo2_n4_l200s200_cat1200_tm15_te1_tq125",    # par3
#                 "../../../sim/sims/Topo2_n4_l200s200_cat1200_tm12_te1_tq125",
#                 "../../../sim/sims/Topo2_n4_l200s200_cat1200_tm052_te1_tq125",

                 #"../../../sim/sims/Topo2_n4_l200s200_cat1200_tm15_te1_tq125",      # RLC comparison
                 #"../../../sim/sims/Topo2_n4_l200s200_cat1200_tm15_te1_tq125_lowC",
                 #"../../../sim/sims/Topo2_n4_l200s200_cat1200_tm15_te1_tq125_NoRLC", 

                 #"../../../sim/sims/Topo2_n3_l200s200_cat1200_tm15_te1_tq125",
                 #"../../../sim/sims/Topo2_n3_l200s200_cat1200_tm052_te1_tq125",
                 #"../../../sim/sims/Topo2_n3_l200s200_cat2853_tm055_te1_tq125",

                 #"../../../sim/sims/Topo1_n1_l100s100_cat313_tm515_te1_tq21",    # par1
                 #"../../../sim/sims/Topo1_n1_l100s100_cat313_tm5_te1_tq12",
                 #"../../../sim/sims/Topo1_n1_l100s100_cat313_tm510_te1_tq12",
                 #"../../../sim/sims/Topo1_n1_l100s100_cat313_tm515_te1_tq12",

                 #"../../../sim/sims/Topo1_n1_l100s100_cat313_tm515_te1_tq21",    # par2
                 #"../../../sim/sims/Topo1_n1_l100s100_cat313_tm515_te1_tq12",
                 #"../../../sim/sims/Topo1_n1_l100s100_cat313_tm515_te1_tq2",

                 #"../../../sim/sims/Topo1_n1_l100s100_cat313_tm515_te1_tq21",    # par2 alternative
                 #"../../../sim/sims/Topo1_n1_l100s100_cat313_tm515_te1_tq251",
                 #"../../../sim/sims/Topo1_n1_l100s100_cat313_tm515_te1_tq51",



                 #"../../../sim/sims/Topo1_n2_l100s100_cat313_tm515_te1_tq12",

                 #"../../../sim/sims/Topo1_n2_l100s100_cat313_tm515_te2_tq12",
                 #"../../../sim/sims/Topo1_n2_l100s100_cat313_tm715_te2_tq12",
                 #"../../../sim/sims/Topo1_n2_l100s100_cat313_tm1015_te2_tq12"

                 #"../../../sim/sims/Topo1_n2_l100s100_cat313_tm715_te2_tq12",
                 #"../../../sim/sims/Topo1_n2_l100s100_cat313_tm615_te2_tq12",
                 #"../../../sim/sims/Topo1_n2_l100s100_cat313_tm515_te2_tq12",

                 #"../../../sim/sims/Topo1_n2_l100s100_cat313_tm615_te2_tq12",   # T1N2-REF
                 #"../../../sim/sims/Topo1_n2_l100s100_cat313_tm620_te2_tq12",

                 #"../../../sim/sims/Topo1_n2_l100s100_cat313_tm715_te2_tq12",
                 #"../../../sim/sims/Topo1_n2_l100s100_cat313_tm720_te2_tq12",

                 #"../../../sim/sims/Topo1_n2_l100s100_cat313_tm515_te2_tq12",
                 #"../../../sim/sims/Topo1_n2_l100s100_cat313_tm515_te3_tq12",

                 #"../../../sim/sims/Topo1_n2_l100s100_cat313_tm615_te2_tq12",
                 #"../../../sim/sims/Topo1_n2_l100s100_cat313_tm615_te3_tq12",

                 #"../../../sim/sims/Topo1_n2_l100s100_cat313_tm515_te2_tq12",
                 #"../../../sim/sims/Topo1_n2_l100s100_cat313_tm515_te1_tq21",
                 #"../../../sim/sims/Topo1_n2_l100s100_cat313_tm515_te2_tq21",

                 #"../../../sim/sims/Topo1_n2_l100s100_cat313_tm615_te2_tq12",
                 #"../../../sim/sims/Topo1_n2_l100s100_cat313_tm6515_te2_tq12",

                 #"../../../sim/sims/Topo1_n2_l100s100_cat313_tm615_te2_tq12",
                 #"../../../sim/sims/Topo1_n2_l100s100_cat313_tm615_te3_tq12",
                 #"../../../sim/sims/Topo1_n2_l100s100_cat313_tm6515_te2_tq12",

                 
                 ]
    
    topo_case = 2
    if topo_case == 1:
        PIC_mesh_file_name = ["PIC_mesh_topo1_refined4.hdf5",
                              "PIC_mesh_topo1_refined4.hdf5",
                              "PIC_mesh_topo1_refined4.hdf5",
                              "PIC_mesh_topo1_refined4.hdf5",
                              "PIC_mesh_topo1_refined4.hdf5",
                              "PIC_mesh_topo1_refined4.hdf5",
                              "PIC_mesh_topo1_refined4.hdf5",
                              "PIC_mesh_topo1_refined4.hdf5",
                             ]
    elif topo_case == 2:
        PIC_mesh_file_name = [
                              "PIC_mesh_topo2_refined4.hdf5",
                              "PIC_mesh_topo2_refined4.hdf5",
                              "PIC_mesh_topo2_refined4.hdf5",
                              "PIC_mesh_topo2_refined4.hdf5",
                              "PIC_mesh_topo2_refined4.hdf5",
                              "PIC_mesh_topo2_refined4.hdf5",
                              "PIC_mesh_topo2_refined4.hdf5"
                              ]
    elif topo_case == 0:    
        PIC_mesh_file_name = ["SPT100_picM.hdf5",
                              "SPT100_picM.hdf5",
                              "SPT100_picM.hdf5",
                              "SPT100_picM.hdf5"]

    # Labels                          
    labels = [

               #r"Topo2,n4,cat1200,$\alpha_{tm} = 1-5$,$\alpha_{te} = 1$,$\alpha_{tq} = 1-2.5$",
               #r"Topo2,n4,cat2853,$\alpha_{tm} = 1-5$,$\alpha_{te} = 1$,$\alpha_{tq} = 1-2.5$",
               #r"Topo2,n4,cat2853,$\alpha_{tm} = 0.5-5$,$\alpha_{te} = 1$,$\alpha_{tq} = 1-2.5$",

               #r"Topo2,n4,cat1200,$\alpha_{tm} = 1-5$,$\alpha_{te} = 1$,$\alpha_{tq} = 1-2.5$",
               #r"Topo2,n4,cat1200,$\alpha_{tm} = 0.5-5$,$\alpha_{te} = 1$,$\alpha_{tq} = 1-2.5$",
               #r"Topo2,n4,cat1200,$\alpha_{tm} = 0.5-3$,$\alpha_{te} = 1$,$\alpha_{tq} = 1-2.5$",
               #r"Topo2,n4,cat1200,$\alpha_{tm} = 0.5-2$,$\alpha_{te} = 1$,$\alpha_{tq} = 1-2.5$",

               #r"Topo2,n3,cat1200,$\alpha_{tm} = 1-5$,$\alpha_{te} = 1$,$\alpha_{tq} = 1-2.5$",
               #r"Topo2,n3,cat1200,$\alpha_{tm} = 0.5-2$,$\alpha_{te} = 1$,$\alpha_{tq} = 1-2.5$",
               #r"Topo2,n3,cat2853,$\alpha_{tm} = 0.5-5$,$\alpha_{te} = 1$,$\alpha_{tq} = 1-2.5$",


               #r"Topo1,n1,cat313,$\alpha_{tm} = 1-10$,$\alpha_{te,q} = 1-2.5$",
               #r"Topo1,n1,cat313,$\alpha_{tm} = 2-15$,$\alpha_{te,q} = 1-2$",
               #r"Topo1,n1,cat313,$\alpha_{tm} = 5-15$,$\alpha_{te,q} = 1-2$",
               #r"Topo1,n1,cat313,$\alpha_{tm} = 2.5-18.75$,$\alpha_{te,q} = 1-2$",
               #r"Topo1,n1,cat313,$\alpha_{tm} = 5-10$,$\alpha_{te,q} = 1-2$",
               #r"Topo1,n1,cat313,$\alpha_{tm} = 5-15$,$\alpha_{te} = 1$,$\alpha_{tq} = 1-2$",

               #r"Topo1,n1,cat313,$\alpha_{tm} = 2-15$,$\alpha_{te,q} = 1-2$",
               #r"Topo1,n1,cat251,$\alpha_{tm} = 2-15$,$\alpha_{te,q} = 1-2$",

               #r"Topo1,n1,cat313,$\alpha_{tm} = 5-15$,$\alpha_{te} = 1$,$\alpha_{tq} = 1-2$",
               #r"Topo1,n1,cat313,$\alpha_{tm} = 5-10$,$\alpha_{te} = 1$,$\alpha_{tq} = 1-2$",

               #r"Topo1,n1,cat313,$\alpha_{tm} = 5-15$,$\alpha_{te} = 1$,$\alpha_{tq} = 1-2$",
               #r"Topo1,n1,cat313,$\alpha_{tm} = 5-30$,$\alpha_{te} = 1$,$\alpha_{tq} = 1-2$",

               #r"Topo1,n1,cat313,$\alpha_{tm} = 2-15$,$\alpha_{te,q} = 1-2$",
               #r"Topo1,n1,cat313,$\alpha_{tm} = 2.5-18.75$,$\alpha_{te,q} = 1-2$",
               #r"Topo1,n1,cat313,$\alpha_{tm} = 4-30$,$\alpha_{te,q} = 1-2$",

               #r"Topo1,n1,cat313,$\alpha_{tm} = 5-15$,$\alpha_{te} = 1$,$\alpha_{tq} = 1-2$",
               #r"Topo1,n1,cat313,$\alpha_{tm} = 5-10$,$\alpha_{te} = 1$,$\alpha_{tq} = 1-2$",
               #r"Topo1,n1,cat313,$\alpha_{tm} = 5-7.5$,$\alpha_{te} = 1$,$\alpha_{tq} = 1-2$",
               #r"Topo1,n1,cat313,$\alpha_{tm} = 5$,$\alpha_{te} = 1$,$\alpha_{tq} = 1-2$",

               #r"Topo1,n1,cat313,$\alpha_{tm} = 5-15$,$\alpha_{te} = 1$,$\alpha_{tq} = 1-2$",
               #r"Topo1,n1,cat313,$\alpha_{tm} = 5-15$,$\alpha_{te} = 1$,$\alpha_{tq} = 2-1$",
               #r"Topo1,n1,cat313,$\alpha_{tm} = 5-15$,$\alpha_{te} = 1$,$\alpha_{tq} = 1$",
               #r"Topo1,n1,cat313,$\alpha_{tm} = 5-15$,$\alpha_{te} = 1$,$\alpha_{tq} = 2$",

               #r"Topo1,n1,cat313,$\alpha_{tm} = 5-15$,$\alpha_{te} = 1$,$\alpha_{tq} = 1-2$",
               #r"Topo1,n1,cat313,$\alpha_{tm} = 5-15$,$\alpha_{te} = 1$,$\alpha_{tq} = 2-1$",
               #r"Topo1,n1,cat313,$\alpha_{tm} = 5-15$,$\alpha_{te} = 1$,$\alpha_{tq} = 2.5-1$",
               #r"Topo1,n1,cat313,$\alpha_{tm} = 5-15$,$\alpha_{te} = 1$,$\alpha_{tq} = 5-1$",

               #r"Topo1,n2,cat313,$\alpha_{tm} = 5-15$,$\alpha_{te} = 1$,$\alpha_{tq} = 1-2$",

               #r"Topo1,n2,cat313,$\alpha_{tm} = 5-15$,$\alpha_{te} = 2$,$\alpha_{tq} = 1-2$",
               #r"Topo1,n2,cat313,$\alpha_{tm} = 7-15$,$\alpha_{te} = 2$,$\alpha_{tq} = 1-2$",
               #r"Topo1,n2,cat313,$\alpha_{tm} = 10-15$,$\alpha_{te} = 2$,$\alpha_{tq} = 1-2$",

               #r"Topo1,n2,cat313,$\alpha_{tm} = 7-15$,$\alpha_{te} = 2$,$\alpha_{tq} = 1-2$",
               #r"Topo1,n2,cat313,$\alpha_{tm} = 6-15$,$\alpha_{te} = 2$,$\alpha_{tq} = 1-2$",
               #r"Topo1,n2,cat313,$\alpha_{tm} = 5-15$,$\alpha_{te} = 2$,$\alpha_{tq} = 1-2$",

               #r"Topo1,n2,cat313,$\alpha_{tm} = 6-15$,$\alpha_{te} = 2$,$\alpha_{tq} = 1-2$",
               #r"Topo1,n2,cat313,$\alpha_{tm} = 6-20$,$\alpha_{te} = 2$,$\alpha_{tq} = 1-2$",

               #r"Topo1,n2,cat313,$\alpha_{tm} = 7-15$,$\alpha_{te} = 2$,$\alpha_{tq} = 1-2$",
               #r"Topo1,n2,cat313,$\alpha_{tm} = 7-20$,$\alpha_{te} = 2$,$\alpha_{tq} = 1-2$",

               #r"Topo1,n2,cat313,$\alpha_{tm} = 5-15$,$\alpha_{te} = 2$,$\alpha_{tq} = 1-2$",
               #r"Topo1,n2,cat313,$\alpha_{tm} = 5-15$,$\alpha_{te} = 3$,$\alpha_{tq} = 1-2$",

               #r"Topo1,n2,cat313,$\alpha_{tm} = 6-15$,$\alpha_{te} = 2$,$\alpha_{tq} = 1-2$",
               #r"Topo1,n2,cat313,$\alpha_{tm} = 6-15$,$\alpha_{te} = 3$,$\alpha_{tq} = 1-2$",

               #r"Topo1,n2,cat313,$\alpha_{tm} = 5-15$,$\alpha_{te} = 2$,$\alpha_{tq} = 1-2$",
               #r"Topo1,n2,cat313,$\alpha_{tm} = 5-15$,$\alpha_{te} = 1$,$\alpha_{tq} = 2-1$",
               #r"Topo1,n2,cat313,$\alpha_{tm} = 5-15$,$\alpha_{te} = 2$,$\alpha_{tq} = 2-1$",

               #r"Topo1,n2,cat313,$\alpha_{tm} = 6-15$,$\alpha_{te} = 2$,$\alpha_{tq} = 1-2$",
               #r"Topo1,n2,cat313,$\alpha_{tm} = 6.5-15$,$\alpha_{te} = 2$,$\alpha_{tq} = 1-2$",

               #r"Topo1,n2,cat313,$\alpha_{tm} = 6-15$,$\alpha_{te} = 2$,$\alpha_{tq} = 1-2$",
               #r"Topo1,n2,cat313,$\alpha_{tm} = 6-15$,$\alpha_{te} = 3$,$\alpha_{tq} = 1-2$",
               #r"Topo1,n2,cat313,$\alpha_{tm} = 6.5-15$,$\alpha_{te} = 2$,$\alpha_{tq} = 1-2$",

               #r""

               #r"T1N1-REF",
               #r"T1N1-1. $\alpha_{tm} = 5$ \%",
               #r"T1N1-2. $\alpha_{tm} = 5-10$ \%",
               #r"T1N1-3. $\alpha_{tm} = 5-15$ \%",

               #r"T1N1-REF",                           # par 2
               #r"T1N1-3. $\alpha_{tq} = 1-2$ \%",
               #r"T1N1-4. $\alpha_{tq} = 2$ \%",

               #r"T1N1-REF",                           # par 2 alternative
               #r"T1N1-4. $\alpha_{tq} = 2.5-1$ \%",
               #r"T1N1-5. $\alpha_{tq} = 5-1$ \%",

               r"T2N4-REF",                          # par 3
               r"T2N4-1. $\alpha_{tm} = 1-2$ \%",
               r"T2N4-2. $\alpha_{tm} = 0.5-2$ \%",

               #r"T2N4-REF, $C = 6$ $\mu$F",                                # $\alpha_{tm} = 1-5$,$\alpha_{te} = 1$,$\alpha_{tq} = 1-2.5$
               #r"T2N4-REF, $C = 0.6$ $\mu$F",                              # $\alpha_{tm} = 1-5$,$\alpha_{te} = 1$,$\alpha_{tq} = 1-2.5$
               #r"T2N4-REF, No RLC",                                        # $\alpha_{tm} = 1-5$,$\alpha_{te} = 1$,$\alpha_{tq} = 1-2.5$

              ]

    
    # Line colors
    colors = ['k','r','g','b','m','c','m','y',orange,brown]
#    colors = ['k','m',orange,brown]
    # Markers
    markers = ['s','o','v','^','<', '>','D','p','*']
#    markers = ['s','<','D','p']
    # Line style
    linestyles = ['-','--','-.', ':','-','--','-.']
    linestyles = ['-','-','-','-','-','-','-']
    
    xmax = 18
              
          
    # Axial profile plots
    if plot_deltaSEE == 1:
        plt.figure(r'deltaSEE out')
        plt.xlabel(r"$s$ (cm)",fontsize = font_size)
        plt.title(r"(a) $\delta_{out}$ (-)",fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)
        plt.figure(r'deltaSEE in')
        plt.xlabel(r"$s$ (cm)",fontsize = font_size)
        plt.title(r"(a) $\delta_{in}$ (-)",fontsize = font_size)
        plt.xticks(fontsize = ticks_size) 
        plt.yticks(fontsize = ticks_size)


        
        
    ind  = 0
    ind2 = 0
    ind3 = 0
    for k in range(0,nsims):
        ind_ini_letter = sim_names[k].rfind('/') + 1
        print("##### CASE "+str(k+1)+": "+sim_names[k][ind_ini_letter::]+" #####")
        ######################## READ INPUT/OUTPUT FILES ##########################
        # Obtain paths to simulation files
        path_picM         = sim_names[k]+"/SET/inp/"+PIC_mesh_file_name[k]
        path_simstate_inp = sim_names[k]+"/CORE/inp/SimState.hdf5"
        path_simstate_out = sim_names[k]+"/CORE/out/SimState.hdf5"
        path_postdata_out = sim_names[k]+"/CORE/out/PostData.hdf5"
        path_simparams_inp = sim_names[k]+"/CORE/inp/sim_params.inp"
        print("Reading results...")
        [num_ion_spe,num_neu_spe,n_mp_cell_i,n_mp_cell_n,n_mp_cell_i_min,
           n_mp_cell_i_max,n_mp_cell_n_min,n_mp_cell_n_max,min_ion_plasma_density,
           m_A,spec_refl_prob,ene_bal,points,zs,rs,zscells,rscells,dims,
           nodes_flag,cells_flag,cells_vol,volume,vol,ind_maxr_c,ind_maxz_c,nr_c,nz_c,
           eta_max,eta_min,xi_top,xi_bottom,time,time_fast,steps,steps_fast,dt,dt_e,
           nsteps,nsteps_fast,nsteps_eFld,faces,nodes,elem_n,boundary_f,face_geom,elem_geom,
           n_faces,n_elems,n_faces_boundary,bIDfaces_Dwall,bIDfaces_Awall,
           bIDfaces_FLwall,IDfaces_Dwall,IDfaces_Awall,IDfaces_FLwall,zfaces_Dwall,
           rfaces_Dwall,Afaces_Dwall,zfaces_Awall,rfaces_Awall,Afaces_Awall,
           zfaces_FLwall,rfaces_FLwall,Afaces_FLwall,
           cath_elem,z_cath,r_cath,V_cath,mass,ssIons1,ssIons2,ssNeutrals1,ssNeutrals2,
           n_mp_i1_list,n_mp_i2_list,n_mp_n1_list,n_mp_n2_list,phi,phi_elems,Ez,Er,Efield,
           Bz,Br,Bfield,Te,Te_elems,cs01,cs02,nn1,nn2,ni1,ni2,ne,ne_elems,fn1_x,fn1_y,
           fn1_z,fn2_x,fn2_y,fn2_z,fi1_x,fi1_y,fi1_z,fi2_x,fi2_y,fi2_z,un1_x,un1_y,un1_z,
           un2_x,un2_y,un2_z,ui1_x,ui1_y,ui1_z,ui2_x,ui2_y,ui2_z,ji1_x,ji1_y,
           ji1_z,ji2_x,ji2_y,ji2_z,je_r,je_t,je_z,je_perp,je_para,ue_r,ue_t,ue_z,
           ue_perp,ue_para,uthetaExB,Tn1,Tn2,Ti1,Ti2,n_mp_n1,n_mp_n2,n_mp_i1,n_mp_i2,
           avg_w_n1,avg_w_n2,avg_w_i1,avg_w_i2,neu_gen_weights1,neu_gen_weights2,
           ion_gen_weights1,ion_gen_weights2,surf_elems,n_imp_elems,imp_elems,
           imp_elems_kbc,imp_elems_MkQ1,imp_elems_Te,imp_elems_dphi_kbc,
           imp_elems_dphi_sh,imp_elems_nQ1,imp_elems_nQ2,imp_elems_ion_flux_in1,
           imp_elems_ion_flux_out1,imp_elems_ion_ene_flux_in1,
           imp_elems_ion_ene_flux_out1,imp_elems_ion_imp_ene1,
           imp_elems_ion_flux_in2,imp_elems_ion_flux_out2,
           imp_elems_ion_ene_flux_in2,imp_elems_ion_ene_flux_out2,
           imp_elems_ion_imp_ene2,imp_elems_neu_flux_in1,imp_elems_neu_flux_out1,
           imp_elems_neu_ene_flux_in1,imp_elems_neu_ene_flux_out1,
           imp_elems_neu_imp_ene1,imp_elems_neu_flux_in2,imp_elems_neu_flux_out2,
           imp_elems_neu_ene_flux_in2,imp_elems_neu_ene_flux_out2,
           imp_elems_neu_imp_ene2,tot_mass_mp_neus,tot_mass_mp_ions,tot_num_mp_neus,
           tot_num_mp_ions,tot_mass_exit_neus,tot_mass_exit_ions,mass_mp_neus,
           mass_mp_ions,num_mp_neus,num_mp_ions,avg_dens_mp_neus,avg_dens_mp_ions,
           eta_u,eta_prod,eta_thr,eta_div,eta_cur,thrust,thrust_ion,thrust_neu,thrust_e,
           Id_inst,Id,Vd_inst,Vd,I_beam,I_tw_tot,Pd,Pd_inst,P_mat,P_inj,P_inf,P_ion,
           P_ex,P_use_tot_i,P_use_tot_n,P_use_tot,P_use_z_i,P_use_z_n,P_use_z,
           qe_wall,qe_wall_inst,Pe_faces_Dwall,Pe_faces_Awall,Pe_faces_FLwall,
           Pe_faces_Dwall_inst,Pe_faces_Awall_inst,Pe_faces_FLwall_inst,
           Pe_Dwall,Pe_Awall,Pe_FLwall,Pe_Dwall_inst,Pe_Awall_inst,Pe_FLwall_inst, 
           Pi_Dwall,Pi_Awall,Pi_FLwall,Pi_FLwall_nonz,Pn_Dwall,Pn_Awall,Pn_FLwall,
           Pn_FLwall_nonz,P_Dwall,P_Awall,P_FLwall,Pwalls,Pionex,Ploss,Pthrust,
           Pnothrust,Pnothrust_walls,balP,err_balP,ctr_Pd,ctr_Ploss,ctr_Pwalls,
           ctr_Pionex,ctr_P_DAwalls,ctr_P_FLwalls,ctr_P_FLwalls_in,ctr_P_FLwalls_i,
           ctr_P_FLwalls_n,ctr_P_FLwalls_e,balP_Pthrust,err_balP_Pthrust,
           ctr_balPthrust_Pd,ctr_balPthrust_Pnothrust,ctr_balPthrust_Pthrust,
           ctr_balPthrust_Pnothrust_walls,ctr_balPthrust_Pnothrust_ionex,
           err_def_balP,Isp_s,Isp_ms,dMdt_i1,dMdt_i2,dMdt_n1,dMdt_n2,dMdt_tot,
           mflow_coll_i1,mflow_coll_i2,mflow_coll_n1,mflow_coll_n2,mflow_fw_i1,
           mflow_fw_i2,mflow_fw_n1,mflow_fw_n2,mflow_tw_i1,mflow_tw_i2,mflow_tw_n1,
           mflow_tw_n2,mflow_ircmb_picS_n1,mflow_ircmb_picS_n2,mflow_inj_i1,mflow_inj_i2,
           mflow_fwmat_i1,mflow_fwmat_i2,mflow_inj_n1,mflow_fwmat_n1,mflow_inj_n2,
           mflow_fwmat_n2,mflow_twmat_i1,mflow_twinf_i1,mflow_twa_i1,mflow_twmat_i2,
           mflow_twinf_i2,mflow_twa_i2,mflow_twmat_n1,mflow_twinf_n1,mflow_twa_n1,
           mflow_twmat_n2,mflow_twinf_n2,mflow_twa_n2,mbal_n1,mbal_i1,mbal_i2,mbal_tot,
           err_mbal_n1,err_mbal_i1,err_mbal_i2,err_mbal_tot,ctr_mflow_coll_n1,
           ctr_mflow_fw_n1,ctr_mflow_tw_n1,ctr_mflow_coll_i1,ctr_mflow_fw_i1,
           ctr_mflow_tw_i1,ctr_mflow_coll_i2,ctr_mflow_fw_i2,ctr_mflow_tw_i2,
           ctr_mflow_coll_tot,ctr_mflow_fw_tot,ctr_mflow_tw_tot,dEdt_i1,dEdt_i2,
           dEdt_n1,dEdt_n2,eneflow_coll_i1,eneflow_coll_i2,eneflow_coll_n1,
           eneflow_coll_n2,eneflow_fw_i1,eneflow_fw_i2,eneflow_fw_n1,eneflow_fw_n2,
           eneflow_tw_i1,eneflow_tw_i2,eneflow_tw_n1,eneflow_tw_n2,Pfield_i1,
           Pfield_i2,eneflow_inj_i1,eneflow_fwmat_i1,eneflow_inj_i2,
           eneflow_fwmat_i2,eneflow_inj_n1,eneflow_fwmat_n1,eneflow_inj_n2,
           eneflow_fwmat_n2,eneflow_twmat_i1,eneflow_twinf_i1,eneflow_twa_i1,
           eneflow_twmat_i2,eneflow_twinf_i2,eneflow_twa_i2,eneflow_twmat_n1,
           eneflow_twinf_n1,eneflow_twa_n1,eneflow_twmat_n2,eneflow_twinf_n2,
           eneflow_twa_n2,ndot_ion01_n1,ndot_ion02_n1,ndot_ion12_i1,ne_cath,Te_cath,
           nu_cath,ndot_cath,Q_cath,P_cath,V_cath_tot,ne_cath_avg,F_theta,Hall_par,
           Hall_par_eff,nu_e_tot,nu_e_tot_eff,nu_en,nu_ei1,nu_ei2,nu_i01,nu_i02,nu_i12,
           nu_ex,Boltz,Boltz_dim,Pfield_e,Ebal_e,ge_b,ge_b_acc,ge_sb_b,ge_sb_b_acc,
           delta_see,delta_see_acc,err_interp_n] = HET_sims_read(path_simstate_inp,path_simstate_out,
                                                                  path_postdata_out,path_simparams_inp,
                                                                  path_picM,allsteps_flag,timestep,read_inst_data,
                                                                  read_part_lists,read_flag,oldpost_sim[k],oldsimparams_sim[k])
        
        
        #### NOTE: After change in eFld collisions, ionization collisions are 
        #          not multiplied by the charge number jump (as before). 
        #          We do it here
        if oldpost_sim[k] >= 3:
            nu_i02 = 2.0*nu_i02
        #######################################################################
        
        
        print("Generating plotting variables (NaN in ghost nodes)...")                                                                                                      
        [Br,Bz,Bfield,phi,Er,Ez,Efield,nn1,nn2,ni1,ni2,ne,fn1_x,fn1_y,fn1_z,
           fn2_x,fn2_y,fn2_z,fi1_x,fi1_y,fi1_z,fi2_x,fi2_y,fi2_z,un1_x,un1_y,un1_z,
           un2_x,un2_y,un2_z,ui1_x,ui1_y,ui1_z,ui2_x,ui2_y,ui2_z,ji1_x,ji1_y,ji1_z,
           ji2_x,ji2_y,ji2_z,je_r,je_t,je_z,je_perp,je_para,ue_r,ue_t,ue_z,ue_perp,
           ue_para,uthetaExB,Tn1,Tn2,Ti1,Ti2,Te,n_mp_n1,n_mp_n2,n_mp_i1,n_mp_i2,avg_w_n1,
           avg_w_n2,avg_w_i1,avg_w_i2,neu_gen_weights1,neu_gen_weights2,
           ion_gen_weights1,ion_gen_weights2,ndot_ion01_n1,ndot_ion02_n1,ndot_ion12_i1,
           F_theta,Hall_par,Hall_par_eff,nu_e_tot,nu_e_tot_eff,nu_en,nu_ei1,nu_ei2,nu_i01,nu_i02,nu_i12] = HET_sims_plotvars(nodes_flag,cells_flag,Br,Bz,Bfield,phi,Er,Ez,Efield,nn1,nn2,ni1,ni2,ne,
                                                                                                                             fn1_x,fn1_y,fn1_z,fn2_x,fn2_y,fn2_z,fi1_x,fi1_y,fi1_z,fi2_x,fi2_y,fi2_z,
                                                                                                                             un1_x,un1_y,un1_z,un2_x,un2_y,un2_z,ui1_x,ui1_y,ui1_z,ui2_x,ui2_y,ui2_z,
                                                                                                                             ji1_x,ji1_y,ji1_z,ji2_x,ji2_y,ji2_z,je_r,je_t,je_z,je_perp,je_para,
                                                                                                                             ue_r,ue_t,ue_z,ue_perp,ue_para,uthetaExB,Tn1,Tn2,Ti1,Ti2,Te,
                                                                                                                             n_mp_n1,n_mp_n2,n_mp_i1,n_mp_i2,avg_w_n1,avg_w_n2,avg_w_i1,avg_w_i2,
                                                                                                                             neu_gen_weights1,neu_gen_weights2,ion_gen_weights1,ion_gen_weights2,
                                                                                                                             ndot_ion01_n1,ndot_ion02_n1,ndot_ion12_i1,F_theta,Hall_par,Hall_par_eff,
                                                                                                                             nu_e_tot,nu_e_tot_eff,nu_en,nu_ei1,nu_ei2,nu_i01,nu_i02,nu_i12)
        if mean_vars == 1:        
            print("Averaging variables...")                                                                              
            [phi_mean,Er_mean,Ez_mean,Efield_mean,nn1_mean,nn2_mean,
               ni1_mean,ni2_mean,ne_mean,fn1_x_mean,fn1_y_mean,fn1_z_mean,
               fn2_x_mean,fn2_y_mean,fn2_z_mean,fi1_x_mean,fi1_y_mean,fi1_z_mean,
               fi2_x_mean,fi2_y_mean,fi2_z_mean,un1_x_mean,un1_y_mean,un1_z_mean,
               un2_x_mean,un2_y_mean,un2_z_mean,ui1_x_mean,ui1_y_mean,ui1_z_mean,
               ui2_x_mean,ui2_y_mean,ui2_z_mean,ji1_x_mean,ji1_y_mean,ji1_z_mean,
               ji2_x_mean,ji2_y_mean,ji2_z_mean,je_r_mean,je_t_mean,je_z_mean,
               je_perp_mean,je_para_mean,ue_r_mean,ue_t_mean,ue_z_mean,ue_perp_mean,
               ue_para_mean,uthetaExB_mean,Tn1_mean,Tn2_mean,Ti1_mean,Ti2_mean,Te_mean,
               n_mp_n1_mean,n_mp_n2_mean,n_mp_i1_mean,n_mp_i2_mean,avg_w_n1_mean,
               avg_w_n2_mean,avg_w_i1_mean,avg_w_i2_mean,neu_gen_weights1_mean,
               neu_gen_weights2_mean,ion_gen_weights1_mean,ion_gen_weights2_mean,
               ndot_ion01_n1_mean,ndot_ion02_n1_mean,ndot_ion12_i1_mean,
               ne_cath_mean,nu_cath_mean,ndot_cath_mean,F_theta_mean,Hall_par_mean,
               Hall_par_eff_mean,nu_e_tot_mean,nu_e_tot_eff_mean,nu_en_mean,
               nu_ei1_mean,nu_ei2_mean,nu_i01_mean,nu_i02_mean,nu_i12_mean,
               Boltz_mean,Boltz_dim_mean,phi_elems_mean,ne_elems_mean,Te_elems_mean] = HET_sims_mean(nsteps,mean_type,last_steps,step_i,step_f,phi,Er,Ez,Efield,Br,Bz,Bfield,
                                                                                                     nn1,nn2,ni1,ni2,ne,fn1_x,fn1_y,fn1_z,fn2_x,fn2_y,fn2_z,fi1_x,fi1_y,fi1_z,
                                                                                                     fi2_x,fi2_y,fi2_z,un1_x,un1_y,un1_z,un2_x,un2_y,un2_z,ui1_x,ui1_y,ui1_z,
                                                                                                     ui2_x,ui2_y,ui2_z,ji1_x,ji1_y,ji1_z,ji2_x,ji2_y,ji2_z,je_r,je_t,je_z,
                                                                                                     je_perp,je_para,ue_r,ue_t,ue_z,ue_perp,ue_para,uthetaExB,Tn1,Tn2,Ti1,Ti2,Te,
                                                                                                     n_mp_n1,n_mp_n2,n_mp_i1,n_mp_i2,avg_w_n1,avg_w_n2,avg_w_i1,avg_w_i2,
                                                                                                     neu_gen_weights1,neu_gen_weights2,ion_gen_weights1,ion_gen_weights2,
                                                                                                     ndot_ion01_n1,ndot_ion02_n1,ndot_ion12_i1,ne_cath,nu_cath,ndot_cath,F_theta,
                                                                                                     Hall_par,Hall_par_eff,nu_e_tot,nu_e_tot_eff,nu_en,nu_ei1,nu_ei2,nu_i01,
                                                                                                     nu_i02,nu_i12,Boltz,Boltz_dim,phi_elems,ne_elems,Te_elems)
        print("Obtaining final variables for plotting...") 
        if mean_vars == 1 and plot_mean_vars == 1:
            print("Plotting variables are time-averaged")
            [Br_plot,Bz_plot,Bfield_plot,phi_plot,Er_plot,Ez_plot,Efield_plot,
               nn1_plot,nn2_plot,ni1_plot,ni2_plot,ne_plot,
               fn1_x_plot,fn1_y_plot,fn1_z_plot,fn2_x_plot,fn2_y_plot,fn2_z_plot,
               fi1_x_plot,fi1_y_plot,fi1_z_plot,fi2_x_plot,fi2_y_plot,fi2_z_plot,
               un1_x_plot,un1_y_plot,un1_z_plot,un2_x_plot,un2_y_plot,un2_z_plot,
               ui1_x_plot,ui1_y_plot,ui1_z_plot,ui2_x_plot,ui2_y_plot,ui2_z_plot,
               ji1_x_plot,ji1_y_plot,ji1_z_plot,ji2_x_plot,ji2_y_plot,ji2_z_plot,
               je_r_plot,je_t_plot,je_z_plot,je_perp_plot,je_para_plot,
               ue_r_plot,ue_t_plot,ue_z_plot,ue_perp_plot,ue_para_plot,uthetaExB_plot,
               Tn1_plot,Tn2_plot,Ti1_plot,Ti2_plot,Te_plot,n_mp_n1_plot,n_mp_n2_plot,
               n_mp_i1_plot,n_mp_i2_plot,avg_w_n1_plot,avg_w_n2_plot,avg_w_i1_plot,
               avg_w_i2_plot,neu_gen_weights1_plot,neu_gen_weights2_plot,
               ion_gen_weights1_plot,ion_gen_weights2_plot,ndot_ion01_n1_plot,
               ndot_ion02_n1_plot,ndot_ion12_i1_plot,ne_cath_plot,nu_cath_plot,ndot_cath_plot,
               F_theta_plot,Hall_par_plot,Hall_par_eff_plot,nu_e_tot_plot,nu_e_tot_eff_plot,
               nu_en_plot,nu_ei1_plot,nu_ei2_plot,nu_i01_plot,nu_i02_plot,nu_i12_plot] = HET_sims_cp_vars(Br,Bz,Bfield,phi_mean,Er_mean,Ez_mean,Efield_mean,nn1_mean,nn2_mean,
                                                                                                          ni1_mean,ni2_mean,ne_mean,fn1_x_mean,fn1_y_mean,fn1_z_mean,
                                                                                                          fn2_x_mean,fn2_y_mean,fn2_z_mean,fi1_x_mean,fi1_y_mean,fi1_z_mean,
                                                                                                          fi2_x_mean,fi2_y_mean,fi2_z_mean,un1_x_mean,un1_y_mean,un1_z_mean,
                                                                                                          un2_x_mean,un2_y_mean,un2_z_mean,ui1_x_mean,ui1_y_mean,ui1_z_mean,
                                                                                                          ui2_x_mean,ui2_y_mean,ui2_z_mean,ji1_x_mean,ji1_y_mean,ji1_z_mean,
                                                                                                          ji2_x_mean,ji2_y_mean,ji2_z_mean,je_r_mean,je_t_mean,je_z_mean,
                                                                                                          je_perp_mean,je_para_mean,ue_r_mean,ue_t_mean,ue_z_mean,ue_perp_mean,
                                                                                                          ue_para_mean,uthetaExB_mean,Tn1_mean,Tn2_mean,Ti1_mean,Ti2_mean,Te_mean,
                                                                                                          n_mp_n1_mean,n_mp_n2_mean,n_mp_i1_mean,n_mp_i2_mean,avg_w_n1_mean,
                                                                                                          avg_w_n2_mean,avg_w_i1_mean,avg_w_i2_mean,neu_gen_weights1_mean,
                                                                                                          neu_gen_weights2_mean,ion_gen_weights1_mean,ion_gen_weights2_mean,
                                                                                                          ndot_ion01_n1_mean,ndot_ion02_n1_mean,ndot_ion12_i1_mean,ne_cath_mean,
                                                                                                          nu_cath_mean,ndot_cath_mean,F_theta_mean,Hall_par_mean,Hall_par_eff_mean,
                                                                                                          nu_e_tot_mean,nu_e_tot_eff_mean,nu_en_mean,nu_ei1_mean,nu_ei2_mean,nu_i01_mean,
                                                                                                          nu_i02_mean,nu_i12_mean)
        else:
            [Br_plot,Bz_plot,Bfield_plot,phi_plot,Er_plot,Ez_plot,Efield_plot,
               nn1_plot,nn2_plot,ni1_plot,ni2_plot,ne_plot,
               fn1_x_plot,fn1_y_plot,fn1_z_plot,fn2_x_plot,fn2_y_plot,fn2_z_plot,
               fi1_x_plot,fi1_y_plot,fi1_z_plot,fi2_x_plot,fi2_y_plot,fi2_z_plot,
               un1_x_plot,un1_y_plot,un1_z_plot,un2_x_plot,un2_y_plot,un2_z_plot,
               ui1_x_plot,ui1_y_plot,ui1_z_plot,ui2_x_plot,ui2_y_plot,ui2_z_plot,
               ji1_x_plot,ji1_y_plot,ji1_z_plot,ji2_x_plot,ji2_y_plot,ji2_z_plot,
               je_r_plot,je_t_plot,je_z_plot,je_perp_plot,je_para_plot,
               ue_r_plot,ue_t_plot,ue_z_plot,ue_perp_plot,ue_para_plot,uthetaExB_plot,
               Tn1_plot,Tn2_plot,Ti1_plot,Ti2_plot,Te_plot,n_mp_n1_plot,n_mp_n2_plot,
               n_mp_i1_plot,n_mp_i2_plot,avg_w_n1_plot,avg_w_n2_plot,avg_w_i1_plot,
               avg_w_i2_plot,neu_gen_weights1_plot,neu_gen_weights2_plot,
               ion_gen_weights1_plot,ion_gen_weights2_plot,ndot_ion01_n1_plot,
               ndot_ion02_n1_plot,ndot_ion12_i1_plot,ne_cath_plot,nu_cath_plot,ndot_cath_plot,
               F_theta_plot,Hall_par_plot,Hall_par_eff_plot,nu_e_tot_plot,nu_e_tot_eff_plot,
               nu_en_plot,nu_ei1_plot,nu_ei2_plot,nu_i01_plot,nu_i02_plot,nu_i12_plot] = HET_sims_cp_vars(Br,Bz,Bfield,phi,Er,Ez,Efield,nn1,nn2,ni1,ni2,ne,
                                                                                                          fn1_x,fn1_y,fn1_z,fn2_x,fn2_y,fn2_z,fi1_x,fi1_y,fi1_z,fi2_x,fi2_y,fi2_z,
                                                                                                          un1_x,un1_y,un1_z,un2_x,un2_y,un2_z,ui1_x,ui1_y,ui1_z,ui2_x,ui2_y,ui2_z,
                                                                                                          ji1_x,ji1_y,ji1_z,ji2_x,ji2_y,ji2_z,je_r,je_t,je_z,je_perp,je_para,
                                                                                                          ue_r,ue_t,ue_z,ue_perp,ue_para,uthetaExB,Tn1,Tn2,Ti1,Ti2,Te,
                                                                                                          n_mp_n1,n_mp_n2,n_mp_i1,n_mp_i2,avg_w_n1,avg_w_n2,avg_w_i1,avg_w_i2,
                                                                                                          neu_gen_weights1,neu_gen_weights2,ion_gen_weights1,ion_gen_weights2,
                                                                                                          ndot_ion01_n1,ndot_ion02_n1,ndot_ion12_i1,ne_cath,nu_cath,ndot_cath,F_theta,
                                                                                                          Hall_par,Hall_par_eff,nu_e_tot,nu_e_tot_eff,nu_en,nu_ei1,nu_ei2,nu_i01,
                                                                                                          nu_i02,nu_i12)


        ratio_ni1_ni2_plot      = np.divide(ni1_plot,ni2_plot)
        ue_plot                 = np.sqrt(ue_r_plot**2 +ue_t_plot**2 + ue_z_plot**2)
        ue2_plot                = np.sqrt(ue_perp_plot**2 +ue_t_plot**2 + ue_para_plot**2)
        ui1_plot                = np.sqrt(ui1_x_plot**2 + ui1_y_plot**2 + ui1_z_plot**2)
        ui2_plot                = np.sqrt(ui2_x_plot**2 + ui2_y_plot**2 + ui2_z_plot**2)
        cs01_plot               = np.sqrt(e*Te_plot/mass)
        cs02_plot               = np.sqrt(2*e*Te_plot/mass)
        Mi1_plot                = np.divide(ui1_plot,cs01_plot)
        Mi2_plot                = np.divide(ui2_plot,cs02_plot) 
        Mi1_z_plot              = np.divide(ui1_z_plot,cs01_plot)
        Mi2_z_plot              = np.divide(ui2_z_plot,cs02_plot)
        Ekin_e_plot             = 0.5*me*ue_plot**2/e
        Ekin_i1_plot            = 0.5*mass*ui1_plot**2/e
        Ekin_i2_plot            = 0.5*mass*ui2_plot**2/e
        ratio_Ekin_Te_plot      = Ekin_e_plot/Te_plot
        ratio_Ekin_Ti1_plot     = Ekin_i1_plot/Ti1_plot
        ratio_Ekin_Ti2_plot     = Ekin_i2_plot/Ti2_plot
        je_plot                 = np.sqrt(je_r_plot**2 + je_t_plot**2 + je_z_plot**2)
        je2_plot                = np.sqrt(je_perp_plot**2 + je_t_plot**2 + je_para_plot**2)
        ji_x_plot               = ji1_x_plot + ji2_x_plot
        ji_y_plot               = ji1_y_plot + ji2_y_plot
        ji_z_plot               = ji1_z_plot + ji2_z_plot
        ui_x_plot               = ji_x_plot/(e*ne_plot)
        ui_y_plot               = ji_y_plot/(e*ne_plot)
        ui_z_plot               = ji_z_plot/(e*ne_plot)
        ji_plot                 = np.sqrt( ji_x_plot**2 + ji_y_plot**2 +ji_z_plot**2 )
        j_r_plot                = ji_x_plot + je_r_plot
        j_t_plot                = ji_y_plot + je_t_plot
        j_z_plot                = ji_z_plot + je_z_plot
        j_plot                  = np.sqrt(j_r_plot**2 + j_t_plot**2 + j_z_plot**2)
        erel_je_plot            = np.abs(je2_plot-je_plot)/np.abs(je_plot)
        erel_ue_plot            = np.abs(ue2_plot-ue_plot)/np.abs(ue_plot)
        erel_jeji_plot          = np.abs(je_plot-ji_plot)/np.abs(ji_plot)
        ratio_ue_t_perp_plot    = ue_t_plot/ue_perp_plot
        ratio_ue_t_para_plot    = ue_t_plot/ue_para_plot
        ratio_ue_perp_para_plot = ue_perp_plot/ue_para_plot
        ratio_je_t_perp_plot    = je_t_plot/je_perp_plot
        je2D_plot               = np.sqrt(je_r_plot**2 + je_z_plot**2)
        ji2D_plot               = np.sqrt(ji_x_plot**2 + ji_z_plot**2)
        j2D_plot                = np.sqrt(j_r_plot**2 + j_z_plot**2)
        nu_ei_el_tot_plot       = nu_ei1_plot + nu_ei2_plot
        nu_ion_tot_plot         = nu_i01_plot + nu_i02_plot + nu_i12_plot
        ###########################################################################
        print("Plotting...")
        ############################ GENERATING PLOTS #############################
        print("erel_ue max         = %15.8e; erel_ue min         = %15.8e (-)" %( np.nanmax(erel_ue_plot[rind,:]), np.nanmin(erel_ue_plot[rind,:]) ) )
        
        
        zs                = zs*1E2
        rs                = rs*1E2
        zscells           = zscells*1E2
        rscells           = rscells*1E2
        points            = points*1E2
        z_cath            = z_cath*1E2
        r_cath            = r_cath*1E2
        elem_geom[3,:]    = elem_geom[3,:]*1E4
        elem_geom[0,:]    = elem_geom[0,:]*1E2
        elem_geom[1,:]    = elem_geom[1,:]*1E2
        Efield_plot       = Efield_plot*1E-3
        Er_plot           = Er_plot*1E-3
        Ez_plot           = Ez_plot*1E-3
        Bfield_plot       = Bfield_plot*1E4
        Br_plot           = Br_plot*1E4
        Bz_plot           = Bz_plot*1E4
        je_r_plot         = je_r_plot*1E-3
        je_t_plot         = je_t_plot*1E-4
        je_z_plot         = je_z_plot*1E-3
        je_para_plot      = je_para_plot*1E-3
        je_perp_plot      = je_perp_plot*1E-3
        ji_x_plot         = ji_x_plot*1E-2
        ji_z_plot         = ji_z_plot*1E-2
        je2D_plot         = je2D_plot
        ji2D_plot         = ji2D_plot
        j2D_plot          = j2D_plot
#        nu_e_tot_plot     = nu_e_tot_plot*1E-6
#        nu_e_tot_eff_plot = nu_e_tot_eff_plot*1E-6
#        nu_en_plot        = nu_en_plot*1E-6
#        nu_ei1_plot       = nu_ei1_plot*1E-6
#        nu_ei2_plot       = nu_ei2_plot*1E-6
#        nu_i01_plot       = nu_i01_plot*1E-6
#        nu_i02_plot       = nu_i02_plot*1E-6
#        nu_i12_plot       = nu_i12_plot*1E-6
        

        #delta_out = np.array([delta_see_acc[eta_max,0:xi_top,-1],delta_see_acc[eta_max::,xi_top::,-1]])
        #s_out     = np.array([zs[eta_max,0:xi_top],rs[eta_max::,xi_top::]])

        ge_sb_b_acc_mean = np.nanmean(ge_sb_b_acc[:,:,nsteps-last_steps::],axis=2)
        ge_b_acc_mean    = np.nanmean(ge_b_acc[:,:,nsteps-last_steps::],axis=2)


        delta_see_mean = np.divide(ge_sb_b_acc_mean,ge_sb_b_acc_mean + ge_b_acc_mean)

        
        #delta_out = delta_see_acc[eta_max,0:xi_top,-1]

        delta_out = delta_see_mean[eta_max,0:xi_top]
        delta_in  = delta_see_mean[eta_min,0:xi_top]
        s_out     = zs[eta_max,0:xi_top]
        print(np.shape(delta_out),np.shape(s_out))
        print(delta_out)
        print(s_out)


 #       s_out = np.zeros((1,0))
 #       delta_out = np.zeros((1,0))
 #       for i in range(0,xi_bottom):
 #           s_out = np.append(s_out,np.array([zs[eta_max,i]]),axis=0)
 #           delta_out = np.append(delta_out,np.array([delta_see_acc[eta_max,i,-1]]),axis=0)
 #       print(np.shape(delta_out),np.shape(s_out))
#        print(delta_out)
#        print(s_out)
#        # Left wall
#        rstart = np.linspace(1,dims_u[0]-2,nstart_r)
#        zstart = np.ones(nstart_r)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)
#        # Right wall
#        rstart = np.linspace(1,dims_u[0]-2,nstart_r)
#        zstart = (dims_u[1]-2)*np.ones(nstart_r)
#        start_points = np.append(start_points,np.transpose(np.array([zstart,rstart])),axis=0)

  
    if plot_deltaSEE == 1:
        plt.figure(r'deltaSEE out')
        plt.plot(s_out,delta_out, linestyle='-', linewidth = line_width)
        plt.figure(r'deltaSEE in')
        plt.plot(s_out,delta_in, linestyle='-', linewidth = line_width)
#            plt.plot(s_out,delta_out, linestyle=linestyles[ind3], linewidth = line_width, markevery=marker_every, markersize=marker_size, marker=markers[ind], color=colors[ind], markeredgecolor = 'k', label=labels[k])
            #if plot_zcath_012 == 1:             
                 #plt.plot(z_cath*np.ones(2),np.array([np.nanmin(Te_plot[rind,:]),np.nanmax(Te_plot[rind,:])]), linestyle='-.', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color=colors[ind], markeredgecolor = 'k', label="")


        ind = ind + 1
        if ind > 6:
            ind = 0
            ind2 = ind2 + 1
            if ind2 > 6:
                ind = 0
                ind2 = 0
                ind3 = ind3 + 1
                
    #xi_top = int(xi_top)


    if save_flag == 1:  
        plt.figure(r'deltaSEE out')  
        plt.savefig(path_out+"deltaSEE_out"+figs_format,bbox_inches='tight') 
        plt.close() 
        plt.figure(r'deltaSEE in')  
        plt.savefig(path_out+"deltaSEE_in"+figs_format,bbox_inches='tight') 
        plt.close() 







        
if boundary_plots_OLD == 1:
    print("######## boundary_plots_OLD ########")

    ticks_size_isolines = 20
    marker_size  = 7
    marker_every = 2
    
    rind       = 19
    rind_anode1 = rind
    rind_anode2 = 17
    zind_anode  = 8
    elems_cath_Bline   = range(407-1,483-1+2,2) # Elements along the cathode B line for cases C1, C2 and C3
#    elems_cath_Bline   = range(875-1,951-1+2,2) # Elements along the cathode B line for case C5
    
    # Cathode plotting flag and cathode position in cm (for plot_zcath_012 = 2) 
    plot_zcath_012 = 2
    zcat_pos       = 5.9394542444501024
    
    # Print out time step
    timestep = 0
    timesteps = [996,1010,1050,1095]
    
    allsteps_flag   = 1
    read_inst_data  = 0
    read_part_lists = 0
    read_flag       = 1
    
    mean_vars       = 1
    mean_type       = 0
    last_steps      = 600
    step_i          = 100
    step_f          = 190
    plot_mean_vars  = 1
      
    
    Bline_all2Dplots = 1
    cath2D_plots     = 0
    cath2D_title     = r"(d)"
    

    if allsteps_flag == 0:
        mean_vars = 0

    
    # Simulation names
    nsims = 1    
    
    # Flag for old sims (1: old sim files, 0: new sim files)
    oldpost_sim      = np.array([1,0],dtype = int)
    oldsimparams_sim = np.array([0,1],dtype = int)
    
    
    sim_names = ["../../../Rb_hyphen/sim/sims/SPT100_al0025_Ne5_C1"]
#    sim_names = ["../../../sim/sims/SPT100_al0025_Ne5_C1_qboundary"]
#    sim_names = ["../../Rb_hyphen/sim/sims/SPT100_al0025_Ne100_C1"]
#    sim_names = ["../../Rb_hyphen/sim/sims/SPT100_also1510_V1"]


    # Labels             
    labels = [r"A",r"B",r"C",r"D",r"Average"]
    
    # Line colors
    colors = ['r','g','b','m','k','m','y']
    # Markers
    markers = ['^','>','v', '<', 's', 'o','*']
    # Line style
#    linestyles = ['-','--','-.', ':','-','--','-.']
    linestyles = ['-','-','-', '-','-','-','-']
            
   
    ######################## READ INPUT/OUTPUT FILES ##########################
    k = 0
    ind_ini_letter = sim_names[k].rfind('/') + 1
    print("##### CASE "+str(k+1)+": "+sim_names[k][ind_ini_letter::]+" #####")
    # Obtain paths to simulation files
    path_picM         = sim_names[k]+"/SET/inp/SPT100_picM.hdf5"
    path_simstate_inp = sim_names[k]+"/CORE/inp/SimState.hdf5"
    path_simstate_out = sim_names[k]+"/CORE/out/SimState.hdf5"
    path_postdata_out = sim_names[k]+"/CORE/out/PostData.hdf5"
    path_simparams_inp = sim_names[k]+"/CORE/inp/sim_params.inp"
    print("Reading results...")
    [num_ion_spe,num_neu_spe,n_mp_cell_i,n_mp_cell_n,n_mp_cell_i_min,
       n_mp_cell_i_max,n_mp_cell_n_min,n_mp_cell_n_max,min_ion_plasma_density,
       m_A,spec_refl_prob,ene_bal,points,zs,rs,zscells,rscells,dims,
       nodes_flag,cells_flag,cells_vol,volume,ind_maxr_c,ind_maxz_c,nr_c,nz_c,
       eta_max,eta_min,xi_top,xi_bottom,time,time_fast,steps,steps_fast,dt,dt_e,
       nsteps,nsteps_fast,nsteps_eFld,faces,nodes,boundary_f,face_geom,elem_geom,
       n_faces,n_elems,n_faces_boundary,bIDfaces_Dwall,bIDfaces_Awall,
       bIDfaces_FLwall,IDfaces_Dwall,IDfaces_Awall,IDfaces_FLwall,zfaces_Dwall,
       rfaces_Dwall,Afaces_Dwall,zfaces_Awall,rfaces_Awall,Afaces_Awall,
       zfaces_FLwall,rfaces_FLwall,Afaces_FLwall,
       cath_elem,z_cath,r_cath,V_cath,mass,ssIons1,ssIons2,ssNeutrals1,ssNeutrals2,
       n_mp_i1_list,n_mp_i2_list,n_mp_n1_list,n_mp_n2_list,phi,phi_elems,Ez,Er,Efield,
       Bz,Br,Bfield,Te,Te_elems,cs01,cs02,nn1,nn2,ni1,ni2,ne,ne_elems,fn1_x,fn1_y,
       fn1_z,fn2_x,fn2_y,fn2_z,fi1_x,fi1_y,fi1_z,fi2_x,fi2_y,fi2_z,un1_x,un1_y,un1_z,
       un2_x,un2_y,un2_z,ui1_x,ui1_y,ui1_z,ui2_x,ui2_y,ui2_z,ji1_x,ji1_y,
       ji1_z,ji2_x,ji2_y,ji2_z,je_r,je_t,je_z,je_perp,je_para,ue_r,ue_t,ue_z,
       ue_perp,ue_para,uthetaExB,Tn1,Tn2,Ti1,Ti2,n_mp_n1,n_mp_n2,n_mp_i1,n_mp_i2,
       avg_w_n1,avg_w_n2,avg_w_i1,avg_w_i2,neu_gen_weights1,neu_gen_weights2,
       ion_gen_weights1,ion_gen_weights2,surf_elems,n_imp_elems,imp_elems,
       imp_elems_kbc,imp_elems_MkQ1,imp_elems_Te,imp_elems_dphi_kbc,
       imp_elems_dphi_sh,imp_elems_nQ1,imp_elems_nQ2,imp_elems_ion_flux_in1,
       imp_elems_ion_flux_out1,imp_elems_ion_ene_flux_in1,
       imp_elems_ion_ene_flux_out1,imp_elems_ion_imp_ene1,
       imp_elems_ion_flux_in2,imp_elems_ion_flux_out2,
       imp_elems_ion_ene_flux_in2,imp_elems_ion_ene_flux_out2,
       imp_elems_ion_imp_ene2,imp_elems_neu_flux_in1,imp_elems_neu_flux_out1,
       imp_elems_neu_ene_flux_in1,imp_elems_neu_ene_flux_out1,
       imp_elems_neu_imp_ene1,imp_elems_neu_flux_in2,imp_elems_neu_flux_out2,
       imp_elems_neu_ene_flux_in2,imp_elems_neu_ene_flux_out2,
       imp_elems_neu_imp_ene2,tot_mass_mp_neus,tot_mass_mp_ions,tot_num_mp_neus,
       tot_num_mp_ions,tot_mass_exit_neus,tot_mass_exit_ions,mass_mp_neus,
       mass_mp_ions,num_mp_neus,num_mp_ions,avg_dens_mp_neus,avg_dens_mp_ions,
       eta_u,eta_prod,eta_thr,eta_div,eta_cur,thrust,thrust_ion,thrust_neu,thrust_e,
       Id_inst,Id,Vd_inst,Vd,I_beam,I_tw_tot,Pd,Pd_inst,P_mat,P_inj,P_inf,P_ion,
       P_ex,P_use_tot_i,P_use_tot_n,P_use_tot,P_use_z_i,P_use_z_n,P_use_z,
       qe_wall,qe_wall_inst,Pe_faces_Dwall,Pe_faces_Awall,Pe_faces_FLwall,
       Pe_faces_Dwall_inst,Pe_faces_Awall_inst,Pe_faces_FLwall_inst,
       Pe_Dwall,Pe_Awall,Pe_FLwall,Pe_Dwall_inst,Pe_Awall_inst,Pe_FLwall_inst, 
       Pi_Dwall,Pi_Awall,Pi_FLwall,Pi_FLwall_nonz,Pn_Dwall,Pn_Awall,Pn_FLwall,
       Pn_FLwall_nonz,P_Dwall,P_Awall,P_FLwall,Pwalls,Pionex,Ploss,Pthrust,
       Pnothrust,Pnothrust_walls,balP,err_balP,ctr_Pd,ctr_Ploss,ctr_Pwalls,
       ctr_Pionex,ctr_P_DAwalls,ctr_P_FLwalls,ctr_P_FLwalls_in,ctr_P_FLwalls_i,
       ctr_P_FLwalls_n,ctr_P_FLwalls_e,balP_Pthrust,err_balP_Pthrust,
       ctr_balPthrust_Pd,ctr_balPthrust_Pnothrust,ctr_balPthrust_Pthrust,
       ctr_balPthrust_Pnothrust_walls,ctr_balPthrust_Pnothrust_ionex,
       err_def_balP,Isp_s,Isp_ms,dMdt_i1,dMdt_i2,dMdt_n1,dMdt_n2,dMdt_tot,
       mflow_coll_i1,mflow_coll_i2,mflow_coll_n1,mflow_coll_n2,mflow_fw_i1,
       mflow_fw_i2,mflow_fw_n1,mflow_fw_n2,mflow_tw_i1,mflow_tw_i2,mflow_tw_n1,
       mflow_tw_n2,mflow_ircmb_picS_n1,mflow_ircmb_picS_n2,mflow_inj_i1,mflow_inj_i2,
       mflow_fwmat_i1,mflow_fwmat_i2,mflow_inj_n1,mflow_fwmat_n1,mflow_inj_n2,
       mflow_fwmat_n2,mflow_twmat_i1,mflow_twinf_i1,mflow_twa_i1,mflow_twmat_i2,
       mflow_twinf_i2,mflow_twa_i2,mflow_twmat_n1,mflow_twinf_n1,mflow_twa_n1,
       mflow_twmat_n2,mflow_twinf_n2,mflow_twa_n2,mbal_n1,mbal_i1,mbal_i2,mbal_tot,
       err_mbal_n1,err_mbal_i1,err_mbal_i2,err_mbal_tot,ctr_mflow_coll_n1,
       ctr_mflow_fw_n1,ctr_mflow_tw_n1,ctr_mflow_coll_i1,ctr_mflow_fw_i1,
       ctr_mflow_tw_i1,ctr_mflow_coll_i2,ctr_mflow_fw_i2,ctr_mflow_tw_i2,
       ctr_mflow_coll_tot,ctr_mflow_fw_tot,ctr_mflow_tw_tot,dEdt_i1,dEdt_i2,
       dEdt_n1,dEdt_n2,eneflow_coll_i1,eneflow_coll_i2,eneflow_coll_n1,
       eneflow_coll_n2,eneflow_fw_i1,eneflow_fw_i2,eneflow_fw_n1,eneflow_fw_n2,
       eneflow_tw_i1,eneflow_tw_i2,eneflow_tw_n1,eneflow_tw_n2,Pfield_i1,
       Pfield_i2,eneflow_inj_i1,eneflow_fwmat_i1,eneflow_inj_i2,
       eneflow_fwmat_i2,eneflow_inj_n1,eneflow_fwmat_n1,eneflow_inj_n2,
       eneflow_fwmat_n2,eneflow_twmat_i1,eneflow_twinf_i1,eneflow_twa_i1,
       eneflow_twmat_i2,eneflow_twinf_i2,eneflow_twa_i2,eneflow_twmat_n1,
       eneflow_twinf_n1,eneflow_twa_n1,eneflow_twmat_n2,eneflow_twinf_n2,
       eneflow_twa_n2,ndot_ion01_n1,ndot_ion02_n1,ndot_ion12_i1,ne_cath,Te_cath,
       nu_cath,ndot_cath,Q_cath,P_cath,F_theta,Hall_par,Hall_par_eff,
       nu_e_tot,nu_e_tot_eff,nu_en,nu_ei1,nu_ei2,nu_i01,nu_i02,nu_i12,Boltz,Boltz_dim,
       Pfield_e,Ebal_e] = HET_sims_read(path_simstate_inp,path_simstate_out,
                                        path_postdata_out,path_simparams_inp,
                                        path_picM,allsteps_flag,timestep,read_inst_data,
                                        read_part_lists,read_flag,oldpost_sim[k],oldsimparams_sim[k])
                                                                                                       
    print("Generating plotting variables (NaN in ghost nodes)...")                                                                                                      
    [Br,Bz,Bfield,phi,Er,Ez,Efield,nn1,nn2,ni1,ni2,ne,fn1_x,fn1_y,fn1_z,
       fn2_x,fn2_y,fn2_z,fi1_x,fi1_y,fi1_z,fi2_x,fi2_y,fi2_z,un1_x,un1_y,un1_z,
       un2_x,un2_y,un2_z,ui1_x,ui1_y,ui1_z,ui2_x,ui2_y,ui2_z,ji1_x,ji1_y,ji1_z,
       ji2_x,ji2_y,ji2_z,je_r,je_t,je_z,je_perp,je_para,ue_r,ue_t,ue_z,ue_perp,
       ue_para,uthetaExB,Tn1,Tn2,Ti1,Ti2,Te,n_mp_n1,n_mp_n2,n_mp_i1,n_mp_i2,avg_w_n1,
       avg_w_n2,avg_w_i1,avg_w_i2,neu_gen_weights1,neu_gen_weights2,
       ion_gen_weights1,ion_gen_weights2,ndot_ion01_n1,ndot_ion02_n1,ndot_ion12_i1,
       F_theta,Hall_par,Hall_par_eff,nu_e_tot,nu_e_tot_eff,nu_en,nu_ei1,nu_ei2,nu_i01,nu_i02,nu_i12] = HET_sims_plotvars(nodes_flag,cells_flag,Br,Bz,Bfield,phi,Er,Ez,Efield,nn1,nn2,ni1,ni2,ne,
                                                                                                                         fn1_x,fn1_y,fn1_z,fn2_x,fn2_y,fn2_z,fi1_x,fi1_y,fi1_z,fi2_x,fi2_y,fi2_z,
                                                                                                                         un1_x,un1_y,un1_z,un2_x,un2_y,un2_z,ui1_x,ui1_y,ui1_z,ui2_x,ui2_y,ui2_z,
                                                                                                                         ji1_x,ji1_y,ji1_z,ji2_x,ji2_y,ji2_z,je_r,je_t,je_z,je_perp,je_para,
                                                                                                                         ue_r,ue_t,ue_z,ue_perp,ue_para,uthetaExB,Tn1,Tn2,Ti1,Ti2,Te,
                                                                                                                         n_mp_n1,n_mp_n2,n_mp_i1,n_mp_i2,avg_w_n1,avg_w_n2,avg_w_i1,avg_w_i2,
                                                                                                                         neu_gen_weights1,neu_gen_weights2,ion_gen_weights1,ion_gen_weights2,
                                                                                                                         ndot_ion01_n1,ndot_ion02_n1,ndot_ion12_i1,F_theta,Hall_par,Hall_par_eff,
                                                                                                                         nu_e_tot,nu_e_tot_eff,nu_en,nu_ei1,nu_ei2,nu_i01,nu_i02,nu_i12)
    if mean_vars == 1:        
        print("Averaging variables...")                                                                              
        [phi_mean,Er_mean,Ez_mean,Efield_mean,nn1_mean,nn2_mean,
           ni1_mean,ni2_mean,ne_mean,fn1_x_mean,fn1_y_mean,fn1_z_mean,
           fn2_x_mean,fn2_y_mean,fn2_z_mean,fi1_x_mean,fi1_y_mean,fi1_z_mean,
           fi2_x_mean,fi2_y_mean,fi2_z_mean,un1_x_mean,un1_y_mean,un1_z_mean,
           un2_x_mean,un2_y_mean,un2_z_mean,ui1_x_mean,ui1_y_mean,ui1_z_mean,
           ui2_x_mean,ui2_y_mean,ui2_z_mean,ji1_x_mean,ji1_y_mean,ji1_z_mean,
           ji2_x_mean,ji2_y_mean,ji2_z_mean,je_r_mean,je_t_mean,je_z_mean,
           je_perp_mean,je_para_mean,ue_r_mean,ue_t_mean,ue_z_mean,ue_perp_mean,
           ue_para_mean,uthetaExB_mean,Tn1_mean,Tn2_mean,Ti1_mean,Ti2_mean,Te_mean,
           n_mp_n1_mean,n_mp_n2_mean,n_mp_i1_mean,n_mp_i2_mean,avg_w_n1_mean,
           avg_w_n2_mean,avg_w_i1_mean,avg_w_i2_mean,neu_gen_weights1_mean,
           neu_gen_weights2_mean,ion_gen_weights1_mean,ion_gen_weights2_mean,
           ndot_ion01_n1_mean,ndot_ion02_n1_mean,ndot_ion12_i1_mean,
           ne_cath_mean,nu_cath_mean,ndot_cath_mean,F_theta_mean,Hall_par_mean,
           Hall_par_eff_mean,nu_e_tot_mean,nu_e_tot_eff_mean,nu_en_mean,
           nu_ei1_mean,nu_ei2_mean,nu_i01_mean,nu_i02_mean,nu_i12_mean,
           Boltz_mean,Boltz_dim_mean,phi_elems_mean,ne_elems_mean,Te_elems_mean] = HET_sims_mean(nsteps,mean_type,last_steps,step_i,step_f,phi,Er,Ez,Efield,Br,Bz,Bfield,
                                                                                        nn1,nn2,ni1,ni2,ne,fn1_x,fn1_y,fn1_z,fn2_x,fn2_y,fn2_z,fi1_x,fi1_y,fi1_z,
                                                                                        fi2_x,fi2_y,fi2_z,un1_x,un1_y,un1_z,un2_x,un2_y,un2_z,ui1_x,ui1_y,ui1_z,
                                                                                        ui2_x,ui2_y,ui2_z,ji1_x,ji1_y,ji1_z,ji2_x,ji2_y,ji2_z,je_r,je_t,je_z,
                                                                                        je_perp,je_para,ue_r,ue_t,ue_z,ue_perp,ue_para,uthetaExB,Tn1,Tn2,Ti1,Ti2,Te,
                                                                                        n_mp_n1,n_mp_n2,n_mp_i1,n_mp_i2,avg_w_n1,avg_w_n2,avg_w_i1,avg_w_i2,
                                                                                        neu_gen_weights1,neu_gen_weights2,ion_gen_weights1,ion_gen_weights2,
                                                                                        ndot_ion01_n1,ndot_ion02_n1,ndot_ion12_i1,ne_cath,nu_cath,ndot_cath,F_theta,
                                                                                        Hall_par,Hall_par_eff,nu_e_tot,nu_e_tot_eff,nu_en,nu_ei1,nu_ei2,nu_i01,
                                                                                        nu_i02,nu_i12,Boltz,Boltz_dim,phi_elems,ne_elems,Te_elems)
                                                                                        
                                                                                        
    print("Obtaining final variables for plotting...") 
    if mean_vars == 1 and plot_mean_vars == 1:
        print("Plotting variables are time-averaged")
        [Br_plot,Bz_plot,Bfield_plot,phi_plot,Er_plot,Ez_plot,Efield_plot,
           nn1_plot,nn2_plot,ni1_plot,ni2_plot,ne_plot,
           fn1_x_plot,fn1_y_plot,fn1_z_plot,fn2_x_plot,fn2_y_plot,fn2_z_plot,
           fi1_x_plot,fi1_y_plot,fi1_z_plot,fi2_x_plot,fi2_y_plot,fi2_z_plot,
           un1_x_plot,un1_y_plot,un1_z_plot,un2_x_plot,un2_y_plot,un2_z_plot,
           ui1_x_plot,ui1_y_plot,ui1_z_plot,ui2_x_plot,ui2_y_plot,ui2_z_plot,
           ji1_x_plot,ji1_y_plot,ji1_z_plot,ji2_x_plot,ji2_y_plot,ji2_z_plot,
           je_r_plot,je_t_plot,je_z_plot,je_perp_plot,je_para_plot,
           ue_r_plot,ue_t_plot,ue_z_plot,ue_perp_plot,ue_para_plot,uthetaExB_plot,
           Tn1_plot,Tn2_plot,Ti1_plot,Ti2_plot,Te_plot,n_mp_n1_plot,n_mp_n2_plot,
           n_mp_i1_plot,n_mp_i2_plot,avg_w_n1_plot,avg_w_n2_plot,avg_w_i1_plot,
           avg_w_i2_plot,neu_gen_weights1_plot,neu_gen_weights2_plot,
           ion_gen_weights1_plot,ion_gen_weights2_plot,ndot_ion01_n1_plot,
           ndot_ion02_n1_plot,ndot_ion12_i1_plot,ne_cath_plot,nu_cath_plot,ndot_cath_plot,
           F_theta_plot,Hall_par_plot,Hall_par_eff_plot,nu_e_tot_plot,nu_e_tot_eff_plot,
           nu_en_plot,nu_ei1_plot,nu_ei2_plot,nu_i01_plot,nu_i02_plot,nu_i12_plot] = HET_sims_cp_vars(Br,Bz,Bfield,phi_mean,Er_mean,Ez_mean,Efield_mean,nn1_mean,nn2_mean,
                                                                                                      ni1_mean,ni2_mean,ne_mean,fn1_x_mean,fn1_y_mean,fn1_z_mean,
                                                                                                      fn2_x_mean,fn2_y_mean,fn2_z_mean,fi1_x_mean,fi1_y_mean,fi1_z_mean,
                                                                                                      fi2_x_mean,fi2_y_mean,fi2_z_mean,un1_x_mean,un1_y_mean,un1_z_mean,
                                                                                                      un2_x_mean,un2_y_mean,un2_z_mean,ui1_x_mean,ui1_y_mean,ui1_z_mean,
                                                                                                      ui2_x_mean,ui2_y_mean,ui2_z_mean,ji1_x_mean,ji1_y_mean,ji1_z_mean,
                                                                                                      ji2_x_mean,ji2_y_mean,ji2_z_mean,je_r_mean,je_t_mean,je_z_mean,
                                                                                                      je_perp_mean,je_para_mean,ue_r_mean,ue_t_mean,ue_z_mean,ue_perp_mean,
                                                                                                      ue_para_mean,uthetaExB_mean,Tn1_mean,Tn2_mean,Ti1_mean,Ti2_mean,Te_mean,
                                                                                                      n_mp_n1_mean,n_mp_n2_mean,n_mp_i1_mean,n_mp_i2_mean,avg_w_n1_mean,
                                                                                                      avg_w_n2_mean,avg_w_i1_mean,avg_w_i2_mean,neu_gen_weights1_mean,
                                                                                                      neu_gen_weights2_mean,ion_gen_weights1_mean,ion_gen_weights2_mean,
                                                                                                      ndot_ion01_n1_mean,ndot_ion02_n1_mean,ndot_ion12_i1_mean,ne_cath_mean,
                                                                                                      nu_cath_mean,ndot_cath_mean,F_theta_mean,Hall_par_mean,Hall_par_eff_mean,
                                                                                                      nu_e_tot_mean,nu_e_tot_eff_mean,nu_en_mean,nu_ei1_mean,nu_ei2_mean,nu_i01_mean,
                                                                                                      nu_i02_mean,nu_i12_mean)
    else:
        [Br_plot,Bz_plot,Bfield_plot,phi_plot,Er_plot,Ez_plot,Efield_plot,
           nn1_plot,nn2_plot,ni1_plot,ni2_plot,ne_plot,
           fn1_x_plot,fn1_y_plot,fn1_z_plot,fn2_x_plot,fn2_y_plot,fn2_z_plot,
           fi1_x_plot,fi1_y_plot,fi1_z_plot,fi2_x_plot,fi2_y_plot,fi2_z_plot,
           un1_x_plot,un1_y_plot,un1_z_plot,un2_x_plot,un2_y_plot,un2_z_plot,
           ui1_x_plot,ui1_y_plot,ui1_z_plot,ui2_x_plot,ui2_y_plot,ui2_z_plot,
           ji1_x_plot,ji1_y_plot,ji1_z_plot,ji2_x_plot,ji2_y_plot,ji2_z_plot,
           je_r_plot,je_t_plot,je_z_plot,je_perp_plot,je_para_plot,
           ue_r_plot,ue_t_plot,ue_z_plot,ue_perp_plot,ue_para_plot,uthetaExB_plot,
           Tn1_plot,Tn2_plot,Ti1_plot,Ti2_plot,Te_plot,n_mp_n1_plot,n_mp_n2_plot,
           n_mp_i1_plot,n_mp_i2_plot,avg_w_n1_plot,avg_w_n2_plot,avg_w_i1_plot,
           avg_w_i2_plot,neu_gen_weights1_plot,neu_gen_weights2_plot,
           ion_gen_weights1_plot,ion_gen_weights2_plot,ndot_ion01_n1_plot,
           ndot_ion02_n1_plot,ndot_ion12_i1_plot,ne_cath_plot,nu_cath_plot,ndot_cath_plot,
           F_theta_plot,Hall_par_plot,Hall_par_eff_plot,nu_e_tot_plot,nu_e_tot_eff_plot,
           nu_en_plot,nu_ei1_plot,nu_ei2_plot,nu_i01_plot,nu_i02_plot,nu_i12_plot] = HET_sims_cp_vars(Br,Bz,Bfield,phi,Er,Ez,Efield,nn1,nn2,ni1,ni2,ne,
                                                                                                      fn1_x,fn1_y,fn1_z,fn2_x,fn2_y,fn2_z,fi1_x,fi1_y,fi1_z,fi2_x,fi2_y,fi2_z,
                                                                                                      un1_x,un1_y,un1_z,un2_x,un2_y,un2_z,ui1_x,ui1_y,ui1_z,ui2_x,ui2_y,ui2_z,
                                                                                                      ji1_x,ji1_y,ji1_z,ji2_x,ji2_y,ji2_z,je_r,je_t,je_z,je_perp,je_para,
                                                                                                      ue_r,ue_t,ue_z,ue_perp,ue_para,uthetaExB,Tn1,Tn2,Ti1,Ti2,Te,
                                                                                                      n_mp_n1,n_mp_n2,n_mp_i1,n_mp_i2,avg_w_n1,avg_w_n2,avg_w_i1,avg_w_i2,
                                                                                                      neu_gen_weights1,neu_gen_weights2,ion_gen_weights1,ion_gen_weights2,
                                                                                                      ndot_ion01_n1,ndot_ion02_n1,ndot_ion12_i1,ne_cath,nu_cath,ndot_cath,F_theta,
                                                                                                      Hall_par,Hall_par_eff,nu_e_tot,nu_e_tot_eff,nu_en,nu_ei1,nu_ei2,nu_i01,
                                                                                                      nu_i02,nu_i12)
                                                                                                                                                               
    # Obtain auxiliar average variables
    ratio_ni1_ni2_plot      = np.divide(ni1_plot,ni2_plot)
    ue_plot                 = np.sqrt(ue_r_plot**2 +ue_t_plot**2 + ue_z_plot**2)
    ue2_plot                = np.sqrt(ue_perp_plot**2 +ue_t_plot**2 + ue_para_plot**2)
    ui1_plot                = np.sqrt(ui1_x_plot**2 + ui1_y_plot**2 + ui1_z_plot**2)
    ui2_plot                = np.sqrt(ui2_x_plot**2 + ui2_y_plot**2 + ui2_z_plot**2)
    cs01_plot               = np.sqrt(e*Te_plot/mass)
    cs02_plot               = np.sqrt(2*e*Te_plot/mass)
    Mi1_plot                = np.divide(ui1_plot,cs01_plot)
    Mi2_plot                = np.divide(ui2_plot,cs02_plot) 
    Ekin_e_plot             = 0.5*me*ue_plot**2/e
    Ekin_i1_plot            = 0.5*mass*ui1_plot**2/e
    Ekin_i2_plot            = 0.5*mass*ui2_plot**2/e
    ratio_Ekin_Te_plot      = Ekin_e_plot/Te_plot
    ratio_Ekin_Ti1_plot     = Ekin_i1_plot/Ti1_plot
    ratio_Ekin_Ti2_plot     = Ekin_i2_plot/Ti2_plot
    je_plot                 = np.sqrt(je_r_plot**2 + je_t_plot**2 + je_z_plot**2)
    je2_plot                = np.sqrt(je_perp_plot**2 + je_t_plot**2 + je_para_plot**2)
    ji_x_plot               = ji1_x_plot + ji2_x_plot
    ji_y_plot               = ji1_y_plot + ji2_y_plot
    ji_z_plot               = ji1_z_plot + ji2_z_plot
    ji_plot                 = np.sqrt( ji_x_plot**2 + ji_y_plot**2 + ji_z_plot**2 )
    uimean_x_plot           = ji_x_plot/(e*ne_plot)
    uimean_y_plot           = ji_y_plot/(e*ne_plot)
    uimean_z_plot           = ji_z_plot/(e*ne_plot)
    uimean_plot             = np.sqrt( uimean_x_plot**2 + uimean_y_plot**2 + uimean_z_plot**2 )
    j_r_plot                = ji_x_plot + je_r_plot
    j_t_plot                = ji_y_plot + je_t_plot
    j_z_plot                = ji_z_plot + je_z_plot
    j_plot                  = np.sqrt(j_r_plot**2 + j_t_plot**2 + j_z_plot**2)
    erel_je_plot            = np.abs(je2_plot-je_plot)/np.abs(je_plot)
    erel_ue_plot            = np.abs(ue2_plot-ue_plot)/np.abs(ue_plot)
    erel_jeji_plot          = np.abs(je_plot-ji_plot)/np.abs(ji_plot)
    erel_jz_plot            = np.abs(je_z_plot+ji_z_plot)/np.abs(ji_z_plot)
    erel_jr_plot            = np.abs(je_r_plot+ji_x_plot)/np.abs(ji_x_plot)
    ratio_ue_t_perp_plot    = ue_t_plot/ue_perp_plot
    ratio_ue_t_para_plot    = ue_t_plot/ue_para_plot
    ratio_ue_perp_para_plot = ue_perp_plot/ue_para_plot
    je2D_plot               = np.sqrt(je_r_plot**2 + je_z_plot**2)
    ji2D_plot               = np.sqrt(ji_x_plot**2 + ji_z_plot**2)
    j2D_plot                = np.sqrt(j_r_plot**2 + j_z_plot**2)
    
    ue                      = np.sqrt(ue_r**2 +ue_t**2 + ue_z**2)
    ratio_Ekin_Te           = (0.5*me*ue**2/e)/Te
    ji_x                    = ji1_x + ji2_x
    ji_y                    = ji1_y + ji2_y
    ji_z                    = ji1_z + ji2_z
    j_r                     = ji_x + je_r
    j_t                     = ji_y + je_t
    j_z                     = ji_z + je_z
    je2D                    = np.sqrt(je_r**2 + je_z**2)
    ji2D                    = np.sqrt(ji_x**2 + ji_z**2)
    j2D                     = np.sqrt(j_r**2 + j_z**2)
    
  
    # Obtain material surface elements in chamber and plume zones and relevant
    # KBC values at the material surface elements in chamber and plume zones
    pos_bohm_elems      = np.zeros(n_imp_elems,dtype='int')
    pos_bohm_elems_ctop = np.zeros(n_imp_elems,dtype='int')
    pos_bohm_elems_cbot = np.zeros(n_imp_elems,dtype='int')
    pos_bohm_elems_ptop = np.zeros(n_imp_elems,dtype='int')
    pos_bohm_elems_pbot = np.zeros(n_imp_elems,dtype='int')
    z_bohm_elems_ctop   = np.zeros(n_imp_elems,dtype='float')
    r_bohm_elems_ctop   = np.zeros(n_imp_elems,dtype='float')
    z_bohm_elems_cbot   = np.zeros(n_imp_elems,dtype='float')
    r_bohm_elems_cbot   = np.zeros(n_imp_elems,dtype='float')
    z_bohm_elems_ptop   = np.zeros(n_imp_elems,dtype='float')
    r_bohm_elems_ptop   = np.zeros(n_imp_elems,dtype='float')
    z_bohm_elems_pbot   = np.zeros(n_imp_elems,dtype='float')
    r_bohm_elems_pbot   = np.zeros(n_imp_elems,dtype='float')
    n_bohm_elems      = 0
    n_bohm_elems_ctop = 0
    n_bohm_elems_cbot = 0
    n_bohm_elems_ptop = 0
    n_bohm_elems_pbot = 0
    for i in range(0,n_imp_elems):
        surf_coords  = imp_elems[i,:]
        if ( (surf_elems[surf_coords[0]-1,surf_coords[1]-1] != 11) and    
             (surf_elems[surf_coords[0]-1,surf_coords[1]-1] != -2) and                                          
             (surf_elems[surf_coords[0]-1,surf_coords[1]-1] != -1) ):
             pos_bohm_elems[n_bohm_elems] = i
             n_bohm_elems = n_bohm_elems + 1
             if (surf_coords[0]-1)%2 == 0: # Horizontal element (even eta==i coordinate)
                 # Obtain coordinates of the nodes beloning to the surface element
                 eta_surf = float(surf_coords[0]-1)
                 xi_surf  = float(surf_coords[1]-1)
                 eta_n1   = np.floor((eta_surf)/2.0) 
                 xi_n1    = np.floor((xi_surf - 1.0)/2.0)
                 eta_n2   = eta_n1
                 xi_n2    = xi_n1 + 1
                 # Obtain the z,r coordinates of the center of the surface element
                 zc = 0.5*(zs[int(eta_n1),int(xi_n1)]+zs[int(eta_n2),int(xi_n2)])
                 rc = 0.5*(rs[int(eta_n1),int(xi_n1)]+rs[int(eta_n2),int(xi_n2)])
                 if rc < rs[int(eta_min)+1,0]:
                     pos_bohm_elems_cbot[n_bohm_elems_cbot] = i
                     z_bohm_elems_cbot[n_bohm_elems_cbot] = zc
                     r_bohm_elems_cbot[n_bohm_elems_cbot] = rc
                     n_bohm_elems_cbot = n_bohm_elems_cbot + 1
                 elif rc > rs[int(eta_min)+1,0]:
                     pos_bohm_elems_ctop[n_bohm_elems_ctop] = i
                     z_bohm_elems_ctop[n_bohm_elems_ctop] = zc
                     r_bohm_elems_ctop[n_bohm_elems_ctop] = rc
                     n_bohm_elems_ctop = n_bohm_elems_ctop + 1
             if (surf_coords[1]-1)%2 == 0: # Vertical element (even xi==j coordinate)
                 # Obtain coordinates of the nodes beloning to the surface element
                 eta_surf = float(surf_coords[0]-1)
                 xi_surf  = float(surf_coords[1]-1)
                 eta_n1   = np.floor((eta_surf - 1.0)/2.0) 
                 xi_n1    = np.floor((xi_surf)/2.0)
                 eta_n2   = eta_n1 + 1
                 xi_n2    = xi_n1
                 # Obtain the z,r coordinates of the center of the surface element
                 zc = 0.5*(zs[int(eta_n1),int(xi_n1)]+zs[int(eta_n2),int(xi_n2)])
                 rc = 0.5*(rs[int(eta_n1),int(xi_n1)]+rs[int(eta_n2),int(xi_n2)])
                 if rc < rs[int(eta_min),0]:
                     pos_bohm_elems_pbot[n_bohm_elems_pbot] = i
                     z_bohm_elems_pbot[n_bohm_elems_pbot] = zc
                     r_bohm_elems_pbot[n_bohm_elems_pbot] = rc
                     n_bohm_elems_pbot = n_bohm_elems_pbot + 1
                 elif rc > rs[int(eta_min),0]:
                     pos_bohm_elems_ptop[n_bohm_elems_ptop] = i
                     z_bohm_elems_ptop[n_bohm_elems_ptop] = zc
                     r_bohm_elems_ptop[n_bohm_elems_ptop] = rc
                     n_bohm_elems_ptop = n_bohm_elems_ptop + 1
                     
    
    pos_bohm_elems_ctop = pos_bohm_elems_ctop[0:n_bohm_elems_ctop]
    pos_bohm_elems_cbot = pos_bohm_elems_cbot[0:n_bohm_elems_cbot]
    pos_bohm_elems_ptop = pos_bohm_elems_ptop[0:n_bohm_elems_ptop]
    pos_bohm_elems_pbot = pos_bohm_elems_pbot[0:n_bohm_elems_pbot]
    z_bohm_elems_ctop   = z_bohm_elems_ctop[0:n_bohm_elems_ctop]
    r_bohm_elems_ctop   = r_bohm_elems_ctop[0:n_bohm_elems_ctop]
    z_bohm_elems_cbot   = z_bohm_elems_cbot[0:n_bohm_elems_cbot]
    r_bohm_elems_cbot   = r_bohm_elems_cbot[0:n_bohm_elems_cbot]
    z_bohm_elems_ptop   = z_bohm_elems_ptop[0:n_bohm_elems_ptop]
    r_bohm_elems_ptop   = r_bohm_elems_ptop[0:n_bohm_elems_ptop]
    z_bohm_elems_pbot   = z_bohm_elems_pbot[0:n_bohm_elems_pbot]
    r_bohm_elems_pbot   = r_bohm_elems_pbot[0:n_bohm_elems_pbot]

      
    MkQ1_ctop     = imp_elems_MkQ1[pos_bohm_elems_ctop,3,:]
    dphi_sh_ctop  = imp_elems_dphi_sh[pos_bohm_elems_ctop,3,:]
    Te_ctop       = imp_elems_Te[pos_bohm_elems_ctop,3,:]
    nQ1_ctop      = imp_elems_nQ1[pos_bohm_elems_ctop,3,:]
    nQ2_ctop      = imp_elems_nQ2[pos_bohm_elems_ctop,3,:]
    dphi_kbc_ctop = imp_elems_dphi_kbc[pos_bohm_elems_ctop,3,:]
    i1_flux_ctop  = imp_elems_ion_flux_in1[pos_bohm_elems_ctop,3,:]
    i2_flux_ctop  = imp_elems_ion_flux_in2[pos_bohm_elems_ctop,3,:]
    i1_eneflux_ctop  = imp_elems_ion_ene_flux_in1[pos_bohm_elems_ctop,3,:]
    i2_eneflux_ctop  = imp_elems_ion_ene_flux_in2[pos_bohm_elems_ctop,3,:]
    
    MkQ1_ptop     = imp_elems_MkQ1[pos_bohm_elems_ptop,3,:]
    dphi_sh_ptop  = imp_elems_dphi_sh[pos_bohm_elems_ptop,3,:]
    Te_ptop       = imp_elems_Te[pos_bohm_elems_ptop,3,:]
    nQ1_ptop      = imp_elems_nQ1[pos_bohm_elems_ptop,3,:]
    nQ2_ptop      = imp_elems_nQ2[pos_bohm_elems_ptop,3,:]
    dphi_kbc_ptop = imp_elems_dphi_kbc[pos_bohm_elems_ptop,3,:]
    i1_flux_ptop  = imp_elems_ion_flux_in1[pos_bohm_elems_ptop,3,:]
    i2_flux_ptop  = imp_elems_ion_flux_in2[pos_bohm_elems_ptop,3,:]
    i1_eneflux_ptop  = imp_elems_ion_ene_flux_in1[pos_bohm_elems_ptop,3,:]
    i2_eneflux_ptop  = imp_elems_ion_ene_flux_in2[pos_bohm_elems_ptop,3,:]
    
    MkQ1_cbot     = imp_elems_MkQ1[pos_bohm_elems_cbot,3,:]
    dphi_sh_cbot  = imp_elems_dphi_sh[pos_bohm_elems_cbot,3,:]
    Te_cbot       = imp_elems_Te[pos_bohm_elems_cbot,3,:]
    nQ1_cbot      = imp_elems_nQ1[pos_bohm_elems_cbot,3,:]
    nQ2_cbot      = imp_elems_nQ2[pos_bohm_elems_cbot,3,:]
    dphi_kbc_cbot = imp_elems_dphi_kbc[pos_bohm_elems_cbot,3,:]
    i1_flux_cbot  = imp_elems_ion_flux_in1[pos_bohm_elems_cbot,3,:]
    i2_flux_cbot  = imp_elems_ion_flux_in2[pos_bohm_elems_cbot,3,:]
    i1_eneflux_cbot  = imp_elems_ion_ene_flux_in1[pos_bohm_elems_cbot,3,:]
    i2_eneflux_cbot  = imp_elems_ion_ene_flux_in2[pos_bohm_elems_cbot,3,:]
    
    MkQ1_pbot     = np.zeros((len(pos_bohm_elems_pbot),nsteps),dtype='float')
    dphi_sh_pbot  = np.zeros((len(pos_bohm_elems_pbot),nsteps),dtype='float')
    Te_pbot       = np.zeros((len(pos_bohm_elems_pbot),nsteps),dtype='float')
    nQ1_pbot      = np.zeros((len(pos_bohm_elems_pbot),nsteps),dtype='float')
    nQ2_pbot      = np.zeros((len(pos_bohm_elems_pbot),nsteps),dtype='float')
    dphi_kbc_pbot = np.zeros((len(pos_bohm_elems_pbot),nsteps),dtype='float')
    i1_flux_pbot  = np.zeros((len(pos_bohm_elems_pbot),nsteps),dtype='float')
    i2_flux_pbot  = np.zeros((len(pos_bohm_elems_pbot),nsteps),dtype='float')
    i1_eneflux_pbot  = np.zeros((len(pos_bohm_elems_pbot),nsteps),dtype='float')
    i2_eneflux_pbot  = np.zeros((len(pos_bohm_elems_pbot),nsteps),dtype='float')
    
    ind = 0
    for i in range(len(pos_bohm_elems_pbot)-1,-1,-1):
        MkQ1_pbot[ind,:]     = imp_elems_MkQ1[pos_bohm_elems_pbot[i],3,:]
        dphi_sh_pbot[ind,:]  = imp_elems_dphi_sh[pos_bohm_elems_pbot[i],3,:]
        Te_pbot[ind,:]       = imp_elems_Te[pos_bohm_elems_pbot[i],3,:]
        nQ1_pbot[ind,:]      = imp_elems_nQ1[pos_bohm_elems_pbot[i],3,:]
        nQ2_pbot[ind,:]      = imp_elems_nQ2[pos_bohm_elems_pbot[i],3,:]
        dphi_kbc_pbot[ind,:] = imp_elems_dphi_kbc[pos_bohm_elems_pbot[i],3,:]
        i1_flux_pbot[ind,:]  = imp_elems_ion_flux_in1[pos_bohm_elems_pbot[i],3,:]
        i2_flux_pbot[ind,:]  = imp_elems_ion_flux_in2[pos_bohm_elems_pbot[i],3,:]
        i1_eneflux_pbot[ind,:] = imp_elems_ion_ene_flux_in1[pos_bohm_elems_pbot[i],3,:]
        i2_eneflux_pbot[ind,:] = imp_elems_ion_ene_flux_in2[pos_bohm_elems_pbot[i],3,:]
        ind = ind + 1
    
    
    MkQ1_ctop_mean     = np.mean(MkQ1_ctop[:,nsteps-last_steps::],axis=1)
    dphi_sh_ctop_mean  = np.mean(dphi_sh_ctop[:,nsteps-last_steps::],axis=1)
    Te_ctop_mean       = np.mean(Te_ctop[:,nsteps-last_steps::],axis=1)
    nQ1_ctop_mean      = np.mean(nQ1_ctop[:,nsteps-last_steps::],axis=1)
    nQ2_ctop_mean      = np.mean(nQ2_ctop[:,nsteps-last_steps::],axis=1)
    dphi_kbc_ctop_mean = np.mean(dphi_kbc_ctop[:,nsteps-last_steps::],axis=1)
    i1_flux_ctop_mean  = np.mean(i1_flux_ctop[:,nsteps-last_steps::],axis=1)
    i2_flux_ctop_mean  = np.mean(i2_flux_ctop[:,nsteps-last_steps::],axis=1)
    i1_eneflux_ctop_mean  = np.mean(i1_eneflux_ctop[:,nsteps-last_steps::],axis=1)
    i2_eneflux_ctop_mean  = np.mean(i2_eneflux_ctop[:,nsteps-last_steps::],axis=1)
    
    MkQ1_ptop_mean     = np.mean(MkQ1_ptop[:,nsteps-last_steps::],axis=1)
    dphi_sh_ptop_mean  = np.mean(dphi_sh_ptop[:,nsteps-last_steps::],axis=1)
    Te_ptop_mean       = np.mean(Te_ptop[:,nsteps-last_steps::],axis=1)
    nQ1_ptop_mean      = np.mean(nQ1_ptop[:,nsteps-last_steps::],axis=1)
    nQ2_ptop_mean      = np.mean(nQ2_ptop[:,nsteps-last_steps::],axis=1)
    dphi_kbc_ptop_mean = np.mean(dphi_kbc_ptop[:,nsteps-last_steps::],axis=1)
    i1_flux_ptop_mean  = np.mean(i1_flux_ptop[:,nsteps-last_steps::],axis=1)
    i2_flux_ptop_mean  = np.mean(i2_flux_ptop[:,nsteps-last_steps::],axis=1)
    i1_eneflux_ptop_mean  = np.mean(i1_eneflux_ptop[:,nsteps-last_steps::],axis=1)
    i2_eneflux_ptop_mean  = np.mean(i2_eneflux_ptop[:,nsteps-last_steps::],axis=1)
    
    MkQ1_cbot_mean     = np.mean(MkQ1_cbot[:,nsteps-last_steps::],axis=1)
    dphi_sh_cbot_mean  = np.mean(dphi_sh_cbot[:,nsteps-last_steps::],axis=1)
    Te_cbot_mean       = np.mean(Te_cbot[:,nsteps-last_steps::],axis=1)
    nQ1_cbot_mean      = np.mean(nQ1_cbot[:,nsteps-last_steps::],axis=1)
    nQ2_cbot_mean      = np.mean(nQ2_cbot[:,nsteps-last_steps::],axis=1)
    dphi_kbc_cbot_mean = np.mean(dphi_kbc_cbot[:,nsteps-last_steps::],axis=1)
    i1_flux_cbot_mean  = np.mean(i1_flux_cbot[:,nsteps-last_steps::],axis=1)
    i2_flux_cbot_mean  = np.mean(i2_flux_cbot[:,nsteps-last_steps::],axis=1)
    i1_eneflux_cbot_mean  = np.mean(i1_eneflux_cbot[:,nsteps-last_steps::],axis=1)
    i2_eneflux_cbot_mean  = np.mean(i2_eneflux_cbot[:,nsteps-last_steps::],axis=1)
    
    MkQ1_pbot_mean     = np.mean(MkQ1_pbot[:,nsteps-last_steps::],axis=1)
    dphi_sh_pbot_mean  = np.mean(dphi_sh_pbot[:,nsteps-last_steps::],axis=1)
    Te_pbot_mean       = np.mean(Te_pbot[:,nsteps-last_steps::],axis=1)
    nQ1_pbot_mean      = np.mean(nQ1_pbot[:,nsteps-last_steps::],axis=1)
    nQ2_pbot_mean      = np.mean(nQ2_pbot[:,nsteps-last_steps::],axis=1)
    dphi_kbc_pbot_mean = np.mean(dphi_kbc_pbot[:,nsteps-last_steps::],axis=1)
    i1_flux_pbot_mean  = np.mean(i1_flux_pbot[:,nsteps-last_steps::],axis=1)
    i2_flux_pbot_mean  = np.mean(i2_flux_pbot[:,nsteps-last_steps::],axis=1)
    i1_eneflux_pbot_mean  = np.mean(i1_eneflux_pbot[:,nsteps-last_steps::],axis=1)
    i2_eneflux_pbot_mean  = np.mean(i2_eneflux_pbot[:,nsteps-last_steps::],axis=1)
    
    i1i2_flux_ctop_mean    = i1_flux_ctop_mean+2.0*i2_flux_ctop_mean
    i1i2_flux_ptop_mean    = i1_flux_ptop_mean+2.0*i2_flux_ptop_mean
    i1i2_flux_cbot_mean    = i1_flux_cbot_mean+2.0*i2_flux_cbot_mean
    i1i2_flux_pbot_mean    = i1_flux_pbot_mean+2.0*i2_flux_pbot_mean
    i1i2_eneflux_ctop_mean = i1_eneflux_ctop_mean+i2_eneflux_ctop_mean
    i1i2_eneflux_ptop_mean = i1_eneflux_ptop_mean+i2_eneflux_ptop_mean
    i1i2_eneflux_cbot_mean = i1_eneflux_cbot_mean+i2_eneflux_cbot_mean
    i1i2_eneflux_pbot_mean = i1_eneflux_pbot_mean+i2_eneflux_pbot_mean
    
    
    s_top = np.zeros(n_bohm_elems_ctop+n_bohm_elems_ptop,dtype='float')
    for i in range(0,n_bohm_elems_ctop):
        if i == 0:
            z1 = 0.0
            r1 = rs[int(eta_max),0]
            z2 = z_bohm_elems_ctop[i] 
            r2 = r_bohm_elems_ctop[i]
            s_top[i] = np.sqrt((z2-z1)**2 + (r2-r1)**2)
        else:
            z1 = z_bohm_elems_ctop[i-1] 
            r1 = r_bohm_elems_ctop[i-1]
            z2 = z_bohm_elems_ctop[i] 
            r2 = r_bohm_elems_ctop[i]
            s_top[i] = s_top[i-1] + np.sqrt((z2-z1)**2 + (r2-r1)**2)
            
    for i in range(n_bohm_elems_ctop,n_bohm_elems_ctop+n_bohm_elems_ptop):
        if i == n_bohm_elems_ctop:
            z1 = z_bohm_elems_ctop[i-1] 
            r1 = r_bohm_elems_ctop[i-1]            
            z2 = zs[int(eta_max),int(xi_top)]
            r2 = rs[int(eta_max),int(xi_top)]
            z3 = z_bohm_elems_ptop[i-n_bohm_elems_ctop] 
            r3 = r_bohm_elems_ptop[i-n_bohm_elems_ctop] 
            s_top[i] = s_top[i-1] + np.sqrt((z2-z1)**2 + (r2-r1)**2) + np.sqrt((z3-z2)**2 + (r3-r2)**2)
        else:
            z1 = z_bohm_elems_ptop[i-n_bohm_elems_ctop-1] 
            r1 = r_bohm_elems_ptop[i-n_bohm_elems_ctop-1]
            z2 = z_bohm_elems_ptop[i-n_bohm_elems_ctop] 
            r2 = r_bohm_elems_ptop[i-n_bohm_elems_ctop]
            s_top[i] = s_top[i-1] + np.sqrt((z2-z1)**2 + (r2-r1)**2)
            
            
    s_bot = np.zeros(n_bohm_elems_cbot+n_bohm_elems_pbot,dtype='float')
    for i in range(0,n_bohm_elems_cbot):
        if i == 0:
            z1 = 0.0
            r1 = rs[int(eta_min),0]
            z2 = z_bohm_elems_cbot[i] 
            r2 = r_bohm_elems_cbot[i]
            s_bot[i] = np.sqrt((z2-z1)**2 + (r2-r1)**2)
        else:
            z1 = z_bohm_elems_cbot[i-1] 
            r1 = r_bohm_elems_cbot[i-1]
            z2 = z_bohm_elems_cbot[i] 
            r2 = r_bohm_elems_cbot[i]
            s_bot[i] = s_bot[i-1] + np.sqrt((z2-z1)**2 + (r2-r1)**2)
            
    for i in range(n_bohm_elems_cbot,n_bohm_elems_cbot+n_bohm_elems_pbot):
        if i == n_bohm_elems_cbot:
            z1 = z_bohm_elems_cbot[i-1] 
            r1 = r_bohm_elems_cbot[i-1]            
            z2 = zs[int(eta_min),int(xi_bottom)]
            r2 = rs[int(eta_min),int(xi_bottom)]
            z3 = z_bohm_elems_pbot[-1 -(i-n_bohm_elems_cbot)] 
            r3 = r_bohm_elems_pbot[-1 - (i-n_bohm_elems_cbot)] 
            s_bot[i] = s_bot[i-1] + np.sqrt((z2-z1)**2 + (r2-r1)**2) + np.sqrt((z3-z2)**2 + (r3-r2)**2)
        else:
            z1 = z_bohm_elems_pbot[-1 -(i-n_bohm_elems_cbot-1)] 
            r1 = r_bohm_elems_pbot[-1 -(i-n_bohm_elems_cbot-1)]
            z2 = z_bohm_elems_pbot[-1 -(i-n_bohm_elems_cbot)] 
            r2 = r_bohm_elems_pbot[-1 -(i-n_bohm_elems_cbot)]
            s_bot[i] = s_bot[i-1] + np.sqrt((z2-z1)**2 + (r2-r1)**2)

    # Lengths in cm
    s_bot = s_bot*1e2
    s_top = s_top*1e2
    
    # Obtain fluid Mach
    Mi1_top_mean = np.concatenate((Mi1_plot[int(eta_max),0:int(xi_top)+1],Mi1_plot[int(eta_max)+1::,int(xi_top)]))
    Mi1_bot_mean = np.concatenate((Mi1_plot[int(eta_min),0:int(xi_bottom)+1],Mi1_plot[0:int(eta_min),int(xi_bottom)]))
    Mi2_top_mean = np.concatenate((Mi2_plot[int(eta_max),0:int(xi_top)+1],Mi2_plot[int(eta_max)+1::,int(xi_top)]))
    Mi2_bot_mean = np.concatenate((Mi2_plot[int(eta_min),0:int(xi_bottom)+1],Mi2_plot[0:int(eta_min),int(xi_bottom)]))
    sM_top = np.zeros(int(xi_top)+1+ dims[0] - (int(eta_max)+1))
    for i in range(0,int(xi_top)):
        sM_top[i+1] = sM_top[i] + zs[int(eta_max),i+1]-zs[int(eta_max),i]
    cont = 0
    for i in range(int(xi_top+1),len(sM_top)):
        cont = cont + 1
        ind = int(eta_max) + cont
        sM_top[i] = sM_top[i-1] + rs[ind,int(xi_top)] - rs[ind-1,int(xi_top)]
    
    sM_bot = np.zeros(int(xi_bottom)+1+ int(eta_min))
    for i in range(0,int(xi_bottom)):
        sM_bot[i+1] = sM_bot[i] + zs[int(eta_min),i+1]-zs[int(eta_min),i]
    cont = 0
    for i in range(int(xi_bottom+1),len(sM_bot)):
        cont = cont + 1
        ind = int(eta_min) - cont
        sM_bot[i] = sM_bot[i-1] + rs[ind+1,int(xi_bottom)] - rs[ind,int(xi_bottom)]
        
        
    # Obtain the SEE yields and electron/ion total fluxes
    # Open the PostData.hdf5 file
    h5_post     = h5py.File(path_postdata_out,"r+")
    ge_b        = h5_post['/eFldM_data/boundary/ji_tot_b'][:,:]/e
    ge_sb_b_acc = h5_post['/eFldM_data/boundary/ge_sb_b_acc'][:,:]
    ge_sb_b     = h5_post['/eFldM_data/boundary/ge_sb_b'][:,:]
    ge_b_mean          = np.mean(ge_b[nsteps-last_steps::,bIDfaces_Dwall],axis=0)
    gi_b_mean          = np.copy(ge_b_mean)
    ge_sb_b_acc_mean   = np.mean(ge_sb_b_acc[nsteps-last_steps::,bIDfaces_Dwall],axis=0)
    ge_sb_b_mean       = np.mean(ge_sb_b[nsteps-last_steps::,bIDfaces_Dwall],axis=0)
    delta_see_acc      = ge_sb_b_acc/(ge_sb_b_acc + ge_b)
    delta_see          = ge_sb_b/(ge_sb_b + ge_b)
    delta_see_acc_mean = ge_sb_b_acc_mean/(ge_sb_b_acc_mean + ge_b_mean)
    delta_see_mean     = ge_sb_b_mean/(ge_sb_b_mean + ge_b_mean)
    # Obtain the electron energy flux
    qe_wall_D_mean     = np.mean(qe_wall[nsteps-last_steps::,bIDfaces_Dwall],axis=0)    
    qe_wall_A_mean     = np.mean(qe_wall[nsteps-last_steps::,bIDfaces_Awall],axis=0)  
    qe_wall_FL_mean    = np.mean(qe_wall[nsteps-last_steps::,bIDfaces_FLwall],axis=0)  
    #Obtain the ion energy flux
    
#    # TEST: assign the other deltas to the variable used to see if there are differences
#    delta_see_acc_mean = delta_see_mean
#    delta_see_acc_mean = np.mean(delta_see[nsteps-last_steps::,bIDfaces_Dwall],axis=0)
#    delta_see_acc_mean = np.mean(delta_see_acc[nsteps-last_steps::,bIDfaces_Dwall],axis=0)
    
    
    nfaces_Dwall = len(bIDfaces_Dwall)
    zbf_top = np.zeros(nfaces_Dwall,dtype='float')
    rbf_top = np.zeros(nfaces_Dwall,dtype='float')
    zbf_bot = np.zeros(nfaces_Dwall,dtype='float')
    rbf_bot = np.zeros(nfaces_Dwall,dtype='float')
    delta_see_acc_mean_top = np.zeros(nfaces_Dwall,dtype='float')
    delta_see_acc_mean_bot = np.zeros(nfaces_Dwall,dtype='float')
    ge_b_mean_top          = np.zeros(nfaces_Dwall,dtype='float')
    ge_b_mean_bot          = np.zeros(nfaces_Dwall,dtype='float')
    qe_wall_D_mean_top     = np.zeros(nfaces_Dwall,dtype='float')
    qe_wall_D_mean_bot     = np.zeros(nfaces_Dwall,dtype='float')
    nfaces_top = 0
    nfaces_bot = 0
    for i in range(0,nfaces_Dwall):
        if rfaces_Dwall[i] < 0.5*(rs[int(eta_max),0]+rs[int(eta_min),0]):
            zbf_bot[nfaces_bot] = zfaces_Dwall[i]
            rbf_bot[nfaces_bot] = rfaces_Dwall[i]
            delta_see_acc_mean_bot[nfaces_bot] = delta_see_acc_mean[i]
            ge_b_mean_bot[nfaces_bot] = ge_b_mean[i]
            qe_wall_D_mean_bot[nfaces_bot] = qe_wall_D_mean[i]
            nfaces_bot = nfaces_bot + 1
            
        else:
            zbf_top[nfaces_top] = zfaces_Dwall[i]
            rbf_top[nfaces_top] = rfaces_Dwall[i]
            delta_see_acc_mean_top[nfaces_top] = delta_see_acc_mean[i]
            ge_b_mean_top[nfaces_top] = ge_b_mean[i]
            qe_wall_D_mean_top[nfaces_top] = qe_wall_D_mean[i]
            nfaces_top = nfaces_top + 1

    delta_see_acc_mean_top = delta_see_acc_mean_top[0:nfaces_top]
    delta_see_acc_mean_bot = delta_see_acc_mean_bot[0:nfaces_bot]
    ge_b_mean_top          = ge_b_mean_top[0:nfaces_top]
    ge_b_mean_bot          = ge_b_mean_bot[0:nfaces_bot]
    qe_wall_D_mean_top     = qe_wall_D_mean_top[0:nfaces_top]
    qe_wall_D_mean_bot     = qe_wall_D_mean_bot[0:nfaces_bot]
    zbf_top = zbf_top[0:nfaces_top]
    rbf_top = rbf_top[0:nfaces_top]
    zbf_bot = zbf_bot[0:nfaces_bot]
    rbf_bot = rbf_bot[0:nfaces_bot]
    
    # Sort the bottom
    zbf_bot_sort = np.copy(zbf_bot) 
    zbf_bot_sort[0:8]  = zbf_bot[8:0:-1]
    zbf_bot_sort[8]    = zbf_bot[0]
    zbf_bot_sort[9:17] = zbf_bot[38:30:-1]
    zbf_bot_sort[17::] = 0.0285
    rbf_bot_sort = np.copy(rbf_bot) 
    rbf_bot_sort[0:8]  = rbf_bot[8:0:-1]
    rbf_bot_sort[8]    = rbf_bot[0]
    rbf_bot_sort[9:17] = rbf_bot[38:30:-1]
    rbf_bot_sort[17::] = rbf_bot[30:8:-1]
    delta_see_acc_mean_bot_sort = np.copy(delta_see_acc_mean_bot) 
    delta_see_acc_mean_bot_sort[0:8]  = delta_see_acc_mean_bot[8:0:-1]
    delta_see_acc_mean_bot_sort[8]    = delta_see_acc_mean_bot[0]
    delta_see_acc_mean_bot_sort[9:17] = delta_see_acc_mean_bot[38:30:-1]
    delta_see_acc_mean_bot_sort[17::] = delta_see_acc_mean_bot[30:8:-1]
    ge_b_mean_bot_sort = np.copy(ge_b_mean_bot)
    ge_b_mean_bot_sort[0:8]  = ge_b_mean_bot[8:0:-1]
    ge_b_mean_bot_sort[8]    = ge_b_mean_bot[0]
    ge_b_mean_bot_sort[9:17] = ge_b_mean_bot[38:30:-1]
    ge_b_mean_bot_sort[17::] = ge_b_mean_bot[30:8:-1]
    qe_wall_D_mean_bot_sort = np.copy(qe_wall_D_mean_bot)
    qe_wall_D_mean_bot_sort[0:8]  = qe_wall_D_mean_bot[8:0:-1]
    qe_wall_D_mean_bot_sort[8]    = qe_wall_D_mean_bot[0]
    qe_wall_D_mean_bot_sort[9:17] = qe_wall_D_mean_bot[38:30:-1]
    qe_wall_D_mean_bot_sort[17::] = qe_wall_D_mean_bot[30:8:-1]
    
    sbf_top = np.zeros(nfaces_top)
    sbf_bot = np.zeros(nfaces_bot)
    
    for i in range(0,nfaces_top):
        z1 = zs[int(eta_max),0]
        r1 = rs[int(eta_max),0]
        z2 = zbf_top[i]
        r2 = rbf_top[i]
        sbf_top[i] = np.sqrt((z2-z1)**2+(r2-r1)**2)
    for i in range(0,nfaces_bot):
        z1 = zs[int(eta_min),0]
        r1 = rs[int(eta_min),0]
        z2 = zbf_bot_sort[i]
        r2 = rbf_bot_sort[i]
        sbf_bot[i] = np.sqrt((z2-z1)**2+(r2-r1)**2)
    
    # Lengths in cm
    sbf_top = sbf_top*1e2
    sbf_bot = sbf_bot*1e2
    zs = zs*1e2
    sM_bot = sM_bot*1e2
    sM_top = sM_top*1e2
    
#    zbf_top = np.sort(zbf_top[0:nfaces_top])
#    rbf_top = np.sort(rbf_top[0:nfaces_top])
#    zbf_bot = np.sort(zbf_bot[0:nfaces_bot])
#    rbf_bot = np.sort(rbf_bot[0:nfaces_bot])


    # f_split (contributions on the electron energy equation)
    f_split   = h5_post['/eFldM_data/elements/f_split'][:,:,:]
    # First time mean
    f_split_mean = np.mean(f_split[nsteps-last_steps::,:,:],axis=0)
    Eadv  = f_split_mean[0,:]
    Eheat = f_split_mean[1,:] + f_split_mean[2,:] + f_split_mean[3,:]
    Epres = f_split_mean[4,:] + f_split_mean[5,:]
    Ecoll = f_split_mean[6,:] + f_split_mean[7,:] + f_split_mean[8,:] + f_split_mean[9,:] + f_split_mean[10,:]
    Edt   = Eadv + Eheat + Epres + Ecoll
    bal = Eadv + Eheat + Epres + Ecoll - Edt
    abs_bal = np.abs(Eadv) + np.abs(Eheat) + np.abs(Epres) + np.abs(Ecoll) + np.abs(Edt)
    ctr_Edt = np.abs(Edt)/abs_bal
    ctr_Eadv = np.abs(Eadv)/abs_bal
    ctr_Eheat = np.abs(Eheat)/abs_bal
    ctr_Epres = np.abs(Epres)/abs_bal
    ctr_Ecoll = np.abs(Ecoll)/abs_bal
    print("ctr_Edt   (mean,max,min) = ",ctr_Edt.mean(),ctr_Edt.max(),ctr_Edt.min())
    print("ctr_Eadv  (mean,max,min) = ",ctr_Eadv.mean(),ctr_Eadv.max(),ctr_Eadv.min())
    print("ctr_Eheat (mean,max,min) = ",ctr_Eheat.mean(),ctr_Eheat.max(),ctr_Eheat.min())
    print("ctr_Epres (mean,max,min) = ",ctr_Epres.mean(),ctr_Epres.max(),ctr_Epres.min())
    print("ctr_Ecoll (mean,max,min) = ",ctr_Ecoll.mean(),ctr_Ecoll.max(),ctr_Ecoll.min())
    
    # First spatial mean (work in progress)
#    f_split_mean = np.mean(f_split[nsteps-last_steps::,:,:],axis=2)
#    Eadv  = f_split_mean[:,0]
#    Eheat = f_split_mean[:,1] + f_split_mean[:,2] + f_split_mean[:,3]
#    Epres = f_split_mean[:,4] + f_split_mean[:,5]
#    Ecoll = f_split_mean[:,6] + f_split_mean[:,7] + f_split_mean[:,8] + f_split_mean[:,9] + f_split_mean[:,10]
#    Edt   = Eadv + Eheat + Epres + Ecoll
    #     [_,_,_,_,_,_,
#             mean_min_Id,mean_max_Id,Id_mean,
#             max2mean_Id,min2mean_Id,amp_Id,
#             mins_ind_comp_Id,maxs_ind_comp_Id]                                         = max_min_mean_vals(time,time[nsteps-last_steps::],Id[nsteps-last_steps::],order)


    # Convert fluxes (1/m2s) to currents (A/cm2)
    ge_b_mean_top       = ge_b_mean_top*e*1e-4
    ge_b_mean_bot_sort  = ge_b_mean_bot_sort*e*1e-4
    i1_flux_ctop_mean   = i1_flux_ctop_mean*e*1e-4
    i1_flux_ptop_mean   = i1_flux_ptop_mean*e*1e-4
    i1_flux_cbot_mean   = i1_flux_cbot_mean*e*1e-4
    i1_flux_pbot_mean   = i1_flux_pbot_mean*e*1e-4
    i2_flux_ctop_mean   = i2_flux_ctop_mean*2.0*e*1e-4
    i2_flux_ptop_mean   = i2_flux_ptop_mean*2.0*e*1e-4
    i2_flux_cbot_mean   = i2_flux_cbot_mean*2.0*e*1e-4
    i2_flux_pbot_mean   = i2_flux_pbot_mean*2.0*e*1e-4
    i1i2_flux_ctop_mean = i1i2_flux_ctop_mean*e*1e-4
    i1i2_flux_ptop_mean = i1i2_flux_ptop_mean*e*1e-4
    i1i2_flux_cbot_mean = i1i2_flux_cbot_mean*e*1e-4
    i1i2_flux_pbot_mean = i1i2_flux_pbot_mean*e*1e-4
    # Convert energy fluxes from (W/m2) to (W/cm2)
    qe_wall_D_mean_top      = qe_wall_D_mean_top*1e-4
    qe_wall_D_mean_bot_sort = qe_wall_D_mean_bot_sort*1e-4
    i1_eneflux_ctop_mean    = i1_eneflux_ctop_mean*1e-4
    i1_eneflux_ptop_mean    = i1_eneflux_ptop_mean*1e-4
    i1_eneflux_cbot_mean    = i1_eneflux_cbot_mean*1e-4
    i1_eneflux_pbot_mean    = i1_eneflux_pbot_mean*1e-4
    i2_eneflux_ctop_mean    = i2_eneflux_ctop_mean*1e-4
    i2_eneflux_ptop_mean    = i2_eneflux_ptop_mean*1e-4
    i2_eneflux_cbot_mean    = i2_eneflux_cbot_mean*1e-4
    i2_eneflux_pbot_mean    = i2_eneflux_pbot_mean*1e-4
    i1i2_eneflux_ctop_mean  = i1i2_eneflux_ctop_mean*1e-4
    i1i2_eneflux_ptop_mean  = i1i2_eneflux_ptop_mean*1e-4
    i1i2_eneflux_cbot_mean  = i1i2_eneflux_cbot_mean*1e-4
    i1i2_eneflux_pbot_mean  = i1i2_eneflux_pbot_mean*1e-4
    
    # Put currents in mA/cm2
    ge_b_mean_top       = ge_b_mean_top*1e3
    ge_b_mean_bot_sort  = ge_b_mean_bot_sort*1e3
    i1_flux_ctop_mean   = i1_flux_ctop_mean*1e3
    i1_flux_ptop_mean   = i1_flux_ptop_mean*1e3
    i1_flux_cbot_mean   = i1_flux_cbot_mean*1e3
    i1_flux_pbot_mean   = i1_flux_pbot_mean*1e3
    i2_flux_ctop_mean   = i2_flux_ctop_mean*1e3
    i2_flux_ptop_mean   = i2_flux_ptop_mean*1e3
    i2_flux_cbot_mean   = i2_flux_cbot_mean*1e3
    i2_flux_pbot_mean   = i2_flux_pbot_mean*1e3
    i1i2_flux_ctop_mean = i1i2_flux_ctop_mean*1e3
    i1i2_flux_ptop_mean = i1i2_flux_ptop_mean*1e3
    i1i2_flux_cbot_mean = i1i2_flux_cbot_mean*1e3
    i1i2_flux_pbot_mean = i1i2_flux_pbot_mean*1e3
    
    plt.figure(r'ge_b')
    plt.xlabel(r"$s$ (cm)",fontsize = font_size)
#    plt.title(r"$g_e$ (1/m$^2$s)",fontsize = font_size,y=1.02)
#    plt.title(r"$j_e$ (A/cm$^2$)",fontsize = font_size,y=1.02)
    plt.title(r"$j_e$ (mA/cm$^2$)",fontsize = font_size,y=1.02)
    plt.xticks(fontsize = ticks_size) 
    plt.yticks(fontsize = ticks_size)
    plt.plot(sbf_top,ge_b_mean_top, linestyle='-', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="o", color='k', markeredgecolor = 'k', label="Top wall")
    plt.plot(sbf_bot,ge_b_mean_bot_sort, linestyle='-', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="s", color='r', markeredgecolor = 'k', label="Bottom wall")    
    plt.legend(fontsize = font_size_legend,loc=3) 
    ax = plt.gca()
    ylims = ax.get_ylim()
    plt.plot(zs[rind,int(xi_top)]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='b', markeredgecolor = 'k', label="")
    ax.set_ylim([ylims[0],ylims[1]])
    if save_flag == 1:  
        plt.savefig(path_out+"ge_b_walls"+figs_format,bbox_inches='tight') 
        plt.close() 
        
    plt.figure(r'gi1_b')
    plt.xlabel(r"$s$ (cm)",fontsize = font_size)
#    plt.title(r"$g_{i1}$ (1/m$^2$s)",fontsize = font_size,y=1.02)
#    plt.title(r"$j_{i1}$ (A/cm$^2$)",fontsize = font_size,y=1.02)
    plt.title(r"$j_{i1}$ (mA/cm$^2$)",fontsize = font_size,y=1.02)
    plt.xticks(fontsize = ticks_size) 
    plt.yticks(fontsize = ticks_size)
    plt.plot(s_top,np.concatenate((i1_flux_ctop_mean,i1_flux_ptop_mean)), linestyle='-', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="o", color='k', markeredgecolor = 'k', label="Top wall")
    plt.plot(s_bot,np.concatenate((i1_flux_cbot_mean,i1_flux_pbot_mean)), linestyle='-', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="s", color='r', markeredgecolor = 'k', label="Bottom wall")    
    plt.legend(fontsize = font_size_legend,loc=3) 
    ax = plt.gca()
    ylims = ax.get_ylim()
    plt.plot(zs[rind,int(xi_top)]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='b', markeredgecolor = 'k', label="")
    ax.set_ylim([ylims[0],ylims[1]])
    if save_flag == 1:  
        plt.savefig(path_out+"gi1_b_walls"+figs_format,bbox_inches='tight') 
        plt.close() 
        
    plt.figure(r'gi2_b')
    plt.xlabel(r"$s$ (cm)",fontsize = font_size)
#    plt.title(r"$g_{i2}$ (1/m$^2$s)",fontsize = font_size,y=1.02)
#    plt.title(r"$j_{i2}$ (A/cm$^2$)",fontsize = font_size,y=1.02)
    plt.title(r"$j_{i2}$ (mA/cm$^2$)",fontsize = font_size,y=1.02)
    plt.xticks(fontsize = ticks_size) 
    plt.yticks(fontsize = ticks_size)
    plt.plot(s_top,np.concatenate((i2_flux_ctop_mean,i2_flux_ptop_mean)), linestyle='-', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="o", color='k', markeredgecolor = 'k', label="Top wall")
    plt.plot(s_bot,np.concatenate((i2_flux_cbot_mean,i2_flux_pbot_mean)), linestyle='-', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="s", color='r', markeredgecolor = 'k', label="Bottom wall")    
    plt.legend(fontsize = font_size_legend,loc=3) 
    ax = plt.gca()
    ylims = ax.get_ylim()
    plt.plot(zs[rind,int(xi_top)]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='b', markeredgecolor = 'k', label="")
    ax.set_ylim([ylims[0],ylims[1]])
    if save_flag == 1:  
        plt.savefig(path_out+"gi2_b_walls"+figs_format,bbox_inches='tight') 
        plt.close() 
        
    plt.figure(r'gi1_b + 2gi2_b')
    plt.xlabel(r"$s$ (cm)",fontsize = font_size)
#    plt.title(r"$g_{i1} + 2g_{i2}$ (1/m$^2$s)",fontsize = font_size,y=1.02)
#    plt.title(r"$j_{i}$ (A/cm$^2$)",fontsize = font_size,y=1.02)
    plt.title(r"$j_{i}$ (mA/cm$^2$)",fontsize = font_size,y=1.02)
#    plt.title(r"$j_{i1}+j_{i2}$ (A/cm$^2$)",fontsize = font_size,y=1.02)
#    plt.title(r"$j_{i1}+j_{i2}$ (mA/cm$^2$)",fontsize = font_size,y=1.02)
    plt.xticks(fontsize = ticks_size) 
    plt.yticks(fontsize = ticks_size)
    plt.plot(s_top,np.concatenate((i1i2_flux_ctop_mean,i1i2_flux_ptop_mean)), linestyle='-', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="o", color='k', markeredgecolor = 'k', label="Top wall")
    plt.plot(s_bot,np.concatenate((i1i2_flux_cbot_mean,i1i2_flux_pbot_mean)), linestyle='-', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="s", color='r', markeredgecolor = 'k', label="Bottom wall")    
    plt.legend(fontsize = font_size_legend,loc=3) 
    ax = plt.gca()
    ylims = ax.get_ylim()
    plt.plot(zs[rind,int(xi_top)]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='b', markeredgecolor = 'k', label="")
    ax.set_ylim([ylims[0],ylims[1]])
    if save_flag == 1:  
        plt.savefig(path_out+"gi1_gi2_b_walls"+figs_format,bbox_inches='tight') 
        plt.close() 
        
    plt.figure(r'qi1_b')
    plt.xlabel(r"$s$ (cm)",fontsize = font_size)
#    plt.title(r"$q_{i1}$ (W/m$^2$)",fontsize = font_size,y=1.02)
    plt.title(r"$q_{i1}$ (W/cm$^2$)",fontsize = font_size,y=1.02)
    plt.xticks(fontsize = ticks_size) 
    plt.yticks(fontsize = ticks_size)
    plt.semilogy(s_top,np.concatenate((i1_eneflux_ctop_mean,i1_eneflux_ptop_mean)), linestyle='-', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="o", color='k', markeredgecolor = 'k', label="Top wall")
    plt.semilogy(s_bot,np.concatenate((i1_eneflux_cbot_mean,i1_eneflux_pbot_mean)), linestyle='-', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="s", color='r', markeredgecolor = 'k', label="Bottom wall")    
    plt.legend(fontsize = font_size_legend,loc=3) 
    ax = plt.gca()
    ylims = ax.get_ylim()
    plt.plot(zs[rind,int(xi_top)]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='b', markeredgecolor = 'k', label="")
    ax.set_ylim([ylims[0],ylims[1]])
    if save_flag == 1:  
        plt.savefig(path_out+"qi1_b_walls"+figs_format,bbox_inches='tight') 
        plt.close() 
        
    plt.figure(r'qi2_b')
    plt.xlabel(r"$s$ (cm)",fontsize = font_size)
#    plt.title(r"$q_{i2}$ (W/m$^2$)",fontsize = font_size,y=1.02)
    plt.title(r"$q_{i2}$ (W/cm$^2$)",fontsize = font_size,y=1.02)
    plt.xticks(fontsize = ticks_size) 
    plt.yticks(fontsize = ticks_size)
    plt.semilogy(s_top,np.concatenate((i2_eneflux_ctop_mean,i2_eneflux_ptop_mean)), linestyle='-', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="o", color='k', markeredgecolor = 'k', label="Top wall")
    plt.semilogy(s_bot,np.concatenate((i2_eneflux_cbot_mean,i2_eneflux_pbot_mean)), linestyle='-', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="s", color='r', markeredgecolor = 'k', label="Bottom wall")    
    plt.legend(fontsize = font_size_legend,loc=3) 
    ax = plt.gca()
    ylims = ax.get_ylim()
    plt.plot(zs[rind,int(xi_top)]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='b', markeredgecolor = 'k', label="")
    ax.set_ylim([ylims[0],ylims[1]])
    if save_flag == 1:  
        plt.savefig(path_out+"qi2_b_walls"+figs_format,bbox_inches='tight') 
        plt.close() 
        
    plt.figure(r'qi1_b + qi2_b')
    plt.xlabel(r"$s$ (cm)",fontsize = font_size)
#    plt.title(r"$q_{i1} + q_{i2}$ (W/m$^2$)",fontsize = font_size,y=1.02)
    plt.title(r"$q_{i}$ (W/cm$^2$)",fontsize = font_size,y=1.02)
    plt.xticks(fontsize = ticks_size) 
    plt.yticks(fontsize = ticks_size)
    plt.semilogy(s_top,np.concatenate((i1i2_eneflux_ctop_mean,i1i2_eneflux_ptop_mean)), linestyle='-', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="o", color='k', markeredgecolor = 'k', label="Top wall")
    plt.semilogy(s_bot,np.concatenate((i1i2_eneflux_cbot_mean,i1i2_eneflux_pbot_mean)), linestyle='-', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="s", color='r', markeredgecolor = 'k', label="Bottom wall")    
    plt.legend(fontsize = font_size_legend,loc=2) 
    ax = plt.gca()
    ylims = ax.get_ylim()
    plt.plot(zs[rind,int(xi_top)]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='b', markeredgecolor = 'k', label="")
    ax.set_ylim([ylims[0],ylims[1]])
    if save_flag == 1:  
        plt.savefig(path_out+"qi1_qi2_b_walls"+figs_format,bbox_inches='tight') 
        plt.close() 
        
    plt.figure(r'qe_b')
    plt.xlabel(r"$s$ (cm)",fontsize = font_size)
#    plt.title(r"$q_e$ (W/m$^2$)",fontsize = font_size,y=1.02)
    plt.title(r"$q_e$ (W/cm$^2$)",fontsize = font_size,y=1.02)
    plt.xticks(fontsize = ticks_size) 
    plt.yticks(fontsize = ticks_size)
    plt.semilogy(sbf_top,qe_wall_D_mean_top, linestyle='-', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="o", color='k', markeredgecolor = 'k', label="Top wall")
    plt.semilogy(sbf_bot,qe_wall_D_mean_bot_sort, linestyle='-', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="s", color='r', markeredgecolor = 'k', label="Bottom wall")    
    plt.legend(fontsize = font_size_legend,loc=2) 
    ax = plt.gca()
    ylims = ax.get_ylim()
    plt.plot(zs[rind,int(xi_top)]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='b', markeredgecolor = 'k', label="")
    ax.set_ylim([ylims[0],ylims[1]])
    if save_flag == 1:  
        plt.savefig(path_out+"qe_b_walls"+figs_format,bbox_inches='tight') 
        plt.close() 
         
    plt.figure(r'delta_SEE')
    plt.xlabel(r"$s$ (cm)",fontsize = font_size)
    plt.title(r"$\delta_{SEE}$ (-)",fontsize = font_size,y=1.02)
    plt.xticks(fontsize = ticks_size) 
    plt.yticks(fontsize = ticks_size)
    plt.plot(sbf_top,delta_see_acc_mean_top, linestyle='-', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="o", color='k', markeredgecolor = 'k', label="Top wall")
    plt.plot(sbf_bot,delta_see_acc_mean_bot_sort, linestyle='-', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="s", color='r', markeredgecolor = 'k', label="Bottom wall")    
    plt.legend(fontsize = font_size_legend,loc=4) 
    ax = plt.gca()
    ylims = ax.get_ylim()
    plt.plot(zs[rind,int(xi_top)]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='b', markeredgecolor = 'k', label="")
    ax.set_ylim([ylims[0],ylims[1]])
    if save_flag == 1:  
        plt.savefig(path_out+"delta_SEE_walls"+figs_format,bbox_inches='tight') 
        plt.close() 
    
    plt.figure(r'MkQ1')
    plt.xlabel(r"$s$ (cm)",fontsize = font_size)
    plt.title(r"$M_{kQ1}$ (-)",fontsize = font_size,y=1.02)
    plt.xticks(fontsize = ticks_size) 
    plt.yticks(fontsize = ticks_size)
    plt.plot(s_top,np.concatenate((MkQ1_ctop_mean,MkQ1_ptop_mean)), linestyle='-', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="o", color='k', markeredgecolor = 'k', label="Top wall")
    plt.plot(s_bot,np.concatenate((MkQ1_cbot_mean,MkQ1_pbot_mean)), linestyle='-', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="s", color='r', markeredgecolor = 'k', label="Bottom wall")    
    plt.legend(fontsize = font_size_legend,loc=4) 
    ax = plt.gca()
    ylims = ax.get_ylim()
    plt.plot(zs[rind,int(xi_top)]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='b', markeredgecolor = 'k', label="")
    ax.set_ylim([ylims[0],ylims[1]])
    if save_flag == 1:  
        plt.savefig(path_out+"MkQ1_walls"+figs_format,bbox_inches='tight') 
        plt.close() 

    plt.figure(r'Mi1')
    plt.xlabel(r"$s$ (cm)",fontsize = font_size)
    plt.title(r"$M_{i1}$ (-)",fontsize = font_size,y=1.02)
    plt.xticks(fontsize = ticks_size) 
    plt.yticks(fontsize = ticks_size)
    plt.plot(sM_top,Mi1_top_mean, linestyle='-', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="o", color='k', markeredgecolor = 'k', label="Top wall")
    plt.plot(sM_bot,Mi1_bot_mean, linestyle='-', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="s", color='r', markeredgecolor = 'k', label="Bottom wall")    
    plt.legend(fontsize = font_size_legend,loc=2) 
    ax = plt.gca()
    ylims = ax.get_ylim()
    plt.plot(zs[rind,int(xi_top)]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='b', markeredgecolor = 'k', label="")
    ax.set_ylim([ylims[0],ylims[1]])
    if save_flag == 1:  
        plt.savefig(path_out+"Mi1_walls"+figs_format,bbox_inches='tight') 
        plt.close() 


    plt.figure(r'Mi2')
    plt.xlabel(r"$s$ (cm)",fontsize = font_size)
    plt.title(r"$M_{i2}$ (-)",fontsize = font_size,y=1.02)
    plt.xticks(fontsize = ticks_size) 
    plt.yticks(fontsize = ticks_size)
    plt.plot(sM_top,Mi2_top_mean, linestyle='-', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="o", color='k', markeredgecolor = 'k', label="Top wall")
    plt.plot(sM_bot,Mi2_bot_mean, linestyle='-', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="s", color='r', markeredgecolor = 'r', label="Bottom wall")    
    plt.legend(fontsize = font_size_legend,loc=1) 
    ax = plt.gca()
    ylims = ax.get_ylim()
    plt.plot(zs[rind,int(xi_top)]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='b', markeredgecolor = 'k', label="")
    ax.set_ylim([ylims[0],ylims[1]])
    if save_flag == 1:  
        plt.savefig(path_out+"Mi2_walls"+figs_format,bbox_inches='tight') 
        plt.close() 

    plt.figure(r'dphi_sh')
    plt.xlabel(r"$s$ (cm)",fontsize = font_size)
    plt.title(r"$\Delta\phi_{sh}$ (V)",fontsize = font_size,y=1.02)
    plt.xticks(fontsize = ticks_size) 
    plt.yticks(fontsize = ticks_size)
    plt.plot(s_top,np.concatenate((dphi_sh_ctop_mean,dphi_sh_ptop_mean)), linestyle='-', linewidth = line_width, markevery=1, markersize=marker_size, marker="o", color='k', markeredgecolor = 'k', label="Top wall")
    plt.plot(s_bot,np.concatenate((dphi_sh_cbot_mean,dphi_sh_pbot_mean)), linestyle='--', linewidth = line_width, markevery=1, markersize=marker_size, marker="o", color='r', markeredgecolor = 'k', label="Bottom wall")    
    plt.legend(fontsize = font_size_legend,loc=1) 
    ax = plt.gca()
    ylims = ax.get_ylim()
    plt.plot(zs[rind,int(xi_top)]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='b', markeredgecolor = 'k', label="")
    ax.set_ylim([ylims[0],ylims[1]])
    if save_flag == 1:  
        plt.savefig(path_out+"dphi_sh_walls"+figs_format,bbox_inches='tight') 
        plt.close() 

    plt.figure(r'dphi_kbc')
    plt.xlabel(r"$s$ (cm)",fontsize = font_size)
    plt.title(r"$\Delta\phi_{kbc}$ (V)",fontsize = font_size,y=1.02)
    plt.xticks(fontsize = ticks_size) 
    plt.yticks(fontsize = ticks_size)
    plt.plot(s_top,np.concatenate((dphi_kbc_ctop_mean,dphi_kbc_ptop_mean)), linestyle='-', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="o", color='k', markeredgecolor = 'k', label="Top wall")
    plt.plot(s_bot,np.concatenate((dphi_kbc_cbot_mean,dphi_kbc_pbot_mean)), linestyle='-', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="s", color='r', markeredgecolor = 'k', label="Bottom wall")    
    plt.legend(fontsize = font_size_legend,loc=1) 
    ax = plt.gca()
    ylims = ax.get_ylim()
    plt.plot(zs[rind,int(xi_top)]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='b', markeredgecolor = 'k', label="")
    ax.set_ylim([ylims[0],ylims[1]])
    if save_flag == 1:  
        plt.savefig(path_out+"dphi_kbc_walls"+figs_format,bbox_inches='tight') 
        plt.close() 

    plt.figure(r'Te')
    plt.xlabel(r"$s$ (cm)",fontsize = font_size)
    plt.title(r"$T_e$ (eV)",fontsize = font_size,y=1.02)
    plt.xticks(fontsize = ticks_size) 
    plt.yticks(fontsize = ticks_size)
    plt.plot(s_top,np.concatenate((Te_ctop_mean,Te_ptop_mean)), linestyle='-', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="o", color='k', markeredgecolor = 'k', label="Top wall")
    plt.plot(s_bot,np.concatenate((Te_cbot_mean,Te_pbot_mean)), linestyle='-', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="s", color='r', markeredgecolor = 'k', label="Bottom wall")    
    plt.legend(fontsize = font_size_legend,loc=2) 
    ax = plt.gca()
    ylims = ax.get_ylim()
    plt.plot(zs[rind,int(xi_top)]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='b', markeredgecolor = 'k', label="")
    ax.set_ylim([ylims[0],ylims[1]])
    if save_flag == 1:  
        plt.savefig(path_out+"Te_walls"+figs_format,bbox_inches='tight') 
        plt.close() 

    plt.figure(r'dphi_sh/Te')
    plt.xlabel(r"$s$ (cm)",fontsize = font_size)
    plt.title(r"$\Delta\phi_{sh}/T_e$ (-)",fontsize = font_size,y=1.02)
    plt.xticks(fontsize = ticks_size) 
    plt.yticks(fontsize = ticks_size)
    plt.plot(s_top,np.concatenate((dphi_sh_ctop_mean,dphi_sh_ptop_mean))/np.concatenate((Te_ctop_mean,Te_ptop_mean)), linestyle='-', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="o", color='k', markeredgecolor = 'k', label="Top wall")
    plt.plot(s_bot,np.concatenate((dphi_sh_cbot_mean,dphi_sh_pbot_mean))/np.concatenate((Te_cbot_mean,Te_pbot_mean)), linestyle='-', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="s", color='r', markeredgecolor = 'k', label="Bottom wall")    
    plt.legend(fontsize = font_size_legend,loc=1) 
    ax = plt.gca()
    ylims = ax.get_ylim()
    plt.plot(zs[rind,int(xi_top)]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='r', markeredgecolor = 'k', label="")
    ax.set_ylim([ylims[0],ylims[1]])
    if save_flag == 1:  
       plt.savefig(path_out+"ratio_dphi_sh_Te_walls"+figs_format,bbox_inches='tight') 
       plt.close() 

    plt.figure(r'dphi_kbc/Te')
    plt.xlabel(r"$s$ (cm)",fontsize = font_size)
    plt.title(r"$\Delta\phi_{kbc}/T_e$ (-)",fontsize = font_size,y=1.02)
    plt.xticks(fontsize = ticks_size) 
    plt.yticks(fontsize = ticks_size)
    plt.plot(s_top,np.concatenate((dphi_kbc_ctop_mean,dphi_kbc_ptop_mean))/np.concatenate((Te_ctop_mean,Te_ptop_mean)), linestyle='-', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="o", color='k', markeredgecolor = 'k', label="Top wall")
    plt.plot(s_bot,np.concatenate((dphi_kbc_cbot_mean,dphi_kbc_pbot_mean))/np.concatenate((Te_cbot_mean,Te_pbot_mean)), linestyle='-', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="s", color='r', markeredgecolor = 'k', label="Bottom wall")    
    plt.legend(fontsize = font_size_legend,loc=1) 
    ax = plt.gca()
    ylims = ax.get_ylim()
    plt.plot(zs[rind,int(xi_top)]*np.ones(2),np.array([ylims[0],ylims[1]]), linestyle='--', linewidth = line_width, markevery=marker_every, markersize=marker_size, marker="", color='b', markeredgecolor = 'k', label="")
    ax.set_ylim([ylims[0],ylims[1]])
    if save_flag == 1:    
        plt.savefig(path_out+"ratio_dphi_kbc_Te_walls"+figs_format,bbox_inches='tight') 
        plt.close() 
